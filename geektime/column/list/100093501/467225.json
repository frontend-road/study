{"id":467225,"title":"26｜方法：如何用类型嵌入模拟实现“继承”？","content":"<p>你好，我是Tony Bai。</p><p>在前面的两节课中，我们学习了Go方法的声明、本质，以及receiver类型选择的三个原则。可以说，学完这些内容，我们就基本上解决了<strong>独立的自定义类型</strong>的方法的设计问题。</p><p>什么是<strong>独立的自定义类型</strong>呢？就是这个类型的所有方法都是自己显式实现的。我们举个例子，自定义类型T有两个方法M1和M2，如果T是一个独立的自定义类型，那我们在声明类型T的Go包源码文件中一定可以找到其所有方法的实现代码，比如：</p><pre><code class=\"language-plain\">func (T) M1() {...}\nfunc (T) M2() {...}\n</code></pre><p>这里你一定会问：<strong>难道还有某种自定义类型的方法不是自己显式实现的吗？</strong>当然有！这就是我们这讲中要重点讲解的内容：<strong>如何让某个自定义类型“继承”其他类型的方法实现</strong>。</p><p>这里你肯定又会提出质疑：<strong>老师，你不是说过Go不支持经典的面向对象编程范式吗？怎么还会有继承这一说法呢</strong>？没错！Go语言从设计伊始，就决定不支持经典面向对象的编程范式与语法元素，所以我们这里只是借用了“继承”这个词汇而已，说是“继承”，实则依旧是一种<strong>组合</strong>的思想。</p><p>而这种“继承”，我们是通过Go语言的<strong>类型嵌入（Type Embedding）</strong>来实现的。所以这一节课，我们就来学习一下这种语法，看看通过这种语法，我们如何实现对嵌入类型的方法的“继承”，同时也搞清楚这种方式对新定义的类型的方法集合的影响。</p><!-- [[[read_end]]] --><p>现在，我们先来学习一下什么是类型嵌入。</p><h2>什么是类型嵌入</h2><p>类型嵌入指的就是在一个类型的定义中嵌入了其他类型。Go语言支持两种类型嵌入，分别是<strong>接口类型的类型嵌入</strong>和<strong>结构体类型的类型嵌入</strong>。</p><h3>接口类型的类型嵌入</h3><p>我们先用一个案例，直观地了解一下什么是接口类型的类型嵌入。虽然我们现在还没有系统学习接口类型，但在前面的讲解中，我们已经多次接触了接口类型。我们知道，<strong>接口类型声明了由一个方法集合代表的接口</strong>，比如下面接口类型E：</p><pre><code class=\"language-plain\">type E interface {\n    M1()\n    M2()\n}\n</code></pre><p>这个接口类型E的方法集合，包含两个方法，分别是M1和M2，它们组成了E这个接口类型所代表的接口。如果某个类型实现了方法M1和M2，我们就说这个类型实现了E所代表的接口。</p><p>此时，我们再定义另外一个接口类型I，它的方法集合中包含了三个方法M1、M2和M3，如下面代码：</p><pre><code class=\"language-plain\">type I interface {\n    M1()\n    M2()\n    M3()\n}\n</code></pre><p>我们看到接口类型I方法集合中的M1和M2，与接口类型E的方法集合中的方法完全相同。在这种情况下，我们可以<strong>用接口类型E替代上面接口类型I定义中M1和M2</strong>，如下面代码：</p><pre><code class=\"language-plain\">type I interface {\n    E\n    M3()\n}\n</code></pre><p>像这种在一个接口类型（I）定义中，嵌入另外一个接口类型（E）的方式，就是我们说的<strong>接口类型的类型嵌入</strong>。</p><p>而且，这个带有类型嵌入的接口类型I的定义与上面那个包含M1、M2和M3的接口类型I的定义，是等价的。因此，我们可以得到一个结论，这种<strong>接口类型嵌入的语义就是新接口类型（如接口类型I）将嵌入的接口类型（如接口类型E）的方法集合，并入到自己的方法集合中</strong>。</p><p>到这里你可能会问，我在接口类型定义中平铺方法列表就好了，为啥要使用类型嵌入方式定义接口类型呢？其实<strong>这也是Go组合设计哲学的一种体现</strong>。</p><p>按Go语言惯例，Go中的接口类型中只包含少量方法，并且常常只是一个方法。通过在接口类型中嵌入其他接口类型可以实现接口的组合，这也是 <strong>Go语言中基于已有接口类型构建新接口类型的惯用法</strong>。</p><p>我们在Go标准库中可以看到很多这种组合方式的应用，最常见的莫过于io包中一系列接口的定义了。比如，io包的ReadWriter、ReadWriteCloser等接口类型就是通过嵌入Reader、Writer或Closer三个基本的接口类型组合而成的。下面是仅包含单一方法的io包Reader、Writer和Closer的定义：</p><pre><code class=\"language-plain\">// $GOROOT/src/io/io.go\n\ntype Reader interface {\n    Read(p []byte) (n int, err error)\n}\n\ntype Writer interface {\n    Write(p []byte) (n int, err error)\n}\n\ntype Closer interface {\n    Close() error\n}\n</code></pre><p>下面的io包的ReadWriter、ReadWriteCloser等接口类型，通过嵌入上面基本接口类型组合而形成：</p><pre><code class=\"language-plain\">type ReadWriter interface {\n    Reader\n    Writer\n}\n\ntype ReadCloser interface {\n    Reader\n    Closer\n}\n\ntype WriteCloser interface {\n    Writer\n    Closer\n}\n\ntype ReadWriteCloser interface {\n    Reader\n    Writer\n    Closer\n}\n</code></pre><p>不过，这种通过嵌入其他接口类型来创建新接口类型的方式，在Go 1.14版本之前是有<strong>约束</strong>的：如果新接口类型嵌入了多个接口类型，这些嵌入的接口类型的方法集合不能有交集，同时嵌入的接口类型的方法集合中的方法名字，也不能与新接口中的其他方法同名。比如我们用<strong>Go 1.12.7版本</strong>运行下面例子，Go编译器就会报错：</p><pre><code class=\"language-plain\">type Interface1 interface {\n    M1()\n}\n\ntype Interface2 interface {\n    M1()\n    M2()\n}\n\ntype Interface3 interface {\n    Interface1\n    Interface2 // Error: duplicate method M1\n}\n\ntype Interface4 interface {\n    Interface2\n    M2() // Error: duplicate method M2\n}\n\nfunc main() {\n}\n</code></pre><p>我们具体看一下例子中的两个编译报错：第一个是因为Interface3中嵌入的两个接口类型Interface1和Interface2的方法集合有交集，交集是方法M1；第二个报错是因为Interface4类型中的方法M2与嵌入的接口类型Interface2的方法M2重名。</p><p>但自Go 1.14版本开始，Go语言去除了这些约束，我们使用Go 1.17版本运行上面这个示例就不会得到编译错误了。</p><p>当然，接口类型的类型嵌入比较简单，我们只要把握好它的语义，也就是“方法集合并入”就可以了。结构体类型的类型嵌入就要更复杂一些了，接下来我们一起来学习一下。</p><h3>结构体类型的类型嵌入</h3><p>我们在第17讲中对Go结构体类型进行了系统的讲解，在那一讲中我们遇到的结构体都是类似下面这样的：</p><pre><code class=\"language-plain\">type S struct {\n    A int\n    b string\n    c T\n    p *P\n    _ [10]int8\n    F func()\n}\n</code></pre><p>结构体类型S中的每个字段（field）都有唯一的名字与对应的类型，即便是使用空标识符占位的字段，它的类型也是明确的，但这还不是Go结构体类型的“完全体”。Go结构体类型定义还有另外一种形式，那就是<strong>带有嵌入字段（Embedded Field）的结构体定义</strong>。我们看下面这个例子：</p><pre><code class=\"language-plain\">type T1 int\ntype t2 struct{\n    n int\n    m int\n}\n\ntype I interface {\n    M1()\n}\n\ntype S1 struct {\n    T1\n    *t2\n    I            \n    a int\n    b string\n}\n</code></pre><p>我们看到，结构体S1定义中有三个“非常规形式”的标识符，分别是T1、t2和I，这三个标识符究竟代表的是什么呢？是字段名还是字段的类型呢？这里我直接告诉你答案：它们<strong>既代表字段的名字，也代表字段的类型</strong>。我们分别以这三个标识符为例，说明一下它们的具体含义：</p><ul>\n<li>标识符T1表示字段名为T1，它的类型为自定义类型T1；</li>\n<li>标识符t2表示字段名为t2，它的类型为自定义结构体类型t2的指针类型；</li>\n<li>标识符I表示字段名为I，它的类型为接口类型I。</li>\n</ul><p>这种以某个类型名、类型的指针类型名或接口类型名，直接作为结构体字段的方式就叫做<strong>结构体的类型嵌入</strong>，这些字段也被叫做<strong>嵌入字段（Embedded Field）</strong>。</p><p>那么，嵌入字段怎么用呢？它跟普通结构体字段有啥不同呢？我们结合具体的例子，简单说一下嵌入字段的用法：</p><pre><code class=\"language-plain\">type MyInt int\n\nfunc (n *MyInt) Add(m int) {\n    *n = *n + MyInt(m)\n}\n\ntype t struct {\n    a int\n    b int\n}\n\ntype S struct {\n    *MyInt\n    t\n    io.Reader\n    s string\n    n int\n}\n\nfunc main() {\n    m := MyInt(17)\n    r := strings.NewReader(\"hello, go\")\n    s := S{\n        MyInt: &amp;m,\n        t: t{\n            a: 1,\n            b: 2,\n        },\n        Reader: r,\n        s:      \"demo\",\n    }\n\n    var sl = make([]byte, len(\"hello, go\"))\n    s.Reader.Read(sl)\n    fmt.Println(string(sl)) // hello, go\n    s.MyInt.Add(5)\n    fmt.Println(*(s.MyInt)) // 22\n}\n</code></pre><p>在分析这段代码之前，我们要先明确一点，那就是嵌入字段的可见性与嵌入字段的类型的可见性是一致的。如果嵌入类型的名字是首字母大写的，那么也就说明这个嵌入字段是可导出的。</p><p>现在我们来看这个例子。</p><p>首先，这个例子中的结构体类型S使用了类型嵌入方式进行定义，它有三个嵌入字段MyInt、t和Reader。这里，你可能会问，为什么第三个嵌入字段的名字为Reader而不是io.Reader？这是因为，Go语言规定如果结构体使用从其他包导入的类型作为嵌入字段，比如pkg.T，那么这个嵌入字段的字段名就是T，代表的类型为pkg.T。</p><p>接下来，我们再来看结构体类型S的变量的初始化。我们使用field:value方式对S类型的变量s的各个字段进行初始化。和普通的字段一样，初始化嵌入字段时，我们可以直接用嵌入字段名作为field。</p><p>而且，通过变量s使用这些嵌入字段时，我们也可以像普通字段那样直接用<code>变量s+字段选择符.+嵌入字段的名字</code>，比如s.Reader。我们还可以通过这种方式调用嵌入字段的方法，比如s.Reader.Read和s.MyInt.Add。</p><p>这样看起来，嵌入字段的用法和普通字段没啥不同呀？也不完全是，Go还是对嵌入字段有一些约束的。比如，和Go方法的receiver的基类型一样，嵌入字段类型的底层类型不能为指针类型。而且，嵌入字段的名字在结构体定义也必须是唯一的，这也意味这如果两个类型的名字相同，它们无法同时作为嵌入字段放到同一个结构体定义中。不过，这些约束你了解一下就可以了，一旦违反，Go编译器会提示你的。</p><p>到这里，我们看到嵌入字段在使用上确实和普通字段没有多大差别，那我们为什么要用嵌入字段这种方式来定义结构体类型呢？别急，我们继续向下看。</p><h3>“实现继承”的原理</h3><p>我们将上面例子代码做一下细微改动，我这里只列了变化部分的代码：</p><pre><code class=\"language-plain\">var sl = make([]byte, len(\"hello, go\"))\ns.Read(sl) \nfmt.Println(string(sl))\ns.Add(5) \nfmt.Println(*(s.MyInt))\n</code></pre><p>看到这段代码，你肯定会问：老师，类型S也没有定义Read方法和Add方法啊，这样写会导致Go编译器报错的。如果你有这个疑问，可以暂停一下，先用你手头上的Go编译器编译运行一下这段代码看看。</p><p>惊不惊喜，意不意外？这段程序不但没有引发编译器报错，还可以正常运行并输出与前面例子相同的结果！</p><p>这段代码似乎在告诉我们：<strong>Read方法与Add方法就是类型S方法集合中的方法</strong>。但是，这里类型S明明没有显式实现这两个方法呀，它是从哪里得到这两个方法的实现的呢？</p><p>其实，这两个方法就来自结构体类型S的两个嵌入字段Reader和MyInt。结构体类型S“继承”了Reader字段的方法Read的实现，也“继承”了*MyInt的Add方法的实现。注意，我这里的“继承”用了引号，说明这并不是真正的继承，它只是Go语言的一种“障眼法”。</p><p>这种“障眼法”的工作机制是这样的，当我们通过结构体类型S的变量s调用Read方法时，Go发现结构体类型S自身并没有定义Read方法，于是Go会查看S的嵌入字段对应的类型是否定义了Read方法。这个时候，Reader字段就被找了出来，之后s.Read的调用就被转换为s.Reader.Read调用。</p><p>这样一来，嵌入字段Reader的Read方法就被提升为S的方法，放入了类型S的方法集合。同理*MyInt的Add方法也被提升为S的方法而放入S的方法集合。从外部来看，这种嵌入字段的方法的提升就给了我们一种结构体类型S“继承”了io.Reader类型Read方法的实现，以及*MyInt类型Add方法的实现的错觉。</p><p>到这里，我们就清楚了，嵌入字段的使用的确可以帮我们在Go中实现方法的“继承”。</p><p>这节课开始我们就提过，类型嵌入这种看似“继承”的机制，实际上是一种组合的思想。更具体点，它是一种组合中的代理（delegate）模式，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/a2/fc/a236306ea461e2ca90505ca9819c94fc.jpg?wh=1980x1080\" alt=\"\"></p><p>我们看到，S只是一个代理（delegate），对外它提供了它可以代理的所有方法，如例子中的Read和Add方法。当外界发起对S的Read方法的调用后，S将该调用委派给它内部的Reader实例来实际执行Read方法。</p><p>当然，嵌入字段的类型不同，自定义结构体类型可以代理的方法就不同，那自定义结构体类型究竟可以代理哪些方法呢？换个角度说，嵌入字段对结构体的方法集合有哪些影响呢？下面我们就分情况来看看嵌入不同类型的结构体类型的方法集合中，都包含哪些方法。</p><h2>类型嵌入与方法集合</h2><p>在前面讲解接口类型的类型嵌入时，我们提到过接口类型的类型嵌入的本质，就是嵌入类型的方法集合并入到新接口类型的方法集合中，并且，接口类型只能嵌入接口类型。而结构体类型对嵌入类型的要求就比较宽泛了，可以是任意自定义类型或接口类型。</p><p>下面我们就分别看看，<strong>在这两种情况下，结构体类型的方法集合会有怎样的变化</strong>。我们依旧借助上一讲中的dumpMethodSet函数来输出各个类型的方法集合，这里，我就不在例子中重复列出dumpMethodSet的代码了。</p><h3>结构体类型中嵌入接口类型</h3><p>在结构体类型中嵌入接口类型后，结构体类型的方法集合会发生什么变化呢？我们通过下面这个例子来看一下：</p><pre><code class=\"language-plain\">type I interface {\n    M1()\n    M2()\n}\n\ntype T struct {\n    I\n}\n\nfunc (T) M3() {}\n\nfunc main() {\n    var t T\n    var p *T\n    dumpMethodSet(t)\n    dumpMethodSet(p)\n}\n</code></pre><p>运行这个示例，我们会得到以下结果：</p><pre><code class=\"language-plain\">main.T's method set:\n- M1\n- M2\n- M3\n\n*main.T's method set:\n- M1\n- M2\n- M3\n</code></pre><p>我们可以看到，原本结构体类型T只带有一个方法M3，但在嵌入接口类型I后，结构体类型T的方法集合中又并入了接口类型I的方法集合。并且，由于*T类型方法集合包括T类型的方法集合，因此无论是类型T还是类型*T，它们的方法集合都包含M1、M2和M3。于是我们可以得出一个结论：<strong>结构体类型的方法集合，包含嵌入的接口类型的方法集合</strong>。</p><p>不过有一种情况，你要注意一下，那就是当结构体嵌入的多个接口类型的方法集合存在交集时，你要小心编译器可能会出现的错误提示。</p><p>看到这里，有同学可能会问：老师，你不是说Go 1.14版本解决了嵌入接口类型的方法集合有交集的情况吗？没错，但那仅限于接口类型中嵌入接口类型，这里我们说的是在结构体类型中嵌入方法集合有交集的接口类型。</p><p>这是什么意思呢？根据我们前面讲的，嵌入了其他类型的结构体类型本身是一个代理，在调用其实例所代理的方法时，Go会首先查看结构体自身是否实现了该方法。</p><p>如果实现了，Go就会优先使用结构体自己实现的方法。如果没有实现，那么Go就会查找结构体中的嵌入字段的方法集合中，是否包含了这个方法。如果多个嵌入字段的方法集合中都包含这个方法，那么我们就说方法集合存在交集。这个时候，Go编译器就会因无法确定究竟使用哪个方法而报错，下面的这个例子就演示了这种情况：</p><pre><code class=\"language-plain\">  type E1 interface {\n      M1()\n      M2()\n      M3()\n  }\n  \n  type E2 interface {\n     M1()\n     M2()\n     M4()\n }\n \n type T struct {\n     E1\n     E2\n }\n \n func main() {\n     t := T{}\n     t.M1()\n     t.M2()\n }\n</code></pre><p>运行这个例子，我们会得到：</p><pre><code class=\"language-plain\">main.go:22:3: ambiguous selector t.M1\nmain.go:23:3: ambiguous selector t.M2\n</code></pre><p>我们看到，Go编译器给出了错误提示，表示在调用t.M1和t.M2时，编译器都出现了分歧。在这个例子中，结构体类型T嵌入的两个接口类型E1和E2的方法集合存在交集，都包含M1和M2，而结构体类型T自身呢，又没有实现M1和M2，所以编译器会因无法做出选择而报错。</p><p>那怎么解决这个问题呢？其实有两种解决方案。一是，我们可以消除E1和E2方法集合存在交集的情况。二是为T增加M1和M2方法的实现，这样的话，编译器便会直接选择T自己实现的M1和M2，不会陷入两难境地。比如，下面的例子演示的就是T增加了M1和M2方法实现的情况：</p><pre><code class=\"language-plain\">... ...\ntype T struct {\n    E1\n    E2\n}\n\nfunc (T) M1() { println(\"T's M1\") }\nfunc (T) M2() { println(\"T's M2\") }\n\nfunc main() {\n    t := T{}\n    t.M1() // T's M1\n    t.M2() // T's M2\n}\n</code></pre><p>结构体类型嵌入接口类型在日常编码中有一个妙用，就是<strong>可以简化单元测试的编写</strong>。由于嵌入某接口类型的结构体类型的方法集合包含了这个接口类型的方法集合，这就意味着，这个结构体类型也是它嵌入的接口类型的一个实现。即便结构体类型自身并没有实现这个接口类型的任意一个方法，也没有关系。我们来看一个直观的例子：</p><pre><code class=\"language-plain\">package employee\n  \ntype Result struct {\n    Count int\n}\n\nfunc (r Result) Int() int { return r.Count }\n\ntype Rows []struct{}\n\ntype Stmt interface {\n    Close() error\n    NumInput() int\n    Exec(stmt string, args ...string) (Result, error)\n    Query(args []string) (Rows, error)\n}\n\n// 返回男性员工总数\nfunc MaleCount(s Stmt) (int, error) {\n    result, err := s.Exec(\"select count(*) from employee_tab where gender=?\", \"1\")\n    if err != nil {\n        return 0, err\n    }\n\n    return result.Int(), nil\n}\n</code></pre><p>在这个例子中，我们有一个employee包，这个包中的方法MaleCount，通过传入的Stmt接口的实现从数据库获取男性员工的数量。</p><p>现在我们的任务是要对MaleCount方法编写单元测试代码。对于这种依赖外部数据库操作的方法，我们的惯例是使用“伪对象（fake object）”来冒充真实的Stmt接口实现。</p><p>不过现在有一个问题，那就是Stmt接口类型的方法集合中有四个方法，而MaleCount函数只使用了Stmt接口的一个方法Exec。如果我们针对每个测试用例所用的伪对象都实现这四个方法，那么这个工作量有些大。</p><p>那么这个时候，我们怎样快速建立伪对象呢？结构体类型嵌入接口类型便可以帮助我们，下面是我们的解决方案：</p><pre><code class=\"language-plain\">package employee\n  \nimport \"testing\"\n\ntype fakeStmtForMaleCount struct {\n    Stmt\n}\n\nfunc (fakeStmtForMaleCount) Exec(stmt string, args ...string) (Result, error) {\n    return Result{Count: 5}, nil\n}\n\nfunc TestEmployeeMaleCount(t *testing.T) {\n    f := fakeStmtForMaleCount{}\n    c, _ := MaleCount(f)\n    if c != 5 {\n        t.Errorf(\"want: %d, actual: %d\", 5, c)\n        return\n    }\n}\n</code></pre><p>我们为TestEmployeeMaleCount测试用例建立了一个fakeStmtForMaleCount的伪对象类型，然后在这个类型中嵌入了Stmt接口类型。这样fakeStmtForMaleCount就实现了Stmt接口，我们也实现了快速建立伪对象的目的。接下来我们只需要为fakeStmtForMaleCount实现MaleCount所需的Exec方法，就可以满足这个测试的要求了。</p><p>那说完了在结构体中嵌入接口类型的情况后，我们再来看在结构体中嵌入结构体类型会对方法集合产生什么影响。</p><h3>结构体类型中嵌入结构体类型</h3><p>我们前面已经学过，在结构体类型中嵌入结构体类型，为Gopher们提供了一种“实现继承”的手段，外部的结构体类型T可以“继承”嵌入的结构体类型的所有方法的实现。并且，无论是T类型的变量实例还是*T类型变量实例，都可以调用所有“继承”的方法。但这种情况下，带有嵌入类型的新类型究竟“继承”了哪些方法，我们还要通过下面这个具体的示例来看一下。</p><pre><code class=\"language-plain\">type T1 struct{}\n\nfunc (T1) T1M1()   { println(\"T1's M1\") }\nfunc (*T1) PT1M2() { println(\"PT1's M2\") }\n\ntype T2 struct{}\n\nfunc (T2) T2M1()   { println(\"T2's M1\") }\nfunc (*T2) PT2M2() { println(\"PT2's M2\") }\n\ntype T struct {\n    T1\n    *T2\n}\n\nfunc main() {\n    t := T{\n        T1: T1{},\n        T2: &amp;T2{},\n    }\n\n    dumpMethodSet(t)\n    dumpMethodSet(&amp;t)\n}\n</code></pre><p>在这个例子中，结构体类型T有两个嵌入字段，分别是T1和*T2，根据上一讲中我们对结构体的方法集合的讲解，我们知道T1与*T1、T2与*T2的方法集合是不同的：</p><ul>\n<li>T1的方法集合包含：T1M1；</li>\n<li>*T1的方法集合包含：T1M1、PT1M2；</li>\n<li>T2的方法集合包含：T2M1；</li>\n<li>*T2的方法集合包含：T2M1、PT2M2。</li>\n</ul><p>它们作为嵌入字段嵌入到T中后，对T和*T的方法集合的影响也是不同的。我们运行一下这个示例，看一下输出结果：</p><pre><code class=\"language-plain\">main.T's method set:\n- PT2M2\n- T1M1\n- T2M1\n\n*main.T's method set:\n- PT1M2\n- PT2M2\n- T1M1\n- T2M1\n</code></pre><p>通过输出结果，我们看到了T和*T类型的方法集合果然有差别的：</p><ul>\n<li>类型T的方法集合 = T1的方法集合 + *T2的方法集合</li>\n<li>类型*T的方法集合 = *T1的方法集合 + *T2的方法集合</li>\n</ul><p>这里，我们尤其要注意*T类型的方法集合，它包含的可不是T1类型的方法集合，而是*T1类型的方法集合。这和结构体指针类型的方法集合包含结构体类型方法集合，是一个道理。</p><p>讲到这里，基于类型嵌入“继承”方法实现的原理，我们基本都讲清楚了。但不知道你会不会还有一点疑惑：只有通过类型嵌入才能实现方法“继承”吗？如果我使用类型声明语法基于一个已有类型T定义一个新类型NT，那么NT是不是可以直接继承T的所有方法呢？</p><p>为了解答这个疑惑，我们继续来看看defined类型与alias类型是否可以实现方法集合的“继承”。</p><h2>defined类型与alias类型的方法集合</h2><p>Go语言中，凡通过类型声明语法声明的类型都被称为defined类型，下面是一些defined类型的声明的例子：</p><pre><code class=\"language-plain\">type I interface {\n    M1()\n    M2()\n}\ntype T int\ntype NT T // 基于已存在的类型T创建新的defined类型NT\ntype NI I // 基于已存在的接口类型I创建新defined接口类型NI\n</code></pre><p>新定义的defined类型与原defined类型是不同的类型，那么它们的方法集合上又会有什么关系呢？新类型是否“继承”原defined类型的方法集合呢？</p><p>这个问题，我们也要分情况来看。</p><p>对于那些基于接口类型创建的defined的接口类型，它们的方法集合与原接口类型的方法集合是一致的。但对于基于非接口类型的defined类型创建的非接口类型，我们通过下面例子来看一下：</p><pre><code class=\"language-plain\">package main\n\ntype T struct{}\n\nfunc (T) M1()  {}\nfunc (*T) M2() {}\n\ntype T1 T\n\nfunc main() {\n\tvar t T\n\tvar pt *T\n\tvar t1 T1\n\tvar pt1 *T1\n\n\tdumpMethodSet(t)\n\tdumpMethodSet(t1)\n\n\tdumpMethodSet(pt)\n\tdumpMethodSet(pt1)\n}\n</code></pre><p>在这个例子中，我们基于一个defined的非接口类型T创建了新defined类型T1，并且分别输出T1和*T1的方法集合来确认它们是否“继承”了T的方法集合。</p><p>运行这个示例程序，我们得到如下结果：</p><pre><code class=\"language-plain\">main.T's method set:\n- M1\n\nmain.T1's method set is empty!\n\n*main.T's method set:\n- M1\n- M2\n\n*main.T1's method set is empty!\n</code></pre><p>从输出结果上看，新类型T1并没有“继承”原defined类型T的任何一个方法。从逻辑上来说，这也符合T1与T是两个不同类型的语义。</p><p>基于自定义非接口类型的defined类型的方法集合为空的事实，也决定了即便原类型实现了某些接口，基于其创建的defined类型也没有“继承”这一隐式关联。也就是说，新defined类型要想实现那些接口，仍然需要重新实现接口的所有方法。</p><p>那么，基于类型别名（type alias）定义的新类型有没有“继承”原类型的方法集合呢？我们还是来看一个例子：</p><pre><code class=\"language-plain\">type T struct{}\n\nfunc (T) M1()  {}\nfunc (*T) M2() {}\n\ntype T1 = T\n\nfunc main() {\n    var t T\n    var pt *T\n    var t1 T1\n    var pt1 *T1\n\n    dumpMethodSet(t)\n    dumpMethodSet(t1)\n\n    dumpMethodSet(pt)\n    dumpMethodSet(pt1)\n}\n</code></pre><p>这个例子改自之前那个例子，我只是将T1的定义方式由类型声明改成了类型别名，我们看一下这个例子的输出结果：</p><pre><code class=\"language-plain\">main.T's method set:\n- M1\n\nmain.T's method set:\n- M1\n\n*main.T's method set:\n- M1\n- M2\n\n*main.T's method set:\n- M1\n- M2\n</code></pre><p>通过这个输出结果，我们看到，我们的dumpMethodSet函数甚至都无法识别出“类型别名”，无论类型别名还是原类型，输出的都是原类型的方法集合。</p><p>由此我们可以得到一个结论：无论原类型是接口类型还是非接口类型，类型别名都与原类型拥有完全相同的方法集合。</p><h2>小结</h2><p>好了，今天的课讲到这里就结束了。这一节课中，我们主要学习了类型嵌入相关的知识，类型嵌入对类型方法集合的影响，也是我们日常进行方法设计时必须要考虑到的重要因素。</p><p>类型嵌入分为两种，一种是接口类型的类型嵌入，对于接口类型的类型嵌入我们只要把握好其语义“方法集合并入”就可以了。另外一种是结构体类型的类型嵌入。通过在结构体定义中的嵌入字段，我们可以实现对嵌入类型的方法集合的“继承”。</p><p>但这种“继承”并非经典面向对象范式中的那个继承，Go中的“继承”实际是一种组合，更具体点是组合思想下代理（delegate）模式的运用，也就是新类型代理了其嵌入类型的所有方法。当外界调用新类型的方法时，Go编译器会首先查找新类型是否实现了这个方法，如果没有，就会将调用委派给其内部实现了这个方法的嵌入类型的实例去执行，你一定要理解这个原理。</p><p>此外，你还要牢记类型嵌入对新类型的方法集合的影响，包括：</p><ul>\n<li>结构体类型的方法集合包含嵌入的接口类型的方法集合；</li>\n<li>当结构体类型T包含嵌入字段E时，*T的方法集合不仅包含类型E的方法集合，还要包含类型*E的方法集合。</li>\n</ul><p>最后，基于非接口类型的defined类型创建的新defined类型不会继承原类型的方法集合，而通过类型别名定义的新类型则和原类型拥有相同的方法集合。</p><h2>思考题</h2><p>请你思考一下，下面带有类型嵌入的结构体S1与不带类型嵌入的结构体S2是否是等价的，如不等价，区别在哪里？</p><pre><code class=\"language-plain\">type T1 int\ntype t2 struct{\n    n int\n    m int\n}\n\ntype I interface {\n    M1()\n}\n\ntype S1 struct {\n    T1\n    *t2\n    I\n    a int\n    b string\n}\n\ntype S2 struct { \n    T1 T1\n    t2 *t2\n    I  I\n    a  int\n    b  string\n}\n</code></pre><p>欢迎把这节课分享给更多对Go类型嵌入感兴趣的朋友。我是Tony Bai，我们下节课见。</p>","comments":[{"had_liked":false,"id":326297,"user_name":"奕","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1639463208,"is_pvip":false,"replies":[{"id":119063,"content":"✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1640037771,"ip_address":"","comment_id":326297,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"S2 不是嵌入的，相当的正常书写的字段，所有没有 对应接口的方法集合","like_count":59},{"had_liked":false,"id":326109,"user_name":"liaomars","can_delete":false,"product_type":"c1","uid":2104856,"ip_address":"","ucode":"4FCA97EE9FB57D","user_header":"https://static001.geekbang.org/account/avatar/00/20/1e/18/9d1f1439.jpg","comment_is_top":false,"comment_ctime":1639382855,"is_pvip":false,"replies":[{"id":119071,"content":"正确✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1640050689,"ip_address":"","comment_id":326109,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"带有类型嵌入的结构体 S1 与不带类型嵌入的结构体 S2 是否是等价的，如不等价，区别在哪里?\n这两个S1与S2是不等价的，区别是：S1结构体能调用代理嵌入类型的所有方法，S2结构体是没有代理嵌入类型方法。","like_count":13,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540349,"discussion_content":"✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640037771,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1813614,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/ac/6e/c13d131c.jpg","nickname":"她微笑的脸y","note":"","ucode":"E3B559B10B4A70","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577364,"discussion_content":"不是还可以通过s.I.m1() 吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656053303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2166073,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/k3YD3y3BzGDSdrwRJyJY4BXsNJibfM4uzOdDVKIAlFApR2FZCLg2ibrZtJ4vuahA3LHLW9GKzH5CMGqCDhWjhZqg/132","nickname":"戒酒的李白","note":"","ucode":"744E1A22761647","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1813614,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/ac/6e/c13d131c.jpg","nickname":"她微笑的脸y","note":"","ucode":"E3B559B10B4A70","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586018,"discussion_content":"s.l.m1()这种写法相当于m1这个方法直接就是l这个对象的方法， 不属于s对象的方法， 因为无法直接通过s.m1()来调用","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1661936301,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":577364,"ip_address":"浙江","group_id":0},"score":586018,"extra":""}]}]},{"had_liked":false,"id":349460,"user_name":"13693113483","can_delete":false,"product_type":"c1","uid":1318913,"ip_address":"","ucode":"39CF3202F58847","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJwicoopV8ZJuxPQUfATepdg7zHQG1vpZpickQYicRN0u9qwibK2lq7MDpt0ZFdofnwshNcibkLdqk9ZRg/132","comment_is_top":false,"comment_ctime":1655977539,"is_pvip":false,"replies":[{"id":127204,"content":"两种本质上都是组合。第一种可以理解为一种“语法糖”，无需再在外层结构上重新定义方法并代理给内部字段。第二种从能力上讲和第一种没有本质区别，只是需要开发者自己在外层封一层方法，然后调用字段对应的方法。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1655981426,"ip_address":"","comment_id":349460,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"可不可以这样认为，直接 \nT1 \n*t2\n I \n我们可以理解为是继承，里面所有方法可以调用，然而：\nT1 T1\n t2 *t2\n I I\n这种是组合，如果想调用里面的方法要用 S2.I.M1()","like_count":7,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540371,"discussion_content":"正确✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640050689,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":347295,"user_name":"Aeins","can_delete":false,"product_type":"c1","uid":1045910,"ip_address":"","ucode":"D5BF220767541D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/96/0cf9f3c7.jpg","comment_is_top":false,"comment_ctime":1653906335,"is_pvip":false,"replies":[{"id":126662,"content":"问题非常好！👍\n\n我们知道：一个类型的方法集合中的方法都可以被这个类型实例所调用。反过来说，只有能被类型实例直接调用的方法才能进入其方法集合。\n\n在你的例子中，SI12嵌入了I1和I2，这就造成了I1和I2的方法集合的交集M在SI12中存在了歧义。当使用SI12的实例调用M时，比如：\nvar s SI12\ns.M() &#47;&#47; go编译器会报错！不确定究竟是调用s.I1.M还是s.I2.M\n\n于是M因这种未决的歧义性而不能被列入SI12的方法集合中。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1654063420,"ip_address":"","comment_id":347295,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"结构体类型，两种不同方式嵌套接口类型。\n\n由于接口类型嵌套允许重名方法，I 接口有三个方法。SI 嵌套 I，SI 也有三个方法\n\n结构体嵌套不允许重名，M 方法，被自动隐藏了？，SI12嵌套 I1, I2,  SI12 只有两个方法\n\n\npackage main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;reflect&quot;\n)\n\ntype I1 interface {\n\tM()\n\tM1()\n}\n\ntype I2 interface {\n\tM()\n\tM2()\n}\n\ntype I interface {\n\tI1\n\tI2\n}\n\ntype SI struct {\n\tI\n}\n\ntype SI12 struct {\n\tI1\n\tI2\n}\n\nfunc main() {\n\tvar si SI\n\tvar si12 SI12\n\tDumpMethodSet(si)\n\tDumpMethodSet(si12)\n}\n\nfunc DumpMethodSet(i interface{}) {\n\tdynTyp := reflect.TypeOf(i)\n\n\tif dynTyp == nil {\n\t\tfmt.Printf(&quot;there is no dynamic type\\n&quot;)\n\t\treturn\n\t}\n\n\tn := dynTyp.NumMethod()\n\tif n == 0 {\n\t\tfmt.Printf(&quot;%s&#39;s method set is empty!\\n&quot;, dynTyp)\n\t\treturn\n\t}\n\n\tfmt.Printf(&quot;%s&#39;s method set:\\n&quot;, dynTyp)\n\tfor j := 0; j &lt; n; j++ {\n\t\tfmt.Println(&quot;-&quot;, dynTyp.Method(j).Name)\n\t}\n\tfmt.Printf(&quot;\\n&quot;)\n}\n\n\n============\nmain.SI&#39;s method set:\n- M\n- M1\n- M2\n\nmain.SI12&#39;s method set:\n- M1\n- M2","like_count":6,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577239,"discussion_content":"两种本质上都是组合。第一种可以理解为一种“语法糖”，无需再在外层结构上重新定义方法并代理给内部字段。第二种从能力上讲和第一种没有本质区别，只是需要开发者自己在外层封一层方法，然后调用字段对应的方法。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1655981426,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":354955,"user_name":"菠萝吹雪—Code","can_delete":false,"product_type":"c1","uid":1650378,"ip_address":"北京","ucode":"A5B2FC661EE17D","user_header":"https://static001.geekbang.org/account/avatar/00/19/2e/ca/469f7266.jpg","comment_is_top":false,"comment_ctime":1660904969,"is_pvip":false,"replies":[{"id":129244,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1661217277,"ip_address":"北京","comment_id":354955,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"这篇真干，赞，需要多看几遍","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574434,"discussion_content":"问题非常好！👍\n\n我们知道：一个类型的方法集合中的方法都可以被这个类型实例所调用。反过来说，只有能被类型实例直接调用的方法才能进入其方法集合。\n\n在你的例子中，SI12嵌入了I1和I2，这就造成了I1和I2的方法集合的交集M在SI12中存在了歧义。当使用SI12的实例调用M时，比如：\nvar s SI12\ns.M() // go编译器会报错！不确定究竟是调用s.I1.M还是s.I2.M\n\n于是M因这种未决的歧义性而不能被列入SI12的方法集合中。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654063420,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1282639,"avatar":"https://static001.geekbang.org/account/avatar/00/13/92/4f/ff04156a.jpg","nickname":"天天向上","note":"","ucode":"D0914D4FD82272","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586435,"discussion_content":"白老师解答很透彻。贴个s.M()编译器报错内容：Ambiguous reference &#39;M&#39;","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662211696,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326093,"user_name":"Geek_99b47c","can_delete":false,"product_type":"c1","uid":2049562,"ip_address":"","ucode":"D25E22C1D84E09","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/aQmhiahazRFUA4W3r1hdxxreSB5Pl54IwAJ8bwN6j02lzicydWAfPFbWx1LSFtzXH8MkI0jUKjlpUtmQBoZ4kReA/132","comment_is_top":false,"comment_ctime":1639375418,"is_pvip":false,"replies":[{"id":119073,"content":"建议再重新学习一下25讲与26讲。只有自己理解后，知识才是自己的。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1640050759,"ip_address":"","comment_id":326093,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"S1&#39;s method set total 1, detail method :\n-- M1\nS2&#39;s method set is empty \n这是为啥啊","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540373,"discussion_content":"建议再重新学习一下25讲与26讲。只有自己理解后，知识才是自己的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640050759,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538710,"discussion_content":"同学这是你哪段代码运行的问题呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639490804,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":372147,"user_name":"不求闻达","can_delete":false,"product_type":"c1","uid":1629565,"ip_address":"上海","ucode":"B265859B9566D5","user_header":"https://static001.geekbang.org/account/avatar/00/18/dd/7d/5d3ab033.jpg","comment_is_top":false,"comment_ctime":1680779925,"is_pvip":false,"replies":[{"id":135831,"content":"正确✅👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1680835604,"ip_address":"北京","comment_id":372147,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"不等价，S2 不是嵌入的是defined 类型。defined 类型创建的新 defined 类型不会继承原类型的方法集合","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":612658,"discussion_content":"正确✅👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1680835604,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":340598,"user_name":"Fan()","can_delete":false,"product_type":"c1","uid":1069127,"ip_address":"","ucode":"FED79EC7D78E91","user_header":"https://static001.geekbang.org/account/avatar/00/10/50/47/46da4585.jpg","comment_is_top":false,"comment_ctime":1648965572,"is_pvip":false,"replies":[{"id":124593,"content":"这个没有什么原理可讲，Go语言就是这么规定的:)。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1649120842,"ip_address":"","comment_id":340598,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"类型 *T 的方法集合 = *T1 的方法集合 + *T2 的方法集合\n对这个不太理解... 有点懵逼. 这个原理能细讲一下吗?","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560007,"discussion_content":"这个没有什么原理可讲，Go语言就是这么规定的:)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649120842,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327237,"user_name":"Calvin","can_delete":false,"product_type":"c1","uid":1603004,"ip_address":"","ucode":"0EEF5B207623B5","user_header":"https://static001.geekbang.org/account/avatar/00/18/75/bc/89d88775.jpg","comment_is_top":false,"comment_ctime":1640000125,"is_pvip":false,"replies":[{"id":119053,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1640036836,"ip_address":"","comment_id":327237,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"不等价，dumpMethodSet 结果就不一样：\n\nS1&#39;s method set:\n- M1\n\n*S1&#39;s method set:\n- M1\n\nS2&#39;s method set is empty!\n*S2&#39;s method set is empty!","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540339,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640036836,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326388,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1639491800,"is_pvip":false,"replies":[{"id":119099,"content":"*main.T其实也是一种指针类型，还是等我的加餐吧:(。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1640056837,"ip_address":"","comment_id":326388,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"Tony bai 老师，我看打印出的方法集合中都有类似这样的输出：*main.T&#39;s 。后面会讲解一下这种语法输出吗？\n\n对于课后问题，我觉得用一下老师的 dumpMethodSet 函数 就能很容易看出区别了。\n\npackage main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;reflect&quot;\n)\n\ntype T1 int\n\ntype t2 struct{\n\tn int\n\tm int\n}\n\ntype I interface {\n\tM1()\n}\n\ntype S1 struct {\n\tT1\n\t*t2\n\tI\n\ta int\n\tb string\n}\n\ntype S2 struct {\n\tT1 T1\n\tt2 *t2\n\tI  I\n\ta  int\n\tb  string\n}\n\nfunc main() {\n\tvar s1 S1\n\tvar ps1 *S1\n\tvar s2 S2\n\tvar ps2 *S2\n\n\tdumpMethodSet(s1)\n\tdumpMethodSet(ps1)\n\n\tdumpMethodSet(s2)\n\tdumpMethodSet(ps2)\n}\n\nfunc dumpMethodSet(i interface{}) {\n\tdynTyp := reflect.TypeOf(i)\n\n\tif dynTyp == nil {\n\t\tfmt.Printf(&quot;there is no dynamic type\\n&quot;)\n\t\treturn\n\t}\n\n\tn := dynTyp.NumMethod()\n\tif n == 0 {\n\t\tfmt.Printf(&quot;%s&#39;s method set is empty!\\n&quot;, dynTyp)\n\t\treturn\n\t}\n\n\tfmt.Printf(&quot;%s&#39;s method set:\\n&quot;, dynTyp)\n\tfor j := 0; j &lt; n; j++ {\n\t\tfmt.Println(&quot;-&quot;, dynTyp.Method(j).Name)\n\t}\n\tfmt.Printf(&quot;\\n&quot;)\n}\n","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540429,"discussion_content":"*main.T其实也是一种指针类型，还是等我的加餐吧:(。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640056837,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2704565,"avatar":"https://static001.geekbang.org/account/avatar/00/29/44/b5/7eba5a0e.jpg","nickname":"木木","note":"","ucode":"86820F26A27308","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538864,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639540775,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326297,"user_name":"奕","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1639463208,"is_pvip":false,"replies":[{"id":119063,"content":"✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1640037771,"ip_address":"","comment_id":326297,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"S2 不是嵌入的，相当的正常书写的字段，所有没有 对应接口的方法集合","like_count":59,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540349,"discussion_content":"✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640037771,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1813614,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/ac/6e/c13d131c.jpg","nickname":"她微笑的脸y","note":"","ucode":"E3B559B10B4A70","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577364,"discussion_content":"不是还可以通过s.I.m1() 吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656053303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2166073,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/k3YD3y3BzGDSdrwRJyJY4BXsNJibfM4uzOdDVKIAlFApR2FZCLg2ibrZtJ4vuahA3LHLW9GKzH5CMGqCDhWjhZqg/132","nickname":"戒酒的李白","note":"","ucode":"744E1A22761647","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1813614,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/ac/6e/c13d131c.jpg","nickname":"她微笑的脸y","note":"","ucode":"E3B559B10B4A70","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586018,"discussion_content":"s.l.m1()这种写法相当于m1这个方法直接就是l这个对象的方法， 不属于s对象的方法， 因为无法直接通过s.m1()来调用","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1661936301,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":577364,"ip_address":"浙江","group_id":0},"score":586018,"extra":""}]}]},{"had_liked":false,"id":326109,"user_name":"liaomars","can_delete":false,"product_type":"c1","uid":2104856,"ip_address":"","ucode":"4FCA97EE9FB57D","user_header":"https://static001.geekbang.org/account/avatar/00/20/1e/18/9d1f1439.jpg","comment_is_top":false,"comment_ctime":1639382855,"is_pvip":false,"replies":[{"id":119071,"content":"正确✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1640050689,"ip_address":"","comment_id":326109,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"带有类型嵌入的结构体 S1 与不带类型嵌入的结构体 S2 是否是等价的，如不等价，区别在哪里?\n这两个S1与S2是不等价的，区别是：S1结构体能调用代理嵌入类型的所有方法，S2结构体是没有代理嵌入类型方法。","like_count":13,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540371,"discussion_content":"正确✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640050689,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":349460,"user_name":"13693113483","can_delete":false,"product_type":"c1","uid":1318913,"ip_address":"","ucode":"39CF3202F58847","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJwicoopV8ZJuxPQUfATepdg7zHQG1vpZpickQYicRN0u9qwibK2lq7MDpt0ZFdofnwshNcibkLdqk9ZRg/132","comment_is_top":false,"comment_ctime":1655977539,"is_pvip":false,"replies":[{"id":127204,"content":"两种本质上都是组合。第一种可以理解为一种“语法糖”，无需再在外层结构上重新定义方法并代理给内部字段。第二种从能力上讲和第一种没有本质区别，只是需要开发者自己在外层封一层方法，然后调用字段对应的方法。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1655981426,"ip_address":"","comment_id":349460,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"可不可以这样认为，直接 \nT1 \n*t2\n I \n我们可以理解为是继承，里面所有方法可以调用，然而：\nT1 T1\n t2 *t2\n I I\n这种是组合，如果想调用里面的方法要用 S2.I.M1()","like_count":7,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577239,"discussion_content":"两种本质上都是组合。第一种可以理解为一种“语法糖”，无需再在外层结构上重新定义方法并代理给内部字段。第二种从能力上讲和第一种没有本质区别，只是需要开发者自己在外层封一层方法，然后调用字段对应的方法。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1655981426,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":347295,"user_name":"Aeins","can_delete":false,"product_type":"c1","uid":1045910,"ip_address":"","ucode":"D5BF220767541D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/96/0cf9f3c7.jpg","comment_is_top":false,"comment_ctime":1653906335,"is_pvip":false,"replies":[{"id":126662,"content":"问题非常好！👍\n\n我们知道：一个类型的方法集合中的方法都可以被这个类型实例所调用。反过来说，只有能被类型实例直接调用的方法才能进入其方法集合。\n\n在你的例子中，SI12嵌入了I1和I2，这就造成了I1和I2的方法集合的交集M在SI12中存在了歧义。当使用SI12的实例调用M时，比如：\nvar s SI12\ns.M() &#47;&#47; go编译器会报错！不确定究竟是调用s.I1.M还是s.I2.M\n\n于是M因这种未决的歧义性而不能被列入SI12的方法集合中。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1654063420,"ip_address":"","comment_id":347295,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"结构体类型，两种不同方式嵌套接口类型。\n\n由于接口类型嵌套允许重名方法，I 接口有三个方法。SI 嵌套 I，SI 也有三个方法\n\n结构体嵌套不允许重名，M 方法，被自动隐藏了？，SI12嵌套 I1, I2,  SI12 只有两个方法\n\n\npackage main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;reflect&quot;\n)\n\ntype I1 interface {\n\tM()\n\tM1()\n}\n\ntype I2 interface {\n\tM()\n\tM2()\n}\n\ntype I interface {\n\tI1\n\tI2\n}\n\ntype SI struct {\n\tI\n}\n\ntype SI12 struct {\n\tI1\n\tI2\n}\n\nfunc main() {\n\tvar si SI\n\tvar si12 SI12\n\tDumpMethodSet(si)\n\tDumpMethodSet(si12)\n}\n\nfunc DumpMethodSet(i interface{}) {\n\tdynTyp := reflect.TypeOf(i)\n\n\tif dynTyp == nil {\n\t\tfmt.Printf(&quot;there is no dynamic type\\n&quot;)\n\t\treturn\n\t}\n\n\tn := dynTyp.NumMethod()\n\tif n == 0 {\n\t\tfmt.Printf(&quot;%s&#39;s method set is empty!\\n&quot;, dynTyp)\n\t\treturn\n\t}\n\n\tfmt.Printf(&quot;%s&#39;s method set:\\n&quot;, dynTyp)\n\tfor j := 0; j &lt; n; j++ {\n\t\tfmt.Println(&quot;-&quot;, dynTyp.Method(j).Name)\n\t}\n\tfmt.Printf(&quot;\\n&quot;)\n}\n\n\n============\nmain.SI&#39;s method set:\n- M\n- M1\n- M2\n\nmain.SI12&#39;s method set:\n- M1\n- M2","like_count":6,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574434,"discussion_content":"问题非常好！👍\n\n我们知道：一个类型的方法集合中的方法都可以被这个类型实例所调用。反过来说，只有能被类型实例直接调用的方法才能进入其方法集合。\n\n在你的例子中，SI12嵌入了I1和I2，这就造成了I1和I2的方法集合的交集M在SI12中存在了歧义。当使用SI12的实例调用M时，比如：\nvar s SI12\ns.M() // go编译器会报错！不确定究竟是调用s.I1.M还是s.I2.M\n\n于是M因这种未决的歧义性而不能被列入SI12的方法集合中。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654063420,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1282639,"avatar":"https://static001.geekbang.org/account/avatar/00/13/92/4f/ff04156a.jpg","nickname":"天天向上","note":"","ucode":"D0914D4FD82272","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586435,"discussion_content":"白老师解答很透彻。贴个s.M()编译器报错内容：Ambiguous reference &#39;M&#39;","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662211696,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":354955,"user_name":"菠萝吹雪—Code","can_delete":false,"product_type":"c1","uid":1650378,"ip_address":"北京","ucode":"A5B2FC661EE17D","user_header":"https://static001.geekbang.org/account/avatar/00/19/2e/ca/469f7266.jpg","comment_is_top":false,"comment_ctime":1660904969,"is_pvip":false,"replies":[{"id":129244,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1661217277,"ip_address":"北京","comment_id":354955,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"这篇真干，赞，需要多看几遍","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584905,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661217278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326093,"user_name":"Geek_99b47c","can_delete":false,"product_type":"c1","uid":2049562,"ip_address":"","ucode":"D25E22C1D84E09","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/aQmhiahazRFUA4W3r1hdxxreSB5Pl54IwAJ8bwN6j02lzicydWAfPFbWx1LSFtzXH8MkI0jUKjlpUtmQBoZ4kReA/132","comment_is_top":false,"comment_ctime":1639375418,"is_pvip":false,"replies":[{"id":119073,"content":"建议再重新学习一下25讲与26讲。只有自己理解后，知识才是自己的。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1640050759,"ip_address":"","comment_id":326093,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"S1&#39;s method set total 1, detail method :\n-- M1\nS2&#39;s method set is empty \n这是为啥啊","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584905,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661217278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":372147,"user_name":"不求闻达","can_delete":false,"product_type":"c1","uid":1629565,"ip_address":"上海","ucode":"B265859B9566D5","user_header":"https://static001.geekbang.org/account/avatar/00/18/dd/7d/5d3ab033.jpg","comment_is_top":false,"comment_ctime":1680779925,"is_pvip":false,"replies":[{"id":135831,"content":"正确✅👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1680835604,"ip_address":"北京","comment_id":372147,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"不等价，S2 不是嵌入的是defined 类型。defined 类型创建的新 defined 类型不会继承原类型的方法集合","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540373,"discussion_content":"建议再重新学习一下25讲与26讲。只有自己理解后，知识才是自己的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640050759,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538710,"discussion_content":"同学这是你哪段代码运行的问题呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639490804,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":340598,"user_name":"Fan()","can_delete":false,"product_type":"c1","uid":1069127,"ip_address":"","ucode":"FED79EC7D78E91","user_header":"https://static001.geekbang.org/account/avatar/00/10/50/47/46da4585.jpg","comment_is_top":false,"comment_ctime":1648965572,"is_pvip":false,"replies":[{"id":124593,"content":"这个没有什么原理可讲，Go语言就是这么规定的:)。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1649120842,"ip_address":"","comment_id":340598,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"类型 *T 的方法集合 = *T1 的方法集合 + *T2 的方法集合\n对这个不太理解... 有点懵逼. 这个原理能细讲一下吗?","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":612658,"discussion_content":"正确✅👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1680835604,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327237,"user_name":"Calvin","can_delete":false,"product_type":"c1","uid":1603004,"ip_address":"","ucode":"0EEF5B207623B5","user_header":"https://static001.geekbang.org/account/avatar/00/18/75/bc/89d88775.jpg","comment_is_top":false,"comment_ctime":1640000125,"is_pvip":false,"replies":[{"id":119053,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1640036836,"ip_address":"","comment_id":327237,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"不等价，dumpMethodSet 结果就不一样：\n\nS1&#39;s method set:\n- M1\n\n*S1&#39;s method set:\n- M1\n\nS2&#39;s method set is empty!\n*S2&#39;s method set is empty!","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560007,"discussion_content":"这个没有什么原理可讲，Go语言就是这么规定的:)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649120842,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326388,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1639491800,"is_pvip":false,"replies":[{"id":119099,"content":"*main.T其实也是一种指针类型，还是等我的加餐吧:(。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1640056837,"ip_address":"","comment_id":326388,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"Tony bai 老师，我看打印出的方法集合中都有类似这样的输出：*main.T&#39;s 。后面会讲解一下这种语法输出吗？\n\n对于课后问题，我觉得用一下老师的 dumpMethodSet 函数 就能很容易看出区别了。\n\npackage main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;reflect&quot;\n)\n\ntype T1 int\n\ntype t2 struct{\n\tn int\n\tm int\n}\n\ntype I interface {\n\tM1()\n}\n\ntype S1 struct {\n\tT1\n\t*t2\n\tI\n\ta int\n\tb string\n}\n\ntype S2 struct {\n\tT1 T1\n\tt2 *t2\n\tI  I\n\ta  int\n\tb  string\n}\n\nfunc main() {\n\tvar s1 S1\n\tvar ps1 *S1\n\tvar s2 S2\n\tvar ps2 *S2\n\n\tdumpMethodSet(s1)\n\tdumpMethodSet(ps1)\n\n\tdumpMethodSet(s2)\n\tdumpMethodSet(ps2)\n}\n\nfunc dumpMethodSet(i interface{}) {\n\tdynTyp := reflect.TypeOf(i)\n\n\tif dynTyp == nil {\n\t\tfmt.Printf(&quot;there is no dynamic type\\n&quot;)\n\t\treturn\n\t}\n\n\tn := dynTyp.NumMethod()\n\tif n == 0 {\n\t\tfmt.Printf(&quot;%s&#39;s method set is empty!\\n&quot;, dynTyp)\n\t\treturn\n\t}\n\n\tfmt.Printf(&quot;%s&#39;s method set:\\n&quot;, dynTyp)\n\tfor j := 0; j &lt; n; j++ {\n\t\tfmt.Println(&quot;-&quot;, dynTyp.Method(j).Name)\n\t}\n\tfmt.Printf(&quot;\\n&quot;)\n}\n","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540339,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640036836,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":375977,"user_name":"111","can_delete":false,"product_type":"c1","uid":2046189,"ip_address":"北京","ucode":"7ACA555BDC139B","user_header":"","comment_is_top":false,"comment_ctime":1686198683,"is_pvip":false,"replies":[{"id":137204,"content":"正确✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1686511991,"ip_address":"辽宁","comment_id":375977,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"嵌入与正常书写字段的区别就是是否有对应的方法集合","like_count":1},{"had_liked":false,"id":360653,"user_name":"Unknown element","can_delete":false,"product_type":"c1","uid":2028277,"ip_address":"北京","ucode":"34A129800D0238","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f2/f5/b82f410d.jpg","comment_is_top":false,"comment_ctime":1666716420,"is_pvip":false,"replies":[{"id":131257,"content":"专栏里应该说过，之所以能调用是因为这是go语法糖，即go编译器会自动帮你将w.Lock()和w.Unlock转换为(&amp;w).Lock()和(&amp;w).Unlock()","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1666834697,"ip_address":"北京","comment_id":360653,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"老师我想请教一个问题，我定义了如下结构体：\n\ntype mystruct struct {\n\tsync.Mutex\n}\n\n想给mystruct增加Lock和Unlock方法，但是Lock和Unlock都是绑定在*sync.Mutex上的，所以按课程中结构体嵌入结构体部分的结论，mystruct类型的实例的方法集合里应该没有Lock和Unlock方法（*mystruct才有），我用课程中的dumpMethodSet函数试了确实是这样：\n\nfunc main() {\n\tvar w mystruct\n\tdumpMethodSet(w)\n\tfmt.Println(&quot;============&quot;)\n\tdumpMethodSet(&amp;w)\n\tw.Lock()\n\tw.Unlock()\n}\n&#47;&#47; 输出：\nmain.mystruct&#39;s method set is empty!\n============\n*main.mystruct&#39;s method set:\n- Lock\n- Unlock\n\n可以看到mystruct类型的变量的方法集合确实是空的，但是代码中却可以调用Lock及Unlock方法，我想问下这是为什么呢？谢谢老师","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":620752,"discussion_content":"正确✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1686511991,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350308,"user_name":"Geek_a6104e","can_delete":false,"product_type":"c1","uid":1711967,"ip_address":"","ucode":"29A56792216DC8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/GJXKh8OG00U5ial64plAIibbIuwkzhPc8uYic9Hibl8SbqvhnS2JImHgCD4JGvTktiaVnCjHQWbA5wicaxRUN5aTEWnQ/132","comment_is_top":false,"comment_ctime":1656776160,"is_pvip":false,"replies":[{"id":127491,"content":"由于fakeStmtForMaleCount类型中嵌入了 Stmt 接口类型，所以fakeStmtForMaleCount的方法集合中包含了Stmt接口的所有方法。因此实现了接口Stmt。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1656941593,"ip_address":"","comment_id":350308,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"func TestEmployeeMaleCount(t *testing.T) {    f := fakeStmtForMaleCount{}    c, _ := MaleCount(f)    if c != 5 {        t.Errorf(&quot;want: %d, actual: %d&quot;, 5, c)        return    }\nc, _ := MaleCount(f) 中f是fakeStmtForMaleCount类型的 但是fakeStmtForMaleCount并没有实现Stmt接口中的方法，请问为什么MaleCount形参s Stmt能接收它呢？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578681,"discussion_content":"由于fakeStmtForMaleCount类型中嵌入了 Stmt 接口类型，所以fakeStmtForMaleCount的方法集合中包含了Stmt接口的所有方法。因此实现了接口Stmt。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656941593,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":338235,"user_name":"pyhhou","can_delete":false,"product_type":"c1","uid":1256496,"ip_address":"","ucode":"31EF8D50CF91A5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibZVAmmdAibBeVpUjzwId8ibgRzNk7fkuR5pgVicB5mFSjjmt2eNadlykVLKCyGA0GxGffbhqLsHnhDRgyzxcKUhjg/132","comment_is_top":false,"comment_ctime":1647387349,"is_pvip":false,"replies":[{"id":123645,"content":"S1虽然嵌套*t2，“继承”了*t2的方法，但S1实例初始化时也要给其内部嵌套的*t2赋初值才行，否则就是一个空指针。当s1实例调用方法M时，M方法被传递给*t2字段，但此时该字段是nil，就肯定会panic。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1647401614,"ip_address":"","comment_id":338235,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"S1 嵌套了 *t2 和 I，所以可以直接通过 S1 的实例来获取对应的方法 M 以及 n 和 m。而 S2 是普通的 field:value 写法，因此也就没有办法实现我们说的 &quot;继承&quot;（代理）\n\n关于 *t2，我试了一下：\n\nfunc main() {\n        var s1 S1\n        var s2 S2\n        fmt.Println(s1.n)\n        fmt.Println(s2.t2.n)\n}\n\n上面的代码会报空指针的错误，但把其中的类型 *t2 改为 t2 后就可以正常输出 n 的零值（0）\n个人理解是对于 *t2 这种指针类型，Go 中给的零值是 nil 而不是零值可用的结构体，这点有别于 t2。是不是说以后我们在做类似嵌套或组合的时候，得特别小心指针类型，毕竟它们并不是零值可用的，对使用者容易造成不必要的干扰和困惑？还望老师解答 🙏","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578681,"discussion_content":"由于fakeStmtForMaleCount类型中嵌入了 Stmt 接口类型，所以fakeStmtForMaleCount的方法集合中包含了Stmt接口的所有方法。因此实现了接口Stmt。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656941593,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335949,"user_name":"尘曦。","can_delete":false,"product_type":"c1","uid":1689344,"ip_address":"","ucode":"8EB13CA7560FDF","user_header":"https://static001.geekbang.org/account/avatar/00/19/c7/00/fc131268.jpg","comment_is_top":false,"comment_ctime":1645784372,"is_pvip":false,"replies":[{"id":122776,"content":"声明一个新类型，新类型为Rows，它的底层类型为一个空结构体切片类型。空结构体类型是struct{}。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1645837717,"ip_address":"","comment_id":335949,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"请教一下老师，这个是什么意思呢\n\ntype Rows []struct{}","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556495,"discussion_content":"S1虽然嵌套*t2，“继承”了*t2的方法，但S1实例初始化时也要给其内部嵌套的*t2赋初值才行，否则就是一个空指针。当s1实例调用方法M时，M方法被传递给*t2字段，但此时该字段是nil，就肯定会panic。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647401614,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329286,"user_name":"羊羊","can_delete":false,"product_type":"c1","uid":1162597,"ip_address":"","ucode":"B220CE8D1CA5DA","user_header":"https://static001.geekbang.org/account/avatar/00/11/bd/65/fbdf4fc1.jpg","comment_is_top":false,"comment_ctime":1641267871,"is_pvip":false,"replies":[{"id":120462,"content":"下面是一个简单例子：\npackage main\n\ntype Interface interface {\n\tM1()\n\tM2()\n}\n\ntype Interface1 Interface\n\ntype T struct{}\n\nfunc (T) M1() {}\nfunc (T) M2() {}\n\nfunc main() {\n\tvar t T\n\tvar i1 Interface1\n\ti1 = t\n\ti1.M1()\n\ti1.M2()\n}","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1642028628,"ip_address":"","comment_id":329286,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"对于那些基于接口类型创建的 defined 的接口类型，它们的方法集合与原接口类型的方法集合是一致的。这个知识点，麻烦老师能给个代码例子么？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553299,"discussion_content":"声明一个新类型，新类型为Rows，它的底层类型为一个空结构体切片类型。空结构体类型是struct{}。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645837717,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328406,"user_name":"和白白","can_delete":false,"product_type":"c1","uid":1234879,"ip_address":"","ucode":"A4666D3AF30D6E","user_header":"https://static001.geekbang.org/account/avatar/00/12/d7/bf/a200e7a7.jpg","comment_is_top":false,"comment_ctime":1640706337,"is_pvip":false,"replies":[{"id":120418,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1641996461,"ip_address":"","comment_id":328406,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"嵌入的可以直接用代理嵌入类型的所有方法","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545654,"discussion_content":"下面是一个简单例子：\npackage main\n\ntype Interface interface {\n\tM1()\n\tM2()\n}\n\ntype Interface1 Interface\n\ntype T struct{}\n\nfunc (T) M1() {}\nfunc (T) M2() {}\n\nfunc main() {\n\tvar t T\n\tvar i1 Interface1\n\ti1 = t\n\ti1.M1()\n\ti1.M2()\n}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642028628,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1590695,"avatar":"https://static001.geekbang.org/account/avatar/00/18/45/a7/da9b2d2b.jpg","nickname":"百炼钢","note":"","ucode":"71A20C3C0B2978","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":607697,"discussion_content":"将老师的代码修改了下，感觉好理解（阅读）一点；\n\n···\npackage main\n\ntype Interface interface {\n\tM1()\n\tM2()\n}\n\ntype T Interface\n\ntype S struct{}\n\nfunc (S) M1() {}\nfunc (S) M2() {}\n\nfunc main() {\n\tvar i1 T\n\tvar s S\n\ti1 = s\n\ti1.M1()\n\ti1.M2()\n}\n···","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1678093270,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326392,"user_name":"tequ1lAneio","can_delete":false,"product_type":"c1","uid":1936087,"ip_address":"","ucode":"41336E87FF2E1A","user_header":"https://static001.geekbang.org/account/avatar/00/1d/8a/d7/daabec34.jpg","comment_is_top":false,"comment_ctime":1639492947,"is_pvip":false,"replies":[{"id":119113,"content":"这是一点，还有一点是t2字段的不同，继续分析一下。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1640061008,"ip_address":"","comment_id":326392,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"&gt; 结构体类型的方法集合包含嵌入的接口类型的方法集合\nS1嵌入了接口I的方法集合，S1的方法集合中出现了M1，相当于实现了M1。\nS2并没有嵌入接口I，所以S2的方法集合中没有接口中定义的M1。","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545570,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641996461,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326158,"user_name":"进化菌","can_delete":false,"product_type":"c1","uid":1276861,"ip_address":"","ucode":"B30A5F78BB4171","user_header":"https://static001.geekbang.org/account/avatar/00/13/7b/bd/ccb37425.jpg","comment_is_top":false,"comment_ctime":1639400329,"is_pvip":true,"replies":[{"id":119069,"content":"从是否带类型嵌入的角度再考虑一下。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1640050644,"ip_address":"","comment_id":326158,"utype":1}],"discussion_count":3,"race_medal":4,"score":3,"product_id":100093501,"comment_content":"区别应该是 t2 有没有 * 吧，S2 的 t2.m 或 t2.n 没有取地址？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540369,"discussion_content":"从是否带类型嵌入的角度再考虑一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640050644,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538714,"discussion_content":"不是，这里考察的其实是方法集合的并入问题。可以用老师的dumpMethodSet 函数分别打印一下这两个类型的实例方法集合看看。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639491386,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1276861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/7b/bd/ccb37425.jpg","nickname":"进化菌","note":"","ucode":"B30A5F78BB4171","race_medal":4,"user_type":1,"is_pvip":true},"reply_author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538874,"discussion_content":"好的呢，谢谢你~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639544616,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":538714,"ip_address":"","group_id":0},"score":538874,"extra":""}]}]},{"had_liked":false,"id":326113,"user_name":"扣剑书生","can_delete":false,"product_type":"c1","uid":2855599,"ip_address":"","ucode":"6F5FD189D2916C","user_header":"https://static001.geekbang.org/account/avatar/00/2b/92/af/ad02ae4b.jpg","comment_is_top":false,"comment_ctime":1639383672,"is_pvip":false,"replies":[{"id":119072,"content":"正确✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1640050701,"ip_address":"","comment_id":326113,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"S2的方法集合肯定没有 M1()，没有继承","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540369,"discussion_content":"从是否带类型嵌入的角度再考虑一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640050644,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538714,"discussion_content":"不是，这里考察的其实是方法集合的并入问题。可以用老师的dumpMethodSet 函数分别打印一下这两个类型的实例方法集合看看。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639491386,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1276861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/7b/bd/ccb37425.jpg","nickname":"进化菌","note":"","ucode":"B30A5F78BB4171","race_medal":4,"user_type":1,"is_pvip":true},"reply_author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538874,"discussion_content":"好的呢，谢谢你~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639544616,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":538714,"ip_address":"","group_id":0},"score":538874,"extra":""}]}]},{"had_liked":false,"id":375977,"user_name":"111","can_delete":false,"product_type":"c1","uid":2046189,"ip_address":"北京","ucode":"7ACA555BDC139B","user_header":"","comment_is_top":false,"comment_ctime":1686198683,"is_pvip":false,"replies":[{"id":137204,"content":"正确✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1686511991,"ip_address":"辽宁","comment_id":375977,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"嵌入与正常书写字段的区别就是是否有对应的方法集合","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":620752,"discussion_content":"正确✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1686511991,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360653,"user_name":"Unknown element","can_delete":false,"product_type":"c1","uid":2028277,"ip_address":"北京","ucode":"34A129800D0238","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f2/f5/b82f410d.jpg","comment_is_top":false,"comment_ctime":1666716420,"is_pvip":false,"replies":[{"id":131257,"content":"专栏里应该说过，之所以能调用是因为这是go语法糖，即go编译器会自动帮你将w.Lock()和w.Unlock转换为(&amp;w).Lock()和(&amp;w).Unlock()","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1666834697,"ip_address":"北京","comment_id":360653,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"老师我想请教一个问题，我定义了如下结构体：\n\ntype mystruct struct {\n\tsync.Mutex\n}\n\n想给mystruct增加Lock和Unlock方法，但是Lock和Unlock都是绑定在*sync.Mutex上的，所以按课程中结构体嵌入结构体部分的结论，mystruct类型的实例的方法集合里应该没有Lock和Unlock方法（*mystruct才有），我用课程中的dumpMethodSet函数试了确实是这样：\n\nfunc main() {\n\tvar w mystruct\n\tdumpMethodSet(w)\n\tfmt.Println(&quot;============&quot;)\n\tdumpMethodSet(&amp;w)\n\tw.Lock()\n\tw.Unlock()\n}\n&#47;&#47; 输出：\nmain.mystruct&#39;s method set is empty!\n============\n*main.mystruct&#39;s method set:\n- Lock\n- Unlock\n\n可以看到mystruct类型的变量的方法集合确实是空的，但是代码中却可以调用Lock及Unlock方法，我想问下这是为什么呢？谢谢老师","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591806,"discussion_content":"专栏里应该说过，之所以能调用是因为这是go语法糖，即go编译器会自动帮你将w.Lock()和w.Unlock转换为(&amp;w).Lock()和(&amp;w).Unlock()","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666834697,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350308,"user_name":"Geek_a6104e","can_delete":false,"product_type":"c1","uid":1711967,"ip_address":"","ucode":"29A56792216DC8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/GJXKh8OG00U5ial64plAIibbIuwkzhPc8uYic9Hibl8SbqvhnS2JImHgCD4JGvTktiaVnCjHQWbA5wicaxRUN5aTEWnQ/132","comment_is_top":false,"comment_ctime":1656776160,"is_pvip":false,"replies":[{"id":127491,"content":"由于fakeStmtForMaleCount类型中嵌入了 Stmt 接口类型，所以fakeStmtForMaleCount的方法集合中包含了Stmt接口的所有方法。因此实现了接口Stmt。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1656941593,"ip_address":"","comment_id":350308,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"func TestEmployeeMaleCount(t *testing.T) {    f := fakeStmtForMaleCount{}    c, _ := MaleCount(f)    if c != 5 {        t.Errorf(&quot;want: %d, actual: %d&quot;, 5, c)        return    }\nc, _ := MaleCount(f) 中f是fakeStmtForMaleCount类型的 但是fakeStmtForMaleCount并没有实现Stmt接口中的方法，请问为什么MaleCount形参s Stmt能接收它呢？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591806,"discussion_content":"专栏里应该说过，之所以能调用是因为这是go语法糖，即go编译器会自动帮你将w.Lock()和w.Unlock转换为(&amp;w).Lock()和(&amp;w).Unlock()","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666834697,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":338235,"user_name":"pyhhou","can_delete":false,"product_type":"c1","uid":1256496,"ip_address":"","ucode":"31EF8D50CF91A5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibZVAmmdAibBeVpUjzwId8ibgRzNk7fkuR5pgVicB5mFSjjmt2eNadlykVLKCyGA0GxGffbhqLsHnhDRgyzxcKUhjg/132","comment_is_top":false,"comment_ctime":1647387349,"is_pvip":false,"replies":[{"id":123645,"content":"S1虽然嵌套*t2，“继承”了*t2的方法，但S1实例初始化时也要给其内部嵌套的*t2赋初值才行，否则就是一个空指针。当s1实例调用方法M时，M方法被传递给*t2字段，但此时该字段是nil，就肯定会panic。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1647401614,"ip_address":"","comment_id":338235,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"S1 嵌套了 *t2 和 I，所以可以直接通过 S1 的实例来获取对应的方法 M 以及 n 和 m。而 S2 是普通的 field:value 写法，因此也就没有办法实现我们说的 &quot;继承&quot;（代理）\n\n关于 *t2，我试了一下：\n\nfunc main() {\n        var s1 S1\n        var s2 S2\n        fmt.Println(s1.n)\n        fmt.Println(s2.t2.n)\n}\n\n上面的代码会报空指针的错误，但把其中的类型 *t2 改为 t2 后就可以正常输出 n 的零值（0）\n个人理解是对于 *t2 这种指针类型，Go 中给的零值是 nil 而不是零值可用的结构体，这点有别于 t2。是不是说以后我们在做类似嵌套或组合的时候，得特别小心指针类型，毕竟它们并不是零值可用的，对使用者容易造成不必要的干扰和困惑？还望老师解答 🙏","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556495,"discussion_content":"S1虽然嵌套*t2，“继承”了*t2的方法，但S1实例初始化时也要给其内部嵌套的*t2赋初值才行，否则就是一个空指针。当s1实例调用方法M时，M方法被传递给*t2字段，但此时该字段是nil，就肯定会panic。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647401614,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335949,"user_name":"尘曦。","can_delete":false,"product_type":"c1","uid":1689344,"ip_address":"","ucode":"8EB13CA7560FDF","user_header":"https://static001.geekbang.org/account/avatar/00/19/c7/00/fc131268.jpg","comment_is_top":false,"comment_ctime":1645784372,"is_pvip":false,"replies":[{"id":122776,"content":"声明一个新类型，新类型为Rows，它的底层类型为一个空结构体切片类型。空结构体类型是struct{}。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1645837717,"ip_address":"","comment_id":335949,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"请教一下老师，这个是什么意思呢\n\ntype Rows []struct{}","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553299,"discussion_content":"声明一个新类型，新类型为Rows，它的底层类型为一个空结构体切片类型。空结构体类型是struct{}。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645837717,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329286,"user_name":"羊羊","can_delete":false,"product_type":"c1","uid":1162597,"ip_address":"","ucode":"B220CE8D1CA5DA","user_header":"https://static001.geekbang.org/account/avatar/00/11/bd/65/fbdf4fc1.jpg","comment_is_top":false,"comment_ctime":1641267871,"is_pvip":false,"replies":[{"id":120462,"content":"下面是一个简单例子：\npackage main\n\ntype Interface interface {\n\tM1()\n\tM2()\n}\n\ntype Interface1 Interface\n\ntype T struct{}\n\nfunc (T) M1() {}\nfunc (T) M2() {}\n\nfunc main() {\n\tvar t T\n\tvar i1 Interface1\n\ti1 = t\n\ti1.M1()\n\ti1.M2()\n}","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1642028628,"ip_address":"","comment_id":329286,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"对于那些基于接口类型创建的 defined 的接口类型，它们的方法集合与原接口类型的方法集合是一致的。这个知识点，麻烦老师能给个代码例子么？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545654,"discussion_content":"下面是一个简单例子：\npackage main\n\ntype Interface interface {\n\tM1()\n\tM2()\n}\n\ntype Interface1 Interface\n\ntype T struct{}\n\nfunc (T) M1() {}\nfunc (T) M2() {}\n\nfunc main() {\n\tvar t T\n\tvar i1 Interface1\n\ti1 = t\n\ti1.M1()\n\ti1.M2()\n}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642028628,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1590695,"avatar":"https://static001.geekbang.org/account/avatar/00/18/45/a7/da9b2d2b.jpg","nickname":"百炼钢","note":"","ucode":"71A20C3C0B2978","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":607697,"discussion_content":"将老师的代码修改了下，感觉好理解（阅读）一点；\n\n···\npackage main\n\ntype Interface interface {\n\tM1()\n\tM2()\n}\n\ntype T Interface\n\ntype S struct{}\n\nfunc (S) M1() {}\nfunc (S) M2() {}\n\nfunc main() {\n\tvar i1 T\n\tvar s S\n\ti1 = s\n\ti1.M1()\n\ti1.M2()\n}\n···","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1678093270,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328406,"user_name":"和白白","can_delete":false,"product_type":"c1","uid":1234879,"ip_address":"","ucode":"A4666D3AF30D6E","user_header":"https://static001.geekbang.org/account/avatar/00/12/d7/bf/a200e7a7.jpg","comment_is_top":false,"comment_ctime":1640706337,"is_pvip":false,"replies":[{"id":120418,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1641996461,"ip_address":"","comment_id":328406,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"嵌入的可以直接用代理嵌入类型的所有方法","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545570,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641996461,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326392,"user_name":"tequ1lAneio","can_delete":false,"product_type":"c1","uid":1936087,"ip_address":"","ucode":"41336E87FF2E1A","user_header":"https://static001.geekbang.org/account/avatar/00/1d/8a/d7/daabec34.jpg","comment_is_top":false,"comment_ctime":1639492947,"is_pvip":false,"replies":[{"id":119113,"content":"这是一点，还有一点是t2字段的不同，继续分析一下。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1640061008,"ip_address":"","comment_id":326392,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"&gt; 结构体类型的方法集合包含嵌入的接口类型的方法集合\nS1嵌入了接口I的方法集合，S1的方法集合中出现了M1，相当于实现了M1。\nS2并没有嵌入接口I，所以S2的方法集合中没有接口中定义的M1。","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540463,"discussion_content":"这是一点，还有一点是t2字段的不同，继续分析一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640061008,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326158,"user_name":"进化菌","can_delete":false,"product_type":"c1","uid":1276861,"ip_address":"","ucode":"B30A5F78BB4171","user_header":"https://static001.geekbang.org/account/avatar/00/13/7b/bd/ccb37425.jpg","comment_is_top":false,"comment_ctime":1639400329,"is_pvip":true,"replies":[{"id":119069,"content":"从是否带类型嵌入的角度再考虑一下。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1640050644,"ip_address":"","comment_id":326158,"utype":1}],"discussion_count":3,"race_medal":4,"score":3,"product_id":100093501,"comment_content":"区别应该是 t2 有没有 * 吧，S2 的 t2.m 或 t2.n 没有取地址？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540463,"discussion_content":"这是一点，还有一点是t2字段的不同，继续分析一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640061008,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326113,"user_name":"扣剑书生","can_delete":false,"product_type":"c1","uid":2855599,"ip_address":"","ucode":"6F5FD189D2916C","user_header":"https://static001.geekbang.org/account/avatar/00/2b/92/af/ad02ae4b.jpg","comment_is_top":false,"comment_ctime":1639383672,"is_pvip":false,"replies":[{"id":119072,"content":"正确✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1640050701,"ip_address":"","comment_id":326113,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"S2的方法集合肯定没有 M1()，没有继承","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540372,"discussion_content":"正确✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640050701,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326076,"user_name":"功夫熊猫","can_delete":false,"product_type":"c1","uid":2732243,"ip_address":"","ucode":"D124F4FA4E816F","user_header":"https://static001.geekbang.org/account/avatar/00/29/b0/d3/200e82ff.jpg","comment_is_top":false,"comment_ctime":1639365772,"is_pvip":false,"replies":[{"id":119074,"content":"前者T1是T的类型别名，T1与T完全等价；后者T1是一个新的defined类型。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1640050800,"ip_address":"","comment_id":326076,"utype":1}],"discussion_count":5,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"type T1＝T和type T1 T两个语法有什么区别吗？","like_count":1},{"had_liked":false,"id":385125,"user_name":"dot","can_delete":false,"product_type":"c1","uid":2933059,"ip_address":"江苏","ucode":"CBA368D57DC45A","user_header":"https://static001.geekbang.org/account/avatar/00/2c/c1/43/1baa940d.jpg","comment_is_top":false,"comment_ctime":1702120769,"is_pvip":false,"replies":[{"id":140409,"content":"我的理解：由于*T类型后，其内嵌的T1会变为addressable的，也就是说通过接口也可以修改T1的状态了，相当于内嵌了一个*T1，所以*T1的方法集合也被纳入到*T的方法集合中。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1702293872,"ip_address":"北京","comment_id":385125,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"这里不太明白。*T 的方法集合包含 *T的方法和T的方法是Go语言规定可以理解。这里T类型里内嵌的是T1和*T2，T类型的方法集合就是T1的方法集合+*T2的方法集合，这点也可以理解。T类型内嵌的是T1，为什么*T的方法集合却变成了*T1+*T2 呢，不太明白？\n\nfunc main() {\n   t := T{\n   T1: T1{}, \n   T2: &amp;T2{}, \n  } \ndumpMethodSet(t) \ndumpMethodSet(&amp;t)\n}\n","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633545,"discussion_content":"我的理解：由于*T类型后，其内嵌的T1会变为addressable的，也就是说通过接口也可以修改T1的状态了，相当于内嵌了一个*T1，所以*T1的方法集合也被纳入到*T的方法集合中。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1702293873,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382775,"user_name":"爱吃胡萝卜","can_delete":false,"product_type":"c1","uid":1459413,"ip_address":"中国香港","ucode":"35FCF84D1E04C5","user_header":"https://static001.geekbang.org/account/avatar/00/16/44/d5/ca522e83.jpg","comment_is_top":false,"comment_ctime":1698042413,"is_pvip":false,"replies":[{"id":139398,"content":"swift这门语言我不熟悉哈。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1698068342,"ip_address":"辽宁","comment_id":382775,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"简单用swift伪代码重写一下这段代码，老师看下是否理解正确\n```go\ntype MyInt int\n\nfunc (n *MyInt) Add(m int) {\n    *n = *n + MyInt(m)\n}\n\ntype t struct {\n    a int\n    b int\n}\n\ntype S struct {\n    *MyInt\n    t\n    io.Reader\n    s string\n    n int\n}\n```\n\n\n```swift\n\nstruct s {\n    ... 声明变量\n    &#47;*\n        *MyInt\n    t\n    io.Reader\n    s string\n    n int\n    *&#47;\n}\n\n\nextension s: MyInt {\n    func add(_ m: Int) {\n        MyInt.add(m)\n    }\n}\n\nextension s: t {\n    func getA() -&gt; Int {\n        return t.a\n    }\n\n    func setA(_ value: Int) {\n        t.a = value\n    }\n\n    ...\n   \n}\n\nextension: io.Reader {\n    func reader() {\n        Reader.reader()\n    }\n}\n\n\n```","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633545,"discussion_content":"我的理解：由于*T类型后，其内嵌的T1会变为addressable的，也就是说通过接口也可以修改T1的状态了，相当于内嵌了一个*T1，所以*T1的方法集合也被纳入到*T的方法集合中。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1702293873,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382134,"user_name":"六道","can_delete":false,"product_type":"c1","uid":1978135,"ip_address":"上海","ucode":"079D3C131949F3","user_header":"https://static001.geekbang.org/account/avatar/00/1e/2f/17/970b5861.jpg","comment_is_top":false,"comment_ctime":1696755634,"is_pvip":false,"replies":[{"id":139209,"content":"✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1696892426,"ip_address":"辽宁","comment_id":382134,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"思考题 不等价\nS1中T1，t2，I常规嵌入，继承原类型、原接口的方法集合\nS2中T1 T1，t2 *t2，I  I相当于defined 类型，不会继承原类型，原接口的方法集合","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":629252,"discussion_content":"✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1696892426,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":380689,"user_name":"极客土豆","can_delete":false,"product_type":"c1","uid":1179126,"ip_address":"江苏","ucode":"CE48C42B8CBE17","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoOFQ3PxxaIRbdp5o3pNxwyrBl2lyK4Il08cF4ZvXpeAhP5WJA0Rw482WibqweYBnviaX8SdO5Bak8g/132","comment_is_top":false,"comment_ctime":1693992948,"is_pvip":false,"replies":[{"id":138624,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1694180870,"ip_address":"辽宁","comment_id":380689,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"好像Ruby中的mixin，还有alias","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":627474,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1694180870,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":380002,"user_name":"__PlasticMan","can_delete":false,"product_type":"c1","uid":1676074,"ip_address":"四川","ucode":"329D3E71E613F0","user_header":"https://static001.geekbang.org/account/avatar/00/19/93/2a/08675e68.jpg","comment_is_top":false,"comment_ctime":1692804905,"is_pvip":false,"replies":[{"id":138414,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1692914372,"ip_address":"美国","comment_id":380002,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"看了其他项目的源码和uber的go规范之后有点感想，类型嵌入是go提供的语法特性，是继承和接口的折衷，但是只有正确地使用这种特性才能避免为程序引入额外地问题，比如泄露实现细节和扩展性不足，请参考[避免在公共结构中嵌入类型](https:&#47;&#47;github.com&#47;xxjwxc&#47;uber_go_guide_cn#%E9%81%BF%E5%85%8D%E5%9C%A8%E5%85%AC%E5%85%B1%E7%BB%93%E6%9E%84%E4%B8%AD%E5%B5%8C%E5%85%A5%E7%B1%BB%E5%9E%8B)","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":627474,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1694180870,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":376538,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"广东","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1686903643,"is_pvip":false,"replies":[{"id":137268,"content":"1. Add是*MyInt的方法，这里的实现就是实现一个加法啊。由于go不支持隐式转型，所以将m通过MyInt(m)转换为MyInt类型后与*n相加。\n2. Go社区有人提出：即便多个接口拥有同名方法，当嵌入到一个接口类型中时，也应该是合法的。Go团队讨论后，觉得靠谱，就同意了。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1686925152,"ip_address":"辽宁","comment_id":376538,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"Tony bai 老师，有两个小问题：\n\n1.文中的这句代码  *n = *n + MyInt(m) 没太理解，这个右边的 *n 也是解引用吧？ 也就是这句 代码等于 ：17 = 17 +5 。到底怎么理解这句代码呢？\n\n2. 接口之间的嵌入，允许同名方法的存在，是出于什么目的呢？","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":626431,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1692914372,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"美国","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326406,"user_name":"不负青春不负己🤘","can_delete":false,"product_type":"c1","uid":1363671,"ip_address":"","ucode":"A6DD8E8B20EA6E","user_header":"https://static001.geekbang.org/account/avatar/00/14/ce/d7/5315f6ce.jpg","comment_is_top":false,"comment_ctime":1639498455,"is_pvip":false,"replies":[{"id":119112,"content":"嗯，这是一点。还有一点是t2字段的不同，继续分析。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1640060969,"ip_address":"","comment_id":326406,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"S1 符合预期继承了I接口的M1方法,而S2去没有 ","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":621215,"discussion_content":"1. Add是*MyInt的方法，这里的实现就是实现一个加法啊。由于go不支持隐式转型，所以将m通过MyInt(m)转换为MyInt类型后与*n相加。\n2. Go社区有人提出：即便多个接口拥有同名方法，当嵌入到一个接口类型中时，也应该是合法的。Go团队讨论后，觉得靠谱，就同意了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1686925153,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326105,"user_name":"罗杰","can_delete":false,"product_type":"c1","uid":1320487,"ip_address":"","ucode":"96BAFAA147341F","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","comment_is_top":false,"comment_ctime":1639381256,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"干货满满","like_count":2},{"had_liked":false,"id":342493,"user_name":"Slowdive","can_delete":false,"product_type":"c1","uid":1624537,"ip_address":"","ucode":"AF3429CE47C462","user_header":"https://static001.geekbang.org/account/avatar/00/18/c9/d9/00870178.jpg","comment_is_top":false,"comment_ctime":1650289827,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"类型 *T 的方法集合 = *T1 的方法集合 + *T2 的方法集合 \n这里没懂， 这样规定也就只能这么记了\n\n课后题别名是相同的， 定义新的类型就是看那个的了","like_count":1},{"had_liked":false,"id":326076,"user_name":"功夫熊猫","can_delete":false,"product_type":"c1","uid":2732243,"ip_address":"","ucode":"D124F4FA4E816F","user_header":"https://static001.geekbang.org/account/avatar/00/29/b0/d3/200e82ff.jpg","comment_is_top":false,"comment_ctime":1639365772,"is_pvip":false,"replies":[{"id":119074,"content":"前者T1是T的类型别名，T1与T完全等价；后者T1是一个新的defined类型。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1640050800,"ip_address":"","comment_id":326076,"utype":1}],"discussion_count":5,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"type T1＝T和type T1 T两个语法有什么区别吗？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540374,"discussion_content":"前者T1是T的类型别名，T1与T完全等价；后者T1是一个新的defined类型。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640050800,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1603004,"avatar":"https://static001.geekbang.org/account/avatar/00/18/75/bc/89d88775.jpg","nickname":"Calvin","note":"","ucode":"0EEF5B207623B5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539289,"discussion_content":"可以从是否加了“=”来记忆，加了“=”表示类型相等，即定义了别名（都是代表同一个类型，只是名称不一样）；不加“=”表示类型“不相等”，即定义了新类型（只是底层类型一样）。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1639660418,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2104856,"avatar":"https://static001.geekbang.org/account/avatar/00/20/1e/18/9d1f1439.jpg","nickname":"liaomars","note":"","ucode":"4FCA97EE9FB57D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538246,"discussion_content":"type T1 =T  意思是：T1是T的别名，其实指的还是同一个\ntype T1 T 意思是：创建一个基类型为T的一个叫T1的新类型。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1639380155,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2735072,"avatar":"https://static001.geekbang.org/account/avatar/00/29/bb/e0/c7cd5170.jpg","nickname":"Bynow","note":"","ucode":"1E4F3ADD65CF18","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538544,"discussion_content":"前面有讲过一个别名一个新类型","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1639444956,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1603004,"avatar":"https://static001.geekbang.org/account/avatar/00/18/75/bc/89d88775.jpg","nickname":"Calvin","note":"","ucode":"0EEF5B207623B5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539288,"discussion_content":"一个是定义了别名，一个是定义了一个新类型。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639660319,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":385125,"user_name":"dot","can_delete":false,"product_type":"c1","uid":2933059,"ip_address":"江苏","ucode":"CBA368D57DC45A","user_header":"https://static001.geekbang.org/account/avatar/00/2c/c1/43/1baa940d.jpg","comment_is_top":false,"comment_ctime":1702120769,"is_pvip":false,"replies":[{"id":140409,"content":"我的理解：由于*T类型后，其内嵌的T1会变为addressable的，也就是说通过接口也可以修改T1的状态了，相当于内嵌了一个*T1，所以*T1的方法集合也被纳入到*T的方法集合中。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1702293872,"ip_address":"北京","comment_id":385125,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"这里不太明白。*T 的方法集合包含 *T的方法和T的方法是Go语言规定可以理解。这里T类型里内嵌的是T1和*T2，T类型的方法集合就是T1的方法集合+*T2的方法集合，这点也可以理解。T类型内嵌的是T1，为什么*T的方法集合却变成了*T1+*T2 呢，不太明白？\n\nfunc main() {\n   t := T{\n   T1: T1{}, \n   T2: &amp;T2{}, \n  } \ndumpMethodSet(t) \ndumpMethodSet(&amp;t)\n}\n","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540374,"discussion_content":"前者T1是T的类型别名，T1与T完全等价；后者T1是一个新的defined类型。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640050800,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1603004,"avatar":"https://static001.geekbang.org/account/avatar/00/18/75/bc/89d88775.jpg","nickname":"Calvin","note":"","ucode":"0EEF5B207623B5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539289,"discussion_content":"可以从是否加了“=”来记忆，加了“=”表示类型相等，即定义了别名（都是代表同一个类型，只是名称不一样）；不加“=”表示类型“不相等”，即定义了新类型（只是底层类型一样）。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1639660418,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2104856,"avatar":"https://static001.geekbang.org/account/avatar/00/20/1e/18/9d1f1439.jpg","nickname":"liaomars","note":"","ucode":"4FCA97EE9FB57D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538246,"discussion_content":"type T1 =T  意思是：T1是T的别名，其实指的还是同一个\ntype T1 T 意思是：创建一个基类型为T的一个叫T1的新类型。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1639380155,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2735072,"avatar":"https://static001.geekbang.org/account/avatar/00/29/bb/e0/c7cd5170.jpg","nickname":"Bynow","note":"","ucode":"1E4F3ADD65CF18","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538544,"discussion_content":"前面有讲过一个别名一个新类型","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1639444956,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1603004,"avatar":"https://static001.geekbang.org/account/avatar/00/18/75/bc/89d88775.jpg","nickname":"Calvin","note":"","ucode":"0EEF5B207623B5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539288,"discussion_content":"一个是定义了别名，一个是定义了一个新类型。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639660319,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382775,"user_name":"爱吃胡萝卜","can_delete":false,"product_type":"c1","uid":1459413,"ip_address":"中国香港","ucode":"35FCF84D1E04C5","user_header":"https://static001.geekbang.org/account/avatar/00/16/44/d5/ca522e83.jpg","comment_is_top":false,"comment_ctime":1698042413,"is_pvip":false,"replies":[{"id":139398,"content":"swift这门语言我不熟悉哈。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1698068342,"ip_address":"辽宁","comment_id":382775,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"简单用swift伪代码重写一下这段代码，老师看下是否理解正确\n```go\ntype MyInt int\n\nfunc (n *MyInt) Add(m int) {\n    *n = *n + MyInt(m)\n}\n\ntype t struct {\n    a int\n    b int\n}\n\ntype S struct {\n    *MyInt\n    t\n    io.Reader\n    s string\n    n int\n}\n```\n\n\n```swift\n\nstruct s {\n    ... 声明变量\n    &#47;*\n        *MyInt\n    t\n    io.Reader\n    s string\n    n int\n    *&#47;\n}\n\n\nextension s: MyInt {\n    func add(_ m: Int) {\n        MyInt.add(m)\n    }\n}\n\nextension s: t {\n    func getA() -&gt; Int {\n        return t.a\n    }\n\n    func setA(_ value: Int) {\n        t.a = value\n    }\n\n    ...\n   \n}\n\nextension: io.Reader {\n    func reader() {\n        Reader.reader()\n    }\n}\n\n\n```","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630054,"discussion_content":"swift这门语言我不熟悉哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698068342,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382134,"user_name":"六道","can_delete":false,"product_type":"c1","uid":1978135,"ip_address":"上海","ucode":"079D3C131949F3","user_header":"https://static001.geekbang.org/account/avatar/00/1e/2f/17/970b5861.jpg","comment_is_top":false,"comment_ctime":1696755634,"is_pvip":false,"replies":[{"id":139209,"content":"✅","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1696892426,"ip_address":"辽宁","comment_id":382134,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"思考题 不等价\nS1中T1，t2，I常规嵌入，继承原类型、原接口的方法集合\nS2中T1 T1，t2 *t2，I  I相当于defined 类型，不会继承原类型，原接口的方法集合","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630054,"discussion_content":"swift这门语言我不熟悉哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698068342,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":380689,"user_name":"极客土豆","can_delete":false,"product_type":"c1","uid":1179126,"ip_address":"江苏","ucode":"CE48C42B8CBE17","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoOFQ3PxxaIRbdp5o3pNxwyrBl2lyK4Il08cF4ZvXpeAhP5WJA0Rw482WibqweYBnviaX8SdO5Bak8g/132","comment_is_top":false,"comment_ctime":1693992948,"is_pvip":false,"replies":[{"id":138624,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1694180870,"ip_address":"辽宁","comment_id":380689,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"好像Ruby中的mixin，还有alias","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":629252,"discussion_content":"✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1696892426,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":380002,"user_name":"__PlasticMan","can_delete":false,"product_type":"c1","uid":1676074,"ip_address":"四川","ucode":"329D3E71E613F0","user_header":"https://static001.geekbang.org/account/avatar/00/19/93/2a/08675e68.jpg","comment_is_top":false,"comment_ctime":1692804905,"is_pvip":false,"replies":[{"id":138414,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1692914372,"ip_address":"美国","comment_id":380002,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"看了其他项目的源码和uber的go规范之后有点感想，类型嵌入是go提供的语法特性，是继承和接口的折衷，但是只有正确地使用这种特性才能避免为程序引入额外地问题，比如泄露实现细节和扩展性不足，请参考[避免在公共结构中嵌入类型](https:&#47;&#47;github.com&#47;xxjwxc&#47;uber_go_guide_cn#%E9%81%BF%E5%85%8D%E5%9C%A8%E5%85%AC%E5%85%B1%E7%BB%93%E6%9E%84%E4%B8%AD%E5%B5%8C%E5%85%A5%E7%B1%BB%E5%9E%8B)","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":626431,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1692914372,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"美国","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":376538,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"广东","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1686903643,"is_pvip":false,"replies":[{"id":137268,"content":"1. Add是*MyInt的方法，这里的实现就是实现一个加法啊。由于go不支持隐式转型，所以将m通过MyInt(m)转换为MyInt类型后与*n相加。\n2. Go社区有人提出：即便多个接口拥有同名方法，当嵌入到一个接口类型中时，也应该是合法的。Go团队讨论后，觉得靠谱，就同意了。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1686925152,"ip_address":"辽宁","comment_id":376538,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"Tony bai 老师，有两个小问题：\n\n1.文中的这句代码  *n = *n + MyInt(m) 没太理解，这个右边的 *n 也是解引用吧？ 也就是这句 代码等于 ：17 = 17 +5 。到底怎么理解这句代码呢？\n\n2. 接口之间的嵌入，允许同名方法的存在，是出于什么目的呢？","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":621215,"discussion_content":"1. Add是*MyInt的方法，这里的实现就是实现一个加法啊。由于go不支持隐式转型，所以将m通过MyInt(m)转换为MyInt类型后与*n相加。\n2. Go社区有人提出：即便多个接口拥有同名方法，当嵌入到一个接口类型中时，也应该是合法的。Go团队讨论后，觉得靠谱，就同意了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1686925153,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326406,"user_name":"不负青春不负己🤘","can_delete":false,"product_type":"c1","uid":1363671,"ip_address":"","ucode":"A6DD8E8B20EA6E","user_header":"https://static001.geekbang.org/account/avatar/00/14/ce/d7/5315f6ce.jpg","comment_is_top":false,"comment_ctime":1639498455,"is_pvip":false,"replies":[{"id":119112,"content":"嗯，这是一点。还有一点是t2字段的不同，继续分析。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1640060969,"ip_address":"","comment_id":326406,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"S1 符合预期继承了I接口的M1方法,而S2去没有 ","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540462,"discussion_content":"嗯，这是一点。还有一点是t2字段的不同，继续分析。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640060970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326105,"user_name":"罗杰","can_delete":false,"product_type":"c1","uid":1320487,"ip_address":"","ucode":"96BAFAA147341F","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","comment_is_top":false,"comment_ctime":1639381256,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"干货满满","like_count":2},{"had_liked":false,"id":342493,"user_name":"Slowdive","can_delete":false,"product_type":"c1","uid":1624537,"ip_address":"","ucode":"AF3429CE47C462","user_header":"https://static001.geekbang.org/account/avatar/00/18/c9/d9/00870178.jpg","comment_is_top":false,"comment_ctime":1650289827,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100093501,"comment_content":"类型 *T 的方法集合 = *T1 的方法集合 + *T2 的方法集合 \n这里没懂， 这样规定也就只能这么记了\n\n课后题别名是相同的， 定义新的类型就是看那个的了","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540462,"discussion_content":"嗯，这是一点。还有一点是t2字段的不同，继续分析。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640060970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":390702,"user_name":"人言有力","can_delete":false,"product_type":"c1","uid":1690736,"ip_address":"浙江","ucode":"3708FBBFB641FE","user_header":"https://static001.geekbang.org/account/avatar/00/19/cc/70/64045bc0.jpg","comment_is_top":false,"comment_ctime":1716044403,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"本节讲了通过类型嵌入实现“继承”的方法\n1、首先，go语言没有真实的对象继承，而是通过组合模拟继承。\n2、对于接口类型，只能潜入接口，被嵌入接口拥有嵌入接口的方法集合\n3、对于结构体类型，可以嵌入接口和自定义类型；嵌入接口类型也和接口嵌入效果相同；如果是嵌入结构体类型，则是嵌入了对应嵌入类型的所有方法。\n4、注意*T类型的方法集合是所有*嵌入字段的方法集合\n5、注意不要让结构体嵌入的字段名重复，引发编译错误\n6、类型define不拥有任何底层类型的方法集合，类型别名alias则完全等价。\n\n思考题：\n结论是不带类型嵌入的方法集合S2是空，而S1的方法集合包含M1，不带类型嵌套本质上只是定义了一个新类型，没有任何方法实现。","like_count":0},{"had_liked":false,"id":390702,"user_name":"人言有力","can_delete":false,"product_type":"c1","uid":1690736,"ip_address":"浙江","ucode":"3708FBBFB641FE","user_header":"https://static001.geekbang.org/account/avatar/00/19/cc/70/64045bc0.jpg","comment_is_top":false,"comment_ctime":1716044403,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100093501,"comment_content":"本节讲了通过类型嵌入实现“继承”的方法\n1、首先，go语言没有真实的对象继承，而是通过组合模拟继承。\n2、对于接口类型，只能潜入接口，被嵌入接口拥有嵌入接口的方法集合\n3、对于结构体类型，可以嵌入接口和自定义类型；嵌入接口类型也和接口嵌入效果相同；如果是嵌入结构体类型，则是嵌入了对应嵌入类型的所有方法。\n4、注意*T类型的方法集合是所有*嵌入字段的方法集合\n5、注意不要让结构体嵌入的字段名重复，引发编译错误\n6、类型define不拥有任何底层类型的方法集合，类型别名alias则完全等价。\n\n思考题：\n结论是不带类型嵌入的方法集合S2是空，而S1的方法集合包含M1，不带类型嵌套本质上只是定义了一个新类型，没有任何方法实现。","like_count":0}]}