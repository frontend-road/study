{"id":521309,"title":"32｜DI Container（20）：如何对代码和测试进行重构？","content":"<p>你好，我是徐昊。今天我们继续使用TDD的方式实现注入依赖容器。</p><h2>回顾代码与任务列表</h2><p>到目前为止，我们的代码是这样的：</p><pre><code>Component.java\n\npackage geektime.tdd.di;\nimport java.lang.annotation.Annotation;\npublic record Component(Class&lt;?&gt; type, Annotation qualifiers) {\n}\n\nComponentRef.java\n\npackage geektime.tdd.di;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.Objects;\npublic class ComponentRef&lt;ComponentType&gt; {\n    public static &lt;ComponentType&gt; ComponentRef&lt;ComponentType&gt; of(Class&lt;ComponentType&gt; component) {\n        return new ComponentRef(component, null);\n    }\n    public static &lt;ComponentType&gt; ComponentRef&lt;ComponentType&gt; of(Class&lt;ComponentType&gt; component, Annotation qualifier) {\n        return new ComponentRef(component, qualifier);\n    }\n    public static ComponentRef of(Type type) {\n        return new ComponentRef(type, null);\n    }\n    public static ComponentRef of(Type type, Annotation qualifier) {\n        return new ComponentRef(type, qualifier);\n    }\n\n    private Type container;\n    private Component component;\n    ComponentRef(Type type, Annotation qualifier) {\n        init(type, qualifier);\n    }\n    protected ComponentRef() {\n        Type type = ((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[0];\n        init(type, null);\n    }\n    private void init(Type type, Annotation qualifier) {\n        if (type instanceof ParameterizedType container) {\n            this.container = container.getRawType();\n            this.component = new Component((Class&lt;ComponentType&gt;) container.getActualTypeArguments()[0], qualifier);\n        } else\n            this.component = new Component((Class&lt;ComponentType&gt;) type, qualifier);\n    }\n    public Type getContainer() {\n        return container;\n    }\n    public Class&lt;?&gt; getComponentType() {\n        return component.type();\n    }\n    public boolean isContainer() {\n        return container != null;\n    }\n    public Component component() {\n        return component;\n    }\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        ComponentRef&lt;?&gt; that = (ComponentRef&lt;?&gt;) o;\n        return Objects.equals(container, that.container) &amp;&amp; component.equals(that.component);\n    }\n    @Override\n    public int hashCode() {\n        return Objects.hash(container, component);\n    }\n}\n\nContext.java\n\npackage geektime.tdd.di;\nimport java.util.Optional;\npublic interface Context {\n    &lt;ComponentType&gt; Optional&lt;ComponentType&gt; get(ComponentRef&lt;ComponentType&gt; ref);\n}\n\nContextConfig.java\n\npackage geektime.tdd.di;\nimport jakarta.inject.Provider;\nimport jakarta.inject.Qualifier;\nimport java.lang.annotation.Annotation;\nimport java.util.*;\npublic class ContextConfig {\n    private Map&lt;Component, ComponentProvider&lt;?&gt;&gt; components = new HashMap&lt;&gt;();\n    public &lt;Type&gt; void bind(Class&lt;Type&gt; type, Type instance) {\n        components.put(new Component(type, null), (ComponentProvider&lt;Type&gt;) context -&gt; instance);\n    }\n    public &lt;Type&gt; void bind(Class&lt;Type&gt; type, Type instance, Annotation... qualifiers) {\n        if (Arrays.stream(qualifiers).anyMatch(q -&gt; !q.annotationType().isAnnotationPresent(Qualifier.class)))\n            throw new IllegalComponentException();\n        for (Annotation qualifier : qualifiers)\n            components.put(new Component(type, qualifier), context -&gt; instance);\n    }\n    public &lt;Type, Implementation extends Type&gt;\n    void bind(Class&lt;Type&gt; type, Class&lt;Implementation&gt; implementation) {\n        components.put(new Component(type, null), new InjectionProvider&lt;&gt;(implementation));\n    }\n    public &lt;Type, Implementation extends Type&gt;\n    void bind(Class&lt;Type&gt; type, Class&lt;Implementation&gt; implementation, Annotation... qualifiers) {\n        if (Arrays.stream(qualifiers).anyMatch(q -&gt; !q.annotationType().isAnnotationPresent(Qualifier.class)))\n            throw new IllegalComponentException();\n        for (Annotation qualifier : qualifiers)\n            components.put(new Component(type, qualifier), new InjectionProvider&lt;&gt;(implementation));\n    }\n    public Context getContext() {\n        components.keySet().forEach(component -&gt; checkDependencies(component, new Stack&lt;&gt;()));\n        return new Context() {\n            @Override\n            public &lt;ComponentType&gt; Optional&lt;ComponentType&gt; get(ComponentRef&lt;ComponentType&gt; ref) {\n                if (ref.isContainer()) {\n                    if (ref.getContainer() != Provider.class) return Optional.empty();\n                    return (Optional&lt;ComponentType&gt;) Optional.ofNullable(getProvider(ref))\n                            .map(provider -&gt; (Provider&lt;Object&gt;) () -&gt; provider.get(this));\n                }\n                return Optional.ofNullable(getProvider(ref)).map(provider -&gt; (ComponentType) provider.get(this));\n            }\n        };\n    }\n    private &lt;ComponentType&gt; ComponentProvider&lt;?&gt; getProvider(ComponentRef&lt;ComponentType&gt; ref) {\n        return components.get(ref.component());\n    }\n    private void checkDependencies(Component component, Stack&lt;Component&gt; visiting) {\n        for (ComponentRef dependency : components.get(component).getDependencies()) {\n            if (!components.containsKey(dependency.component()))\n                throw new DependencyNotFoundException(component, dependency.component());\n            if (!dependency.isContainer()) {\n                if (visiting.contains(dependency.component())) throw new CyclicDependenciesFoundException(visiting);\n                visiting.push(dependency.component());\n                checkDependencies(dependency.component(), visiting);\n                visiting.pop();\n            }\n        }\n    }\n    interface ComponentProvider&lt;T&gt; {\n        T get(Context context);\n        default List&lt;ComponentRef&gt; getDependencies() {\n            return List.of();\n        }\n    }\n}\n\nInjectionProvider.java\n\npackage geektime.tdd.di;\nimport jakarta.inject.Inject;\nimport jakarta.inject.Qualifier;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.*;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.function.BiFunction;\nimport java.util.stream.Stream;\nimport static java.util.Arrays.stream;\nimport static java.util.stream.Stream.concat;\nclass InjectionProvider&lt;T&gt; implements ContextConfig.ComponentProvider&lt;T&gt; {\n    private Constructor&lt;T&gt; injectConstructor;\n    private List&lt;Field&gt; injectFields;\n    private List&lt;Method&gt; injectMethods;\n    private List&lt;ComponentRef&gt; dependencies;\n    public InjectionProvider(Class&lt;T&gt; component) {\n        if (Modifier.isAbstract(component.getModifiers())) throw new IllegalComponentException();\n        this.injectConstructor = getInjectConstructor(component);\n        this.injectFields = getInjectFields(component);\n        this.injectMethods = getInjectMethods(component);\n        if (injectFields.stream().anyMatch(f -&gt; Modifier.isFinal(f.getModifiers())))\n            throw new IllegalComponentException();\n        if (injectMethods.stream().anyMatch(m -&gt; m.getTypeParameters().length != 0))\n            throw new IllegalComponentException();\n        this.dependencies = getDependencies();\n    }\n    @Override\n    public T get(Context context) {\n        try {\n            T instance = injectConstructor.newInstance(toDependencies(context, injectConstructor));\n            for (Field field : injectFields) field.set(instance, toDependency(context, field));\n            for (Method method : injectMethods) method.invoke(instance, toDependencies(context, method));\n            return instance;\n        } catch (InvocationTargetException | InstantiationException | IllegalAccessException e) {\n            throw new RuntimeException(e);\n        }\n    }\n    @Override\n    public List&lt;ComponentRef&gt; getDependencies() {\n        return concat(concat(stream(injectConstructor.getParameters()).map(this::toComponentRef),\n                        injectFields.stream().map(f -&gt; toComponentRef(f))),\n                injectMethods.stream().flatMap(m -&gt; stream(m.getParameters()).map(this::toComponentRef)))\n                .toList();\n    }\n    private ComponentRef toComponentRef(Field field) {\n        return ComponentRef.of(field.getGenericType(), getQualifier(field));\n    }\n    private ComponentRef&lt;?&gt; toComponentRef(Parameter parameter) {\n        return ComponentRef.of(parameter.getParameterizedType(), getQualifier(parameter));\n    }\n    private static Annotation getQualifier(AnnotatedElement element) {\n        List&lt;Annotation&gt; qualifiers = stream(element.getAnnotations())\n                .filter(a -&gt; a.annotationType().isAnnotationPresent(Qualifier.class)).toList();\n        if (qualifiers.size() &gt; 1) throw new IllegalComponentException();\n        return qualifiers.stream().findFirst().orElse(null);\n    }\n    private static &lt;T&gt; List&lt;Method&gt; getInjectMethods(Class&lt;T&gt; component) {\n        List&lt;Method&gt; injectMethods = traverse(component, (methods, current) -&gt; injectable(current.getDeclaredMethods())\n                .filter(m -&gt; isOverrideByInjectMethod(methods, m))\n                .filter(m -&gt; isOverrideByNoInjectMethod(component, m)).toList());\n        Collections.reverse(injectMethods);\n        return injectMethods;\n    }\n    private static &lt;T&gt; List&lt;Field&gt; getInjectFields(Class&lt;T&gt; component) {\n        return traverse(component, (fields, current) -&gt; injectable(current.getDeclaredFields()).toList());\n    }\n    private static &lt;Type&gt; Constructor&lt;Type&gt; getInjectConstructor(Class&lt;Type&gt; implementation) {\n        List&lt;Constructor&lt;?&gt;&gt; injectConstructors = injectable(implementation.getConstructors()).toList();\n        if (injectConstructors.size() &gt; 1) throw new IllegalComponentException();\n        return (Constructor&lt;Type&gt;) injectConstructors.stream().findFirst().orElseGet(() -&gt; defaultConstructor(implementation));\n    }\n    private static &lt;Type&gt; Constructor&lt;Type&gt; defaultConstructor(Class&lt;Type&gt; implementation) {\n        try {\n            return implementation.getDeclaredConstructor();\n        } catch (NoSuchMethodException e) {\n            throw new IllegalComponentException();\n        }\n    }\n    private static &lt;T&gt; List&lt;T&gt; traverse(Class&lt;?&gt; component, BiFunction&lt;List&lt;T&gt;, Class&lt;?&gt;, List&lt;T&gt;&gt; finder) {\n        List&lt;T&gt; members = new ArrayList&lt;&gt;();\n        Class&lt;?&gt; current = component;\n        while (current != Object.class) {\n            members.addAll(finder.apply(members, current));\n            current = current.getSuperclass();\n        }\n        return members;\n    }\n    private static &lt;T extends AnnotatedElement&gt; Stream&lt;T&gt; injectable(T[] declaredFields) {\n        return stream(declaredFields).filter(f -&gt; f.isAnnotationPresent(Inject.class));\n    }\n    private static boolean isOverride(Method m, Method o) {\n        return o.getName().equals(m.getName()) &amp;&amp; Arrays.equals(o.getParameterTypes(), m.getParameterTypes());\n    }\n    private static &lt;T&gt; boolean isOverrideByNoInjectMethod(Class&lt;T&gt; component, Method m) {\n        return stream(component.getDeclaredMethods()).filter(m1 -&gt; !m1.isAnnotationPresent(Inject.class)).noneMatch(o -&gt; isOverride(m, o));\n    }\n    private static boolean isOverrideByInjectMethod(List&lt;Method&gt; injectMethods, Method m) {\n        return injectMethods.stream().noneMatch(o -&gt; isOverride(m, o));\n    }\n    private static Object[] toDependencies(Context context, Executable executable) {\n        return stream(executable.getParameters()).map(p -&gt; toDependency(context, p.getParameterizedType(), getQualifier(p))).toArray(Object[]::new);\n    }\n    private static Object toDependency(Context context, Field field) {\n        return toDependency(context, field.getGenericType(), getQualifier(field));\n    }\n    private static Object toDependency(Context context, Type type, Annotation qualifier) {\n        return context.get(ComponentRef.of(type, qualifier)).get();\n    }\n}\n</code></pre><p>任务列表的状态为：</p><ul>\n<li>\n<p><s>无需构造的组件——组件实例</s></p>\n</li>\n<li>\n<p><s>如果注册的组件不可实例化，则抛出异常</s></p>\n<ul>\n<li><s>抽象类</s></li>\n<li><s>接口</s></li>\n</ul>\n</li>\n<li>\n<p><s>构造函数注入</s></p>\n<ul>\n<li><s>无依赖的组件应该通过默认构造函数生成组件实例</s></li>\n<li><s>有依赖的组件，通过Inject标注的构造函数生成组件实例</s></li>\n<li><s>如果所依赖的组件也存在依赖，那么需要对所依赖的组件也完成依赖注入</s></li>\n<li><s>如果组件有多于一个Inject标注的构造函数，则抛出异常</s></li>\n<li><s>如果组件没有Inject标注的构造函数，也没有默认构造函数（新增任务）</s></li>\n<li><s>如果组件需要的依赖不存在，则抛出异常</s></li>\n<li><s>如果组件间存在循环依赖，则抛出异常</s></li>\n</ul>\n</li>\n<li>\n<p><s>字段注入</s></p>\n<ul>\n<li><s>通过Inject标注将字段声明为依赖组件</s></li>\n<li><s>如果字段为final则抛出异常</s></li>\n<li><s>依赖中应包含Inject Field声明的依赖</s></li>\n</ul>\n</li>\n<li>\n<p><s>方法注入</s></p>\n<ul>\n<li><s>通过Inject标注的方法，其参数为依赖组件</s></li>\n<li><s>通过Inject标注的无参数方法，会被调用</s></li>\n<li><s>按照子类中的规则，覆盖父类中的Inject方法</s></li>\n<li><s>如果方法定义类型参数，则抛出异常</s></li>\n<li><s>依赖中应包含Inject Method声明的依赖</s></li>\n</ul>\n</li>\n<li>\n<p><s>对Provider类型的依赖</s></p>\n<ul>\n<li><s>从容器中取得组件的Provider（新增任务）</s></li>\n<li><s>注入构造函数中可以声明对于Provider的依赖</s></li>\n<li><s>注入字段中可以声明对于Provider的依赖</s></li>\n<li><s>注入方法中可声明对于Provider的依赖</s></li>\n<li><s>将构造函数中的Provider加入依赖（新增任务）</s></li>\n<li><s>将字段中的Provider加入依赖（新增任务）</s></li>\n<li><s>将方法中的Provider加入依赖（新增任务）</s></li>\n</ul>\n</li>\n<li>\n<p><s>自定义Qualifier的依赖</s></p>\n<ul>\n<li>\n<p><s>注册组件时，可额外指定Qualifier</s></p>\n<ul>\n<li><s>针对instance指定一个Qualifieri（新增任务）</s></li>\n<li><s>针对组件指定一个Qualiifer（新增任务）</s></li>\n<li><s>针对instance指定多个Qualifieri（新增任务）</s></li>\n<li><s>针对组件指定多个Qualiifer（新增任务）</s></li>\n</ul>\n</li>\n<li>\n<p><s>注册组件时，如果不是合法的Qualifier，则不接受组件注册（新增任务）</s></p>\n</li>\n<li>\n<p><s>寻找依赖时，需同时满足类型与自定义Qualifier标注</s></p>\n<ul>\n<li>\n<p><s>在检查依赖时使用Qualifier（新增任务）</s></p>\n</li>\n<li>\n<p><s>在检查循环依赖时使用Qualifier（新增任务）</s></p>\n</li>\n<li>\n<p><s>构造函数注入可以使用Qualifier声明依赖（新增任务）</s></p>\n<ul>\n<li><s>依赖中包含Qualifier（新增任务）</s></li>\n<li><s>如果不是合法的Qualifier，则组件非法</s></li>\n</ul>\n</li>\n<li>\n<p><s>字段注入可以使用Qualifier声明依赖（新增任务）</s></p>\n<ul>\n<li><s>依赖中包含Qualifier（新增任务）</s></li>\n<li><s>如果不是合法的Qualifier，则组件非法</s></li>\n</ul>\n</li>\n<li>\n<p><s>函数注入可以使用Qualifier声明依赖（新增任务）</s></p>\n<ul>\n<li><s>依赖中包含Qualifier（新增任务）</s></li>\n<li><s>如果不是合法的Qualifier，则组件非法</s></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><s>支持默认Qualifier——Named（不需要）</s></p>\n</li>\n<li>\n<p><s>注册组件时，可从类对象上提取Qualifier（不需要）</s></p>\n</li>\n</ul>\n</li>\n<li>\n<p>Singleton生命周期</p>\n<ul>\n<li>注册组件时，可额外指定是否为Singleton</li>\n<li>注册组件时，可从类对象上提取Singleton标注</li>\n<li>对于包含Singleton标注的组件，在容器范围内提供唯一实例</li>\n<li>容器组件默认不是Single生命周期</li>\n</ul>\n</li>\n<li>\n<p>自定义Scope标注</p>\n<ul>\n<li>可向容器注册自定义Scope标注的回调</li>\n</ul>\n</li>\n</ul><!-- [[[read_end]]] --><h2>视频演示</h2><p>让我们进入今天的部分：</p><p><video poster=\"https://media001.geekbang.org/877773c667e643bb92b34b52b3e9f3e0/snapshots/4d8cdc2c39a0442292bc363610810674-00005.jpg\" preload=\"none\" controls=\"\"><source src=\"https://media001.geekbang.org/customerTrans/7e27d07d27d407ebcc195a0e78395f55/4e88589d-180ef03010d-0000-0000-01d-dbacd.mp4\" type=\"video/mp4\"><source src=\" https://media001.geekbang.org/486d9c5a455a4b57aad6ca5a4bbf1262/224f406f47024a4587d5dbd382aba100-eed33a3e20b03b34d9a1907361ef9024-sd.m3u8\" type=\"application/x-mpegURL\"></video></p><h2>思考题</h2><p>在进入下节课之前，希望你能认真思考如下两个问题，并选择最有感触的一道进行回答。</p><ol>\n<li>WithQualifier在不同的测试上下文中，持续出现，这意味着什么？</li>\n<li>在今天的视频演示中，最让你有收获的部分是什么？</li>\n</ol><p><strong>编辑来信</strong>：</p><blockquote>\n<p>第二期“TDD·代码评点”活动正式启动啦！为了帮助你更平滑地过渡到第三个实战项目，徐老师发起了代码评点活动。<br>\n<strong>　</strong><br>\n你可以填写<a href=\"https://jinshuju.net/f/fnh84B\">学习问卷</a>提交项目代码，而后，徐老师会一一查看，并进行评点与答疑。关于评点的详细内容，我们也将制成加餐展示在专栏里，供其他同学学习与参考。<br>\n<strong>　</strong><br>\n请注意，此次收集时间截至5月27日12点。此外，我也会从中选出1-2位同学，送出《重构与模式》一书。请抓紧上车，入股不亏哦！</p>\n</blockquote><p>欢迎把你的想法分享在留言区，也欢迎把你的项目代码的链接分享出来。相信经过你的思考与实操，学习效果会更好！</p>","neighbors":{"left":{"article_title":"31｜DI Container（19）：Qualifier部分的功能要如何完成？","id":517500},"right":{"article_title":"33｜DI Container（21）：如何处理Singleton生命周期部分的功能？","id":521319}},"comments":[{"had_liked":false,"id":347597,"user_name":"张铁林","can_delete":false,"product_type":"c1","uid":1108258,"ip_address":"","ucode":"4AB8BC6CDAC0A3","user_header":"https://static001.geekbang.org/account/avatar/00/10/e9/22/7606c6ba.jpg","comment_is_top":false,"comment_ctime":1654191347,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"https:&#47;&#47;github.com&#47;vfbiby&#47;tdd-di-container&#47;tree&#47;master\n104个测试的数字对上了，就是不知道是不是一致","like_count":1},{"had_liked":false,"id":346758,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1653403457,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"建模上的缺陷\n\n- 模型冗余：相同的计算逻辑同时出现在构造方法、实现方法中\n- 模型不能真正反应需求上要解决的问题\n- 对概念上的封装存在缺失\n- 在工作中很难发现，缓慢的让代码进入到一个滑坡状态、越来越复杂","like_count":1},{"had_liked":false,"id":346753,"user_name":"人间四月天","can_delete":false,"product_type":"c1","uid":1048314,"ip_address":"","ucode":"11BE219C23EEBC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fe/fa/2a046821.jpg","comment_is_top":false,"comment_ctime":1653400957,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"厉害，重构真厉害","like_count":0}]}