{"id":109503,"title":"25 | 固若金汤的根本（下）：数字签名与证书","content":"<p>上一讲中我们学习了对称加密和非对称加密，以及两者结合起来的混合加密，实现了机密性。</p><p>但仅有机密性，离安全还差的很远。</p><p>黑客虽然拿不到会话密钥，无法破解密文，但可以通过窃听收集到足够多的密文，再尝试着修改、重组后发给网站。因为没有完整性保证，服务器只能“照单全收”，然后他就可以通过服务器的响应获取进一步的线索，最终就会破解出明文。</p><p>另外，黑客也可以伪造身份发布公钥。如果你拿到了假的公钥，混合加密就完全失效了。你以为自己是在和“某宝”通信，实际上网线的另一端却是黑客，银行卡号、密码等敏感信息就在“安全”的通信过程中被窃取了。</p><p>所以，在机密性的基础上还必须加上完整性、身份认证等特性，才能实现真正的安全。</p><h2>摘要算法</h2><p>实现完整性的手段主要是<strong>摘要算法</strong>（Digest Algorithm），也就是常说的散列函数、哈希函数（Hash Function）。</p><p>你可以把摘要算法近似地理解成一种特殊的压缩算法，它能够把任意长度的数据“压缩”成固定长度、而且独一无二的“摘要”字符串，就好像是给这段数据生成了一个数字“指纹”。</p><p>换一个角度，也可以把摘要算法理解成特殊的“单向”加密算法，它只有算法，没有密钥，加密后的数据无法解密，不能从摘要逆推出原文。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/28/d8/2865d2c77466efb7a480833bcb27f9d8.png?wh=1417*1382\" alt=\"\"></p><p>摘要算法实际上是把数据从一个“大空间”映射到了“小空间”，所以就存在“冲突”（collision，也叫碰撞）的可能性，就如同现实中的指纹一样，可能会有两份不同的原文对应相同的摘要。好的摘要算法必须能够“抵抗冲突”，让这种可能性尽量地小。</p><p>因为摘要算法对输入具有“单向性”和“雪崩效应”，输入的微小不同会导致输出的剧烈变化，所以也被TLS用来生成伪随机数（PRF，pseudo random function）。</p><p>你一定在日常工作中听过、或者用过MD5（Message-Digest 5）、SHA-1（Secure Hash Algorithm 1），它们就是最常用的两个摘要算法，能够生成16字节和20字节长度的数字摘要。但这两个算法的安全强度比较低，不够安全，在TLS里已经被禁止使用了。</p><p>目前TLS推荐使用的是SHA-1的后继者：SHA-2。</p><p>SHA-2实际上是一系列摘要算法的统称，总共有6种，常用的有SHA224、SHA256、SHA384，分别能够生成28字节、32字节、48字节的摘要。</p><p>你可以用实验环境的URI“/25-1”来测试一下TLS里的各种摘要算法，包括MD5、SHA-1和SHA-2。</p><pre><code>https://www.chrono.com/25-1?algo=md5\nhttps://www.chrono.com/25-1?algo=sha1\nhttps://www.chrono.com/25-1?algo=sha256\n</code></pre><h2>完整性</h2><p>摘要算法保证了“数字摘要”和原文是完全等价的。所以，我们只要在原文后附上它的摘要，就能够保证数据的完整性。</p><p>比如，你发了条消息：“转账1000元”，然后再加上一个SHA-2的摘要。网站收到后也计算一下消息的摘要，把这两份“指纹”做个对比，如果一致，就说明消息是完整可信的，没有被修改。</p><p>如果黑客在中间哪怕改动了一个标点符号，摘要也会完全不同，网站计算比对就会发现消息被窜改，是不可信的。</p><p>不过摘要算法不具有机密性，如果明文传输，那么黑客可以修改消息后把摘要也一起改了，网站还是鉴别不出完整性。</p><p>所以，真正的完整性必须要建立在机密性之上，在混合加密系统里用会话密钥加密消息和摘要，这样黑客无法得知明文，也就没有办法动手脚了。</p><p>这有个术语，叫哈希消息认证码（HMAC）。</p><p><img src=\"https://static001.geekbang.org/resource/image/c2/96/c2e10e9afa1393281b5633b1648f2696.png?wh=2000*695\" alt=\"\"></p><h2>数字签名</h2><p>加密算法结合摘要算法，我们的通信过程可以说是比较安全了。但这里还有漏洞，就是通信的两个端点（endpoint）。</p><p>就像一开始所说的，黑客可以伪装成网站来窃取信息。而反过来，他也可以伪装成你，向网站发送支付、转账等消息，网站没有办法确认你的身份，钱可能就这么被偷走了。</p><p>现实生活中，解决身份认证的手段是签名和印章，只要在纸上写下签名或者盖个章，就能够证明这份文件确实是由本人而不是其他人发出的。</p><p>你回想一下之前的课程，在TLS里有什么东西和现实中的签名、印章很像，只能由本人持有，而其他任何人都不会有呢？只要用这个东西，就能够在数字世界里证明你的身份。</p><p>没错，这个东西就是非对称加密里的“<strong>私钥</strong>”，使用私钥再加上摘要算法，就能够实现“<strong>数字签名</strong>”，同时实现“身份认证”和“不可否认”。</p><p>数字签名的原理其实很简单，就是把公钥私钥的用法反过来，之前是公钥加密、私钥解密，现在是私钥加密、公钥解密。</p><p>但又因为非对称加密效率太低，所以私钥只加密原文的摘要，这样运算量就小的多，而且得到的数字签名也很小，方便保管和传输。</p><p>签名和公钥一样完全公开，任何人都可以获取。但这个签名只有用私钥对应的公钥才能解开，拿到摘要后，再比对原文验证完整性，就可以像签署文件一样证明消息确实是你发的。</p><p><img src=\"https://static001.geekbang.org/resource/image/84/d2/84a79826588ca35bf6ddcade027597d2.png?wh=1375*1252\" alt=\"\"></p><p>刚才的这两个行为也有专用术语，叫做“<strong>签名</strong>”和“<strong>验签</strong>”。</p><p>只要你和网站互相交换公钥，就可以用“签名”和“验签”来确认消息的真实性，因为私钥保密，黑客不能伪造签名，就能够保证通信双方的身份。</p><p>比如，你用自己的私钥签名一个消息“我是小明”。网站收到后用你的公钥验签，确认身份没问题，于是也用它的私钥签名消息“我是某宝”。你收到后再用它的公钥验一下，也没问题，这样你和网站就都知道对方不是假冒的，后面就可以用混合加密进行安全通信了。</p><p>实验环境的URI“/25-2”演示了TLS里的数字签名，它使用的是RSA1024。</p><h2>数字证书和CA</h2><p>到现在，综合使用对称加密、非对称加密和摘要算法，我们已经实现了安全的四大特性，是不是已经完美了呢？</p><p>不是的，这里还有一个“<strong>公钥的信任</strong>”问题。因为谁都可以发布公钥，我们还缺少防止黑客伪造公钥的手段，也就是说，怎么来判断这个公钥就是你或者某宝的公钥呢？</p><p>真是“按下葫芦又起了瓢”，安全还真是个麻烦事啊，“一环套一环”的。</p><p>我们可以用类似密钥交换的方法来解决公钥认证问题，用别的私钥来给公钥签名，显然，这又会陷入“无穷递归”。</p><p>但这次实在是“没招”了，要终结这个“死循环”，就必须引入“外力”，找一个公认的可信第三方，让它作为“信任的起点，递归的终点”，构建起公钥的信任链。</p><p>这个“第三方”就是我们常说的<strong>CA</strong>（Certificate Authority，证书认证机构）。它就像网络世界里的公安局、教育部、公证中心，具有极高的可信度，由它来给各个公钥签名，用自身的信誉来保证公钥无法伪造，是可信的。</p><p>CA对公钥的签名认证也是有格式的，不是简单地把公钥绑定在持有者身份上就完事了，还要包含序列号、用途、颁发者、有效时间等等，把这些打成一个包再签名，完整地证明公钥关联的各种信息，形成“<strong>数字证书</strong>”（Certificate）。</p><p>知名的CA全世界就那么几家，比如DigiCert、VeriSign、Entrust、Let’s Encrypt等，它们签发的证书分DV、OV、EV三种，区别在于可信程度。</p><p>DV是最低的，只是域名级别的可信，背后是谁不知道。EV是最高的，经过了法律和审计的严格核查，可以证明网站拥有者的身份（在浏览器地址栏会显示出公司的名字，例如Apple、GitHub的网站）。</p><p>不过，CA怎么证明自己呢？</p><p>这还是信任链的问题。小一点的CA可以让大CA签名认证，但链条的最后，也就是<strong>Root CA</strong>，就只能自己证明自己了，这个就叫“<strong>自签名证书</strong>”（Self-Signed Certificate）或者“<strong>根证书</strong>”（Root Certificate）。你必须相信，否则整个证书信任链就走不下去了。</p><p><img src=\"https://static001.geekbang.org/resource/image/8f/9c/8f0813e9555ba1a40bd2170734aced9c.png?wh=1300*1292\" alt=\"\"></p><p>有了这个证书体系，操作系统和浏览器都内置了各大CA的根证书，上网的时候只要服务器发过来它的证书，就可以验证证书里的签名，顺着证书链（Certificate Chain）一层层地验证，直到找到根证书，就能够确定证书是可信的，从而里面的公钥也是可信的。</p><p>我们的实验环境里使用的证书是“野路子”的自签名证书（在Linux上用OpenSSL命令行签发），肯定是不会被浏览器所信任的，所以用Chrome访问时就会显示成红色，标记为不安全。但你只要把它安装进系统的根证书存储区里，让它作为信任链的根，就不会再有危险警告。</p><p><img src=\"https://static001.geekbang.org/resource/image/a5/8f/a55051ca7ae941ae04791cdddde6658f.png?wh=1200*1397\" alt=\"\"></p><h2>证书体系的弱点</h2><p>证书体系（PKI，Public Key Infrastructure）虽然是目前整个网络世界的安全基础设施，但绝对的安全是不存在的，它也有弱点，还是关键的“<strong>信任</strong>”二字。</p><p>如果CA失误或者被欺骗，签发了错误的证书，虽然证书是真的，可它代表的网站却是假的。</p><p>还有一种更危险的情况，CA被黑客攻陷，或者CA有恶意，因为它（即根证书）是信任的源头，整个信任链里的所有证书也就都不可信了。</p><p>这两种事情并不是“耸人听闻”，都曾经实际出现过。所以，需要再给证书体系打上一些补丁。</p><p>针对第一种，开发出了CRL（证书吊销列表，Certificate revocation list）和OCSP（在线证书状态协议，Online Certificate Status Protocol），及时废止有问题的证书。</p><p>对于第二种，因为涉及的证书太多，就只能操作系统或者浏览器从根上“下狠手”了，撤销对CA的信任，列入“黑名单”，这样它颁发的所有证书就都会被认为是不安全的。</p><h2>小结</h2><p>今天我们学习了数字签名和证书、CA，是不是有种“盗梦空间”一层套一层的感觉？你可以在课后再去各大网站，结合它们“小锁头”里的信息来加深理解。</p><p>今天的内容可以简单概括为四点：</p><ol>\n<li><span class=\"orange\">摘要算法用来实现完整性，能够为数据生成独一无二的“指纹”，常用的算法是SHA-2；</span></li>\n<li><span class=\"orange\">数字签名是私钥对摘要的加密，可以由公钥解密后验证，实现身份认证和不可否认；</span></li>\n<li><span class=\"orange\">公钥的分发需要使用数字证书，必须由CA的信任链来验证，否则就是不可信的；</span></li>\n<li><span class=\"orange\">作为信任链的源头CA有时也会不可信，解决办法有CRL、OCSP，还有终止信任。</span></li>\n</ol><h2>课下作业</h2><ol>\n<li>为什么公钥能够建立信任链，用对称加密算法里的对称密钥行不行呢？</li>\n<li>假设有一个三级的证书体系（Root CA=&gt;一级CA=&gt;二级CA），你能详细解释一下证书信任链的验证过程吗？</li>\n</ol><p>欢迎你把自己的学习体会写在留言区，与我和其他同学一起讨论。如果你觉得有所收获，也欢迎把文章分享给你的朋友。</p><p><img src=\"https://static001.geekbang.org/resource/image/37/57/37c59439c36e75f610fe84c22009cc57.png?wh=1769*2960\" alt=\"\"></p><p></p>","comments":[{"had_liked":false,"id":127223,"user_name":"Geek_steven_wang","can_delete":false,"product_type":"c1","uid":1477120,"ip_address":"","ucode":"8CC8F4C9726191","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI8mFt5wSkia31qc8paRg2uPSB6AuEBDricrSxvFBuTpP3NnnflekpJ7wqvN0nRrJyu7zVbzd7Lwjxw/132","comment_is_top":false,"comment_ctime":1566614202,"is_pvip":false,"replies":[{"id":"47153","content":"说的非常好。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1566690291,"ip_address":"","comment_id":127223,"utype":1}],"discussion_count":5,"race_medal":0,"score":"400998572730","product_id":100029001,"comment_content":"保密性：靠混合加密解决，非对称加密实现对称加密秘钥传递，对称加密实现内容加密。<br>完整性：靠摘要算法解决。<br>身份认证：靠数字证书解决，数字证书因为CA机构的信任变成一个完整信任链条，从而实现通过数字证书证明了对方真实身份，但注意身份真实也可能是挂羊头卖狗肉，是一个坏人，所以，有了CRL、OCSP，还有终止信任。<br>不可否认：靠数字签名解决，内容摘要算法得到摘要，私钥加密摘要，对方使用对应公钥解密，得到摘要，再和自己得到的服务器提供的原文摘要对比，一致说明这个内容就是原服务器提供的，由证书说明了服务器的身份。<br><br>关于证书验证：<br>服务器返回的是证书链（不包括根证书，根证书预置在浏览器中），然后浏览器就可以使用信任的根证书（根公钥）解析证书链的根证书得到一级证书的公钥+摘要验签，然后拿一级证书的公钥解密一级证书拿到二级证书的公钥和摘要验签，再然后拿二级证书的公钥解密二级证书得到服务器的公钥和摘要验签，验证过程就结束了。","like_count":93,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464385,"discussion_content":"说的非常好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566690291,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1500844,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e6/ac/e14bde09.jpg","nickname":"xsg","note":"","ucode":"D951BE986E6E6E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":240631,"discussion_content":"有个疑问，服务端发送给客户端的是 数字证书+数字签名，数字证书是没有加密的吗？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1587379936,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1994308,"avatar":"","nickname":"catkin","note":"","ucode":"DC123F1074434F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1500844,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e6/ac/e14bde09.jpg","nickname":"xsg","note":"","ucode":"D951BE986E6E6E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":276677,"discussion_content":"证书有签发者私钥签名","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590928277,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":240631,"ip_address":""},"score":276677,"extra":""}]},{"author":{"id":1525903,"avatar":"https://static001.geekbang.org/account/avatar/00/17/48/8f/b728f820.jpg","nickname":"AlohaJack","note":"","ucode":"472912BF7EEDD8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548382,"discussion_content":"我理解应该是直接用根证书里面的公钥验证一级证书，以此类推，不存在根公钥解析根证书这个说法吧，本身根证书就是可信的，为啥还要用根公钥解析根证书，而且起不到任何解析作用啊。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1643169305,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1711208,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/1c/68/0676d81a.jpg","nickname":"杨友君","note":"","ucode":"601B9DBF18E79C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545343,"discussion_content":"“拿二级证书的公钥解密二级证书得到服务器的公钥和摘要验签” 这里的 服务器的公钥和摘要验签 是指啥？问题中只有达到二级证书。\n\n服务器会下发的一个CA文件，内部的内容只有2套CA数据，中间证书（一级），网站证书（二级）。\n\n浏览器会先去系统中找到中间证书的发布者 root ca做自签校验，用root ca的公钥解自己的数字签名算出摘要进行对比，确认root ca没有被修改过后，再用root ca的公钥验证中间证书的签名，接着用中间证书的公钥验证网站证书的签名，确认都没问题后。此时就说明这3个证书是关联且没有被串改的，接着就是用网站证书的公钥进行密钥协商的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641912606,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116986,"user_name":"Leon📷","can_delete":false,"product_type":"c1","uid":1219496,"ip_address":"","ucode":"B9BBD1EFAAE5A2","user_header":"https://static001.geekbang.org/account/avatar/00/12/9b/a8/6a391c66.jpg","comment_is_top":false,"comment_ctime":1563951296,"is_pvip":false,"replies":[{"id":"42783","content":"感谢补充，这个就是nonce了。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1563958573,"ip_address":"","comment_id":116986,"utype":1}],"discussion_count":2,"race_medal":0,"score":"121823035584","product_id":100029001,"comment_content":"重放和篡改的问题没有提，黑客是解不开秘文，但是可以重复发送，需要时间戳和随机数再合起来做一个不可逆的签名，服务端收到重复的就丢弃","like_count":28,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459764,"discussion_content":"感谢补充，这个就是nonce了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563958573,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1402668,"avatar":"https://static001.geekbang.org/account/avatar/00/15/67/2c/ee3c2d36.jpg","nickname":"飞翔的葱油饼","note":"","ucode":"42865E09C7F899","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370386,"discussion_content":"正解我心头的疑惑之处，感谢。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619397804,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117155,"user_name":"放开那个猴子","can_delete":false,"product_type":"c1","uid":1087786,"ip_address":"","ucode":"93595F09B94402","user_header":"https://static001.geekbang.org/account/avatar/00/10/99/2a/f7e19dcc.jpg","comment_is_top":false,"comment_ctime":1563977539,"is_pvip":false,"replies":[{"id":"42903","content":"态度很认真，值得表扬。<br><br>有一点小错误，数字签名的防窜改不是因为“修改之后生成的数字签名无法被CA公钥解密”，而是修改后的摘要变动了，与签名里解密出的原始摘要不匹配，所以能够发现原文被窜改。<br><br>另外，你说的这些是目前流行的PKI体系，但公钥私钥本身并不一定要用证书，它们本身属于密码学。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1564016452,"ip_address":"","comment_id":117155,"utype":1}],"discussion_count":2,"race_medal":0,"score":"117528094531","product_id":100029001,"comment_content":"看完老师的文章有点迷惑，主要是没搞清完整的流程，又去找资料看了一下，说下自己的理解，老师看看对不。<br><br>数字签名和数字证书只用于TSL&#47;SSL的握手阶段，主要是保证服务器的公钥能够正确地传给浏览器（不被中间人伪装发送假的公钥）<br><br>具体流程大概是：<br>1、服务器去CA机构申请证书，证书中包含了要发给客户端的公钥、签发者、到期时间等等信息。如果这样简单地把证书发给浏览器，中间人可以轻松地修改成自己的公钥，之后的通信就是不安全的了。于是需要一定的加密手段，这里的做法就是使用数字签名：将证书的信息利用摘要算法计算出摘要之后，用CA的秘钥进行加密，生成数字签名。<br>2、服务器将数字证书和数字签名一起发给浏览器，因为有数字签名，所以数字证书无法被中间人做修改（修改之后生成的数字签名无法被CA公钥解密），浏览器拿到数字证书之后，去本地的信任机构中查询到对应的机构，利用其公钥解密数字签名，验证证书是否有被修改过。这一步就保证了浏览器获取到的公钥一定是正确的。<br>3、公钥正确地传给浏览器之后，接着就是协商对称加密的密钥，然后通信等等..<br><br>参考：<br>http:&#47;&#47;www.ruanyifeng.com&#47;blog&#47;2011&#47;08&#47;what_is_a_digital_signature.html<br>https:&#47;&#47;www.zhihu.com&#47;question&#47;52493697","like_count":27,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459842,"discussion_content":"态度很认真，值得表扬。\n\n有一点小错误，数字签名的防窜改不是因为“修改之后生成的数字签名无法被CA公钥解密”，而是修改后的摘要变动了，与签名里解密出的原始摘要不匹配，所以能够发现原文被窜改。\n\n另外，你说的这些是目前流行的PKI体系，但公钥私钥本身并不一定要用证书，它们本身属于密码学。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564016452,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1087786,"avatar":"https://static001.geekbang.org/account/avatar/00/10/99/2a/f7e19dcc.jpg","nickname":"放开那个猴子","note":"","ucode":"93595F09B94402","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2904,"discussion_content":"嗯嗯，老师说的那个小错误，我明白。我想的是中间人窜改数字证书之后，重新计算了摘要，然后用自己的私钥加密，然后CA公钥解不出来。当然道理一样的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1564029911,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":212664,"user_name":"好好好","can_delete":false,"product_type":"c1","uid":1546855,"ip_address":"","ucode":"EE1878ADC840B6","user_header":"https://static001.geekbang.org/account/avatar/00/17/9a/67/73f384f9.jpg","comment_is_top":false,"comment_ctime":1588171858,"is_pvip":false,"replies":[{"id":"79026","content":"总结的非常好！","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1588204835,"ip_address":"","comment_id":212664,"utype":1}],"discussion_count":1,"race_medal":0,"score":"113257321554","product_id":100029001,"comment_content":"看了几遍大概了解为什么要这样加密的过程了<br>↓ 对称加密（有密钥交换的问题）<br>↓ 非对称加密（基于复杂的数学难题，运行速度很慢）<br>↓ 混合加密（怎么保证完整性？不被修改？）<br>↓ 摘要算法（无法保证是用户自己）<br>↓ 数字签名（公钥怎么保证安全正确的？）<br>↓ 数字证书、CA","like_count":26,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493576,"discussion_content":"总结的非常好！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588204835,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116813,"user_name":"郭凯强","can_delete":false,"product_type":"c1","uid":1188524,"ip_address":"","ucode":"002F58C3640560","user_header":"https://static001.geekbang.org/account/avatar/00/12/22/ac/fc8e435a.jpg","comment_is_top":false,"comment_ctime":1563929295,"is_pvip":false,"replies":[{"id":"42680","content":"√","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1563930201,"ip_address":"","comment_id":116813,"utype":1}],"discussion_count":2,"race_medal":0,"score":"108938111695","product_id":100029001,"comment_content":"问题1. 非加密算法需要公开公钥从而让客户端能解密。如果用对称加密，加密秘钥公开，就达不到加密效果了<br>问题2. 客户端发现当前网站的证书是二级CA，在可信任签发机构中找不到，就会去拿二级CA的数字证书的签发机构去做检查，发现它是一级CA，也不在可信任签发机构中，再找一级CA的数字证书的签发机构，发现是受信任的ROOT CA，至此完成验证。如果到最后一层CA都不受信任，就会警告用户","like_count":25,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459694,"discussion_content":"√","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563930201,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1484184,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","nickname":"djfhchdh","note":"","ucode":"E71D75328CE398","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2794,"discussion_content":"赞！！！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563938871,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":145951,"user_name":"蓝配鸡","can_delete":false,"product_type":"c1","uid":1348738,"ip_address":"","ucode":"C79A7CA8885B7C","user_header":"https://static001.geekbang.org/account/avatar/00/14/94/82/d0a417ba.jpg","comment_is_top":false,"comment_ctime":1572405936,"is_pvip":false,"replies":[{"id":"56330","content":"学习进度很快啊，回答的也很形象生动。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1572411038,"ip_address":"","comment_id":145951,"utype":1}],"discussion_count":1,"race_medal":0,"score":"78881817264","product_id":100029001,"comment_content":"为什么公钥能够建立信任链，用对称加密算法里的对称密钥行不行呢？<br>所谓建立信任链， 是指发送方相信公钥确实是接收方的。因为有CA的信任链和最后根CA的背书。<br>用对称密钥行不行呢？<br>用对称密钥来确认公钥的真实性，就好像是街头对暗号。 A:枯藤老树昏鸭 B:穿条秋裤回家。 这样做确实可以确认“你就是你”，可问题是如何交换密钥呢？ 问题就又绕回到了非对称密钥了。<br><br>假设有一个三级的证书体系（Root CA=&gt; 一级 CA=&gt; 二级 CA），你能详细解释一下证书信任链的验证过程吗？<br>没有具体实战过，我猜测如下：<br>二级CA交给了浏览器，CA说：“我是某宝，这是我的公钥，这个一级CA给我背书了，　你要相信我！”<br>浏览器再去确认这个一级CA可不可信，一级CA说：“我是公安局，这是我的公钥，这个根CA给我背书了，　你要相信我！”<br>浏览器再去确认这个根CA可不可信，根CA说：“我是上帝我说了算，你爱信不信”。浏览器也很无奈啊。。。只能信了。","like_count":18,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472644,"discussion_content":"学习进度很快啊，回答的也很形象生动。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572411038,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116952,"user_name":"彩色的沙漠","can_delete":false,"product_type":"c1","uid":1116183,"ip_address":"","ucode":"19A0975A5E69EA","user_header":"https://static001.geekbang.org/account/avatar/00/11/08/17/e63e50f3.jpg","comment_is_top":false,"comment_ctime":1563944593,"is_pvip":true,"replies":[{"id":"42759","content":"你理解的很对，服务器会在握手的时候返回整个证书链，但通常为了节约数据量，不会包含最终的根证书，因为根证书通常已经在浏览器或者操作系统里内置了。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1563946906,"ip_address":"","comment_id":116952,"utype":1}],"discussion_count":5,"race_medal":0,"score":"65988454033","product_id":100029001,"comment_content":"对于第二个问题证书链验证的过程，有些不理解的地方，请老师指教，您在文章说“操作系统和浏览器都内置了各大 CA 的根证书，上网的时候只要服务器发过来它的证书，就可以验证证书里的签名，顺着证书链（Certificate Chain）一层层地验，直到找到根证书”，服务器只返回了他的证书（假如返回的是二级证书），浏览器内置的是根证书（根公钥）使用根公钥只能解密根机构签名的证书，无法解密二级证书，使用一级证书（公钥）才能解密二级证。那么浏览器是怎么自下向上层层解析到根证书？我的理解的是服务器返回的是证书链，然后浏览器就可以使用信任的根证书（根公钥）解析证书链的根证书得到一级证书的公钥+摘要验签，然后拿一级证书的公钥解密一级证书拿到二级证书的公钥和摘要验签，再然后拿二级证书的公钥解密二级证书得到服务器的公钥和摘要验签，验证过程就结束了。谢谢！","like_count":15,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459749,"discussion_content":"你理解的很对，服务器会在握手的时候返回整个证书链，但通常为了节约数据量，不会包含最终的根证书，因为根证书通常已经在浏览器或者操作系统里内置了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1563946906,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1116183,"avatar":"https://static001.geekbang.org/account/avatar/00/11/08/17/e63e50f3.jpg","nickname":"彩色的沙漠","note":"","ucode":"19A0975A5E69EA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2855,"discussion_content":"谢谢老师，我纠正一下我上面描述验证的过程，返回的证书链一般不包含根证书，浏览器就可以使用信任的根证书（根公钥）解密证书链的一级证书（因为一级证书是根证书签名的）拿到一级证书自己的公钥和摘要验签，再然后拿一级证书的公钥解密二级证书（因为二级证书是一级证书签名的）得到服务器的公钥和摘要验签，验证过程就结束了。谢谢！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1563973340,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2913864,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/MYShyjtRtib2GIQiaK4hV3ZP9pQ1qiaS74DA4K4YHY4SIiaFDfsCKgiaMWwm9zFsSn3bt5pawp5Kdn5MWgiaw5909nug/132","nickname":"Geek_aa1c31","note":"","ucode":"1AC14C053638AF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1116183,"avatar":"https://static001.geekbang.org/account/avatar/00/11/08/17/e63e50f3.jpg","nickname":"彩色的沙漠","note":"","ucode":"19A0975A5E69EA","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":556929,"discussion_content":"哈哈, 正想说你上面的描述不对呢~~","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1647577787,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":2855,"ip_address":""},"score":556929,"extra":""}]},{"author":{"id":1228268,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bd/ec/cc7abf0b.jpg","nickname":"L","note":"","ucode":"26BB686671F7D4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6779,"discussion_content":"是否存在证书链被伪造的可能呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567094220,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1116183,"avatar":"https://static001.geekbang.org/account/avatar/00/11/08/17/e63e50f3.jpg","nickname":"彩色的沙漠","note":"","ucode":"19A0975A5E69EA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1228268,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bd/ec/cc7abf0b.jpg","nickname":"L","note":"","ucode":"26BB686671F7D4","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":577780,"discussion_content":"不存在","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656329559,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":6779,"ip_address":""},"score":577780,"extra":""}]}]},{"had_liked":false,"id":279223,"user_name":"乘风破浪","can_delete":false,"product_type":"c1","uid":2406841,"ip_address":"","ucode":"937AF15F3FEBDC","user_header":"https://static001.geekbang.org/account/avatar/00/24/b9/b9/9e4d7aa4.jpg","comment_is_top":false,"comment_ctime":1613659992,"is_pvip":false,"replies":[{"id":"101448","content":"写的很详细，nice。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1613705445,"ip_address":"","comment_id":279223,"utype":1}],"discussion_count":4,"race_medal":0,"score":"61743202136","product_id":100029001,"comment_content":"假设有一个三级的证书体系（Root CA=&gt; 一级 CA=&gt; 二级 CA），你能详细解释一下证书信任链的验证过程吗？---注服务器的证书由二级CA签发。<br>修订的第三版，这个解答相对更完善。。。<br>TLS协商阶段，在交换完Client Hello&#47;Server Hello消息后，发送方【通常是服务器】，发送Certificate消息，把证书链，包括自己的证书，二级CA证书，一级CA证书，一次性发送给接收方【通常是浏览器】。<br><br>注：每个传递过来的证书包括4部分<br>signedCertificate签名的证书，即浏览器点击小锁头直观可以看到的证书<br>algorithmIdentifier算法标记，包括了签名证书用到的摘要和签名算法，如sha256WithRSAEncryption<br>Padding填充字符<br>encrpted加密摘要，注：加密摘要不包含在signedCertificate中，所以浏览器中点击小锁头看不到加密摘要。<br><br>当前接收方只有内置的Root Ca根证书，无法直接信任接收方的证书。接收方将通过证书链中包含的签发者信息，逐层向上查找直到Root Ca根证书，并从根证书开始，逐级向下做验签。首先，用根证书对一级证书做验签。具体过程是，对一级CA证书【signedCertificate】用传递过来的摘要算法【algorithmIdentifier】做摘要得到摘要1；用Root Ca根证书的公钥解密一级CA证书的数字签名【encrpted】，得到发送过来的摘要2，二者比较，如一致，则认为一级CA证书是真实有效的。类似的，继续用一级CA证书对二级CA证书做验签，二级CA证书对发送方证书做验签，如果发送方证书验证通过，则随之TLS协商进入Server key exchange阶段。","like_count":14,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515667,"discussion_content":"写的很详细，nice。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613705445,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1006424,"avatar":"","nickname":"门窗小二","note":"","ucode":"0BF3780C247F22","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582197,"discussion_content":"m","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659312568,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"福建"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1009622,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/d6/2f5cb85c.jpg","nickname":"xmr","note":"","ucode":"1BBF165F91F10B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557428,"discussion_content":"Mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647797594,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135528,"avatar":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","nickname":"return","note":"","ucode":"42B8A3380DF04B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378113,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623057578,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116744,"user_name":"极客时间","can_delete":false,"product_type":"c1","uid":1015564,"ip_address":"","ucode":"AF7565BB5EF164","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/0c/392ce255.jpg","comment_is_top":false,"comment_ctime":1563900179,"is_pvip":false,"replies":[{"id":"42679","content":"哪里不明白可以随时问。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1563930175,"ip_address":"","comment_id":116744,"utype":1}],"discussion_count":3,"race_medal":0,"score":"40218605843","product_id":100029001,"comment_content":"到这里完全爆炸了","like_count":9,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459669,"discussion_content":"哪里不明白可以随时问。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563930175,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2028811,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/0b/73628618.jpg","nickname":"兔嘟嘟","note":"","ucode":"5A9042B4C7670C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386202,"discussion_content":"要查阅相关资料，光是课内看的很难完全弄明白","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627465851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1219496,"avatar":"https://static001.geekbang.org/account/avatar/00/12/9b/a8/6a391c66.jpg","nickname":"Leon📷","note":"","ucode":"B9BBD1EFAAE5A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2813,"discussion_content":"去网络协议课程参照着一起读","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563951393,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":247452,"user_name":"the sword the god","can_delete":false,"product_type":"c1","uid":1471307,"ip_address":"","ucode":"07DA7A167FA32A","user_header":"https://static001.geekbang.org/account/avatar/00/16/73/4b/0b74915a.jpg","comment_is_top":false,"comment_ctime":1599711666,"is_pvip":false,"replies":[{"id":"90932","content":"可以看出学习的非常认真，态度端正，先点赞。<br><br>学习密码学有困惑，很正常，很多步骤都感觉是绕来绕去的，我当初也是这么觉得。但你要知道，ssl&#47;tls的制定者都是密码学的顶级专家，而且经过了很多年的考验，几乎可以肯定地说是没有低级漏洞的，所以我们可以不用怀疑算法，只需要去理解它。<br><br>1.私钥签名、公钥验签，就是用公钥验证了私钥持有者的身份，实现了身份认证和不可否认。你说的“多余”其实在ssl&#47;tls里也是只做一次，确实做多了没有意义。<br><br>2.公钥是公开的，所以不存在安全问题，不用担心被破坏窜改，因为一旦改了就和私钥不对应了。<br><br>3.证书里含有公钥和其他信息，也是公开的，由ca签名保证完整性，窜改即失效，所以可以随便发布。<br><br>4.证书把网站的身份和公钥绑定在一起，所以验证了公钥对应的私钥，也就相当于验证了网站。用的不是证书序列号。<br><br>5.一些大ca的根证书都是内置在操作系统和浏览器的，网站也可以把整个证书链（根-&gt;一级-&gt;二级-&gt;网站）在握手的时候全发给客户端，客户端拿全了验证。<br><br>6.ssl&#47;tls握手成功后，就建立了一个加密的安全信道，之前已经认证过了身份，所以通信是安全的。而且会话时用的AES-GCM等算法也有完整性保证。<br>","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1599787407,"ip_address":"","comment_id":247452,"utype":1}],"discussion_count":2,"race_medal":0,"score":"31664482738","product_id":100029001,"comment_content":"HTTPS四大特性机密性、完整性、身份认证、不可否认，我不是能够很好地说服我自己：<br>如何实现机密性？<br>对称加密加密解密都用同一个秘钥，但是问题是这个秘钥的交换传输问题，我们无法保证在传输过程中有没有人修改我们的秘钥。<br>非对称加密分为公钥和私钥，我们可以随便散播我们的公钥，用私钥加密，但是问题是基于复杂的数学难题，所以速度比较慢。<br>所以我们可以用混合加密，用非对称加密的私钥加密对称加密的秘钥（即会话秘钥），这样客户端可以用服务端散播的公钥解密得到会话秘钥，以后传输过程中就用这个会话秘钥来传输。<br>但是这个时候，我们依旧无法保证我们拿到的会话秘钥是完整的，未经篡改的，黑客完全可以劫持我们传递私钥的这个报文，乱改一通，所以我们需要进一步实现完整性。<br>如何实现完整性？<br>我们用摘要算法对原文(这里也就是会话秘钥)生成摘要指纹，然后用私钥加密（会话秘钥+秘钥的摘要指纹）发出去，此时客户端收到报文后，用公钥解密报文，理想情况下，还是原文+摘要的形式，这时我们用相同的摘要算法去计算原文，进行摘要对比，只要相同，那就可以保证完整性了。如果黑客在中间修改了报文，那么按照摘要算法的雪崩效应，最终是可以确定原文被修改，或者干脆就不符合格式，也就不安全了。<br>然后又出现了两端安全的问题？就是如何确定服务器就是那个服务器。<br>因为非对称加密的私钥是独有的，可以以此作为基准。我们用私钥把我们之前得到的原文（会话秘钥）的摘要再进行加密，秘钥的加密只能用公钥解开，所以客户端收到内容后，先用公钥解开当前的内容，得到的东西是原文+秘钥加密的摘要，我们再用摘要算法去算原文的摘要，用公钥再解密出服务器给我们的摘要，两相对比，如果相同，就验证了两个端点安全且内容完整未经篡改。<br>但是我这里有一个疑惑，这一步到底意义是什么呢？我觉得这样做只能说明公钥和私钥的对应性，充其量只能证明确实是这两个端点在通信，中间没有被篡改。那么这相当于上一步到底多出来的实际意义是什么呢？我们就算不用私钥去加密原文的摘要，实际上客户端收到报文后既然能用公钥解密出原文和摘要，并直接进行认证，也能证明两个端点公钥和私钥的一一对应吧？我甚至觉得这一步是多余的。这里希望老师解惑。<br>其实最关键的还是证明公钥的来源是正确的，举个������，也就是你必须确认你拿到的是淘宝的公钥。<br>这里我假设上面进行身份认证的签名和验签是能够说服我的，好，解决公钥来源正确的方法是引入CA。<br>那么CA到底是什么呢？我感觉有点理解困难。按照之前的说法，签名是指对某个摘要使用私钥进行加密的过程，验签则是用与这个私钥对应的公钥解密出摘要并进行摘要对比的过程。<br>那么CA对什么进行签名呢？我们把公匙、有效时间、序列号等相关信息交给CA，CA会用它的绝对保密的私钥对这些信息进行打包后加密，即签名（这里是不是就是用摘要算法做了一个指纹然后用私钥加密原文信息+摘要？？），形成淘宝独有的数字证书。<br>好，那我第二个问题来了，CA的私钥既然是绝对保密的，那我就把CA的私钥理解成是在服务器外的一个地方，请问我们如何把我们的公钥、序列号这些信息安全地送到CA处，并且安全地收回来？<br>还有，数字证书是相当于被送回到了服务器了吗？也就是说，之前我们都是散播我们的公钥，现在变成了我们四处散播我们的数字证书？<br>我们每次登陆网站，比如登陆淘宝网，是不是相当于我们拿到了这个网站发给我们的数字证书，然后我们用内置保存在操作系统和浏览器中的CA的公钥去解密数字证书，还原成（公匙+序列号等）原文信息+摘要，然后要摘要算法计算原文信息进行比对，只要对上了，我们就能根据序列号一些信息，保证我们访问的就是淘宝网？<br>然后这个CA的证书体系树到底是什么？是不是其实CA机构散播的也是他们的数字证书，也就是说我们保存在操作系统和浏览器中的也是他们的数字证书？我们证明淘宝网的数字证书需要上一层CA的数字证书，但是CA的数字证书也需要证明，所以需要更上一层的CA的数字证书，所以往上找回找到根证书，我们必须相信，不然信任链走不下去了。<br>那么我有问题，上面文章中讲了，我们浏览器和操作系统只内置了各大CA的根证书，那么如果淘宝网的数字证书是由一个三级证书认证的，那请问这个三级证书那里来？我们去哪里找？？<br>好了，假设上面的信任链走通了，我们确定了我们拿到的就是淘宝网的公钥，我们解密出了原文，在现在的分析中，也就是对称加密的会话秘钥，也验证了完整性，我们要开始用这个会话秘钥开始通信了，那么我想知道现在用会话秘钥加密传输这个过程中就没有完整性、身份认证、不可否认的问题了吗？？","like_count":7,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505406,"discussion_content":"可以看出学习的非常认真，态度端正，先点赞。\n\n学习密码学有困惑，很正常，很多步骤都感觉是绕来绕去的，我当初也是这么觉得。但你要知道，ssl/tls的制定者都是密码学的顶级专家，而且经过了很多年的考验，几乎可以肯定地说是没有低级漏洞的，所以我们可以不用怀疑算法，只需要去理解它。\n\n1.私钥签名、公钥验签，就是用公钥验证了私钥持有者的身份，实现了身份认证和不可否认。你说的“多余”其实在ssl/tls里也是只做一次，确实做多了没有意义。\n\n2.公钥是公开的，所以不存在安全问题，不用担心被破坏窜改，因为一旦改了就和私钥不对应了。\n\n3.证书里含有公钥和其他信息，也是公开的，由ca签名保证完整性，窜改即失效，所以可以随便发布。\n\n4.证书把网站的身份和公钥绑定在一起，所以验证了公钥对应的私钥，也就相当于验证了网站。用的不是证书序列号。\n\n5.一些大ca的根证书都是内置在操作系统和浏览器的，网站也可以把整个证书链（根-&amp;gt;一级-&amp;gt;二级-&amp;gt;网站）在握手的时候全发给客户端，客户端拿全了验证。\n\n6.ssl/tls握手成功后，就建立了一个加密的安全信道，之前已经认证过了身份，所以通信是安全的。而且会话时用的AES-GCM等算法也有完整性保证。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599787407,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1471307,"avatar":"https://static001.geekbang.org/account/avatar/00/16/73/4b/0b74915a.jpg","nickname":"the sword the god","note":"","ucode":"07DA7A167FA32A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305164,"discussion_content":"谢谢老师，解决了我很多疑惑。还有些问题不太明白也有思路了，我自己研究下说服我自己吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599803877,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":265329,"user_name":"爱看书的蜗牛","can_delete":false,"product_type":"c1","uid":1115276,"ip_address":"","ucode":"02A280A16F162D","user_header":"https://static001.geekbang.org/account/avatar/00/11/04/8c/ce36a2d0.jpg","comment_is_top":false,"comment_ctime":1606870970,"is_pvip":false,"replies":[{"id":"96431","content":"这里不对，只有私钥才是身份认证的关键，私钥严格保密，其他人不能获取。所以黑客拿到公钥没有用，因为他做不出签名，只能验证签名，而签名只能是持有私钥的人才能发出的。<br><br>这里面有点绕，也是非对称加密的关键，需要再仔细理解一下。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1606878492,"ip_address":"","comment_id":265329,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23081707450","product_id":100029001,"comment_content":"既然签名是公开的，公钥也是公开的，那黑客只要先伪装成网站获得我的公钥，再拿到我的签名，不就可以伪装成我了吗？","like_count":5,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510880,"discussion_content":"这里不对，只有私钥才是身份认证的关键，私钥严格保密，其他人不能获取。所以黑客拿到公钥没有用，因为他做不出签名，只能验证签名，而签名只能是持有私钥的人才能发出的。\n\n这里面有点绕，也是非对称加密的关键，需要再仔细理解一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606878492,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":200989,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1585703257,"is_pvip":false,"replies":[{"id":"75198","content":"great！","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1585703413,"ip_address":"","comment_id":200989,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23060539737","product_id":100029001,"comment_content":"小结如下：<br>1：摘要算法——具有单向性和雪崩性，单向性强调只能加密不能解码，雪崩性强调明文稍微变化一丁点那摘要就会产生巨大的变化。摘要算法怎么使用，把明文和摘要一起发送过去就可以验证明文是否被篡改了。但是防止不了明文修改后把摘要也篡改的情况，所以，后面有了数字签名。<br><br>2：数字签名——私钥加密＋摘要算法，用私钥加密摘要然后用公钥验证，就可以实现身份认证以及不可否认的特性。<br><br>3：CA——也即证书认证机制防止黑客伪造公钥，如果用的是黑客伪造的公钥，那自然黑客就能用其私有加密摘要伪造某宝的身份了。所以，公钥只能有可信度比较高的三方来发布，防止黑客伪造。<br><br>4：后面也存在一些问题，比如：颁发证书的机构被攻陷或者证书颁布有误，这时就出现了CRL&#47;OCSP&#47;终止信任。做到万无一失的安全确实非常困难，涉及机密或金钱的也没得选吧！只能这么搞了！","like_count":5,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490201,"discussion_content":"great！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585703413,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117880,"user_name":"极客时间","can_delete":false,"product_type":"c1","uid":1015564,"ip_address":"","ucode":"AF7565BB5EF164","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/0c/392ce255.jpg","comment_is_top":false,"comment_ctime":1564160582,"is_pvip":false,"replies":[{"id":"43371","content":"证书体系中的中间人攻击是可行的，需要预先在客户端信任中间人的根证书，这样中间人就可以使用这个根证书来“伪造”证书，冒充原网站，像fiddler就是这么做的。<br><br>简单修改证书是不行的，因为证书被ca签名，能够防窜改。而中间人没有ca的私钥，所以也无法伪造。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1564362478,"ip_address":"","comment_id":117880,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23038997062","product_id":100029001,"comment_content":"有点疑惑，如果有中间人，截获了证书，将证书替换成了自己申请的证书，这里假设中间人申请的证书和网站申请的证书是同一家的，确保用的都是相同的第三方公钥，那么这里是不是就会泄密了呢？有没有这种可能呢，我在阅读网上大部分文章的时候，大家都在考虑中间人修改证书上的公钥，但是因为数字签名的原因，修改后就出问题了，但是中间人直接将证书替换了呢？这种可能有没有，没有可能的话为什么，有的话如何做防护呢？ 或者说我提的这个问题是我哪里理解有问题吗？万望老师解惑。","like_count":5,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460157,"discussion_content":"证书体系中的中间人攻击是可行的，需要预先在客户端信任中间人的根证书，这样中间人就可以使用这个根证书来“伪造”证书，冒充原网站，像fiddler就是这么做的。\n\n简单修改证书是不行的，因为证书被ca签名，能够防窜改。而中间人没有ca的私钥，所以也无法伪造。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564362478,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116840,"user_name":"锦","can_delete":false,"product_type":"c1","uid":1468298,"ip_address":"","ucode":"CB0EB4B68C468B","user_header":"https://static001.geekbang.org/account/avatar/00/16/67/8a/babd74dc.jpg","comment_is_top":false,"comment_ctime":1563931161,"is_pvip":false,"replies":[{"id":"42718","content":"1&#47;2可以看接下来的tls握手，如何交换如何确认就要使用一种双方都认可的协议。<br><br>3.私钥需要自己保管，方法有很多，比如u盾（特殊的usb设备），或者直接就是一个文本文件，想怎么存就怎么存。<br><br>4.https只保证通信链路的安全，在这之外它是无能为力的。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1563933287,"ip_address":"","comment_id":116840,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18743800345","product_id":100029001,"comment_content":"使用非对称加密算法RSA交换对称算法AES的密钥部分有疑问：<br>1，这个交换动作是谁发起的？<br>2，需要双方都要确认吗？<br>3，其中非对称加密算法RSA的私钥保存部分没看懂，网站的私钥保存在服务器端，安全；那么用户的私钥呢？是保存在ca证书颁发机构吗？还是保存在浏览器端？<br><br>另外，如果网站用户使用黑客手段修改客户端内存数据，然后提交服务器，这种情况https有招吗？<br><br>","like_count":4,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459704,"discussion_content":"1/2可以看接下来的tls握手，如何交换如何确认就要使用一种双方都认可的协议。\n\n3.私钥需要自己保管，方法有很多，比如u盾（特殊的usb设备），或者直接就是一个文本文件，想怎么存就怎么存。\n\n4.https只保证通信链路的安全，在这之外它是无能为力的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563933287,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":304529,"user_name":"兔嘟嘟","can_delete":false,"product_type":"c1","uid":2028811,"ip_address":"","ucode":"5A9042B4C7670C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f5/0b/73628618.jpg","comment_is_top":false,"comment_ctime":1627466131,"is_pvip":false,"replies":[{"id":"110309","content":"many thanks ","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1627712527,"ip_address":"","comment_id":304529,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10217400723","product_id":100029001,"comment_content":"老师的关于HTTPS这几篇太精彩了，对比起来，网上的文章要不太学术&#47;数学化，要不太简单","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524074,"discussion_content":"many thanks ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627712527,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":223506,"user_name":"rongyefeng","can_delete":false,"product_type":"c1","uid":1959482,"ip_address":"","ucode":"9A15D947E9D645","user_header":"https://static001.geekbang.org/account/avatar/00/1d/e6/3a/382cf024.jpg","comment_is_top":false,"comment_ctime":1591104121,"is_pvip":false,"replies":[{"id":"82377","content":"用途不同，数字签名用在握手阶段，hmac用在会话通信阶段。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1591153020,"ip_address":"","comment_id":223506,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10181038713","product_id":100029001,"comment_content":"老师，数字签名中使用私钥加密摘要，HMAC中用会话秘钥加密摘要，到底使用哪一个加密摘要？","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497150,"discussion_content":"用途不同，数字签名用在握手阶段，hmac用在会话通信阶段。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591153020,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":206445,"user_name":"Joker","can_delete":false,"product_type":"c1","uid":1156592,"ip_address":"","ucode":"126AF848001A1E","user_header":"https://static001.geekbang.org/account/avatar/00/11/a5/f0/8648c464.jpg","comment_is_top":false,"comment_ctime":1586862485,"is_pvip":false,"replies":[{"id":"77220","content":"你说的很对，所以密码学只是安全的基础，要真正安全还需要有协议来保证，所以就出现了后面的TLS。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1586927320,"ip_address":"","comment_id":206445,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10176797077","product_id":100029001,"comment_content":"感觉，这些安全的特性是需要根据一些实际的攻击手段结合起来，才能说的明白。<br>比如完整性这个，为的保证内容没有被篡改，这个是建立在中间人手段的基础上的，因为黑客把你的内容篡改了，然后再通过服务器的响应获取数据，通过不断的测试，计算，从而推断出网站的私钥，导致你的信息泄漏。增加完整性的验证之后，服务器一旦知道这些内容被篡改，那么就不进行响应，中间人没有获取数据，推断也就无从谈起。<br>至于“验签”，比如黑客通过某种手段知道了你已经通过了服务器的身份验证，然后再根据抓包制知道了服务器的消息格式，然后突然用中间人攻击，模拟了你这个客户端，直接向服务器发送转账操作，那这个时候要咋办？此时，公钥是已知的，至于消息，模拟的十分逼真，服务器无法判断这是你发的，还是别人发的。这个时候就需要一个判断机制：<br>1 客户端同样也生成一个私钥和一个公钥， 把公钥提前在身份验证之前就发给服务器，这样服务器就有了一份来自客户端的公钥。<br>2 利用私钥来加密摘要；不加密内容，消息发送。<br>3 服务器接到内容，开始对内容进行摘要计算，得到摘要；并且利用公钥对摘要进行解密，得到解密后的真正的摘要。比较摘要，如果一致，就表示的这是真的客户端发的。<br><br>身份认证：你如何保证你是真的安全，无害的？比如你想制药，就需要制药的资质，你就要想官方机构申请，官方认证了，你是安全无害，有技术手段来制药的，就会发给你证书，有了这个，你的东西别人才敢买，别人才敢吃。同样这里的也是，不过这里的官方机构不是某个郭嘉的部门，而是一些公开的机构。通过他们的认证之后，你就可以向别人发送公钥了，同样别人也可以放心的把自己的公钥发给你。<br>-----<br>我的粗浅的理解就是以上，希望老师多多指导，谢谢~~","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491792,"discussion_content":"你说的很对，所以密码学只是安全的基础，要真正安全还需要有协议来保证，所以就出现了后面的TLS。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586927320,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":124985,"user_name":"刘政伟","can_delete":false,"product_type":"c1","uid":1307364,"ip_address":"","ucode":"2D2BFDE4F5ACC8","user_header":"https://static001.geekbang.org/account/avatar/00/13/f2/e4/825ab8d9.jpg","comment_is_top":false,"comment_ctime":1566033572,"is_pvip":false,"replies":[{"id":"46184","content":"<br>1.基本正确，浏览器用的实际上是证书里的公钥，不是裸公钥。<br><br>2.Nginx中配置的私钥就是用来证明服务器身份的私钥，也就是服务器证书对应的私钥，用来在tls握手时验证身份。<br><br>3.可参考后面两讲，看看证书和私钥是怎么起作用的。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1566261418,"ip_address":"","comment_id":124985,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10155968164","product_id":100029001,"comment_content":"老师，在nginx中一般都会配置由ca机构签发的证书（ssl_certificate）和私钥（ssl_certificate_key）；<br>问题一：那个证书是由ca机构的私钥进行加密过的，然后在客户端访问的时候，通过浏览器中内置的ca的公钥进行解密，这样理解对吗？<br>问题二：nginx中配置的私钥(ssl_certificate_key)又是什么用途呢？","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463391,"discussion_content":"\n1.基本正确，浏览器用的实际上是证书里的公钥，不是裸公钥。\n\n2.Nginx中配置的私钥就是用来证明服务器身份的私钥，也就是服务器证书对应的私钥，用来在tls握手时验证身份。\n\n3.可参考后面两讲，看看证书和私钥是怎么起作用的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566261418,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272442,"user_name":"唐锋","can_delete":false,"product_type":"c1","uid":2056373,"ip_address":"","ucode":"EADB4F9B8FED0F","user_header":"https://static001.geekbang.org/account/avatar/00/1f/60/b5/c24a543f.jpg","comment_is_top":false,"comment_ctime":1610091741,"is_pvip":false,"replies":[{"id":"98892","content":"这个顺序其实并不重要，只要最后根证书验证成功，那么整个证书链就是可信的。<br><br>比如，我先用一级验证了二级，那么只要一级可信后面的也就都可信，所以要再验证一级。<br><br>或者是先用根验证了一级，那么再用一级验证其他的也就都可信。<br><br>关键是最后的根证书，它是信任的起点，必须要验证。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1610331439,"ip_address":"","comment_id":272442,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5905059037","product_id":100029001,"comment_content":"有些同学回答的是先由一级验证二级，再由根验证一级；有些同学回答的是先由根验证一级，再由一级验证二级；有些同学回答的是先由二级通过链找到根，然后再由根验证一级，再由一级验证二级。老师说的都是理解正确。那么哪一个才是真的理解正确呢。","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513282,"discussion_content":"这个顺序其实并不重要，只要最后根证书验证成功，那么整个证书链就是可信的。\n\n比如，我先用一级验证了二级，那么只要一级可信后面的也就都可信，所以要再验证一级。\n\n或者是先用根验证了一级，那么再用一级验证其他的也就都可信。\n\n关键是最后的根证书，它是信任的起点，必须要验证。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610331439,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":190872,"user_name":"欢乐的小马驹","can_delete":false,"product_type":"c1","uid":1078951,"ip_address":"","ucode":"B594106688CEE7","user_header":"https://static001.geekbang.org/account/avatar/00/10/76/a7/374e86a7.jpg","comment_is_top":false,"comment_ctime":1584702689,"is_pvip":false,"replies":[{"id":"73712","content":"<br>1.签名和验签必须要有证书才能执行，所以你说的只对了一半，如果客户端发证书，那么服务器也要验签。<br><br>2.现在的加密套件比如AES128-GCM会在加密的同时做mac验证，保证数据的完整性，不一定非要用摘要。其实最简单的crc也是可以保证数据不被破坏的，只是强度没有摘要那么高。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1584926992,"ip_address":"","comment_id":190872,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5879669985","product_id":100029001,"comment_content":"老师，你好。我又来问问题了，希望能理解~<br>1、签名和验签，只是在服务器传给客户端证书的时候需要用到，是吧？<br>2、摘要是传递任何数据都会用到吗？如果不是这样的话，传输数据的过程中被篡改了不就没法保证完整了吗？","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488071,"discussion_content":"\n1.签名和验签必须要有证书才能执行，所以你说的只对了一半，如果客户端发证书，那么服务器也要验签。\n\n2.现在的加密套件比如AES128-GCM会在加密的同时做mac验证，保证数据的完整性，不一定非要用摘要。其实最简单的crc也是可以保证数据不被破坏的，只是强度没有摘要那么高。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584926992,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":190193,"user_name":"欢乐的小马驹","can_delete":false,"product_type":"c1","uid":1078951,"ip_address":"","ucode":"B594106688CEE7","user_header":"https://static001.geekbang.org/account/avatar/00/10/76/a7/374e86a7.jpg","comment_is_top":false,"comment_ctime":1584612594,"is_pvip":false,"replies":[{"id":"73222","content":"这个有个专门的分支叫密码分析学，专门研究怎么破解密钥的。<br><br>举个例子，我发一些精心构造的明文，比如全0全1全a等等，然后服务器会返回密文，只要足够多，就能够分析出规律来。<br><br>感兴趣可以搜一下二战时候的enigma破解过程。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1584665633,"ip_address":"","comment_id":190193,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5879579890","product_id":100029001,"comment_content":"老师，你好。你文章提到“黑客虽然拿不到会话密钥，无法破解密文，但可以通过窃听收集到足够多的密文，再尝试着修改、重组后发给网站。因为没有完整性保证，服务器只能“照单全收”，然后他就可以通过服务器的响应获取进一步的线索，最终就会破解出明文”<br>黑客怎么破解出明文的过程是什么样的，能不能简单收一下，我这不是很理解~","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487911,"discussion_content":"这个有个专门的分支叫密码分析学，专门研究怎么破解密钥的。\n\n举个例子，我发一些精心构造的明文，比如全0全1全a等等，然后服务器会返回密文，只要足够多，就能够分析出规律来。\n\n感兴趣可以搜一下二战时候的enigma破解过程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584665633,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179618,"user_name":"尔冬橙","can_delete":false,"product_type":"c1","uid":1225224,"ip_address":"","ucode":"0B013A49BC18DA","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","comment_is_top":false,"comment_ctime":1582039794,"is_pvip":false,"replies":[{"id":"69746","content":"对","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1582066799,"ip_address":"","comment_id":179618,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5877007090","product_id":100029001,"comment_content":"老师，如果摘要验证不准确，是不是就有两种情况，一是原文被篡改，另外也有可能是数字签名被改了","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484329,"discussion_content":"对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582066799,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":171555,"user_name":"qzmone","can_delete":false,"product_type":"c1","uid":1081681,"ip_address":"","ucode":"E10DC194F04B74","user_header":"https://static001.geekbang.org/account/avatar/00/10/81/51/4999f121.jpg","comment_is_top":false,"comment_ctime":1578966217,"is_pvip":false,"replies":[{"id":"66487","content":"<br>1.原文就是原始的数据，不管是密文或者明文都可以，原文允许公开就是明文，不公开就用密文，总之就是防止原文被窜改。<br><br>2.在hmac里，会话密钥同时加密原文和摘要，就可以保证完整性，因为会话密钥是保密的。<br><br>3.完整性的关键是加密用的密钥保密，保证摘要不被窜改。所以在混合加密系统里可以用会话密钥实现完整性。当然私钥天然可以实现完整性。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1578971149,"ip_address":"","comment_id":171555,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5873933513","product_id":100029001,"comment_content":"老师，有两个问题请教，不是很清楚：<br>1、私钥加密，加密的实际是原文的摘要，这个原文是明文还是会话密钥加密后的密文？<br>2、完整性通过会话密钥加密消息和消息摘要保证<br>这里两次加密，分别是用私钥加密原文摘要（实现身份认证和不可抵赖性），会话秘钥加密原文（明文）和原文摘要（实现完整性），是为了实现以上两种不同的目的，不知我的理解对不对？","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481412,"discussion_content":"\n1.原文就是原始的数据，不管是密文或者明文都可以，原文允许公开就是明文，不公开就用密文，总之就是防止原文被窜改。\n\n2.在hmac里，会话密钥同时加密原文和摘要，就可以保证完整性，因为会话密钥是保密的。\n\n3.完整性的关键是加密用的密钥保密，保证摘要不被窜改。所以在混合加密系统里可以用会话密钥实现完整性。当然私钥天然可以实现完整性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578971149,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152501,"user_name":"Neo","can_delete":false,"product_type":"c1","uid":1501591,"ip_address":"","ucode":"6A4EF447B88C8C","user_header":"https://static001.geekbang.org/account/avatar/00/16/e9/97/c190359c.jpg","comment_is_top":false,"comment_ctime":1574037494,"is_pvip":false,"replies":[{"id":"58599","content":"<br>1.是的，代理作为中间人，对客户端和服务器分别使用TLS通信。<br><br>2.客户端证书的用法在后面有讲，其实并不难，因为证书本身是被ca签名的，可以防窜改，直接发就行。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1574039813,"ip_address":"","comment_id":152501,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5869004790","product_id":100029001,"comment_content":"老师好，有两个问题：<br>1. 在有正向代理服务器的时候TLS是如何工作的？<br>您在代理服务器那个章节提到，代理服务器会更改http header的信息，如果设计的更改报文内容，那么完整性就破坏了。所以，我猜测，又正向代理服务器的情况下，整个通讯被分割成两段，一段是客户端到代理服务器的https通讯，另外一段是代理服务器到服务器的https的通讯过程。不知道是否理解正确？<br>2. 能否解释一下TLS里面的client certificate (two-way auth)的工作方式<br>我猜测是在握手协商的过程中，服务器要求客户端发送客户端证书过来，进行身份验证。但具体是怎么协商的，客户端又是怎么保住自己发送的证书安全到达服务器端的，还没搞清楚。<br><br>谢谢老师","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474837,"discussion_content":"\n1.是的，代理作为中间人，对客户端和服务器分别使用TLS通信。\n\n2.客户端证书的用法在后面有讲，其实并不难，因为证书本身是被ca签名的，可以防窜改，直接发就行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574039813,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125369,"user_name":"业余草","can_delete":false,"product_type":"c1","uid":1126538,"ip_address":"","ucode":"99BDC1E629049D","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/8a/b5ca7286.jpg","comment_is_top":false,"comment_ctime":1566175155,"is_pvip":false,"replies":[{"id":"46194","content":"后面两讲会对tls的握手有详细的流程图，请参考。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1566262162,"ip_address":"","comment_id":125369,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5861142451","product_id":100029001,"comment_content":"如果画一个完整的流程图就更好了","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463547,"discussion_content":"后面两讲会对tls的握手有详细的流程图，请参考。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566262162,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117926,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1564193655,"is_pvip":true,"replies":[{"id":"43362","content":"md5、sha1的摘要是二进制数据的16字节、20字节，不能直接看，所以做了hex编码，也就是一个字节变成了两个字符，所以扩大了两倍。<br>","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1564361962,"ip_address":"","comment_id":117926,"utype":1}],"discussion_count":4,"race_medal":1,"score":"5859160951","product_id":100029001,"comment_content":" MD5（Message-Digest 5）、SHA-1（Secure Hash Algorithm 1），两个摘要算法，能够生成 16 字节和 20 字节长度的数字摘要<br><br>为什么实验环境中实际 MD5算法生成的 32字节长度的呢？（英文中一个字母占一个字节）<br>sha1 算法生成的 是 40个字节长度的？<br>还有 sha-2 的算法，生成的长度都是扩大了2倍","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460184,"discussion_content":"md5、sha1的摘要是二进制数据的16字节、20字节，不能直接看，所以做了hex编码，也就是一个字节变成了两个字符，所以扩大了两倍。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564361962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":83392,"discussion_content":"同学，我在好多课程里面都看到你了，是否介意交个朋友，一起切磋技术呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576423135,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":83543,"discussion_content":"可以可以，求之不得","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576425787,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":83392,"ip_address":""},"score":83543,"extra":""},{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":1,"user_type":1,"is_pvip":true},"discussion":{"id":83549,"discussion_content":"HXR_DSG","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576425936,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":83543,"ip_address":""},"score":83549,"extra":""}]}]},{"had_liked":false,"id":116959,"user_name":"大小兵","can_delete":false,"product_type":"c1","uid":1209885,"ip_address":"","ucode":"1227870F26D322","user_header":"https://static001.geekbang.org/account/avatar/00/12/76/1d/b4262bdc.jpg","comment_is_top":false,"comment_ctime":1563946978,"is_pvip":false,"replies":[{"id":"42763","content":"1.只要私钥加密后就可以了，不需要公钥参与，私钥加密的结果就是签名。<br><br>2.如果每次都要对消息签名就需要做这两步，先摘要再加密，也就是数字签名。<br><br>3.但私钥运算很慢，实际上不会这样做，而是在握手的时候签名验签，接下来会讲tls握手，它实现了完善的密钥交换过程。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1563948197,"ip_address":"","comment_id":116959,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5858914274","product_id":100029001,"comment_content":"老师我有两个疑问：<br>1. 用自己的私钥对摘要进行加密生成数字签名，这个数字签名需要经过公钥加密后发送给对方吗？<br>2. 是否在每次发送消息时都要进行生成摘要和生成数字签名这两个过程？","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459752,"discussion_content":"1.只要私钥加密后就可以了，不需要公钥参与，私钥加密的结果就是签名。\n\n2.如果每次都要对消息签名就需要做这两步，先摘要再加密，也就是数字签名。\n\n3.但私钥运算很慢，实际上不会这样做，而是在握手的时候签名验签，接下来会讲tls握手，它实现了完善的密钥交换过程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563948197,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116912,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1563937845,"is_pvip":false,"replies":[{"id":"42758","content":"√","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1563946775,"ip_address":"","comment_id":116912,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5858905141","product_id":100029001,"comment_content":"1、因为对称加密时，双方要协商密钥，密钥在传输过程中极易被窃取，而非对称加密方式，双方只要协商公钥就行了，私钥都是自己保存的","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459728,"discussion_content":"√","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563946775,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116809,"user_name":"-W.LI-","can_delete":false,"product_type":"c1","uid":1210699,"ip_address":"","ucode":"3556786538664F","user_header":"https://static001.geekbang.org/account/avatar/00/12/79/4b/740f91ca.jpg","comment_is_top":false,"comment_ctime":1563928874,"is_pvip":false,"replies":[{"id":"42685","content":"1的理解有点小问题，信任链里其实不一定非要有ca，如果只是在一个很小的范围内，没有证书只用公钥也可以建立信任关系。<br><br>关键是对称密钥没有私密性，不能实现身份认证。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1563930611,"ip_address":"","comment_id":116809,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5858896170","product_id":100029001,"comment_content":"对称加密就一个秘钥，CA有你的私钥如果ca被黑了黑客可以随便怎么玩。用公钥的话，CA被黑了，黑客没法拿到私钥。只能伪装用户没法伪装服务器。不晓得理解的对不对。<br>第二个应该从下往上一级一级严重吧。三级验证不通过就不用验证二级了。","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459692,"discussion_content":"1的理解有点小问题，信任链里其实不一定非要有ca，如果只是在一个很小的范围内，没有证书只用公钥也可以建立信任关系。\n\n关键是对称密钥没有私密性，不能实现身份认证。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563930611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360391,"user_name":"| ~浑蛋~","can_delete":false,"product_type":"c1","uid":3024820,"ip_address":"上海","ucode":"B6904B44DFA805","user_header":"https://static001.geekbang.org/account/avatar/00/2e/27/b4/df65c0f7.jpg","comment_is_top":false,"comment_ctime":1666534626,"is_pvip":true,"replies":[{"id":"131103","content":"看后面的tls通信协议，只有在握手的时候才用私钥，后续会用对称密钥加解密。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1666583410,"ip_address":"上海","comment_id":360391,"utype":1}],"discussion_count":1,"race_medal":4,"score":"1666534626","product_id":100029001,"comment_content":"服务端的每个http报文的摘要信息都要使用私钥进行签名才发给客户端吗？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591401,"discussion_content":"看后面的tls通信协议，只有在握手的时候才用私钥，后续会用对称密钥加解密。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666583410,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356277,"user_name":"坚持不懈","can_delete":false,"product_type":"c1","uid":2549962,"ip_address":"北京","ucode":"63E462DA5B26D0","user_header":"https://static001.geekbang.org/account/avatar/00/26/e8/ca/6a2621d1.jpg","comment_is_top":false,"comment_ctime":1662103162,"is_pvip":false,"replies":[{"id":"129682","content":"great","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1662109107,"ip_address":"北京","comment_id":356277,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1662103162","product_id":100029001,"comment_content":"CA会将：证书的颁布机构、有效期、公钥、持有者(subject)等信息用 CA 的私钥进行签名。<br>然后客户端需要安装CA的证书，CA证书中包含了CA的公钥，客户端通过CA中的公钥验签数字证书，从而得到服务器的公钥 (这里保证了服务器是真的服务器)<br>然后客户端用hash算法对自己发送的内容进行计算获得摘要，然后利用客户端的私钥对摘要进行加密生成数字签名，<br>然后用服务器的公钥对客户端的数字签名，客户端的公钥等内容进行加密，发给服务端，<br>服务端用自己的私钥解密，获取到客户端发来的数字签名和公钥，服务器利用客户端的公钥解签获取摘要，然后再计算客户端发来的数据包的摘要。通过对比知道是否被人篡改","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586329,"discussion_content":"great","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662109107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":352134,"user_name":"小C","can_delete":false,"product_type":"c1","uid":1338334,"ip_address":"","ucode":"27C2D021A9E21E","user_header":"https://static001.geekbang.org/account/avatar/00/14/6b/de/686585ee.jpg","comment_is_top":false,"comment_ctime":1658395861,"is_pvip":true,"replies":[{"id":"128102","content":"正常，多来几次，要有耐心。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1658411679,"ip_address":"","comment_id":352134,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1658395861","product_id":100029001,"comment_content":"头大，有没有第一次就看懂了的。懵逼","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580945,"discussion_content":"正常，多来几次，要有耐心。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658411680,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345704,"user_name":"阿超.","can_delete":false,"product_type":"c1","uid":1576230,"ip_address":"","ucode":"2B96DE690C98DB","user_header":"https://static001.geekbang.org/account/avatar/00/18/0d/26/73411dd3.jpg","comment_is_top":false,"comment_ctime":1652518108,"is_pvip":true,"replies":[{"id":"126152","content":"很深入的思考，great。<br><br>确实，如果没有证书，公钥的交换就是个大问题，会被别人冒充。证书就是如你所说，把公钥和身份绑在了一起，确认公钥和私钥的对应关系。<br><br>而证书的安全性是由ca保证的，无法伪造，所以攻击者也就无法冒充身份。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1652522126,"ip_address":"","comment_id":345704,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1652518108","product_id":100029001,"comment_content":"我有个疑问, 数字签名是使用用户的私钥对摘要字符串进行加密. 服务器再使用用户的公钥进行解密,那么我抓到用户的请求, 使用用户的公钥,对摘要进行机密. 在使用我的私钥进行加密, 把加密过的摘要字符串,和我的公钥发送给服务端, 那么服务端怎么确认这个请求时我发送的还是用户发送的;<br>我猜测, 在原文里面会有用户的身份标识, 服务器在使用用户公钥对摘要字符串进行解密时.记录我的身份,在拿到原文后,在通过对比原文里面的用户身份标识和解析摘要解析的身份作对比; 如果一样,才能确认消息的发送方.  不知到这个理解对不对<br>","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571982,"discussion_content":"很深入的思考，great。\n\n确实，如果没有证书，公钥的交换就是个大问题，会被别人冒充。证书就是如你所说，把公钥和身份绑在了一起，确认公钥和私钥的对应关系。\n\n而证书的安全性是由ca保证的，无法伪造，所以攻击者也就无法冒充身份。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652522126,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1576230,"avatar":"https://static001.geekbang.org/account/avatar/00/18/0d/26/73411dd3.jpg","nickname":"阿超.","note":"","ucode":"2B96DE690C98DB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":572102,"discussion_content":"嗯嗯, 好的, 了解. 谢谢大佬","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652603619,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":571982,"ip_address":""},"score":572102,"extra":""}]}]},{"had_liked":false,"id":344988,"user_name":"Shanks-王冲","can_delete":false,"product_type":"c1","uid":1042983,"ip_address":"","ucode":"C4B90A17850E20","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ea/27/a3737d61.jpg","comment_is_top":false,"comment_ctime":1651915198,"is_pvip":false,"replies":[{"id":"125993","content":"great","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1652069065,"ip_address":"","comment_id":344988,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1651915198","product_id":100029001,"comment_content":"老师帮看下对不对：）<br><br>回答第1题：为什么公钥能够建立信任链，用对称加密算法里的对称密钥行不行呢？<br><br>拆分2部分解答，其一，用对称密钥不行，对称密钥是能解决加密传输，但两端无法构建信任链；想象一个场景：小海冒充我的身份，通过对称密钥和某宝加密通信，又或者，我通过对称密钥和某宝加密通信，结果网站那头是黑客的伪某宝站点，我能答应吗？其二，公钥能够建立信任链，数字签名 + 几大CA + 证书体系的防范措施。<br><br>回答第2题：假设有一个三级的证书体系（Root CA=&gt; 一级 CA=&gt; 二级 CA），你能详细解释一下证书信任链的验证过程吗？<br><br>尝试登录「极客时间」账号，极客时间是「极客邦」的子域名，由于极客邦申请的是GeoTrust的OV证书，根据本课图片内容，我假定极客邦的OV是GeoTrust 二级CA签发的，我Chrome浏览器收到服务器发来的OV证书，从中解析出二级CA的公钥和名称，向二级CA验签，通过了；再从二级CA中解析出一级CA的公钥和名称，向一级CA验签，通过了；再从一级CA中解析出Root CA的公钥和名称，向一级Root CA验签，通过了；一级CA向Self-Signed证书验签，通过了，再返回一个结果到Chrome，信任链结束。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571104,"discussion_content":"great","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652069066,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":344458,"user_name":"Geek_115bc8","can_delete":false,"product_type":"c1","uid":1673843,"ip_address":"","ucode":"71FBC9F02AFE1B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erXRaa98A3zjLDkOibUJV1254aQ4EYFTbSLJuEvD0nXicMNA8pLoxOfHf5kPTbGLXNicg8CPFH3Tn0mA/132","comment_is_top":false,"comment_ctime":1651567007,"is_pvip":false,"replies":[{"id":"125823","content":"在实验环境里多操作操作，再结合图示慢慢理解。一次不行就多来几次，其实等你明白了之后就会发现也没那么难。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1651736894,"ip_address":"","comment_id":344458,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1651567007","product_id":100029001,"comment_content":"我已经彻底的蒙了。这太抽象了。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":570339,"discussion_content":"在实验环境里多操作操作，再结合图示慢慢理解。一次不行就多来几次，其实等你明白了之后就会发现也没那么难。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651736894,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336257,"user_name":"cake","can_delete":false,"product_type":"c1","uid":1966533,"ip_address":"","ucode":"55A7FC6CC1204C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/01/c5/b48d25da.jpg","comment_is_top":false,"comment_ctime":1646039204,"is_pvip":false,"replies":[{"id":"122920","content":"摘要算法+加密可以实现防纂改，但密钥的交换、分发是个大问题，所以用非对称算法的公私钥对就可以解决这个问题。<br><br>私钥加密之后，同时就实现了身份认证和防篡改。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1646115217,"ip_address":"","comment_id":336257,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1646039204","product_id":100029001,"comment_content":"私钥加密的作用是签名，实现身份认证，防篡改，而不是数据保密，老师请问下，防篡改不是摘要算法+加密就可以实现么，为什么私钥加密还要防篡改呢","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553837,"discussion_content":"摘要算法+加密可以实现防纂改，但密钥的交换、分发是个大问题，所以用非对称算法的公私钥对就可以解决这个问题。\n\n私钥加密之后，同时就实现了身份认证和防篡改。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646115217,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333140,"user_name":"ahao","can_delete":false,"product_type":"c1","uid":2898682,"ip_address":"","ucode":"BA63BE2FD58AAB","user_header":"https://static001.geekbang.org/account/avatar/00/2c/3a/fa/31f5319d.jpg","comment_is_top":false,"comment_ctime":1644125568,"is_pvip":false,"replies":[{"id":"121749","content":"有一个名词叫tls passthrough，就是说代理直接转发两边的流量，不做加密卸载，可以搜一下相关的资料。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1644221558,"ip_address":"","comment_id":333140,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1644125568","product_id":100029001,"comment_content":"老师，我有一点不太懂，proxy可以实现加密卸载也就是对下游tsl通信，对上游不需要以减少通信带宽；但是origin server要调用第三方的支付接口，需要实现tls通信；那这个时候是不是proxy就不需要做加密卸载了？对上下游都是tls通信以此保证origin server也可以进行发证书给第三方服务让其验证的操作？<br>换种说法就是一般origin server调用第三方服务都是需要tls通信的，那是它直接通过证书收发、混合加密、验签的操作与目标通信吗？这种情况下两者之间还能存在proxy代理吗？如果存在是origin server始终都与proxy进行非tls通信，由proxy对第三方服务进行tls通信。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549732,"discussion_content":"有一个名词叫tls passthrough，就是说代理直接转发两边的流量，不做加密卸载，可以搜一下相关的资料。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644221558,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2898682,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/3a/fa/31f5319d.jpg","nickname":"ahao","note":"","ucode":"BA63BE2FD58AAB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":549735,"discussion_content":"好的，谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644221977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":549732,"ip_address":""},"score":549735,"extra":""}]}]},{"had_liked":false,"id":330795,"user_name":"cake","can_delete":false,"product_type":"c1","uid":1966533,"ip_address":"","ucode":"55A7FC6CC1204C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/01/c5/b48d25da.jpg","comment_is_top":false,"comment_ctime":1642165559,"is_pvip":false,"replies":[{"id":"120987","content":"要把证书链的认证过程搞清楚，证书里有公钥，但签名是用ca的私钥生成的，所以验证签名就要用ca私钥对应的证书，比如根证书。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1642476901,"ip_address":"","comment_id":330795,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1642165559","product_id":100029001,"comment_content":"老师请问下您，数字证书的签名用的私钥是服务端的私钥还是 CA机构的私钥呢？如果是CA机构的私钥，要去解密私钥的话，需要公钥，那么这个公钥是谁的公钥呢？他放在哪里的呢？ ","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546952,"discussion_content":"要把证书链的认证过程搞清楚，证书里有公钥，但签名是用ca的私钥生成的，所以验证签名就要用ca私钥对应的证书，比如根证书。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642476902,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330794,"user_name":"cake","can_delete":false,"product_type":"c1","uid":1966533,"ip_address":"","ucode":"55A7FC6CC1204C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/01/c5/b48d25da.jpg","comment_is_top":false,"comment_ctime":1642165307,"is_pvip":false,"replies":[{"id":"120986","content":"ca只负责签发证书，服务器生成公私钥对，交给ca制作。<br><br>可以看一些OpenSSL的资料，自己试着走一下证书的制作过程。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1642476826,"ip_address":"","comment_id":330794,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1642165307","product_id":100029001,"comment_content":"我有点搞不懂，这个数字证书里面的公钥是CA生产的，还是服务端生产的然后交给CA机构，让他通过数字证书发布？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546951,"discussion_content":"ca只负责签发证书，服务器生成公私钥对，交给ca制作。\n\n可以看一些OpenSSL的资料，自己试着走一下证书的制作过程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642476826,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330793,"user_name":"cake","can_delete":false,"product_type":"c1","uid":1966533,"ip_address":"","ucode":"55A7FC6CC1204C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/01/c5/b48d25da.jpg","comment_is_top":false,"comment_ctime":1642165243,"is_pvip":false,"replies":[{"id":"120985","content":"本地生成公私钥对，把公钥交给ca，让ca用它的私钥给自己的公钥签名做出证书，这样就保证了公钥不会被窜改，也就可以被其他人信任。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1642476764,"ip_address":"","comment_id":330793,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1642165243","product_id":100029001,"comment_content":"老师，为了解决公钥信任问题，通过CA机构发布数字证书来发布公钥，数字证书里面有服务端的公钥，和用CA机构的私钥签名的数字签名，验证证书，是通过更高级别的证书 —— 更高级别CA证书里面的公钥来解密用CA私钥的签名，是这个意思么？ CA机构发布数字证书来发布公钥，这句话的公钥指的是服务端生成好了，交给CA机构，让他通过数字证书来发布，这个公钥包含在数字证书里面？还是说这个证书里面的公钥是CA机构根据服务端信息生成的？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546950,"discussion_content":"本地生成公私钥对，把公钥交给ca，让ca用它的私钥给自己的公钥签名做出证书，这样就保证了公钥不会被窜改，也就可以被其他人信任。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642476764,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330363,"user_name":"cake","can_delete":false,"product_type":"c1","uid":1966533,"ip_address":"","ucode":"55A7FC6CC1204C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/01/c5/b48d25da.jpg","comment_is_top":false,"comment_ctime":1641952349,"is_pvip":false,"replies":[{"id":"120591","content":"这个公钥就是CA证书里的公钥，签名的私钥就是CA的签名，两者是对应的。<br><br>证书里只有签名，用来验证签名需要另外的一个证书，也就是ca的证书，这就构成了一个证书链，逐个验证。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1642120164,"ip_address":"","comment_id":330363,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1641952349","product_id":100029001,"comment_content":"老师请问下，验证CA发布的证书，验证的时候会用公钥去解密私钥的签名，请问这个公钥指的是谁的公钥呢？CA机构的么？这个签名的私钥也指的是CA机构的么？ 意思说证书里除了有服务端的公钥，还有用来解密  CA机构用CA机构的私钥签名的摘要的公钥吗？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545976,"discussion_content":"这个公钥就是CA证书里的公钥，签名的私钥就是CA的签名，两者是对应的。\n\n证书里只有签名，用来验证签名需要另外的一个证书，也就是ca的证书，这就构成了一个证书链，逐个验证。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642120164,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325197,"user_name":"墨中白","can_delete":false,"product_type":"c1","uid":2144757,"ip_address":"","ucode":"356791A632F311","user_header":"https://static001.geekbang.org/account/avatar/00/20/b9/f5/cfeb1094.jpg","comment_is_top":false,"comment_ctime":1638859556,"is_pvip":false,"replies":[{"id":"118047","content":"有一些小问题，会话密钥一般是不需要做摘要签名的，可以参考后面的tls协议，看看是怎么做密钥交换的。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1638919975,"ip_address":"","comment_id":325197,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1638859556","product_id":100029001,"comment_content":"假设A的公钥为ax,私钥为ay,会话密钥为Z,B的公钥为bx,私钥为by,会话密钥为Z,<br>整体步骤可以总结如下<br>第一步：A将生成的会话密钥Z通过摘要算法获得摘要，私钥ay加密摘要形成数字签名，数字签名公开，获取B的公钥bx,会话密钥Z用B的公钥bx进行加密,发送给B。<br><br>第二步：B获取消息，用自己的私钥by进行解密获得会话密钥Z，摘要算法计算会话密钥得到摘要p1，获取A的数字签名，用A的公钥ax解密数字签名进行身份认证同时获得摘要p2与p1进行对比，确保会话密钥Z没有被篡改。完成会话密钥交换，接下来使用会话密钥通信。<br><br>第三步：B用将回复消息用摘要算法获得摘要，私钥by加密摘要形成数字签名，数字签名公开，回复消息通过会话密钥Z加密，发送给A<br><br>第四步：A获取消息，用会话公钥Z解密获得原文，摘要算法计算原文得到摘要z1，A获取B的数字签名，通过B的公钥bx解密获的摘要z2,对比z1和z2，确保消息没有被篡改。<br>有错误的地方希望大家能够指出来","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536952,"discussion_content":"有一些小问题，会话密钥一般是不需要做摘要签名的，可以参考后面的tls协议，看看是怎么做密钥交换的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638919975,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319560,"user_name":"Geek_b73fff","can_delete":false,"product_type":"c1","uid":2832035,"ip_address":"","ucode":"9534E83DFD5DFE","user_header":"","comment_is_top":false,"comment_ctime":1635849875,"is_pvip":false,"replies":[{"id":"115823","content":"私钥加密后的数据作用是签名认证，而不是为了保密，只要能用对应的公钥解密，就说明是私钥持有人生成的签名。<br><br>可以对比现实中的签名或者公章。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1635895810,"ip_address":"","comment_id":319560,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1635849875","product_id":100029001,"comment_content":"数字签名有点问题。私钥只有服务端有，公钥是公开的。那数字签名通过私钥加密，公钥解密的意义在哪里，不还是可以被破解的么？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529672,"discussion_content":"私钥加密后的数据作用是签名认证，而不是为了保密，只要能用对应的公钥解密，就说明是私钥持有人生成的签名。\n\n可以对比现实中的签名或者公章。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635895810,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314649,"user_name":"wsxzei","can_delete":false,"product_type":"c1","uid":2766280,"ip_address":"","ucode":"8527ED444BFC73","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/JHzZynEKL2CibTaxCZV3XOs1bJJFqbmwhmibd4U5njlaNVWPrbre1Qha2XUx1dcQ99iaYFl13PyjlYQ0rcl9N5vEg/132","comment_is_top":false,"comment_ctime":1633279029,"is_pvip":false,"replies":[{"id":"114001","content":"<br>1.握手时的签名是为了防篡改，但原文不仅是椭圆曲线公钥，而是前面发出的所有数据，具体是哪些记不太清了了，想详细了解可以看rfc的描述。<br><br>2.看dh算法的过程，是通信双方交换参数，计算实现共享密码，这其中就没有原文和摘要的参与，自然就不能实现签名了。<br><br>3.rsa算法支持公私钥加密解密，所以只要把原文摘要，再用私钥加密，得到的就是签名。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1633395764,"ip_address":"","comment_id":314649,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1633279029","product_id":100029001,"comment_content":"老师好，想请教下您RSA签名算法利用的原文和摘要是怎么来的？<br>26讲TSL1.2第二次握手过程中，Server key exchange后会用RSA签名算法，利用服务器证书的私钥给椭圆曲线公钥做个签名，以验证公钥的完整性，那这个数字签名的原文是不是椭圆曲线公钥，摘要是利用SHA2摘要算法生成的？<br>在答疑篇中，您说DH算法不能用于数字签名，是因为没有原文和摘要部分，这个地方还是不太明白，为什么RSA就可以呢，劳烦老师再解释一下。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527751,"discussion_content":"\n1.握手时的签名是为了防篡改，但原文不仅是椭圆曲线公钥，而是前面发出的所有数据，具体是哪些记不太清了了，想详细了解可以看rfc的描述。\n\n2.看dh算法的过程，是通信双方交换参数，计算实现共享密码，这其中就没有原文和摘要的参与，自然就不能实现签名了。\n\n3.rsa算法支持公私钥加密解密，所以只要把原文摘要，再用私钥加密，得到的就是签名。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633395764,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314596,"user_name":"wsxzei","can_delete":false,"product_type":"c1","uid":2766280,"ip_address":"","ucode":"8527ED444BFC73","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/JHzZynEKL2CibTaxCZV3XOs1bJJFqbmwhmibd4U5njlaNVWPrbre1Qha2XUx1dcQ99iaYFl13PyjlYQ0rcl9N5vEg/132","comment_is_top":false,"comment_ctime":1633247533,"is_pvip":false,"replies":[{"id":"113965","content":"回答的很详细。<br><br>关于证书链的验证顺序，从下往上和从上往下，最终的结果都是一样的，所以都可以。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1633306651,"ip_address":"","comment_id":314596,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1633247533","product_id":100029001,"comment_content":"问题1：为什么公钥能建立信任链，用对称加密算法里的对称密钥行不行？<br>公钥能建立信任链是因为有CA的信任链和最后的根CA认证，利用非对称算法可以进行身份认证。<br>对称加密中的密钥不能验证双方的身份，而一旦公开又会导致信息丧失机密性。<br>问题2：有一个三级的证书体系（Root CA=&gt; 一级 CA=&gt; 二级 CA），你能详细解释一下证书信任链的验证过程吗？（自己总结了下，并参考了https:&#47;&#47;www.jianshu.com&#47;p&#47;fcd0572c4765）<br>服务器会在握手的时候返回整个证书链，浏览器可以从下往上验证，具体步骤是：<br>服务器的证书中包含了服务器的公钥，为了证明证书是可信的，需要利用二级CA的公钥（位于二级CA的证书中）验证证书上的二级CA的数字签名；若有了二级CA的认证，则需要验证二级CA的可靠性，因此需要用一级CA的公钥对二级CA证书上的签名进行验证；得到一级CA的认证后，再利用浏览器中的根CA的公钥验证一级CA的资质，若一级CA是可靠的，则服务器的公钥是安全可信的。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527729,"discussion_content":"回答的很详细。\n\n关于证书链的验证顺序，从下往上和从上往下，最终的结果都是一样的，所以都可以。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633306651,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314579,"user_name":"wsxzei","can_delete":false,"product_type":"c1","uid":2766280,"ip_address":"","ucode":"8527ED444BFC73","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/JHzZynEKL2CibTaxCZV3XOs1bJJFqbmwhmibd4U5njlaNVWPrbre1Qha2XUx1dcQ99iaYFl13PyjlYQ0rcl9N5vEg/132","comment_is_top":false,"comment_ctime":1633240777,"is_pvip":false,"replies":[{"id":"113964","content":"证书的验证顺序不是特别重要的，只要证书链上的证书都可信，那么服务器证书就是可信安全的。反之，只要有一个无效，那么服务器证书就不安全。<br><br>所以，先验根后验根没有什么特别的意义，必须都要验证才行。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1633306571,"ip_address":"","comment_id":314579,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1633240777","product_id":100029001,"comment_content":"老师好，我对于验证证书链的过程（课后练习2）还是有些迷糊，我讲下自己的理解，老师您看下是否正确。<br>我感觉最高赞关于这道题的答案与文中描述相反，文中介绍的验证过程应该是先获得服务器公钥的证书（即二级证书），在证书中找到签名并利用二级CA的公钥去验证签名；验证成功后，二级CA有一级证书，按照相同的方法利用一级CA的公钥去验证签名；一级CA有ROOT CA的证书，然后利用根CA的公钥解析出签名，并和浏览器中的根证书比对，如果吻合则服务器的公钥是安全的。<br>老师，您看我的理解是否正确，若不正确麻烦您再给我解释下。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527725,"discussion_content":"证书的验证顺序不是特别重要的，只要证书链上的证书都可信，那么服务器证书就是可信安全的。反之，只要有一个无效，那么服务器证书就不安全。\n\n所以，先验根后验根没有什么特别的意义，必须都要验证才行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633306571,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":313197,"user_name":"Geek_1760ca","can_delete":false,"product_type":"c1","uid":1513123,"ip_address":"","ucode":"5D29BAB6ACDDF8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKH4ILYLTcZjkl4lqZL6r4ZqPCic6IgPNByYccszEwhI0CU8SWW8g96gdIWiapw1RI6eYiagP10rXusA/132","comment_is_top":false,"comment_ctime":1632306803,"is_pvip":false,"replies":[{"id":"113477","content":"应用场景不一样。<br><br>hmac是会话过程中的完整性，使用对称密钥。<br><br>签名是在建立安全连接时的握手阶段，此时还没有产生会话密钥。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1632359175,"ip_address":"","comment_id":313197,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1632306803","product_id":100029001,"comment_content":"有个疑问，请老师指导。在完整性中，摘要是用会话密钥(对称密钥)加解密，在数字签名中，摘要是用非对称密钥加解密? 这是一次通信过程中的不同阶段么？这里比较困惑。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527272,"discussion_content":"应用场景不一样。\n\nhmac是会话过程中的完整性，使用对称密钥。\n\n签名是在建立安全连接时的握手阶段，此时还没有产生会话密钥。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632359175,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":310793,"user_name":"cake","can_delete":false,"product_type":"c1","uid":1966533,"ip_address":"","ucode":"55A7FC6CC1204C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/01/c5/b48d25da.jpg","comment_is_top":false,"comment_ctime":1630912936,"is_pvip":false,"replies":[{"id":"112668","content":"<br>1.会话密钥加密摘要，不是签名，而是保证消息的完整性，就是hmac。<br><br>2.你理解的对，会话密钥加密摘要是为了实现完整性，私钥加密摘要是为了实现身份认证和不可否认。<br><br>3.Finished消息是为了验证握手的正确性，不是身份验证，所以用的是会话密钥，保证后续的加解密可以正常工作。<br>","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1630972512,"ip_address":"","comment_id":310793,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1630912936","product_id":100029001,"comment_content":"老师，请教一下，在讲完整性的时候，你提到了 &quot;在混合加密系统里用会话密钥加密消息和摘要&quot;实现完整性，这句话中的用会话密钥加密摘要，是指的签名吗？ 签名是用的私钥加密摘要，这里的会话密钥是私钥吗?    还是说私钥就是私钥，会话密钥是会话密钥，会话密钥加密摘要是为了实现完整性，私钥加密摘要是为了实现身份认证和不可否认， 后面那一章节的TLS最后发送Finished消息，这个步骤加密前面发送的所有消息的摘要的是用的私钥，还是会话密钥呢","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526356,"discussion_content":"\n1.会话密钥加密摘要，不是签名，而是保证消息的完整性，就是hmac。\n\n2.你理解的对，会话密钥加密摘要是为了实现完整性，私钥加密摘要是为了实现身份认证和不可否认。\n\n3.Finished消息是为了验证握手的正确性，不是身份验证，所以用的是会话密钥，保证后续的加解密可以正常工作。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630972512,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":309976,"user_name":"Geek_f72367","can_delete":false,"product_type":"c1","uid":1582753,"ip_address":"","ucode":"9C0C8B110AA5A7","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJrGia7c6VRslc7ZvcYycX2mrQJVs63zfLFyictMuzR4Kh2IVkfOgL0OicPlOdR1V4ZUH9yO4qavl4xQ/132","comment_is_top":false,"comment_ctime":1630422055,"is_pvip":false,"replies":[{"id":"112342","content":"这个不是方向，而是验证顺序，因为这个是证书链，只要链条上的所有证书都有效就可以了，可以从任意一头开始验证。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1630473056,"ip_address":"","comment_id":309976,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1630422055","product_id":100029001,"comment_content":"老师您好，对于第二个问题，看了其他同学们的留言和您的回答，我有点疑惑了，这个证书链校验过程，怎么两个方向都可以，1. Root CA-&gt;...-&gt; 二级CA，2. 二级CA-&gt;...-&gt;Root CA ,我上网找了一些文章，得出的结论是从Root CA到二级CA方向上的解析验证，不知道对不对，还请老师解答","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526081,"discussion_content":"这个不是方向，而是验证顺序，因为这个是证书链，只要链条上的所有证书都有效就可以了，可以从任意一头开始验证。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630473056,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":303594,"user_name":"吃货的自我修养","can_delete":false,"product_type":"c1","uid":2124390,"ip_address":"","ucode":"A62DDD09847877","user_header":"","comment_is_top":false,"comment_ctime":1626866570,"is_pvip":false,"replies":[{"id":"109907","content":"说的很详细，基本是这样，但要注意，这只是个类比，和CA、证书的实际流程还是有区别的，只能用来帮助理解。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1626917160,"ip_address":"","comment_id":303594,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1626866570","product_id":100029001,"comment_content":"用公安部门发放身份证来举例数字证书与CA之前的关系是不是这样？<br>CA颁发给网站A的数字证书=公安机关发给我的身份证<br>数字证书的信誉由CA背书=我的身份证的可信度由公安机关背书<br>数字证书里网站的公钥等信息=身份证上我的信息<br>数字证书里网站的公钥等信息摘要=身份证上我的信息摘要(这里假设这个摘要算法特简单就直接是等于身份证号)<br>CA私钥加密数字证书信息摘要=公安机关私钥加密身份证号<br>验证数字证书证明网站A公钥可信=身份证刷卡机通过刷身份证验证我的身份<br>刷卡机是真的的前提下，<br>数字证书验签的过程是，刷卡机可以正常刷出我的身份证号(摘要)，证明我的身份证确实公安机关发的，通过我身份证上的信息摘要(即身份证号)，如果这个身份证号和我身份证上的身份证号是一致的，那么证明我的身份证是真的，<br>而ROOT CA ,一级CA，二级CA可以理解为全国总公安机关，广东公安机关，深圳公安机关，证书信任链可以理解为，刷卡机刷出我的身份证信息是深圳公安机关发的，上级是广东公安机关，广东公安机关上级是全国总公安机关，信任总公安机关的前提下，总公安机关证明广东公安机关的信誉，广东公安机关证明深圳公安机关的信誉，深圳公安机关查到了我的身份证号，从而证明我的身份证是真的；如果不信任总公安机关（根证书），那么总公安机关通过层层下级机关发给我的身份证也会被认为是不可信的","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523748,"discussion_content":"说的很详细，基本是这样，但要注意，这只是个类比，和CA、证书的实际流程还是有区别的，只能用来帮助理解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626917160,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":300254,"user_name":"刘诚","can_delete":false,"product_type":"c1","uid":1566580,"ip_address":"","ucode":"6A0E59315376D9","user_header":"https://static001.geekbang.org/account/avatar/00/17/e7/74/41e0cb6e.jpg","comment_is_top":false,"comment_ctime":1625065148,"is_pvip":false,"replies":[{"id":"108866","content":"留言区里有很多其他同学的回答，可以参考。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1625110384,"ip_address":"","comment_id":300254,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1625065148","product_id":100029001,"comment_content":"假设有一个三级的证书体系（Root CA=&gt; 一级 CA=&gt; 二级 CA），你能详细解释一下证书信任链的验证过程吗？这个问题的答案在哪里呀？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522689,"discussion_content":"留言区里有很多其他同学的回答，可以参考。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625110384,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298206,"user_name":"X青年","can_delete":false,"product_type":"c1","uid":2010313,"ip_address":"","ucode":"E6EB3CCA7DB1C8","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJH3dribPS9AibkGhjN0giaWAa45SD8lCxkStyQrJibl7CPJRDNicvicwM224tHd3gLq2wvWbMAQ70IF6IA/132","comment_is_top":false,"comment_ctime":1623948965,"is_pvip":false,"replies":[{"id":"108211","content":"后面讲tls会有抓包。<br><br>如果说是想了解公私钥和证书是如何生成的，这个其实是和http没有太大关系的，自己实验可以用OpenSSL来本地生成，网上可以搜一下。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1623982441,"ip_address":"","comment_id":298206,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1623948965","product_id":100029001,"comment_content":"老师，没弄明白公私钥是通过一些工具生成的，那公钥又要在CA机构颁发，这两者之间的关联没想明白，老师是否考虑用一个网站配合抓包图文并茂的更详细展示整个过程来说明可能会更直观，我看了很多留言，有些同学说听迷糊了，主要是缺乏抓包配合来看，如果有一个章节用抓包图文并茂会比较直观","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522057,"discussion_content":"后面讲tls会有抓包。\n\n如果说是想了解公私钥和证书是如何生成的，这个其实是和http没有太大关系的，自己实验可以用OpenSSL来本地生成，网上可以搜一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623982441,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":297760,"user_name":"齐大柱","can_delete":false,"product_type":"c1","uid":2029976,"ip_address":"","ucode":"694BBCA988C1DE","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f9/98/53740221.jpg","comment_is_top":false,"comment_ctime":1623764137,"is_pvip":false,"replies":[{"id":"108132","content":"awsome","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1623806543,"ip_address":"","comment_id":297760,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1623764137","product_id":100029001,"comment_content":"一. 数字证书的组成<br>公开部分：序列号，签发机构，被签发机构，有效时间，被签发机构的公钥，摘要算法...<br>数字签名部分（签发机构使用摘要算法，计算公开部分的摘要，接着使用自己的私钥加密摘要，生成数字签名）<br>二. 客户端收到数字证书后的动作<br>1. 读取签发机构，接着在本地找到对应的根证书（如果找不到，说明此数字证书不可信）<br>2. 此时已拿到根证书的公钥，用此公钥去解密我们收到的数字证书里的数字签名，得到摘要。接着使用同样的摘要算法计算公开部分，用此结果与摘要对比，如果一样，则证书可信，则证书里的公钥可信！<br><br>","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521932,"discussion_content":"awsome","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623806543,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":295725,"user_name":"hao","can_delete":false,"product_type":"c1","uid":2368078,"ip_address":"","ucode":"371A47DD4510E7","user_header":"https://static001.geekbang.org/account/avatar/00/24/22/4e/2e081d9c.jpg","comment_is_top":false,"comment_ctime":1622559636,"is_pvip":false,"replies":[{"id":"107384","content":"是的，所以现在md5和sha1已经不推荐使用了。<br><br>任何事情都没有100%的，只要达到一定的要求，可以接受就够了。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1622595404,"ip_address":"","comment_id":295725,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1622559636","product_id":100029001,"comment_content":"摘要算法可能存在冲突，那么不就意味着修改报文内容后，到达服务器再对报文进行摘要算法获取到的值有很小的几率它还是会跟没修改的时候相同，那么摘要算法也不能完全保证完整性呀（虽然这种几率会很小小，毕竟不是万能的）","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521193,"discussion_content":"是的，所以现在md5和sha1已经不推荐使用了。\n\n任何事情都没有100%的，只要达到一定的要求，可以接受就够了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622595404,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2368078,"avatar":"https://static001.geekbang.org/account/avatar/00/24/22/4e/2e081d9c.jpg","nickname":"hao","note":"","ucode":"371A47DD4510E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377301,"discussion_content":"感觉在实际应用中更多的是做一种取舍，就好像混合加密一样，兼顾性能和安全，悟了👏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622596669,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":295414,"user_name":"宇毛","can_delete":false,"product_type":"c1","uid":1697083,"ip_address":"","ucode":"DF39034FF35925","user_header":"https://static001.geekbang.org/account/avatar/00/19/e5/3b/89a45bae.jpg","comment_is_top":false,"comment_ctime":1622423295,"is_pvip":false,"replies":[{"id":"107239","content":"需要理解非对称加密算法。<br><br>非对称算法有两个密钥，私钥保密，公钥公开，所以公钥是谁都可以拿到的，而私钥只能是一个人持有。<br><br>因为这个非对称性，所以私钥加密公钥解密就不是用于保密数据，而是验证身份，因为公钥解密成功，就代表数据是由对应的私钥加密的。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1622444794,"ip_address":"","comment_id":295414,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1622423295","product_id":100029001,"comment_content":"“签名和公钥一样完全公开，任何人都可以获取。但这个签名只有用私钥对应的公钥才能解开，拿到摘要后，再比对原文验证完整性，就可以像签署文件一样证明消息确实是你发的。”，老师感觉这里怎么有点逻辑问题呢，上面说 “这个签名只有用私钥对应的公钥才能解开”  ，但是 “签名和公钥一样完全公开，任何人都可以获取” ，这不是说黑客也可以获取通信双方的公钥吗？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521067,"discussion_content":"需要理解非对称加密算法。\n\n非对称算法有两个密钥，私钥保密，公钥公开，所以公钥是谁都可以拿到的，而私钥只能是一个人持有。\n\n因为这个非对称性，所以私钥加密公钥解密就不是用于保密数据，而是验证身份，因为公钥解密成功，就代表数据是由对应的私钥加密的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622444794,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294950,"user_name":"BoyiKia","can_delete":false,"product_type":"c1","uid":1983680,"ip_address":"","ucode":"D37541B4451D6B","user_header":"https://static001.geekbang.org/account/avatar/00/1e/44/c0/cd2cd082.jpg","comment_is_top":false,"comment_ctime":1622164532,"is_pvip":false,"replies":[{"id":"107071","content":"证书和签名是两个东西，不能合在一起，证书是不变的，而签名会因为原文而变化。<br><br>所以验证的时候是同时发证书和签名。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1622169363,"ip_address":"","comment_id":294950,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1622164532","product_id":100029001,"comment_content":"老师 早上好。这里有点疑问。当客服端和服务器tls握手的过程中时，服务器把申请的证书发给客服端。那么还用发服务器的摘要  和数字签名吗？需要发公钥吗？<br><br>我理解的是:<br>  1. ca证书里面已经绑定了公钥  不需要单独再发公钥。<br>  2.签名=私钥签名  摘要，也就是客服端验签的过程中，既确定了，发送方的身份，也确定了报文完整性。<br> 3.那么证书里面是否包含服务器的签名？还是说服务器需要单独发签名？<br><br>望老师指点一下。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520891,"discussion_content":"证书和签名是两个东西，不能合在一起，证书是不变的，而签名会因为原文而变化。\n\n所以验证的时候是同时发证书和签名。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622169363,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294780,"user_name":"BoyiKia","can_delete":false,"product_type":"c1","uid":1983680,"ip_address":"","ucode":"D37541B4451D6B","user_header":"https://static001.geekbang.org/account/avatar/00/1e/44/c0/cd2cd082.jpg","comment_is_top":false,"comment_ctime":1622087261,"is_pvip":false,"replies":[{"id":"107024","content":"这里面有两个问题，要分开来看。<br><br>签名用的是私钥加密公钥解密，有私钥才能签名，而公钥解密后对比摘要验证身份。<br><br>问题在于公钥可能会被伪造，所以要用ca背书的证书，来保证公钥的可靠性。<br><br>所以身份认证基于非对称加密，使用的是公私钥，依靠的是私钥签名，加上防伪造的证书，共同起作用。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1622099631,"ip_address":"","comment_id":294780,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1622087261","product_id":100029001,"comment_content":"签名，可以保证 发送方的身份。<br><br>证书，将公钥和网站身份进行绑定，是用来验证，发布的公钥的合法性。<br><br>那么，身份认证，到底是签名保证的，还是证书来保证的呢。回头学习，感觉还是有点绕。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520805,"discussion_content":"这里面有两个问题，要分开来看。\n\n签名用的是私钥加密公钥解密，有私钥才能签名，而公钥解密后对比摘要验证身份。\n\n问题在于公钥可能会被伪造，所以要用ca背书的证书，来保证公钥的可靠性。\n\n所以身份认证基于非对称加密，使用的是公私钥，依靠的是私钥签名，加上防伪造的证书，共同起作用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622099631,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":291493,"user_name":"纽扣","can_delete":false,"product_type":"c1","uid":1313813,"ip_address":"","ucode":"870A1E731E1C02","user_header":"https://static001.geekbang.org/account/avatar/00/14/0c/15/ad1d202c.jpg","comment_is_top":false,"comment_ctime":1620307664,"is_pvip":false,"replies":[{"id":"105600","content":"验签是指先对原文做摘要，然后用证书的公钥解密签名，比对摘要。<br><br>所以这个过程就看验签的对象是什么，证书就对它里面的各个要素，具体是哪些就得去看标准规范了。<br><br>摘要是单向函数，无法还原。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1620349708,"ip_address":"","comment_id":291493,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1620307664","product_id":100029001,"comment_content":"”一级证书的公钥+摘要验签，二级证书的公钥和摘要验签，服务器的公钥和摘要验签&quot;<br><br>请问这里的摘要验签，是指下一层证书吗？如果不是，那这是对什么内容的摘要？如果是，那都hash摘要了不是就不能还原了吗？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519483,"discussion_content":"验签是指先对原文做摘要，然后用证书的公钥解密签名，比对摘要。\n\n所以这个过程就看验签的对象是什么，证书就对它里面的各个要素，具体是哪些就得去看标准规范了。\n\n摘要是单向函数，无法还原。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620349708,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":290287,"user_name":"徐小刚Curry","can_delete":false,"product_type":"c1","uid":2461977,"ip_address":"","ucode":"B616C1A2BAB569","user_header":"https://static001.geekbang.org/account/avatar/00/25/91/19/57935a4d.jpg","comment_is_top":false,"comment_ctime":1619486597,"is_pvip":false,"replies":[{"id":"105228","content":"一般客户端不需要私钥，HTTPS通信单向认证服务器就够了，可以看后面的TLS握手过程。<br>","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1619496502,"ip_address":"","comment_id":290287,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1619486597","product_id":100029001,"comment_content":"所以说客户端也有一对私钥和公钥？可是我们用浏览器上网的时候从来看不到这个私钥呢？私钥由浏览器保管吗？会被窃取吗？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519160,"discussion_content":"一般客户端不需要私钥，HTTPS通信单向认证服务器就够了，可以看后面的TLS握手过程。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619496502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":288372,"user_name":"相遇太早～","can_delete":false,"product_type":"c1","uid":1609771,"ip_address":"","ucode":"81C2C8DDC8D8EC","user_header":"https://static001.geekbang.org/account/avatar/00/18/90/2b/564f9143.jpg","comment_is_top":false,"comment_ctime":1618448539,"is_pvip":false,"replies":[{"id":"104665","content":"完整性很重要，高级黑客或者国家级别的攻击能力很强大，摘要能够保证不被解密后窜改。<br><br>解密总是会成功的，但解密后的数据是否正确（可能仍然是乱码，比如一个压缩包、视频文件），没有完整性就无法验证。<br><br>另外，摘要也无法防止重复攻击，应该用随机数、nonce等技术。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1618450458,"ip_address":"","comment_id":288372,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1618448539","product_id":100029001,"comment_content":"老师，请教个问题，感觉验证完整性没有必要。因为发送的内容是用对称加密的，黑客拿到密文随便篡改后，对称加密应该是解不开的，解密已经报错了，还没到验证完整性那一步。如果黑客拿到了对称密钥，那他就可以解密，然后同时修改原文和摘要，这是验证完整性就没有意义了。所以我觉得摘要的作用应该是防止重放类似的攻击。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518606,"discussion_content":"完整性很重要，高级黑客或者国家级别的攻击能力很强大，摘要能够保证不被解密后窜改。\n\n解密总是会成功的，但解密后的数据是否正确（可能仍然是乱码，比如一个压缩包、视频文件），没有完整性就无法验证。\n\n另外，摘要也无法防止重复攻击，应该用随机数、nonce等技术。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618450458,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":287692,"user_name":"泰一","can_delete":false,"product_type":"c1","uid":1757959,"ip_address":"","ucode":"D85C764BA108CE","user_header":"https://static001.geekbang.org/account/avatar/00/1a/d3/07/5fc3c694.jpg","comment_is_top":false,"comment_ctime":1618110404,"is_pvip":false,"replies":[{"id":"104497","content":"公钥是公开的，不会有人去窃取，只能是被拦截冒名顶替。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1618143610,"ip_address":"","comment_id":287692,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1618110404","product_id":100029001,"comment_content":"你好，老师，我还想问下，一种黑客是单纯窃取公钥，一种黑客拦截并替换为自己的公钥，这两种是不是都算是中间人攻击的概念呢？还是说只有第二种才算是中间人攻击。因为我看维基百科的描述好像第二种才算中间人攻击。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518391,"discussion_content":"公钥是公开的，不会有人去窃取，只能是被拦截冒名顶替。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618143610,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":287458,"user_name":"泰一","can_delete":false,"product_type":"c1","uid":1757959,"ip_address":"","ucode":"D85C764BA108CE","user_header":"https://static001.geekbang.org/account/avatar/00/1a/d3/07/5fc3c694.jpg","comment_is_top":false,"comment_ctime":1617957804,"is_pvip":false,"replies":[{"id":"104400","content":"<br>1.理解的很对，所以要解决公钥的信任问题，防范中间人攻击，就得引入数字证书和ca。<br><br>2.私钥加密公钥解密，虽然是这么说，但实际上都用来做加签验签，不是单纯的加解密。<br>公钥解密是肯定可以成功的，因为就是个数学运算，但出来的数字和摘要对不上，所以就是验签失败。<br><br>这个和对称加密解密是一个道理，无论如何都可以解密，但密钥不对，出来的就是没有意义的乱码。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1617968410,"ip_address":"","comment_id":287458,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1617957804","product_id":100029001,"comment_content":"您好老师，请帮忙看下我的理解是否正确：<br><br>假设黑客eve不会伪造公钥（没有自己的公钥和私钥），只是单纯的窃取到了bob和alice的公钥，那么黑客就可以向bob和alice发送消息，这会让bob和alice误认为消息是对方发的。此时，数字签名就派上用场了，因为bob和alice收到消息后首先要用对方的公钥验签，又因为黑客eve没有私钥，无法签名，所以这就导致身份验证失败。这就是数字签名的作用。<br><br>假设黑客eve能够伪造公钥和私钥，也就是黑客eve发起了中间人攻击。因为eve可以用自己的私钥去签名，而bob和alice实际上得到的是eve的公钥（他们误以为是对方的公钥，实际上公钥交换过程被eve拦截了），这时bob和alice实际用了eve的公钥去验签，肯定会成功，因此此时数字签名就无效了。这时候就需要认证公钥的安全性，因此就需要数字证书和CA了。<br><br>您看以上两段理解是否ok呢？<br><br>另外，我想问下如果验签失败，也就是说用公钥解密消息摘要失败的话，在实际代码中是返回错误以表示解密失败的呢，还是说其他形式来告诉我们解密失败？还是说无论是正确的消息还是黑客的消息，公钥验签都能解出数据来？不知道我有没有表达清楚意思，麻烦老师解答，辛苦啦。","like_count":0,"discussions":[{"author":{"id":1757959,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/d3/07/5fc3c694.jpg","nickname":"泰一","note":"","ucode":"D85C764BA108CE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":366427,"discussion_content":"你好，老师，我还想问下，上述两种case，一种是单纯窃取公钥，一种是替换为自己的公钥，是不是都算是中间人攻击的概念呢？还是说只有第二种，替换自己的公钥才算是真正的中间人攻击？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618057920,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":283837,"user_name":"杨冬武","can_delete":false,"product_type":"c1","uid":1800054,"ip_address":"","ucode":"87D414D3F90F85","user_header":"https://static001.geekbang.org/account/avatar/00/1b/77/76/739a173e.jpg","comment_is_top":false,"comment_ctime":1615951271,"is_pvip":false,"replies":[{"id":"102984","content":"欢迎经验分享。<br><br>密码学对于初学者的确是不太好理解，我讲的可能还不是太通俗，大家可以在课外多找一些其他资料，互相参照这学习。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1615983775,"ip_address":"","comment_id":283837,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1615951271","product_id":100029001,"comment_content":"对于新手可以推荐一本书《我的第一本算法书》宫崎修一 石田保辉<br>这本书的第五章 安全算法，图文方式，很通俗易懂。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517161,"discussion_content":"欢迎经验分享。\n\n密码学对于初学者的确是不太好理解，我讲的可能还不是太通俗，大家可以在课外多找一些其他资料，互相参照这学习。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615983775,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":275736,"user_name":"Reborn 2.0","can_delete":false,"product_type":"c1","uid":1977474,"ip_address":"","ucode":"BA506E7455D91C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/2c/82/98e2b82a.jpg","comment_is_top":false,"comment_ctime":1611654643,"is_pvip":false,"replies":[{"id":"100092","content":"<br>1.对称密钥的问题是无法验证身份，任意人都可以持有。<br><br>2.对。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1611709953,"ip_address":"","comment_id":275736,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1611654643","product_id":100029001,"comment_content":"1. 对称密钥不能建立起信任链, 因为黑客既然返回了错误的公钥, 那么只要且租了对称密钥, 就可以拦截住CA的证书校验, 把这个错误的公钥告诉client是正确的, 放心用. <br>2. 文中没有讲解证书信任链的校验过程, 我的理解是: 拿到二级CA的公钥后, 去一级CA看一下这个二级CA的公钥对不对, 拿到一级CA的公钥后去RootCA那里看看这个对不对. 只要root证明一级, 一级证明二级CA的公钥是正确的, 我们就说二级CA颁发的数字证书(包含了目标server的公钥)是正确的.","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514457,"discussion_content":"\n1.对称密钥的问题是无法验证身份，任意人都可以持有。\n\n2.对。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611709953,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272267,"user_name":"佟宏元","can_delete":false,"product_type":"c1","uid":2224337,"ip_address":"","ucode":"052233A5720447","user_header":"","comment_is_top":false,"comment_ctime":1610011052,"is_pvip":false,"replies":[{"id":"98740","content":"说的对。<br><br>不过在谈到密码学、加密的时候，要尽量避免把password说成密码，容易造成混乱，最好用口令这个词。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1610068387,"ip_address":"","comment_id":272267,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1610011052","product_id":100029001,"comment_content":"服务端和客户端如何验证双方身份，并且数字证书的作用：<br>1、混合加密算法保证了客户端账户密码不会被修改。<br>2、客户端账户、密码在服务端验证后，可以确认当前客户端身份。<br>3、在客户端使用机构公钥解密数字证书得出当前服务端信息，与访问地址作对比，判断服务端身份。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513217,"discussion_content":"说的对。\n\n不过在谈到密码学、加密的时候，要尽量避免把password说成密码，容易造成混乱，最好用口令这个词。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610068387,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":266530,"user_name":"123","can_delete":false,"product_type":"c1","uid":2254642,"ip_address":"","ucode":"701F0C970CBE70","user_header":"https://static001.geekbang.org/account/avatar/00/22/67/32/efb8ca32.jpg","comment_is_top":false,"comment_ctime":1607387431,"is_pvip":false,"replies":[{"id":"96801","content":"理解的基本正确，hmac可以认为是带上了秘钥的摘要算法，可以再去网上搜一些资料，大概了解一下。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1607393711,"ip_address":"","comment_id":266530,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1607387431","product_id":100029001,"comment_content":"HMAC那里没太搞明白，我之前理解的是，tls链接建立起来之后，每次客户端发数据会带一个HMAC校验码，这个校验码本身其实就是一HASH？是对要发送的数据和会话密钥做的HASH？目的是认证发送数据的来源可靠，数据完整，HMAC本身不保护机密性","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511298,"discussion_content":"理解的基本正确，hmac可以认为是带上了秘钥的摘要算法，可以再去网上搜一些资料，大概了解一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607393711,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":254408,"user_name":"打死也不说","can_delete":false,"product_type":"c1","uid":2148536,"ip_address":"","ucode":"3BAC355BCEE397","user_header":"https://static001.geekbang.org/account/avatar/00/20/c8/b8/14a35cda.jpg","comment_is_top":false,"comment_ctime":1603112612,"is_pvip":false,"replies":[{"id":"92871","content":"不用，私钥只是最开始在握手阶段使用，用来交换会话密钥，之后就全用对称加密了。可以参考后面的tls讲解。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1603155617,"ip_address":"","comment_id":254408,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1603112612","product_id":100029001,"comment_content":"请问服务端会话阶段还会使用私钥加密摘要？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507381,"discussion_content":"不用，私钥只是最开始在握手阶段使用，用来交换会话密钥，之后就全用对称加密了。可以参考后面的tls讲解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603155617,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242663,"user_name":"may_huang","can_delete":false,"product_type":"c1","uid":1451623,"ip_address":"","ucode":"EAF989F18FC109","user_header":"https://static001.geekbang.org/account/avatar/00/16/26/67/c3d90f46.jpg","comment_is_top":false,"comment_ctime":1597806077,"is_pvip":true,"replies":[{"id":"89539","content":"私钥不能被自己以外的其他人持有，否则就无法实现身份认证了，公钥可以互相交换。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1597885119,"ip_address":"","comment_id":242663,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1597806077","product_id":100029001,"comment_content":"服务器和客户端是否需要相同的私钥，他们如何获取相同的私钥，一直很纠结。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504068,"discussion_content":"私钥不能被自己以外的其他人持有，否则就无法实现身份认证了，公钥可以互相交换。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597885119,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233918,"user_name":"better","can_delete":false,"product_type":"c1","uid":1169063,"ip_address":"","ucode":"AF1DB566EBB8A5","user_header":"https://static001.geekbang.org/account/avatar/00/11/d6/a7/ac23f5a6.jpg","comment_is_top":false,"comment_ctime":1594518497,"is_pvip":false,"replies":[{"id":"86329","content":"理解的差不多了，不过用公章来比拟证书还不是太准确，公章相当于签名，证书是比签名（公章）更大一些的概念，可以理解成公章加上防伪证明。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1594541132,"ip_address":"","comment_id":233918,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1594518497","product_id":100029001,"comment_content":"感谢老师的讲解，十分感谢，第二个问题，可否这样回答：<br><br>到底什么是证书？<br><br>通过上面的一些概念，那么证书不难理解，实际上就类似于现实生活的公章，只不过在此基础上，添加一些有效期、用途、颁发者等信息，CA 通过自己的私钥将这些内容加密后，而颁发给对应网站的，个人上网时，拿到此证书，会先拿到 CA 的公钥，验证此证书是否是来自 CA，是则接下来就走非对称加密的流程了，否则提示不安全；那如果是其二级或三次代理CA颁发的证书的呢？那就执行相同的步骤往根上走，直到有一个是可信的CA颁发者为止，否则直到 Root CA，都找不到的话，那此证书就有问题；问题的关键，还是在于上一节的课后作业，证书（公章）的目的是证明此证书（公章）是有我颁发（盖章）的。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501218,"discussion_content":"理解的差不多了，不过用公章来比拟证书还不是太准确，公章相当于签名，证书是比签名（公章）更大一些的概念，可以理解成公章加上防伪证明。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594541132,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225235,"user_name":"阿感","can_delete":false,"product_type":"c1","uid":1910075,"ip_address":"","ucode":"7BCB7E44A832D1","user_header":"https://static001.geekbang.org/account/avatar/00/1d/25/3b/a971fc8e.jpg","comment_is_top":false,"comment_ctime":1591689218,"is_pvip":false,"replies":[{"id":"82992","content":"是一个证书链，从根证书开始，从里面取公钥，然后逐个验签。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1591751355,"ip_address":"","comment_id":225235,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591689218","product_id":100029001,"comment_content":"请问下老师，发回给客户端的证书除了服务器的公钥，也包含ca机构信息，这个信息包括ca自己的公钥吧，这样ca的公钥来解密数字签名，进行验签吗","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497781,"discussion_content":"是一个证书链，从根证书开始，从里面取公钥，然后逐个验签。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591751355,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225230,"user_name":"alvin","can_delete":false,"product_type":"c1","uid":2013447,"ip_address":"","ucode":"E79D9C6EE8D016","user_header":"https://static001.geekbang.org/account/avatar/00/1e/b9/07/aab6784b.jpg","comment_is_top":false,"comment_ctime":1591688514,"is_pvip":false,"replies":[{"id":"82993","content":"总结的不错，但注意ecdhe算法不是公钥加密Pre-Master，而是ecdhe的算法参数，两边各自算出Pre-Master。<br><br>可以再看后面的tls1.2握手过程。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1591751456,"ip_address":"","comment_id":225230,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591688514","product_id":100029001,"comment_content":"（1）Client Hello 客户端返回 protocol (譬如 tsl1.2)+ client-random + 支持的密码套件列表<br>（2）Server Hello 服务端收到后，确认信息。服务端收到后从支持的密码套件列表选择一个对称加密算法 比如 AES 和非对称加密 ECDHE<br>\t最终给客户端返回 证书 （包含了公钥） + server-random + 使用的密码套件 AES + ECDHE <br>（3）Client Key Exchange 客户端收到证书后，校验证书是否有效，用本地内置的公钥+对应的摘要算法解密，查看是否证书被窜改、证书是否被吊销，域名是否一致等。最终可以拿到公钥。<br>\t有效后生成随机数pre-master<br>\t最终给服务端返回 使用  ECDHE + 公钥 加密的 pre-master<br><br>\t因为使用了 ECDHE，客户端可以不用等到服务器发回“Finished”确认握手完毕，立即就发出 HTTP 报文，\t<br>\t最终两端可以通过 client-random + server-random + pre-master 生成会话密钥 session key，之后通过 AES 对称加密加密报文。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497780,"discussion_content":"总结的不错，但注意ecdhe算法不是公钥加密Pre-Master，而是ecdhe的算法参数，两边各自算出Pre-Master。\n\n可以再看后面的tls1.2握手过程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591751456,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225077,"user_name":"alvin","can_delete":false,"product_type":"c1","uid":2013447,"ip_address":"","ucode":"E79D9C6EE8D016","user_header":"https://static001.geekbang.org/account/avatar/00/1e/b9/07/aab6784b.jpg","comment_is_top":false,"comment_ctime":1591630304,"is_pvip":false,"replies":[{"id":"82878","content":"还是要理解非对称算法的特点，私钥保密公钥公开，私钥加密的数据公钥可以解密，目的是为了验证私钥持有者的身份，而不是为了保密数据。<br><br>黑客没有私钥，就不能伪造签名，也就无法冒充身份，只有公钥只是能够验证签名，不能制作签名。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1591668304,"ip_address":"","comment_id":225077,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591630304","product_id":100029001,"comment_content":"摘要算法：保证了报文内容不被篡改。<br>数字签名：摘要 + 私钥加密。<br>               假设黑客有公钥，同样的摘要算法，仍然可以破解密文。<br>数字证书：CA 会用自己的私钥将证书内容的摘要进行加密。这里为什么可以保证公钥可信任？假设黑客有公钥（公钥是公开的），黑客截获证书，黑客还是有公钥，也可以用同样的办法破解密文。假装客户端就和服务端建立起了通信。。这里有点疑惑","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497720,"discussion_content":"还是要理解非对称算法的特点，私钥保密公钥公开，私钥加密的数据公钥可以解密，目的是为了验证私钥持有者的身份，而不是为了保密数据。\n\n黑客没有私钥，就不能伪造签名，也就无法冒充身份，只有公钥只是能够验证签名，不能制作签名。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591668304,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":217905,"user_name":"BoyiKia","can_delete":false,"product_type":"c1","uid":1983680,"ip_address":"","ucode":"D37541B4451D6B","user_header":"https://static001.geekbang.org/account/avatar/00/1e/44/c0/cd2cd082.jpg","comment_is_top":false,"comment_ctime":1589643328,"is_pvip":false,"replies":[{"id":"80568","content":"<br>1.中间的证书是服务器发过来的，是一个证书链。<br><br>2.理解正确。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1589678485,"ip_address":"","comment_id":217905,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1589643328","product_id":100029001,"comment_content":"老师，请问下。<br>1 .假设  服务器 发送的证书是 二级证书，但是浏览器预先加载的只有根证书。那么中间这些证书是是从哪里获得的呢？<br>2.证书的验证原理，<br>  ①  查找过程: 假设服务器发来的是二级证书，那么客服端 会先 找到 他的 上一级颁发者(一级证书)，然后 通过一级证书的上一级 根证书。由于根证书是预先加载到客服端的。<br>②验证过程: 通过根证书的公钥 解密一级证书 数字签名，通过指纹 验证一级证书的合法性，同理 一级证书 同样方式验证二级证书(也就是我们假设的服务器发来证书)。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495286,"discussion_content":"\n1.中间的证书是服务器发过来的，是一个证书链。\n\n2.理解正确。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589678485,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216589,"user_name":"海盗船长","can_delete":false,"product_type":"c1","uid":1363634,"ip_address":"","ucode":"ECB28BA21A4113","user_header":"https://static001.geekbang.org/account/avatar/00/14/ce/b2/1f914527.jpg","comment_is_top":false,"comment_ctime":1589291616,"is_pvip":false,"replies":[{"id":"80169","content":"黑客虽然不能破解密文，但他可以捣乱，对传输过程搞破坏，颠倒密文的顺序或者增删数据，如果没有摘要，你收到数据后解密，也不知道数据是否是完整的。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1589331692,"ip_address":"","comment_id":216589,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1589291616","product_id":100029001,"comment_content":"“不过摘要算法不具有机密性，如果明文传输，那么黑客可以修改消息后把摘要也一起改了，网站还是鉴别不出完整性。所以，真正的完整性必须要建立在机密性之上，在混合加密系统里用会话密钥加密消息和摘要，这样黑客无法得知明文，也就没有办法动手脚了。”  老师，对于这段为什么摘要信息要和明文要一起加密，还是没有理解。如果黑客能破解密文，那摘要信息放哪都一样呀","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494875,"discussion_content":"黑客虽然不能破解密文，但他可以捣乱，对传输过程搞破坏，颠倒密文的顺序或者增删数据，如果没有摘要，你收到数据后解密，也不知道数据是否是完整的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589331692,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1363634,"avatar":"https://static001.geekbang.org/account/avatar/00/14/ce/b2/1f914527.jpg","nickname":"海盗船长","note":"","ucode":"ECB28BA21A4113","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":264537,"discussion_content":"哦 如果摘要信息不加密的话，黑客可以对摘要信息进行破坏 使得数据完整性验证无法通过","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589332705,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216451,"user_name":"海盗船长","can_delete":false,"product_type":"c1","uid":1363634,"ip_address":"","ucode":"ECB28BA21A4113","user_header":"https://static001.geekbang.org/account/avatar/00/14/ce/b2/1f914527.jpg","comment_is_top":false,"comment_ctime":1589262316,"is_pvip":false,"replies":[{"id":"80111","content":"摘要算法严格来说不能算是加密，在正文里这么说只是一种不太贴切的比喻，方便你理解。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1589271646,"ip_address":"","comment_id":216451,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1589262316","product_id":100029001,"comment_content":"摘要算法与加密算法的区别：摘要算法加密后的数据无法解密，不能从摘要逆推出原文。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494823,"discussion_content":"摘要算法严格来说不能算是加密，在正文里这么说只是一种不太贴切的比喻，方便你理解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589271646,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":207378,"user_name":"Geek_e87cdb","can_delete":false,"product_type":"c1","uid":1816085,"ip_address":"","ucode":"E74EC3CA4E1752","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er4x36mk2xTocQ3iccTgYib3lNWZl6YcrpiaibFltENqe2FCsFfJdpVzbDLpNLT7D1ZLhZTtpxL73icPibw/132","comment_is_top":false,"comment_ctime":1587063289,"is_pvip":false,"replies":[{"id":"77456","content":"单从密码学来看，什么时候都可以做摘要，只要你想保证完整性。<br><br>但如果使用TLS协议，那么在握手阶段会对握手数据做摘要签名，后面有了会话密钥后就没必要了，而且现在的AES_GCM、ChaCha20_Poly1305都内置完整性校验。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1587084691,"ip_address":"","comment_id":207378,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1587063289","product_id":100029001,"comment_content":"老师，我想问一下，消息摘要是只在生成证书数字签名的时候用到了吗？还是每次通信都会对传输的数据进行消息摘要，然后附带摘要以验证完整性？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492103,"discussion_content":"单从密码学来看，什么时候都可以做摘要，只要你想保证完整性。\n\n但如果使用TLS协议，那么在握手阶段会对握手数据做摘要签名，后面有了会话密钥后就没必要了，而且现在的AES_GCM、ChaCha20_Poly1305都内置完整性校验。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587084691,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":206455,"user_name":"Joker","can_delete":false,"product_type":"c1","uid":1156592,"ip_address":"","ucode":"126AF848001A1E","user_header":"https://static001.geekbang.org/account/avatar/00/11/a5/f0/8648c464.jpg","comment_is_top":false,"comment_ctime":1586863748,"is_pvip":false,"replies":[{"id":"77219","content":"公钥没用，必须是私钥才行，只有私钥才能证明身份，中间人没有私钥就无法冒名顶替。<br>","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1586927220,"ip_address":"","comment_id":206455,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1586863748","product_id":100029001,"comment_content":"请教一个问题：如果在交换公钥 的时候，中间人截获了双方的公钥，那么中间人又可以模拟客户端了么。。。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491797,"discussion_content":"公钥没用，必须是私钥才行，只有私钥才能证明身份，中间人没有私钥就无法冒名顶替。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586927220,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":206041,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1586778538,"is_pvip":false,"replies":[{"id":"76981","content":"有部分理解有误。<br><br>验签不是用会话密钥，而是公钥解密后直接对比摘要，可以参考示意图。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1586825467,"ip_address":"","comment_id":206041,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1586778538","product_id":100029001,"comment_content":"又来了：<br>机密性用混合加密来保证<br>完整性用摘要算法来保证<br>摘要的机密性和完整性用会话密钥加密报文和摘要来保证<br>身份认证用私钥加密摘要（签名）来保证，另一端用公钥解密得到摘要，再用会话密钥加密报文获得摘要来验签摘要<br>公钥的信任问题由第三方CA来保证","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491647,"discussion_content":"有部分理解有误。\n\n验签不是用会话密钥，而是公钥解密后直接对比摘要，可以参考示意图。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586825467,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1004092,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","nickname":"张三","note":"","ucode":"1155528FAE1546","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":231710,"discussion_content":"明白了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586826864,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":205662,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1586698130,"is_pvip":false,"replies":[{"id":"76907","content":"应该是好几年前的wosign事件吧，确实相当恶劣。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1586743347,"ip_address":"","comment_id":205662,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1586698130","product_id":100029001,"comment_content":"好像之前有个新闻说谷歌等浏览器都不信任360的CA了吧","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491546,"discussion_content":"应该是好几年前的wosign事件吧，确实相当恶劣。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586743347,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":205395,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1586606949,"is_pvip":false,"replies":[{"id":"76736","content":"my pleasure。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1586646898,"ip_address":"","comment_id":205395,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1586606949","product_id":100029001,"comment_content":"精彩！解惑了。最近也在代码中看到PKI相关的错误，解决办法是把证书加到本地jdk里，现在知道来龙去脉了。谢谢","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491471,"discussion_content":"my pleasure。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586646898,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":190869,"user_name":"欢乐的小马驹","can_delete":false,"product_type":"c1","uid":1078951,"ip_address":"","ucode":"B594106688CEE7","user_header":"https://static001.geekbang.org/account/avatar/00/10/76/a7/374e86a7.jpg","comment_is_top":false,"comment_ctime":1584702225,"is_pvip":false,"replies":[{"id":"73713","content":"这个是做了16进制转换ASCII码，一个字节用两个字符表示，比如0xac，显示成“ac”两个字符。<br>","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1584927075,"ip_address":"","comment_id":190869,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1584702225","product_id":100029001,"comment_content":"老师你好，sha256中的256不应该是32个字节的吗？<br>但是我打开https:&#47;&#47;www.chrono.com&#47;25-1?algo=sha256之后，发现结果是：03ac674216f3e15c761ee1a5e255f067953623c8b388b4459e13f978d7c846f4。这个是64个字节，这是怎么回事呢？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488070,"discussion_content":"这个是做了16进制转换ASCII码，一个字节用两个字符表示，比如0xac，显示成“ac”两个字符。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584927075,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":180295,"user_name":"加温后的啤酒","can_delete":false,"product_type":"c1","uid":1344488,"ip_address":"","ucode":"5F30978CDB1606","user_header":"https://static001.geekbang.org/account/avatar/00/14/83/e8/f726c635.jpg","comment_is_top":false,"comment_ctime":1582252307,"is_pvip":false,"replies":[{"id":"70017","content":"<br>1.我没有做过app开发，大概了解了一下。<br>它的用途是用来证明开发者身份的，而不是证明网站的身份，但做法都是差不多，用证书对应的私钥来对app签名，这样苹果或者安卓就可以验证app，的确是你而不是其他人假冒发布的。<br><br>2.https只是加密了传输中的数据，传输过程本身不是保密的线路，当然就可以被监听抓到。<br>虽然抓到了数据，但都是被加密的，没有会话密钥就无法解密，所以即使被监听也是安全的。<br>https的设计目标就是在不安全的线路里实现安全通信。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1582263647,"ip_address":"","comment_id":180295,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1582252307","product_id":100029001,"comment_content":"老师您好 有两个问题比较疑惑，一直没有想明白<br>1.app开发时，项目里也会有一个证书……这个证书是做什么的？起到什么作用呢？<br>2.经常会有人说用charles可以找到https的包？那既然https是安全的，为什么还能被抓到包呢？抓https原理是什么呢？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484601,"discussion_content":"\n1.我没有做过app开发，大概了解了一下。\n它的用途是用来证明开发者身份的，而不是证明网站的身份，但做法都是差不多，用证书对应的私钥来对app签名，这样苹果或者安卓就可以验证app，的确是你而不是其他人假冒发布的。\n\n2.https只是加密了传输中的数据，传输过程本身不是保密的线路，当然就可以被监听抓到。\n虽然抓到了数据，但都是被加密的，没有会话密钥就无法解密，所以即使被监听也是安全的。\nhttps的设计目标就是在不安全的线路里实现安全通信。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582263647,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179486,"user_name":"GitHubGanKai","can_delete":false,"product_type":"c1","uid":1477351,"ip_address":"","ucode":"BF6D6F8F3EED31","user_header":"https://static001.geekbang.org/account/avatar/00/16/8a/e7/a6c603cf.jpg","comment_is_top":false,"comment_ctime":1582013957,"is_pvip":false,"replies":[{"id":"69725","content":"<br>1.操作系统只存根证书，ca新发的证书需要走证书链，最后如果走到根证书，就会验证通过。你要再理解一下证书的认证过程。<br><br>2.这个不是太清楚，但浏览器的会定期更新的，想Firefox、Chrome就曾经废除过一些ca的根证书。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1582030029,"ip_address":"","comment_id":179486,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1582013957","product_id":100029001,"comment_content":"老师，请问一下，1⃣️，假设操作系统中有10种证书，如果CB认证机构，新颁发了一个证书，这个证书在电脑操作系统中没有，那么，这个证书是不是就认证不过呢？2⃣️还有就是，操作系统中的证书，是不是会定期更新呢？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484278,"discussion_content":"\n1.操作系统只存根证书，ca新发的证书需要走证书链，最后如果走到根证书，就会验证通过。你要再理解一下证书的认证过程。\n\n2.这个不是太清楚，但浏览器的会定期更新的，想Firefox、Chrome就曾经废除过一些ca的根证书。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582030029,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178907,"user_name":"青莲居士","can_delete":false,"product_type":"c1","uid":1374087,"ip_address":"","ucode":"DF269017EDD391","user_header":"https://static001.geekbang.org/account/avatar/00/14/f7/87/e7085d32.jpg","comment_is_top":false,"comment_ctime":1581851638,"is_pvip":false,"replies":[{"id":"69491","content":"<br>1.证书用ca的私钥签名没错，但ca私钥对应的公钥是它自己的，而不是证书里的公钥。证书里的公钥对应的是你自己服务器上的私钥。<br><br>2.ca的私钥只能由ca自己持有，严格保密。<br><br>3.服务器的私钥是在申请证书的时候本地生成的，然后把公钥发给ca，让ca签名做出证书。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1581910564,"ip_address":"","comment_id":178907,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1581851638","product_id":100029001,"comment_content":"服务器申请的证书 里面有 公钥S 、数字签名，而数字签名是用 CA的私钥A 加的密，而 数字签名 可以通过 公钥S 解密，那么 公钥S 与 CA的私钥A 一对非对称加密的密钥<br><br>问题1、上面的理解对么 ？<br><br>问题2、服务器也保存了一个 私钥，就是 上面说的 “CA的私钥A” 么 ？<br><br>问题3、服务器的私钥是哪里来的 ？服务器申请证书的时候 CA 机构 同时给了 服务器 证书 与 私钥 ？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484013,"discussion_content":"\n1.证书用ca的私钥签名没错，但ca私钥对应的公钥是它自己的，而不是证书里的公钥。证书里的公钥对应的是你自己服务器上的私钥。\n\n2.ca的私钥只能由ca自己持有，严格保密。\n\n3.服务器的私钥是在申请证书的时候本地生成的，然后把公钥发给ca，让ca签名做出证书。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581910564,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178666,"user_name":"HunterYuan","can_delete":false,"product_type":"c1","uid":1015256,"ip_address":"","ucode":"F8900C33D29AA7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7d/d8/d7c77764.jpg","comment_is_top":false,"comment_ctime":1581776190,"is_pvip":false,"replies":[{"id":"69350","content":"严格来说服务器向客户端发送的应该是证书链，也就是从自己的证书开始，往上直到根证书的所有证书，形成一条证明链。<br><br>不过为了节约带宽，服务器可能不会发根证书，因为大多数根证书已经在操作系统或者浏览器内置了。<br><br>这个跟服务器的一级、二级没有关系，而是跟证书的级数有关系，可以看一下证书的分级示意图。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1581810347,"ip_address":"","comment_id":178666,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1581776190","product_id":100029001,"comment_content":"老师，我有个疑惑，往能够解答，对于客户端收到服务器应答的究竟是证书呢还是证书链？两者分别在什么情况下返回？能否举个例子说明下，比如说一级服务器返回的是证书，二级服务器返回的是证书链。谢谢","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483915,"discussion_content":"严格来说服务器向客户端发送的应该是证书链，也就是从自己的证书开始，往上直到根证书的所有证书，形成一条证明链。\n\n不过为了节约带宽，服务器可能不会发根证书，因为大多数根证书已经在操作系统或者浏览器内置了。\n\n这个跟服务器的一级、二级没有关系，而是跟证书的级数有关系，可以看一下证书的分级示意图。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581810347,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015256,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7d/d8/d7c77764.jpg","nickname":"HunterYuan","note":"","ucode":"F8900C33D29AA7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":172964,"discussion_content":"好的，明白了，谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581819741,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":176552,"user_name":"、落叶为你舞","can_delete":false,"product_type":"c1","uid":1756562,"ip_address":"","ucode":"A196460774A33F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/cd/92/f75a00dd.jpg","comment_is_top":false,"comment_ctime":1581085234,"is_pvip":false,"replies":[{"id":"68565","content":"不是这样的，数字证书内本身就有ca私钥的签名，它自身就可以保证完整性，否则也不会叫“证书”了。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1581133243,"ip_address":"","comment_id":176552,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1581085234","product_id":100029001,"comment_content":"对数字证书使用摘要算法生成摘要，用私钥加密摘要，向浏览器发送数字证书带上加密后的摘要，这样能保证数字证书的完整性对吗","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483139,"discussion_content":"不是这样的，数字证书内本身就有ca私钥的签名，它自身就可以保证完整性，否则也不会叫“证书”了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581133243,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":175764,"user_name":"芒果","can_delete":false,"product_type":"c1","uid":1154458,"ip_address":"","ucode":"08E6D77030CEE8","user_header":"https://static001.geekbang.org/account/avatar/00/11/9d/9a/4cf0e500.jpg","comment_is_top":false,"comment_ctime":1580824697,"is_pvip":false,"replies":[{"id":"68371","content":"身份验证之后就可以确保安全了，后面就可以交换会话密钥进行安全通信了。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1580873783,"ip_address":"","comment_id":175764,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1580824697","product_id":100029001,"comment_content":"比如，你用自己的私钥签名一个消息“我是小明”。网站收到后用你的公钥验签，确认身份没问题，于是也用它的私钥签名消息“我是某宝”。你收到后再用它的公钥验一下，也没问题，这样你和网站就都知道对方不是假冒的，后面就可以用混合加密进行安全通信了。<br><br>我想问老师的是，后面用混合加密进行通信时还会进行身份验证吗？谢谢老师","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482895,"discussion_content":"身份验证之后就可以确保安全了，后面就可以交换会话密钥进行安全通信了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580873783,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173058,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1579418923,"is_pvip":false,"replies":[{"id":"67166","content":"缺了使用非对称加密交换会话密钥的步骤。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1579483116,"ip_address":"","comment_id":173058,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1579418923","product_id":100029001,"comment_content":"TLS的身份认证环节:<br>总原理:【私钥加密，公钥解密】<br>步骤如下:<br>①客户端和服务器相互交换公钥，各自的私钥，各自保密。<br>②客户端为例，客户端私钥加密摘要，发送给服务器，服务器用客户端公钥解密出摘要，用明文重新生成摘要对比刚解密出来的客户端摘要，一致则确认身份！<br>③使用混合加密进行数据传输！","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481945,"discussion_content":"缺了使用非对称加密交换会话密钥的步骤。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579483116,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":171574,"user_name":"qzmone","can_delete":false,"product_type":"c1","uid":1081681,"ip_address":"","ucode":"E10DC194F04B74","user_header":"https://static001.geekbang.org/account/avatar/00/10/81/51/4999f121.jpg","comment_is_top":false,"comment_ctime":1578967654,"is_pvip":false,"replies":[{"id":"66486","content":"之前好像有同学问过这个问题。<br><br>20字节被16进制编码了，一个字节编码成两个字符，所以总共是40个字符。<br><br>比如0x71，是一个字节，但显示出来就是‘7’‘1’，变成两个字符。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1578970886,"ip_address":"","comment_id":171574,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1578967654","product_id":100029001,"comment_content":"usage: &#47;25-1?algo=xxx&amp;plain=xxx<br><br>algo  : sha1<br>plain : 1234<br>digest: 7110eda4d09e062aa5e4a390b0a572ac0d2c0220<br><br>sha1摘要算法是返回20字节的输出，为啥测试是返回40个字符，相当于40字节吧，这一点没太明白？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481416,"discussion_content":"之前好像有同学问过这个问题。\n\n20字节被16进制编码了，一个字节编码成两个字符，所以总共是40个字符。\n\n比如0x71，是一个字节，但显示出来就是‘7’‘1’，变成两个字符。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578970886,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170858,"user_name":"Wr","can_delete":false,"product_type":"c1","uid":1713790,"ip_address":"","ucode":"738B316AA2AD66","user_header":"https://static001.geekbang.org/account/avatar/00/1a/26/7e/823c083e.jpg","comment_is_top":false,"comment_ctime":1578741599,"is_pvip":false,"replies":[{"id":"66341","content":"还要眼手并用，多管齐下来学习。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1578877094,"ip_address":"","comment_id":170858,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1578741599","product_id":100029001,"comment_content":"一遍不够就多听几遍，加深印象~","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481141,"discussion_content":"还要眼手并用，多管齐下来学习。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578877094,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170856,"user_name":"Wr","can_delete":false,"product_type":"c1","uid":1713790,"ip_address":"","ucode":"738B316AA2AD66","user_header":"https://static001.geekbang.org/account/avatar/00/1a/26/7e/823c083e.jpg","comment_is_top":false,"comment_ctime":1578741550,"is_pvip":false,"replies":[{"id":"66346","content":"<br>1。不完全对，对称密钥要起作用必须至少有两个人持有，那么它就无法鉴别密文究竟是谁加密的，无法实现身份认证，也就无法构建信任链。而非对称里的私钥只能由一个人持有，可以用来鉴别身份。<br><br>2.证书链其实是几个有验证关系的证书文件，验证的过程中并不需要ca的参与（证书作废除外），逐个用证书里的公钥验证证书没有被窜改就 可以了。<br>","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1578877492,"ip_address":"","comment_id":170856,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1578741550","product_id":100029001,"comment_content":"1、，对称加密如果密钥被公开，就没有加密的效果了，<br>2、从最低级证书开始检查，检查时会优先去可信任机构检查，如果找不到，就去证书签发机构检查，找到上一层证书信息，以此类推，如果未找到，浏览器就会给出相关提示信息","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481139,"discussion_content":"\n1。不完全对，对称密钥要起作用必须至少有两个人持有，那么它就无法鉴别密文究竟是谁加密的，无法实现身份认证，也就无法构建信任链。而非对称里的私钥只能由一个人持有，可以用来鉴别身份。\n\n2.证书链其实是几个有验证关系的证书文件，验证的过程中并不需要ca的参与（证书作废除外），逐个用证书里的公钥验证证书没有被窜改就 可以了。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578877492,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165596,"user_name":"Khirye","can_delete":false,"product_type":"c1","uid":1080985,"ip_address":"","ucode":"6C54C126FA54B8","user_header":"https://static001.geekbang.org/account/avatar/00/10/7e/99/c4302030.jpg","comment_is_top":false,"comment_ctime":1577266145,"is_pvip":false,"replies":[{"id":"63195","content":"严格来说，证书里的证明对象是一个“实体”（common name），可以证明任何东西。<br><br>但在互联网的环境下，这个“实体”就通常是域名了。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1577322873,"ip_address":"","comment_id":165596,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1577266145","product_id":100029001,"comment_content":"老师，我想问一下，申请CA证书时，一定要绑定一个域名吗？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479216,"discussion_content":"严格来说，证书里的证明对象是一个“实体”（common name），可以证明任何东西。\n\n但在互联网的环境下，这个“实体”就通常是域名了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577322873,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":162006,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1576428204,"is_pvip":false,"replies":[{"id":"61673","content":"<br>1.可能是因为页面里的其他链接用了http，不全是https，可以点浏览器的小锁头图标看详情。<br><br>2.不可否认特性就是为了“防止老赖”，比如用在金融、银行、电子商务领域，转账、买东西确实是本人的操作，不能说是被盗刷。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1576459494,"ip_address":"","comment_id":162006,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1576428204","product_id":100029001,"comment_content":"老师，以下问题，麻烦抽空看到了回复下：<br>1.比如极客时间的主页和某东的主页，浏览器访问都是显示安全的。当点到具体的文章页面、商品页面就会提示链接不安全，这是什么原因啊？<br><br>2. 不可否认：数字签名。私钥签名公钥验签，能验签说明肯定是你发的，为了减少计算量，私钥对原文的摘要加密。思考：不可否认特性使用非对称加密，通讯建立后都使用对称加密，那这个特性有使用场景么?","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477940,"discussion_content":"\n1.可能是因为页面里的其他链接用了http，不全是https，可以点浏览器的小锁头图标看详情。\n\n2.不可否认特性就是为了“防止老赖”，比如用在金融、银行、电子商务领域，转账、买东西确实是本人的操作，不能说是被盗刷。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576459494,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146182,"user_name":"听雨","can_delete":false,"product_type":"c1","uid":1254493,"ip_address":"","ucode":"252754F9FCFF0C","user_header":"https://static001.geekbang.org/account/avatar/00/13/24/5d/65e61dcb.jpg","comment_is_top":false,"comment_ctime":1572448679,"is_pvip":false,"replies":[{"id":"56439","content":"证书申请是完全另外一个流程了，不是https连接这么简单，可以参考一下rfc8555。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1572483316,"ip_address":"","comment_id":146182,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572448679","product_id":100029001,"comment_content":"老师，申请证书时，也是走这样一个流程吗：先建立TSL连接，然后发送申请资料，CA返回证书这样子","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472741,"discussion_content":"证书申请是完全另外一个流程了，不是https连接这么简单，可以参考一下rfc8555。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572483316,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143467,"user_name":"qiezitx","can_delete":false,"product_type":"c1","uid":1664274,"ip_address":"","ucode":"AEA470E33B4C19","user_header":"https://static001.geekbang.org/account/avatar/00/19/65/12/98fe9d80.jpg","comment_is_top":false,"comment_ctime":1571713475,"is_pvip":false,"replies":[{"id":"55394","content":"服务器的证书链也可以包含根证书，不含根证书是为了效率，少发点数据。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1571717101,"ip_address":"","comment_id":143467,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571713475","product_id":100029001,"comment_content":"保持系统学习~<br><br>这里总结一下：<br>机密性：混合加密。对称加密（常用AES和ChaCha20）+ 非对称加密（常用RSA和ECC）<br>完整性：摘要算法（即哈希算法，如MD5、SHA1，但TLS常用SHA2）。还需基于机密性才能保证真正的完整性，使用会话密钥再加密摘要形成HMAC。<br>不可否认：数字签名。私钥签名公钥验签，能验签说明肯定是你发的，为了减少计算量，私钥对原文的摘要加密。思考：不可否认特性使用非对称加密，通讯建立后都使用对称加密，那这个特性有使用场景么?<br>身份认证：数字证书。其实数字签名利用私钥的唯一性就实现了身份认证，但毕竟要公钥验签，得把公钥分发出去，怎么保证公钥的可信呢？<br>这里复杂的地方，是涉及多对公钥私钥。<br>首先数字证书是对公钥的签名，还打包了一些其他信息，然后每级CA有自己的私钥公钥，私钥用来签名申请者或者低级CA的公钥，自己的公钥交给高级CA签名，最后到Root CA会有自签名证书，自己证明自己。<br>一般操作系统和浏览器会预装各大CA的根证书，验证过程反过来，首先服务器将自己的证书发过来，里面包含公钥，但是否可信呢？然后一级一级向下验证公钥的可信，最后验证到服务器公钥的可信。<br>ps：看评论，服务端返回的是证书链，不包含根证书。后面验证一下。<br><br>作业：<br>1、要认证两端，关键要利用私钥的唯一性，对称加密不行。<br>2、如上描述。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471553,"discussion_content":"服务器的证书链也可以包含根证书，不含根证书是为了效率，少发点数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571717101,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":141736,"user_name":"- shadow -","can_delete":false,"product_type":"c1","uid":1676738,"ip_address":"","ucode":"97B68447A75354","user_header":"https://static001.geekbang.org/account/avatar/00/19/95/c2/afbb3f61.jpg","comment_is_top":false,"comment_ctime":1571216290,"is_pvip":false,"replies":[{"id":"54792","content":"根证书是自签名证书，也就是自己证明自己，是信任的起点，所以作为用户，也就是“你”，就必须信任它，否则就没有从它开始的整个证书链。<br><br>所谓自签名，就是用证书里的公钥来证明证书里的公钥，自己证明自己。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1571274076,"ip_address":"","comment_id":141736,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571216290","product_id":100029001,"comment_content":"老师你好，对于Root CA怎么证明自己这个地方理解不了。 什么叫做“你必须相信”，这里的你指的是什么？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470866,"discussion_content":"根证书是自签名证书，也就是自己证明自己，是信任的起点，所以作为用户，也就是“你”，就必须信任它，否则就没有从它开始的整个证书链。\n\n所谓自签名，就是用证书里的公钥来证明证书里的公钥，自己证明自己。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571274076,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129346,"user_name":"L","can_delete":false,"product_type":"c1","uid":1228268,"ip_address":"","ucode":"26BB686671F7D4","user_header":"https://static001.geekbang.org/account/avatar/00/12/bd/ec/cc7abf0b.jpg","comment_is_top":false,"comment_ctime":1567091701,"is_pvip":true,"replies":[{"id":"48135","content":"ca不保存任何东西，只是对公钥做签名，生成证书。<br><br>因为证书用的是ca私钥签名，而这个私钥只有ca持有，所以只要验证了证书里的签名，就可以保证证书是正确的，没有被窜改。<br><br>ca严格保管私钥，所以黑客无法获取，也就无法冒充。<br><br>你说的最后一种情况，只有黑客破解了根证书的时候才能出现。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1567119503,"ip_address":"","comment_id":129346,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567091701","product_id":100029001,"comment_content":"想请教一个问题，最后关于CA这部分，我是否可以理解成服务器的公钥在CA处也有一份，浏览器端拿到公约以后就去CA处校验一下是否正确。<br>那么怎么才能保证，浏览器去的CA是正确的呢？怎么保证这中间没有走到其他的地方去了呢？<br>也就是说，假如我在发起一次请求的时候被黑客拦截了，返回了一个假的证书，我使用这个证书去CA去验证的时候，请求又被拦截了，告诉了我假的证书是真的证书，不会出现这种情况吗？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465409,"discussion_content":"ca不保存任何东西，只是对公钥做签名，生成证书。\n\n因为证书用的是ca私钥签名，而这个私钥只有ca持有，所以只要验证了证书里的签名，就可以保证证书是正确的，没有被窜改。\n\nca严格保管私钥，所以黑客无法获取，也就无法冒充。\n\n你说的最后一种情况，只有黑客破解了根证书的时候才能出现。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567119503,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126371,"user_name":"kmmshmily","can_delete":false,"product_type":"c1","uid":1180659,"ip_address":"","ucode":"98CC446BAEC343","user_header":"https://static001.geekbang.org/account/avatar/00/12/03/f3/008d74f7.jpg","comment_is_top":false,"comment_ctime":1566374571,"is_pvip":false,"replies":[{"id":"46763","content":"在Windows里比较简单，双击证书就会提示安装，在对话框里选择安装的区域就可以了。<br><br>通常都说的是安装到操作系统里，好像很少有说安装到浏览器里的。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1566389111,"ip_address":"","comment_id":126371,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1566374571","product_id":100029001,"comment_content":"老师，您好，如何在系统证书存储区安装根证书呢，这个系统是浏览器，还是操作系统呢","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463957,"discussion_content":"在Windows里比较简单，双击证书就会提示安装，在对话框里选择安装的区域就可以了。\n\n通常都说的是安装到操作系统里，好像很少有说安装到浏览器里的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566389111,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1180659,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/f3/008d74f7.jpg","nickname":"kmmshmily","note":"","ucode":"98CC446BAEC343","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5623,"discussion_content":"谢谢老师能再百忙之中回答我的问题，我用keytool生成了一个证书，然后安装，但浏览器里面还是显示不安全","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566390811,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121930,"user_name":"猫王者","can_delete":false,"product_type":"c1","uid":1248924,"ip_address":"","ucode":"224826F4BA8443","user_header":"https://static001.geekbang.org/account/avatar/00/13/0e/9c/cb9da823.jpg","comment_is_top":false,"comment_ctime":1565251477,"is_pvip":false,"replies":[{"id":"44855","content":"用户也可以自己生成公私钥对，实际上任何人都可以产生私钥。<br><br>比如你在Linux上用命令sshkeygen就可以生成公钥和私钥，然后就可以作为客户端，使用私钥验证自己的身份。<br><br>只是大多数情况下客户端用私钥验证身份比较麻烦，要从ca获取证书，所以通常客户端（用户）没有私钥，但这并不表示客户端不能有私钥。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1565313126,"ip_address":"","comment_id":121930,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565251477","product_id":100029001,"comment_content":"比如，你用自己的私钥签名一个消息“我是小明” <br>为什么用户自己会有私钥，私钥不是只有服务器拥有吗，用户只有公钥啊","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462009,"discussion_content":"用户也可以自己生成公私钥对，实际上任何人都可以产生私钥。\n\n比如你在Linux上用命令sshkeygen就可以生成公钥和私钥，然后就可以作为客户端，使用私钥验证自己的身份。\n\n只是大多数情况下客户端用私钥验证身份比较麻烦，要从ca获取证书，所以通常客户端（用户）没有私钥，但这并不表示客户端不能有私钥。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565313126,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121554,"user_name":"亚洲舞王.尼古拉斯赵四","can_delete":false,"product_type":"c1","uid":1443078,"ip_address":"","ucode":"7159F5D7232696","user_header":"https://static001.geekbang.org/account/avatar/00/16/05/06/f5979d65.jpg","comment_is_top":false,"comment_ctime":1565158421,"is_pvip":false,"replies":[{"id":"44664","content":"不是吧，它的证书是GeoTrust颁发的，肯定是可信任的。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1565173782,"ip_address":"","comment_id":121554,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1565158421","product_id":100029001,"comment_content":"极客时间的https就被Chrome认为是不可信的","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461847,"discussion_content":"不是吧，它的证书是GeoTrust颁发的，肯定是可信任的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565173782,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1008348,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/dc/8876c73b.jpg","nickname":"moooofly","note":"","ucode":"4A20795C281B6F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5826,"discussion_content":"在访问 https://time.geekbang.org/column/article/109503 时，可以看到“您与此网站之间建立的连接并非完全安全”，貌似部分资源的访问不安全","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566474670,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117117,"user_name":"小鱼","can_delete":false,"product_type":"c1","uid":1258839,"ip_address":"","ucode":"9F3D087A95D0C9","user_header":"https://static001.geekbang.org/account/avatar/00/13/35/57/ab4ba792.jpg","comment_is_top":false,"comment_ctime":1563971724,"is_pvip":false,"replies":[{"id":"42907","content":"这个就离HTTP有点太远了，可能介绍不了，抱歉啊。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1564016737,"ip_address":"","comment_id":117117,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563971724","product_id":100029001,"comment_content":"老师，能介绍下EDI的实现过程吗？如基于OFTP2协议的EDI是如何实现的","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459829,"discussion_content":"这个就离HTTP有点太远了，可能介绍不了，抱歉啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564016737,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117085,"user_name":"大小兵","can_delete":false,"product_type":"c1","uid":1209885,"ip_address":"","ucode":"1227870F26D322","user_header":"https://static001.geekbang.org/account/avatar/00/12/76/1d/b4262bdc.jpg","comment_is_top":false,"comment_ctime":1563964324,"is_pvip":false,"replies":[{"id":"42904","content":"不用。<br><br>因为数字签名是公开的，谁都可以拿到后验证签名，所以没有必要加密。<br><br>摘要也不需要发送，本身就已经含在了签名里（公钥解密后得到）。<br><br>原文需要视情况加密，如果需要保密就用会话密钥加密，否则就不用。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1564016552,"ip_address":"","comment_id":117085,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563964324","product_id":100029001,"comment_content":"老师不好意思，刚才第一个问题没问好，我想问的是：<br>用自己的私钥对摘要进行加密生成数字签名，然后原文，摘要，数字签名这三个是不是都要经过会话密钥加密后发送给对方？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459813,"discussion_content":"不用。\n\n因为数字签名是公开的，谁都可以拿到后验证签名，所以没有必要加密。\n\n摘要也不需要发送，本身就已经含在了签名里（公钥解密后得到）。\n\n原文需要视情况加密，如果需要保密就用会话密钥加密，否则就不用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564016552,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116993,"user_name":"阿锋","can_delete":false,"product_type":"c1","uid":1127761,"ip_address":"","ucode":"7AF449ABA89242","user_header":"https://static001.geekbang.org/account/avatar/00/11/35/51/c616f95a.jpg","comment_is_top":false,"comment_ctime":1563952171,"is_pvip":false,"replies":[{"id":"42784","content":"是以证书链的形式传递的，也就是多个链条上相关的证书。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1563958619,"ip_address":"","comment_id":116993,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563952171","product_id":100029001,"comment_content":"那证书信任链最底层的证书，如何找到上层的证书？是不是底层的证书把上层信息也包含了？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459769,"discussion_content":"是以证书链的形式传递的，也就是多个链条上相关的证书。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563958619,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116988,"user_name":"阿锋","can_delete":false,"product_type":"c1","uid":1127761,"ip_address":"","ucode":"7AF449ABA89242","user_header":"https://static001.geekbang.org/account/avatar/00/11/35/51/c616f95a.jpg","comment_is_top":false,"comment_ctime":1563951862,"is_pvip":false,"replies":[{"id":"42782","content":"是的，你理解的很正确。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1563958529,"ip_address":"","comment_id":116988,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563951862","product_id":100029001,"comment_content":"不是很理解这句话：CA 对公钥的签名认证？是CA用自己的私钥对第三方的公钥签名？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459766,"discussion_content":"是的，你理解的很正确。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563958529,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116897,"user_name":"丶景","can_delete":false,"product_type":"c1","uid":1079269,"ip_address":"","ucode":"128AAC7A93E641","user_header":"https://static001.geekbang.org/account/avatar/00/10/77/e5/8b5844df.jpg","comment_is_top":false,"comment_ctime":1563936035,"is_pvip":false,"replies":[{"id":"42762","content":"到下一讲握手的时候回有。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1563948054,"ip_address":"","comment_id":116897,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563936035","product_id":100029001,"comment_content":"希望老师可以滑一张完整的流程图，谢谢老师","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459722,"discussion_content":"到下一讲握手的时候回有。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563948054,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116801,"user_name":"开水","can_delete":false,"product_type":"c1","uid":1528555,"ip_address":"","ucode":"651491C38B925B","user_header":"https://static001.geekbang.org/account/avatar/00/17/52/eb/eec719f3.jpg","comment_is_top":false,"comment_ctime":1563927983,"is_pvip":false,"replies":[{"id":"42677","content":"这块确实不太好理解，有疑问可以随时问。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1563930141,"ip_address":"","comment_id":116801,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563927983","product_id":100029001,"comment_content":"感觉得多看几遍","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459690,"discussion_content":"这块确实不太好理解，有疑问可以随时问。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563930141,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116794,"user_name":"韦超才","can_delete":false,"product_type":"c1","uid":1458773,"ip_address":"","ucode":"302431196B2433","user_header":"https://static001.geekbang.org/account/avatar/00/16/42/55/6b7c61f5.jpg","comment_is_top":false,"comment_ctime":1563927388,"is_pvip":false,"replies":[{"id":"42678","content":"√","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1563930151,"ip_address":"","comment_id":116794,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563927388","product_id":100029001,"comment_content":"HMAC很数字签名都是对哈希摘要进行加密，前者用对称加密，后者用非对称加密。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459688,"discussion_content":"√","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563930151,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}