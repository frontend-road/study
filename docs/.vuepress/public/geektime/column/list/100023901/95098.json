{"id":95098,"title":"33 | Thread-Per-Message模式：最简单实用的分工方法","content":"<p>我们曾经把并发编程领域的问题总结为三个核心问题：分工、同步和互斥。其中，同步和互斥相关问题更多地源自微观，而分工问题则是源自宏观。我们解决问题，往往都是从宏观入手，在编程领域，软件的设计过程也是先从概要设计开始，而后才进行详细设计。同样，<strong>解决并发编程问题，首要问题也是解决宏观的分工问题</strong>。</p><p>并发编程领域里，解决分工问题也有一系列的设计模式，比较常用的主要有Thread-Per-Message模式、Worker Thread模式、生产者-消费者模式等等。今天我们重点介绍Thread-Per-Message模式。</p><h2>如何理解Thread-Per-Message模式</h2><p>现实世界里，很多事情我们都需要委托他人办理，一方面受限于我们的能力，总有很多搞不定的事，比如教育小朋友，搞不定怎么办呢？只能委托学校老师了；另一方面受限于我们的时间，比如忙着写Bug，哪有时间买别墅呢？只能委托房产中介了。委托他人代办有一个非常大的好处，那就是可以专心做自己的事了。</p><p>在编程领域也有很多类似的需求，比如写一个HTTP Server，很显然只能在主线程中接收请求，而不能处理HTTP请求，因为如果在主线程中处理HTTP请求的话，那同一时间只能处理一个请求，太慢了！怎么办呢？可以利用代办的思路，创建一个子线程，委托子线程去处理HTTP请求。</p><!-- [[[read_end]]] --><p>这种委托他人办理的方式，在并发编程领域被总结为一种设计模式，叫做<strong>Thread-Per-Message模式</strong>，简言之就是为每个任务分配一个独立的线程。这是一种最简单的分工方法，实现起来也非常简单。</p><h2>用Thread实现Thread-Per-Message模式</h2><p>Thread-Per-Message模式的一个最经典的应用场景是<strong>网络编程里服务端的实现</strong>，服务端为每个客户端请求创建一个独立的线程，当线程处理完请求后，自动销毁，这是一种最简单的并发处理网络请求的方法。</p><p>网络编程里最简单的程序当数echo程序了，echo程序的服务端会原封不动地将客户端的请求发送回客户端。例如，客户端发送TCP请求\"Hello World\"，那么服务端也会返回\"Hello World\"。</p><p>下面我们就以echo程序的服务端为例，介绍如何实现Thread-Per-Message模式。</p><p>在Java语言中，实现echo程序的服务端还是很简单的。只需要30行代码就能够实现，示例代码如下，我们为每个请求都创建了一个Java线程，核心代码是：new Thread(()-&gt;{...}).start()。</p><pre><code>final ServerSocketChannel  = \n  ServerSocketChannel.open().bind(\n    new InetSocketAddress(8080));\n//处理请求    \ntry {\n  while (true) {\n    // 接收请求\n    SocketChannel sc = ssc.accept();\n    // 每个请求都创建一个线程\n    new Thread(()-&gt;{\n      try {\n        // 读Socket\n        ByteBuffer rb = ByteBuffer\n          .allocateDirect(1024);\n        sc.read(rb);\n        //模拟处理请求\n        Thread.sleep(2000);\n        // 写Socket\n        ByteBuffer wb = \n          (ByteBuffer)rb.flip();\n        sc.write(wb);\n        // 关闭Socket\n        sc.close();\n      }catch(Exception e){\n        throw new UncheckedIOException(e);\n      }\n    }).start();\n  }\n} finally {\n  ssc.close();\n}   \n</code></pre><p>如果你熟悉网络编程，相信你一定会提出一个很尖锐的问题：上面这个echo服务的实现方案是不具备可行性的。原因在于Java中的线程是一个重量级的对象，创建成本很高，一方面创建线程比较耗时，另一方面线程占用的内存也比较大。所以，为每个请求创建一个新的线程并不适合高并发场景。</p><p>于是，你开始质疑Thread-Per-Message模式，而且开始重新思索解决方案，这时候很可能你会想到Java提供的线程池。你的这个思路没有问题，但是引入线程池难免会增加复杂度。其实你完全可以换一个角度来思考这个问题，语言、工具、框架本身应该是帮助我们更敏捷地实现方案的，而不是用来否定方案的，Thread-Per-Message模式作为一种最简单的分工方案，Java语言支持不了，显然是Java语言本身的问题。</p><p>Java语言里，Java线程是和操作系统线程一一对应的，这种做法本质上是将Java线程的调度权完全委托给操作系统，而操作系统在这方面非常成熟，所以这种做法的好处是稳定、可靠，但是也继承了操作系统线程的缺点：创建成本高。为了解决这个缺点，Java并发包里提供了线程池等工具类。这个思路在很长一段时间里都是很稳妥的方案，但是这个方案并不是唯一的方案。</p><p>业界还有另外一种方案，叫做<strong>轻量级线程</strong>。这个方案在Java领域知名度并不高，但是在其他编程语言里却叫得很响，例如Go语言、Lua语言里的协程，本质上就是一种轻量级的线程。轻量级的线程，创建的成本很低，基本上和创建一个普通对象的成本相似；并且创建的速度和内存占用相比操作系统线程至少有一个数量级的提升，所以基于轻量级线程实现Thread-Per-Message模式就完全没有问题了。</p><p>Java语言目前也已经意识到轻量级线程的重要性了，OpenJDK有个Loom项目，就是要解决Java语言的轻量级线程问题，在这个项目中，轻量级线程被叫做<strong>Fiber</strong>。下面我们就来看看基于Fiber如何实现Thread-Per-Message模式。</p><h2>用Fiber实现Thread-Per-Message模式</h2><p>Loom项目在设计轻量级线程时，充分考量了当前Java线程的使用方式，采取的是尽量兼容的态度，所以使用上还是挺简单的。用Fiber实现echo服务的示例代码如下所示，对比Thread的实现，你会发现改动量非常小，只需要把new Thread(()-&gt;{...}).start()换成 Fiber.schedule(()-&gt;{})就可以了。</p><pre><code>final ServerSocketChannel ssc = \n  ServerSocketChannel.open().bind(\n    new InetSocketAddress(8080));\n//处理请求\ntry{\n  while (true) {\n    // 接收请求\n    final SocketChannel sc = \n      ssc.accept();\n    Fiber.schedule(()-&gt;{\n      try {\n        // 读Socket\n        ByteBuffer rb = ByteBuffer\n          .allocateDirect(1024);\n        sc.read(rb);\n        //模拟处理请求\n        LockSupport.parkNanos(2000*1000000);\n        // 写Socket\n        ByteBuffer wb = \n          (ByteBuffer)rb.flip()\n        sc.write(wb);\n        // 关闭Socket\n        sc.close();\n      } catch(Exception e){\n        throw new UncheckedIOException(e);\n      }\n    });\n  }//while\n}finally{\n  ssc.close();\n}\n</code></pre><p>那使用Fiber实现的echo服务是否能够达到预期的效果呢？我们可以在Linux环境下做一个简单的实验，步骤如下：</p><ol>\n<li>首先通过 <code>ulimit -u 512</code> 将用户能创建的最大进程数（包括线程）设置为512；</li>\n<li>启动Fiber实现的echo程序；</li>\n<li>利用压测工具ab进行压测：ab -r -c 20000 -n 200000  <a href=\"http://xn--IP-im8ckc884ihkivx9c:8080/\">http://测试机IP地址:8080/</a></li>\n</ol><p>压测执行结果如下：</p><pre><code>Concurrency Level:      20000\nTime taken for tests:   67.718 seconds\nComplete requests:      200000\nFailed requests:        0\nWrite errors:           0\nNon-2xx responses:      200000\nTotal transferred:      16400000 bytes\nHTML transferred:       0 bytes\nRequests per second:    2953.41 [#/sec] (mean)\nTime per request:       6771.844 [ms] (mean)\nTime per request:       0.339 [ms] (mean, across all concurrent requests)\nTransfer rate:          236.50 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0  557 3541.6      1   63127\nProcessing:  2000 2010  31.8   2003    2615\nWaiting:     1986 2008  30.9   2002    2615\nTotal:       2000 2567 3543.9   2004   65293\n</code></pre><p>你会发现即便在20000并发下，该程序依然能够良好运行。同等条件下，Thread实现的echo程序512并发都抗不过去，直接就OOM了。</p><p>如果你通过Linux命令 <code>top -Hp pid</code> 查看Fiber实现的echo程序的进程信息，你可以看到该进程仅仅创建了16（不同CPU核数结果会不同）个操作系统线程。</p><p><img src=\"https://static001.geekbang.org/resource/image/ae/e9/aebe9691be206fb88f45e4f763bcb7e9.png?wh=826*512\" alt=\"\"></p><p>如果你对Loom项目感兴趣，也想上手试一把，可以下载源代码自己构建，构建方法可以参考<a href=\"https://wiki.openjdk.java.net/display/loom/Main\">Project Loom的相关资料</a>，不过需要注意的是构建之前一定要把代码分支切换到Fibers。</p><h2>总结</h2><p>并发编程领域的分工问题，指的是如何高效地拆解任务并分配给线程。前面我们在并发工具类模块中已经介绍了不少解决分工问题的工具类，例如Future、CompletableFuture 、CompletionService、Fork/Join计算框架等，这些工具类都能很好地解决特定应用场景的问题，所以，这些工具类曾经是Java语言引以为傲的。不过这些工具类都继承了Java语言的老毛病：太复杂。</p><p>如果你一直从事Java开发，估计你已经习以为常了，习惯性地认为这个复杂度是正常的。不过这个世界时刻都在变化，曾经正常的复杂度，现在看来也许就已经没有必要了，例如Thread-Per-Message模式如果使用线程池方案就会增加复杂度。</p><p>Thread-Per-Message模式在Java领域并不是那么知名，根本原因在于Java语言里的线程是一个重量级的对象，为每一个任务创建一个线程成本太高，尤其是在高并发领域，基本就不具备可行性。不过这个背景条件目前正在发生巨变，Java语言未来一定会提供轻量级线程，这样基于轻量级线程实现Thread-Per-Message模式就是一个非常靠谱的选择。</p><p>当然，对于一些并发度没那么高的异步场景，例如定时任务，采用Thread-Per-Message模式是完全没有问题的。实际工作中，我就见过完全基于Thread-Per-Message模式实现的分布式调度框架，这个框架为每个定时任务都分配了一个独立的线程。</p><h2>课后思考</h2><p>使用Thread-Per-Message模式会为每一个任务都创建一个线程，在高并发场景中，很容易导致应用OOM，那有什么办法可以快速解决呢？</p><p>欢迎在留言区与我分享你的想法，也欢迎你在留言区记录你的思考过程。感谢阅读，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友。</p>","neighbors":{"left":{"article_title":"32 | Balking模式：再谈线程安全的单例模式","id":94604},"right":{"article_title":"34 | Worker Thread模式：如何避免重复创建线程？","id":95525}},"comments":[{"had_liked":false,"id":94326,"user_name":"唯美","can_delete":false,"product_type":"c1","uid":1263430,"ip_address":"","ucode":"9186A5B99DFBCA","user_header":"https://static001.geekbang.org/account/avatar/00/13/47/46/61f16147.jpg","comment_is_top":false,"comment_ctime":1557788817,"is_pvip":false,"replies":[{"id":"33804","content":"👍","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1557843903,"ip_address":"","comment_id":94326,"utype":1}],"discussion_count":3,"race_medal":0,"score":"375219943569","product_id":100023901,"comment_content":"快速解决，就只能改jvm内存配置，增大jvm新生代的大小，长期解决，引入NIO或AIO，netty 就是这么干的","like_count":88,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450016,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557843903,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1452563,"avatar":"https://static001.geekbang.org/account/avatar/00/16/2a/13/49c5ae9e.jpg","nickname":"不要说话","note":"","ucode":"7E17BC09D04022","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":353448,"discussion_content":"NIO和AIO是怎么解决的，不懂求解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615166521,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1268264,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5a/28/732d3f2f.jpg","nickname":"GEEKBANG_6638780","note":"","ucode":"952194E56FD8C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1452563,"avatar":"https://static001.geekbang.org/account/avatar/00/16/2a/13/49c5ae9e.jpg","nickname":"不要说话","note":"","ucode":"7E17BC09D04022","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530656,"discussion_content":"基于操作系统的模型。Linux不支持AIO。在直白点，就是减少IO阻塞和减少内存COPY（zero copy）","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1637119033,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":353448,"ip_address":""},"score":530656,"extra":"{\"user_type\":1}"}]}]},{"had_liked":false,"id":94345,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1557793562,"is_pvip":false,"replies":[{"id":"33805","content":"客气了😂😂","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1557843988,"ip_address":"","comment_id":94345,"utype":1}],"discussion_count":2,"race_medal":0,"score":"156176616218","product_id":100023901,"comment_content":"之前一直听别人说go语言很容易抗并发，原来是有个这么牛逼的轻量级线程在啊，并且理解了基本原理，感谢老师分享，为自己扩充了眼界了，为老师打call👍","like_count":37,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450028,"discussion_content":"客气了😂😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557843988,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2614279,"avatar":"https://static001.geekbang.org/account/avatar/00/27/e4/07/1cb174bf.jpg","nickname":"👿","note":"","ucode":"AA3D367FE7834D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574893,"discussion_content":"哪里有原理?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654423335,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97280,"user_name":"韦","can_delete":false,"product_type":"c1","uid":1282724,"ip_address":"","ucode":"A4A66CD1023C3D","user_header":"https://static001.geekbang.org/account/avatar/00/13/92/a4/9eeb686d.jpg","comment_is_top":false,"comment_ctime":1558627254,"is_pvip":false,"replies":[{"id":"34845","content":"👍","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1558672982,"ip_address":"","comment_id":97280,"utype":1}],"discussion_count":1,"race_medal":0,"score":"121817711542","product_id":100023901,"comment_content":"每次创建一个线程高并发肯定OOM，1引入线程池控制创建线程的大小，通过压测得到比较合理的线程数量配置，2 需要在请求端增加一个限流模块，自我保护","like_count":29,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451210,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558672982,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":105895,"user_name":"~Wade","can_delete":false,"product_type":"c1","uid":1253445,"ip_address":"","ucode":"74F5478B704681","user_header":"https://static001.geekbang.org/account/avatar/00/13/20/45/3c5548bb.jpg","comment_is_top":false,"comment_ctime":1561100750,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"104640315854","product_id":100023901,"comment_content":"有一个java库叫Quasar Fiber ，通过javaagent技术可以实现轻量级线程  <br>官网：http:&#47;&#47;www.paralleluniverse.co&#47;quasar&#47;","like_count":25,"discussions":[{"author":{"id":1662987,"avatar":"https://static001.geekbang.org/account/avatar/00/19/60/0b/d7dddf19.jpg","nickname":"皮皮","note":"","ucode":"8C986AA546B44E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":570656,"discussion_content":"你这个网址404","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651846258,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156500,"user_name":"245864982","can_delete":false,"product_type":"c1","uid":1238485,"ip_address":"","ucode":"AC47075A95B759","user_header":"https://static001.geekbang.org/account/avatar/00/12/e5/d5/680402fd.jpg","comment_is_top":false,"comment_ctime":1574903181,"is_pvip":false,"replies":[{"id":"60092","content":"是的","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1574905650,"ip_address":"","comment_id":156500,"utype":1}],"discussion_count":1,"race_medal":0,"score":"65999412621","product_id":100023901,"comment_content":"老师，那tomcat也是一个请求一个线程的吧？它是怎么解决的。是用线程池吗？","like_count":15,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476130,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574905650,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":94372,"user_name":"echo＿陈","can_delete":false,"product_type":"c1","uid":1080794,"ip_address":"","ucode":"EFAEADA8A05906","user_header":"https://static001.geekbang.org/account/avatar/00/10/7d/da/780f149e.jpg","comment_is_top":false,"comment_ctime":1557797608,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"53097405160","product_id":100023901,"comment_content":"go语言的协程是语言级别的支持……java写个库就能支持轻量级线程了，很好奇库级别是如何支持的，原理是什么","like_count":12,"discussions":[{"author":{"id":1174199,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ea/b7/1a18a39d.jpg","nickname":"5-刘新波(Arvin)","note":"","ucode":"DBD135D2587A93","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":222508,"discussion_content":"相当于弄个任务池，然后投递到线程池中，达到一个线程可以处理多个任务的作用","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1586150490,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1785016,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3c/b8/9489387c.jpg","nickname":"鱼丸粗面","note":"","ucode":"B2F3F75B0D1422","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":221302,"discussion_content":"我猜就是像netty一样解决的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1586001239,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1106090,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e0/aa/68a7921b.jpg","nickname":"常清","note":"","ucode":"EA6975FDFD4D11","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":164929,"discussion_content":"应该是用户级线程吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1581239541,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1080812,"avatar":"https://static001.geekbang.org/account/avatar/00/10/7d/ec/ccd30c1d.jpg","nickname":"WangBo","note":"","ucode":"8BFCC4E2639175","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572024,"discussion_content":"这个第三方库的原理是 线程池+字节码增强。OpenJDK的方式是重写了阻塞IO的代码以及新增了Thread的虚拟线程实现，属于重量级实现方式（即使代码中存在线程阻塞，JVM也会识别并挂起），但对用户友好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652561216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":137732,"user_name":"Sharry","can_delete":false,"product_type":"c1","uid":1239293,"ip_address":"","ucode":"045DDB864659F6","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/fd/035f4c94.jpg","comment_is_top":false,"comment_ctime":1569832843,"is_pvip":false,"replies":[{"id":"53022","content":"👍就因为这个原因对kotlin好感倍增","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1569935482,"ip_address":"","comment_id":137732,"utype":1}],"discussion_count":2,"race_medal":0,"score":"48814473099","product_id":100023901,"comment_content":"Kotlin 支持协程, 并且实现了完善的调度策略, 可以考虑使用 Kotlin 作为替代方案","like_count":12,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469236,"discussion_content":"👍就因为这个原因对kotlin好感倍增","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569935482,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1061061,"avatar":"https://static001.geekbang.org/account/avatar/00/10/30/c5/2d7c925c.jpg","nickname":"清风笑","note":"","ucode":"69E7696B410D19","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324793,"discussion_content":"你是对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605170886,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":95579,"user_name":"cricket1981","can_delete":false,"product_type":"c1","uid":1001715,"ip_address":"","ucode":"758262F5958DA4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/48/f3/f1034ffd.jpg","comment_is_top":false,"comment_ctime":1558088777,"is_pvip":false,"replies":[{"id":"34150","content":"是的，如何调度我就说不清楚了","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1558091213,"ip_address":"","comment_id":95579,"utype":1}],"discussion_count":3,"race_medal":0,"score":"48802729033","product_id":100023901,"comment_content":"网上查资料说java中的线程是内核空间的，轻量级线程属于用户空间的，是这样吗？另外轻量级线程是如何调度的？","like_count":12,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450524,"discussion_content":"是的，如何调度我就说不清楚了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558091213,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1708271,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/10/ef/4c9b2383.jpg","nickname":"Everlaa","note":"","ucode":"9B4FFFABD62B07","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333741,"discussion_content":"我记得线程切换是被动的，协程切换是主动的，一般可以是任务完成以后，所以效率高","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1607607377,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1744250,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/9d/7a/fb762fea.jpg","nickname":"SkillIP","note":"","ucode":"60EAEB93EC6858","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305969,"discussion_content":"协程没有调度器，纤程有调度器","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600140018,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115630,"user_name":"尔冬橙","can_delete":false,"product_type":"c1","uid":1225224,"ip_address":"","ucode":"0B013A49BC18DA","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","comment_is_top":false,"comment_ctime":1563678629,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"31628449701","product_id":100023901,"comment_content":"宝令老师的买别墅比喻简直了","like_count":7,"discussions":[{"author":{"id":1331611,"avatar":"https://static001.geekbang.org/account/avatar/00/14/51/9b/ccea47d9.jpg","nickname":"安迪密恩","note":"","ucode":"A6F3F67CF8E6F8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376336,"discussion_content":"简直嘲讽是吗？hh","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622085829,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":95815,"user_name":"右耳听海","can_delete":false,"product_type":"c1","uid":1022011,"ip_address":"","ucode":"E0B9F1083F4F98","user_header":"https://static001.geekbang.org/account/avatar/00/0f/98/3b/5af90c80.jpg","comment_is_top":false,"comment_ctime":1558187589,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"27327991365","product_id":100023901,"comment_content":"不清楚老师讲这个模式的意义在什么地方，既然目前普遍的方案是使用基于nio的netty，并没发现这个模式在具体应用场景中的普遍应用，除了你说的调度场景，在高并发的情况下也没使用fiber，使用的是netty，为何不讲讲netty的思路","like_count":6,"discussions":[{"author":{"id":1536075,"avatar":"https://static001.geekbang.org/account/avatar/00/17/70/4b/6b028f2a.jpg","nickname":"Hooray","note":"","ucode":"39A62F7619C5D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":143126,"discussion_content":"知其然才能知其所以然吧？毕竟为啥用nio来解决，直接告诉你最终方案跟告诉找到解决问题的思路，我觉得后者更好","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1579491309,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1018620,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8a/fc/d1dd57dd.jpg","nickname":"ipofss","note":"","ucode":"DE3061C9259F9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":42070,"discussion_content":"我觉得对于一个问题，会有多种方案，老师先介绍了一种理解最简单，但是可能会有性能缺陷的方案，然后再优化方案，得到复杂的性能更优的方案。这是我这个菜鸟的个人见解，嘻嘻","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1572580073,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148637,"user_name":"考休","can_delete":false,"product_type":"c1","uid":1053955,"ip_address":"","ucode":"968DFC00D6D0CF","user_header":"https://static001.geekbang.org/account/avatar/00/10/15/03/c0fe1dbf.jpg","comment_is_top":false,"comment_ctime":1573042113,"is_pvip":false,"replies":[{"id":"57282","content":"是的","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1573085297,"ip_address":"","comment_id":148637,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18752911297","product_id":100023901,"comment_content":"go中的轻量级线程就是协程吧？","like_count":4,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473561,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573085297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119506,"user_name":"Sam","can_delete":false,"product_type":"c1","uid":1183165,"ip_address":"","ucode":"701948553DB5FE","user_header":"https://static001.geekbang.org/account/avatar/00/12/0d/bd/57ab02f5.jpg","comment_is_top":false,"comment_ctime":1564620292,"is_pvip":false,"replies":[{"id":"44017","content":"实际项目还是不建议用，等官方正式发布吧","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1564719530,"ip_address":"","comment_id":119506,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14449522180","product_id":100023901,"comment_content":"老师，请问Java不支持轻量级线程，但是有Fibe，那是不是就可以用Fibe在实际项目中，然后相当于Java也支持轻量级线程了？","like_count":3,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460934,"discussion_content":"实际项目还是不建议用，等官方正式发布吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564719530,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":94919,"user_name":"拒绝","can_delete":false,"product_type":"c1","uid":1335155,"ip_address":"","ucode":"CB0264C4D3FE17","user_header":"https://static001.geekbang.org/account/avatar/00/14/5f/73/bb3dc468.jpg","comment_is_top":false,"comment_ctime":1557923678,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14442825566","product_id":100023901,"comment_content":"这节课涨知识的","like_count":3},{"had_liked":false,"id":268910,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1608430360,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5903397656","product_id":100023901,"comment_content":"这篇文章老师的思路只是为了把专栏的补完整，让我们知悉java有这种东东","like_count":1},{"had_liked":false,"id":232437,"user_name":"Geek_41d472","can_delete":false,"product_type":"c1","uid":1247965,"ip_address":"","ucode":"DEC2B6329460CF","user_header":"https://static001.geekbang.org/account/avatar/00/13/0a/dd/88fa7b52.jpg","comment_is_top":false,"comment_ctime":1594003774,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5888971070","product_id":100023901,"comment_content":"虽然看懂了Fiber怎么用,但是Fiber是怎么实现轻量级的呢?","like_count":1},{"had_liked":false,"id":183409,"user_name":"旅途","can_delete":false,"product_type":"c1","uid":1212902,"ip_address":"","ucode":"5022477E8E9441","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/e6/6cafed37.jpg","comment_is_top":false,"comment_ctime":1583034754,"is_pvip":false,"replies":[{"id":"71263","content":"可靠性，稳定性还有待更多实践验证","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1583234844,"ip_address":"","comment_id":183409,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5878002050","product_id":100023901,"comment_content":"老师 问一下 fiber并发这么牛 为什么tomcat不使用fiber呢","like_count":1,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485680,"discussion_content":"可靠性，稳定性还有待更多实践验证","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583234844,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":94351,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1557794490,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5852761786","product_id":100023901,"comment_content":"打卡","like_count":1},{"had_liked":false,"id":350370,"user_name":"码小呆","can_delete":false,"product_type":"c1","uid":2055809,"ip_address":"","ucode":"44532D6ABF9340","user_header":"https://static001.geekbang.org/account/avatar/00/1f/5e/81/82709d6e.jpg","comment_is_top":false,"comment_ctime":1656856696,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1656856696","product_id":100023901,"comment_content":"Thread-Per-Message 模式实现的分布式调度框架 请问有哪些框架呢?","like_count":0},{"had_liked":false,"id":346408,"user_name":"学习学个屁","can_delete":false,"product_type":"c1","uid":1049017,"ip_address":"","ucode":"DF2D61E6FB2FCE","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/b9/73435279.jpg","comment_is_top":false,"comment_ctime":1653110125,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653110125","product_id":100023901,"comment_content":"1 线程池+ 队列<br>2 限流<br>3 nio<br>","like_count":0},{"had_liked":false,"id":287829,"user_name":"星朝","can_delete":false,"product_type":"c1","uid":1848539,"ip_address":"","ucode":"DFCF2512D6DAE0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/LqGZd83zp1y9fpbliaSgGh5qib5eGzU41xibTzib06ZAlaiaJibkJB89JuVEozCScUsVK90jpq7Na30AHDngQzI7YwiaA/132","comment_is_top":false,"comment_ctime":1618188919,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618188919","product_id":100023901,"comment_content":"确实简单可靠","like_count":0},{"had_liked":false,"id":287019,"user_name":"Zicheng","can_delete":false,"product_type":"c1","uid":2007101,"ip_address":"","ucode":"3B27E44A98FF99","user_header":"https://static001.geekbang.org/account/avatar/00/1e/a0/3d/b6379573.jpg","comment_is_top":false,"comment_ctime":1617742851,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617742851","product_id":100023901,"comment_content":"请问下老师课程中所有的code有没有一个repo可以直接看呢 尤其是自己想试着都run一run, 谢谢老师了！","like_count":0},{"had_liked":false,"id":284232,"user_name":"俺能学个啥","can_delete":false,"product_type":"c1","uid":1026742,"ip_address":"","ucode":"30740C5B58774C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/aa/b6/46a5bbf3.jpg","comment_is_top":false,"comment_ctime":1616130304,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616130304","product_id":100023901,"comment_content":"高并发场景为了避免oom只能做限流策略","like_count":0},{"had_liked":false,"id":255128,"user_name":"mgs2002","can_delete":false,"product_type":"c1","uid":1812970,"ip_address":"","ucode":"F5931108BD509B","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a9/ea/5bfce6c5.jpg","comment_is_top":false,"comment_ctime":1603271230,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603271230","product_id":100023901,"comment_content":"临时解决方案就是改JVM内存大小，后续修改代码使用线程池来创建线程","like_count":0},{"had_liked":false,"id":228357,"user_name":"苗","can_delete":false,"product_type":"c1","uid":1088710,"ip_address":"","ucode":"5ECCC6C855E541","user_header":"https://static001.geekbang.org/account/avatar/00/10/9c/c6/05a6798f.jpg","comment_is_top":false,"comment_ctime":1592647641,"is_pvip":false,"replies":[{"id":"84697","content":"是的","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1593003176,"ip_address":"","comment_id":228357,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1592647641","product_id":100023901,"comment_content":"用个队列限流是不是通用思路？","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499006,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593003176,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":220931,"user_name":"kimoti","can_delete":false,"product_type":"c1","uid":1897671,"ip_address":"","ucode":"0A78077408C2B1","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f4/c7/037235c9.jpg","comment_is_top":false,"comment_ctime":1590347115,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590347115","product_id":100023901,"comment_content":"我的想法就是每个线程尽可能多的多处理请求","like_count":0},{"had_liked":false,"id":212003,"user_name":"见南山","can_delete":false,"product_type":"c1","uid":1118111,"ip_address":"","ucode":"6A8BB82B7573CA","user_header":"https://static001.geekbang.org/account/avatar/00/11/0f/9f/f4b06bd5.jpg","comment_is_top":false,"comment_ctime":1588044682,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588044682","product_id":100023901,"comment_content":"加一个线程池，通过semaphore控制线程池处理的请求数量。","like_count":0},{"had_liked":false,"id":195699,"user_name":"Mr.wang","can_delete":false,"product_type":"c1","uid":1224805,"ip_address":"","ucode":"86F341A5316BBC","user_header":"https://static001.geekbang.org/account/avatar/00/12/b0/65/90387745.jpg","comment_is_top":false,"comment_ctime":1585213254,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1585213254","product_id":100023901,"comment_content":"可以使用缓存队列，将提交的任务放在缓存队列中，降低系统的压力。","like_count":0},{"had_liked":false,"id":194520,"user_name":"悠悠小竹子","can_delete":false,"product_type":"c1","uid":1061786,"ip_address":"","ucode":"A5E6731D28EBF9","user_header":"https://static001.geekbang.org/account/avatar/00/10/33/9a/a323b2f1.jpg","comment_is_top":false,"comment_ctime":1585064584,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585064584","product_id":100023901,"comment_content":"ab能直接压测socket?","like_count":0},{"had_liked":false,"id":188226,"user_name":"Evan","can_delete":false,"product_type":"c1","uid":1344281,"ip_address":"","ucode":"B877ABD0CF4661","user_header":"https://static001.geekbang.org/account/avatar/00/14/83/19/0a3fe8c1.jpg","comment_is_top":false,"comment_ctime":1584328967,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1584328967","product_id":100023901,"comment_content":"增加线程池让线程可重现使用，减少线程带来创建、销毁等开销。","like_count":0},{"had_liked":false,"id":142544,"user_name":"陌臣","can_delete":false,"product_type":"c1","uid":1643898,"ip_address":"","ucode":"EC1B2DA7483F11","user_header":"https://static001.geekbang.org/account/avatar/00/19/15/7a/db9879e1.jpg","comment_is_top":false,"comment_ctime":1571390946,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1571390946","product_id":100023901,"comment_content":"打卡，越到后面人越少了","like_count":0,"discussions":[{"author":{"id":1018620,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8a/fc/d1dd57dd.jpg","nickname":"ipofss","note":"","ucode":"DE3061C9259F9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":42071,"discussion_content":"我也发现这个问题了，越到后面，评论越少了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1572580139,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1577580,"avatar":"https://static001.geekbang.org/account/avatar/00/18/12/6c/61a598e9.jpg","nickname":"苏暮沉觞","note":"","ucode":"532B816D4EF47B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1018620,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8a/fc/d1dd57dd.jpg","nickname":"ipofss","note":"","ucode":"DE3061C9259F9E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":79999,"discussion_content":"一方面是没看下去，另一方面可能是因为看不太懂，只能理解老师文章的内容，却不能跟前面几章一样，提出问题。比如-----我。。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576135876,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":42071,"ip_address":""},"score":79999,"extra":""}]}]},{"had_liked":false,"id":139166,"user_name":"ly","can_delete":false,"product_type":"c1","uid":1221628,"ip_address":"","ucode":"5E2B85252DABF3","user_header":"https://static001.geekbang.org/account/avatar/00/12/a3/fc/379387a4.jpg","comment_is_top":false,"comment_ctime":1570579491,"is_pvip":false,"replies":[{"id":"53599","content":"那就搞linux吧，在linux上太简单了，按照官方文档来就没问题","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1570580142,"ip_address":"","comment_id":139166,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1570579491","product_id":100023901,"comment_content":"老师，能不能提供一个编译openjdk的方法，我在网上搜索了好多博客，按照他们说的步骤，都出现各种各样的问题，难道编译openjdk这么难？主要是长期用window系统，搞起好麻烦！","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469823,"discussion_content":"那就搞linux吧，在linux上太简单了，按照官方文档来就没问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570580142,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":137415,"user_name":"DFighting","can_delete":false,"product_type":"c1","uid":1233193,"ip_address":"","ucode":"F3BA2426FF8582","user_header":"https://static001.geekbang.org/account/avatar/00/12/d1/29/1b1234ed.jpg","comment_is_top":false,"comment_ctime":1569734696,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1569734696","product_id":100023901,"comment_content":"快速解决就是碓资源，调整jvm新生代的大小，具体解决可以从两个方面考虑：<br>1、把线程的创建模块独立出来，比如可以用类似队列的方式存储要执行的任务，并由具体执行程序进行线程调度和执行。<br>2、具体执行模块可以进一步细化，比如将网络&#47;磁盘IO等操作和程序执行操作独立开来，以提升并行化的程度等。<br>总的来看就是把各种通用的操作按照相关性的大小和能否并行化把串行改为并行，当然就Java本身来说，线程还是一个重量级的资源，真正编写感觉还是需要池化的思想，不然代价太大，感觉性能上怕是不能太好","like_count":0},{"had_liked":false,"id":115639,"user_name":"尔冬橙","can_delete":false,"product_type":"c1","uid":1225224,"ip_address":"","ucode":"0B013A49BC18DA","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","comment_is_top":false,"comment_ctime":1563680585,"is_pvip":false,"replies":[{"id":"42260","content":"相对于用类库方式实现而言的","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1563710547,"ip_address":"","comment_id":115639,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563680585","product_id":100023901,"comment_content":"老师，轻量级线程语言层次实现的，该怎么理解","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459201,"discussion_content":"相对于用类库方式实现而言的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563710547,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104095,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1560650253,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560650253","product_id":100023901,"comment_content":" 18年底kt发布的最新版本就提到支持协程。我在想是不是就拿老师这里提的这个openjdk的开源项目实现的？毕竟kt无脑衔接java社区的依赖库。","like_count":0},{"had_liked":false,"id":98189,"user_name":"tdytaylor","can_delete":false,"product_type":"c1","uid":1181214,"ip_address":"","ucode":"5B4919FDFE91A6","user_header":"https://static001.geekbang.org/account/avatar/00/12/06/1e/51ad425f.jpg","comment_is_top":false,"comment_ctime":1558927635,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558927635","product_id":100023901,"comment_content":"老师的问题其实就在于并发量太大，创建大量的线程导致内存不够用，最直接的方式就是减少线程的创建：看到老师写的这个demo用的nio类库，直接改成多路复用，减少线程的创建。我另外一个想法是采用消费者和生产者模式，主线程负责处理连接请求，拿到连接之后放到消费队列里面，让线程池的线程去消费。","like_count":0},{"had_liked":false,"id":95589,"user_name":"曾轼麟","can_delete":false,"product_type":"c1","uid":1451391,"ip_address":"","ucode":"D418371AC11270","user_header":"https://static001.geekbang.org/account/avatar/00/16/25/7f/473d5a77.jpg","comment_is_top":false,"comment_ctime":1558092348,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558092348","product_id":100023901,"comment_content":"我目前想到两个方法，一个就是自行实现线程池加阻塞队列实现线程对象的复用，另一个就是更改jvm年轻代的空间大小，和回收方式，方便快速释放出空间","like_count":1},{"had_liked":false,"id":95193,"user_name":"J.M.Liu","can_delete":false,"product_type":"c1","uid":1200037,"ip_address":"","ucode":"B2CB84B8E923A6","user_header":"https://static001.geekbang.org/account/avatar/00/12/4f/a5/71358d7b.jpg","comment_is_top":false,"comment_ctime":1557980748,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557980748","product_id":100023901,"comment_content":"用ForkJion吗？因为有任务迁移功能，可以简化线程池的使用。没怎么get到思考题的核心点。","like_count":0},{"had_liked":false,"id":94632,"user_name":"zero","can_delete":false,"product_type":"c1","uid":1299615,"ip_address":"","ucode":"528DD5C8399AEC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKlwpFM3tkeG15YqyJTYWkfqkdmro9POq6SicYm57TaEFDOUZCXjoe0Z0Iz6UibGQqic3icJRsHdFzibtw/132","comment_is_top":false,"comment_ctime":1557875659,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1557875659","product_id":100023901,"comment_content":"临时方案调整jvm内存大小吧","like_count":0},{"had_liked":false,"id":94517,"user_name":"夕夕熊","can_delete":false,"product_type":"c1","uid":1316808,"ip_address":"","ucode":"8B6EFE43841222","user_header":"https://static001.geekbang.org/account/avatar/00/14/17/c8/ca17d37e.jpg","comment_is_top":false,"comment_ctime":1557831141,"is_pvip":false,"replies":[{"id":"33799","content":"不是","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1557842862,"ip_address":"","comment_id":94517,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1557831141","product_id":100023901,"comment_content":"tomcat 、webLogic 用的是这种模式吗","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450089,"discussion_content":"不是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557842862,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":94474,"user_name":"colin","can_delete":false,"product_type":"c1","uid":1292206,"ip_address":"","ucode":"7A8849B8AE33E0","user_header":"https://static001.geekbang.org/account/avatar/00/13/b7/ae/a25fcb73.jpg","comment_is_top":false,"comment_ctime":1557820391,"is_pvip":false,"replies":[{"id":"33800","content":"是的。得自己编译，不过很简单","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1557842954,"ip_address":"","comment_id":94474,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1557820391","product_id":100023901,"comment_content":"我想试试Fiber，这个是不是要使用OpenJDK","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450075,"discussion_content":"是的。得自己编译，不过很简单","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557842954,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":94464,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1557817686,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557817686","product_id":100023901,"comment_content":"go语言的并发机制是采用CSP这种模式，确实是很轻量级，轻松实现高并发。","like_count":0}]}