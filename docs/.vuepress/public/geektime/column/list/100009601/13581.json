{"id":13581,"title":"24 | 紧跟时代步伐：微服务模式下API测试要怎么做？","content":"<p>你好，我是茹炳晟，今天我分享的主题是“紧跟时代步伐：微服务模式下API测试要怎么做？”。</p>\n<p>通过一个的Restful API实例，我介绍了cURL和Postman工具的基本用法，这样我们对API测试有了一个感性认识；在此基础上，我介绍了API自动化测试框架发展的来龙去脉，借此我们对API测试框架的理解又更深入了一层。</p>\n<p>今天，我将更进一步，带你去了解当下最热门的技术领域的API测试，即微服务模式下的API测试。微服务架构下，API测试的最大挑战来自于庞大的测试用例数量，以及微服务之间的相互耦合。所以，我今天分享这个主题的目的就是，帮你理解这两个问题的本质，以及如何基于消费者契约的方法来应对这两个难题。</p>\n<p>而为了掌握微服务模式下的API测试，你需要先了解微服务架构（Microservice Architecture）的特点、测试挑战；而要了解微服务架构，你又需要先了解一些单体架构（Monolithic Architecture）的知识。所以，今天的话题我将逐层展开，目的就是希望你可以真正理解，并快速掌握微服务模式下的API测试。</p>\n<h2>单体架构（Monolithic Architecture）</h2>\n<p>单体架构是早期的架构模式，并且存在了很长时间。单体架构是将所有的业务场景的表示层、业务逻辑层和数据访问层放在同一个工程中，最终经过编译、打包，并部署在服务器上。</p><!-- [[[read_end]]] -->\n<p>比如，经典的J2EE工程，它就是将表示层的JSP、业务逻辑层的Service、Controller和数据访问层的DAO（Data Access Objects），打包成war文件，然后部署在Tomcat、Jetty或者其他Servlet容器中运行。</p>\n<p>显然单体架构具有发布简单、方便调试、架构复杂性低等优点，所以长期以来一直被大量使用，并广泛应用于传统企业级软件。</p>\n<p>但是，随着互联网产品的普及，应用所承载的流量越来越庞大，单体架构的问题也被逐渐暴露并不断放大，主要的问题有以下几点：</p>\n<ul>\n<li><strong>灵活性差</strong>：无论是多小的修改，哪怕只修改了一行代码，也要打包发布整个应用。更糟的是，由于所有模块代码都在一起，所以每次编译打包都要花费很长时间。</li>\n<li><strong>可扩展性差</strong>：在高并发场景下，无法以模块为单位灵活扩展容量，不利于应用的横向扩展。</li>\n<li><strong>稳定性差</strong>：当单体应用中任何一个模块有问题时，都可能会造成应用整体的不可用，缺乏容错机制。</li>\n<li><strong>可维护性差</strong>：随着业务复杂性的提升，代码的复杂性也是直线上升，当业务规模比较庞大时，整体项目的可维护性会大打折扣。</li>\n</ul>\n<p>正是因为面对互联网应用时，单体架构有这一系列无法逾越的鸿沟，所以催生了微服务架构。</p>\n<p>其实，微服务架构也不是一蹴而就的，也经历了很长时间的演化发展，中间还经历了著名的SOA架构。但是这个由单体架构到SOA架构再到微服务架构的演进过程，并不是本文的重点，所以我就不再详细展开了，如果你感兴趣的话，可以自行去查阅一些相关资料。</p>\n<h2>微服务架构（Microservice Architecture）</h2>\n<p>微服务是一种架构风格。在微服务架构下，一个大型复杂软件系统不再由一个单体组成，而是由一系列相互独立的微服务组成。其中，各个微服务运行在自己的进程中，开发和部署都没有依赖。</p>\n<p>不同服务之间通过一些轻量级交互机制进行通信，例如 RPC、HTTP 等，服务可独立扩展伸缩，每个服务定义了明确的边界，只需要关注并很好地完成一件任务就可以了，不同的服务可以根据业务需求实现的便利性而采用不同的编程语言来实现，由独立的团队来维护。</p>\n<p>图1就很形象地展示了单体架构和微服务架构之间的差异。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/69/9d/6968c125be2de960b48d8df35315159d.png?wh=1066*516\" alt=\"\" /></p>\n<center>图1  单体架构 VS 微服务架构</center>\n<p>微服务架构具有以下特点：</p>\n<ul>\n<li>每个服务运行在其独立的进程中，开发采用的技术栈也是独立的；</li>\n<li>服务间采用轻量级通信机制进行沟通，通常是基于HTTP协议的RESTful API；</li>\n<li>每个服务都围绕着具体的业务进行构建，并且能够被独立开发、独立部署、独立发布；</li>\n<li>对运维提出了非常高的要求，促进了CI/CD的发展与落地。</li>\n</ul>\n<h2>微服务架构下的测试挑战</h2>\n<p>由于微服务架构下，一个应用是由很多相互独立的微服务组成，每个微服务都会对外暴露接口，同时这些微服务之间存在级联调用关系，也就是说一个微服务通常还会去调用其他微服务，鉴于以上特点，微服务架构下的测试挑战主要来自于以下两个方面：</p>\n<ol>\n<li>\n<p>过于庞大的测试用例数量；</p>\n</li>\n<li>\n<p>微服务之间的耦合关系。</p>\n</li>\n</ol>\n<p>接下来，我会针对这两项挑战分别展开，包括它们从何而来，以及如何应对这些挑战，最终完成测试。</p>\n<p><strong>第一，过于庞大的测试用例数量</strong></p>\n<p>在传统的API测试中，我们的测试策略通常是：</p>\n<ul>\n<li>根据被测API输入参数的各种组合调用API，并验证相关结果的正确性；</li>\n<li>衡量上述测试过程的代码覆盖率；</li>\n<li>根据代码覆盖率进一步找出遗漏的测试用例；</li>\n<li>以代码覆盖率达标作为API测试成功完成的标志。</li>\n</ul>\n<p>这也是单体架构时代主流的API测试策略。为了让你更好地理解这种测试策略，我来举一个实际的例子。</p>\n<p>假设我们采用单体架构开发了一个系统，这个系统对外提供了3个Restful API接口，那么我们的测试策略应该是：</p>\n<ul>\n<li>针对这3个API接口，分别基于边界值和等价类方法设计测试用例并执行；</li>\n<li>在测试执行过程中，启用代码覆盖率统计；</li>\n<li>假设测试完成后代码行覆盖率是80%，那么我们就需要找到那些还没有被执行到的20%的代码行。比如图2中代码的第242行就是没有被执行到，分析代码逻辑后发现，我们需要构造“expected!=actual”才能覆盖这个未能执行的代码行；</li>\n<li>最终我们要保证代码覆盖率达到既定的要求，比如行覆盖率达到100%，完成API测试。</li>\n</ul>\n<p><img src=\"https://static001.geekbang.org/resource/image/ab/e2/ab5e06ccd5d4e3925fe86024b54162e2.png?wh=902*298\" alt=\"\" /></p>\n<center>图2  基于代码覆盖率指导测试用例设计的示例</center>\n<p><strong>而当我们采用微服务架构时，原本的单体应用会被拆分成多个独立模块，也就是很多个独立的service，原本单体应用的全局功能将会由这些拆分得到的API共同协作完成。</strong></p>\n<p>比如，对于上面这个例子，没有微服务化之前，一共有3个API接口，假定现在采用微服务架构，该系统被拆分成了10个独立的service，如果每个service平均对外暴露3个API接口，那么总共需要测试的API接口数量就多达30个。</p>\n<p>如果我还按照传统的API测试策略来测试这些API，那么测试用例的数量就会非常多，过多的测试用例往往就需要耗费大量的测试执行时间和资源。</p>\n<p>但是，在互联网模式下，产品发布的周期往往是以“天”甚至是以“小时”为单位的，留给测试的执行时间非常有限，所以微服务化后API测试用例数量的显著增长就对测试发起了巨大的挑战。</p>\n<p>这时，我们迫切需要找到一种既能保证API质量，又能减少测试用例数量的测试策略，这也就是我接下来要分享的<strong>基于消费者契约的API测试</strong>。</p>\n<p><strong>第二，微服务之间的耦合关系</strong></p>\n<p>微服务化后，服务与服务间的依赖也可能会给测试带来不小的挑战。</p>\n<p>如图3所示，假定我们的被测对象是Service T，但是Service T的内部又调用了Service X和Service Y。此时，如果Service X和Service Y由于各种原因处于不可用的状态，那么此时就无法对Service T进行完整的测试。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/79/9b/79f5990fd864012cb1c7cd87c8e5079b.png?wh=683*195\" alt=\"\" /></p>\n<center>图3 API之间的耦合示例</center>\n<p>我们迫切需要一种方法可以将Service T的测试与Service X和Service Y解耦。</p>\n<p>解耦的方式通常就是实现Mock Service来代替被依赖的真实Service。实现这个Mock Service的关键点就是要能够模拟真实Service的Request和Response。当我介绍完基于消费者契约的API测试后，你会发现这个问题也就迎刃而解了。</p>\n<h2>基于消费者契约的API测试</h2>\n<p>那到底什么是基于消费者契约的API测试呢？直接从概念的角度解释，会有些难以理解。所以我打算换个方法来帮助你从本质上真正理解什么是基于消费者契约的API测试。接下来，就跟着我的思路走吧。</p>\n<p>首先，我们来看图4，假设图4中的Service A、Service B和Service T是微服务拆分后的三个Service，其中Service T是被测试对象，进一步假定Service T的消费者（也就是使用者）一共有两个，分别是Service A和Service B。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/4b/6f/4b60dcc958636c29ae8edd5e52db216f.png?wh=667*218\" alt=\"\" /></p>\n<center>图4  Service A、Service B和Service T的关系</center>\n<p>按照传统的API测试策略，当我们需要测试Service T时，需要找到所有可能的参数组合依次对Service T进行调用，同时结合Service T的代码覆盖率进一步补充遗漏的测试用例。</p>\n<p>这种思路本身没有任何问题，但是测试用例的数量会非常多。那我们就需要思考，如何既能保证Service T的质量，又不需要覆盖全部可能的测试用例。</p>\n<p>静下心来想一下，你会发现Service T的使用者是确定的，只有Service A和Service B，如果可以把Service A和Service B对Service T所有可能的调用方式都测试到，那么就一定可以保证Service T的质量。即使存在某些Service T的其他调用方式有出错的可能性，那也不会影响整个系统的功能，因为这个系统中并没有其他Service会以这种可能出错的方式来调用Service T。</p>\n<p>现在，问题就转化成了如何找到Service A和Service B对Service T所有可能的调用方式。如果能够找出这样的调用集合，并以此作为Service T的测试用例，那么只要这些测试用例100%通过，Service T的质量也就不在话下了。</p>\n<p>从本质上来讲，这样的测试用例集合其实就是，Service T可以对外提供的服务的契约，所以我们把这个测试用例的集合称为“基于消费者契约的API测试”。</p>\n<p>那么接下来，我们要解决的问题就是：如何才能找到Service A和Service B对Service T的所有可能调用了。其实这也很简单，在逻辑结构上，我们只要在Service T前放置一个代理，所有进出Service T的Request和Response都会经过这个代理，并被记录成JSON文件，也就构成了Service T的契约。</p>\n<p>如图5所示，就是这个过程的原理了。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/1e/86/1e9c9cb78a02e3675e612da46e2c1b86.png?wh=935*348\" alt=\"\" /></p>\n<center>图5  收集消费者契约的逻辑原理</center>\n<p>在实际项目中，我们不可能在每个Service前去放置这样一个代理。但是，微服务架构中往往会存在一个叫作API Gateway的组件，用于记录所有API之间相互调用关系的日志，我们可以通过解析API Gateway的日志分析得到每个Service的契约。</p>\n<p>至此，我们已经清楚地知道了如何获取Service的契约，并由此来构成Service的契约测试用例。接下来，就是如何解决微服务之间耦合关系带来的问题了。</p>\n<h2>微服务测试的依赖解耦和Mock Service</h2>\n<p>在前面的内容中，我说过一句话：实现Mock Service的关键，就是要能够模拟被替代Service的Request和Response。</p>\n<p>此时我们已经拿到了契约，契约的本质就是Request和Response的组合，具体的表现形式往往是JSON文件，此时我们就可以用该契约的JSON文件作为Mock Service的依据，也就是在收到什么Request的时候应该回复什么Response。</p>\n<p>下面的图6就解释了这一关系，当用Service X的契约启动Mock Service X后，原本真实的Service X将被Mock Service X替代，也就解耦了服务之间的依赖，图6中的Service Y也是一样的道理。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/e1/01/e18bf590c818e5dc26e85a5e07eb1401.png?wh=896*387\" alt=\"\" /></p>\n<center>图6  基于Mock Service解决API之间的调用依赖</center>\n<h2>代码实例</h2>\n<p>自此，我已经讲完了基于消费者契约的API测试的原理，你是否已经都真正理解并掌握了呢？</p>\n<p>由于这部分内容的理论知识比较多，为了帮你更好地理解这些概念，我找了一个基于Spring Cloud Contract的实际代码的示例演示契约文件格式、消费者契约测试以及微服务之间解耦，希望可以帮到你。</p>\n<p>具体的实例代码，你可以从<a href=\"https://github.com/SpectoLabs/spring-cloud-contract-blog\">https://github.com/SpectoLabs/spring-cloud-contract-blog</a>下载，详细的代码解读可以参考<a href=\"https://specto.io/blog/2016/11/16/spring-cloud-contract/\">https://specto.io/blog/2016/11/16/spring-cloud-contract/</a>。</p>\n<p>这个实例代码，基于Spring Boot实现了两个微服务：订阅服务（subscription-service）和账户服务（account-service），其中订阅服务会调用账户服务。这个实例基于Spring Cloud Contract，所以契约是通过Groovy语言描述的，也就是说实例中会通过Groovy语言描述的账户服务契约来模拟真实的账户服务。</p>\n<p>这个实例的逻辑关系如图7所示。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/db/fa/db1b2b058505fef62805f9077e1982fa.png?wh=1500*1207\" alt=\"\" /></p>\n<center>图7 基于Spring Cloud Contract的契约测试实例</center>\n<h2>总结</h2>\n<p>单体架构，具有灵活性差、可扩展性差、可维护性差等局限性，所以有了微服务架构。</p>\n<p>微服务架构的本身的特点，比如微服务数量多，各个微服务之间的相互调用，决定了不能继续采用传统API测试的策略。</p>\n<p>为了既能保证API质量，又能减少测试用例数量，于是有了基于消费者契约的API测试。基于消费者契约的API测试的核心思想是：只测试那些真正被实际使用到的API调用，如果没有被使用到的，就不去测试。</p>\n<p>基于消费者契约的测试方法，由于收集到了完整的契约，所以基于契约的Mock Service完美地解决了API之间相互依赖耦合的问题。</p>\n<p>这已经是API自动化测试系列的最后一篇文章了，短短的三篇文章可能让你感觉意犹未尽，也可能感觉并没有涵盖到你在实际工程项目中遇到的API测试的所有问题，但是一个专栏区区几十篇文章的确无法面面俱到。</p>\n<p>我通过这个专栏更想达到的目的是：讲清楚某一技术的来龙去脉及其应用场景，但是很多具体操作级别、代码实现级别的内容，还是需要你在实践中不断积累。</p>\n<p>所以，如果你还有关于API测试的其他问题，非常欢迎你给我留言讨论，让我们一起来碰撞出思想火花吧！</p>\n<h2>思考题</h2>\n<p>基于消费者契约的API测试中，对于那些新开发的API，或者加了新功能的API，由于之前都没有实际的消费者，所以你无法通过API Gateway方法得到契约。对于这种情况，你会采用什么方法来解决呢？</p>\n<p>欢迎你给我留言。</p>\n<p></p>\n","neighbors":{"left":{"article_title":"23 | 知其然知其所以然：聊聊API自动化测试框架的前世今生","id":13565},"right":{"article_title":"25 | 不破不立：掌握代码级测试的基本理念与方法","id":14008}},"comments":[{"had_liked":false,"id":21132,"user_name":"和你一起搬砖的胡大爷","can_delete":false,"product_type":"c1","uid":1008587,"ip_address":"","ucode":"54607F4E17917A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/cb/7c004188.jpg","comment_is_top":false,"comment_ctime":1534933955,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"91729247171","product_id":100009601,"comment_content":"api gateway一般是作为整个微服务的入口，做一些权限校验，路由功能，服务间的内部调用不走api gateway。spring cloud的例子 zuul作为api gateway，load balancer是ribbon。要去抓取调用记录在被测服务记录访问日志。这个作为audit  log本来就是要记录的。我们的契约测试是调用放手写在被调用服务，拥有者是调用方。以此来确保api的兼容。","like_count":21},{"had_liked":false,"id":21080,"user_name":"小明同学","can_delete":false,"product_type":"c1","uid":1045598,"ip_address":"","ucode":"294F4FEE20F363","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f4/5e/8416375a.jpg","comment_is_top":false,"comment_ctime":1534903280,"is_pvip":false,"replies":[{"id":"7747","content":"和代码级覆盖率统计使用一样的方法和工具，比如jacoco","user_name":"作者回复","user_name_real":"dhrbc","uid":"1002226","ctime":1535329754,"ip_address":"","comment_id":21080,"utype":1}],"discussion_count":2,"race_medal":0,"score":"48779543536","product_id":100009601,"comment_content":"你好，我想问下接口测试下这个代码覆盖率是怎么统计的？","like_count":12,"discussions":[{"author":{"id":1002226,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/f2/6ea13762.jpg","nickname":"茹炳晟","note":"","ucode":"1361AE1931E2DD","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422525,"discussion_content":"和代码级覆盖率统计使用一样的方法和工具，比如jacoco","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1535329754,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2010872,"avatar":"","nickname":"summer","note":"","ucode":"B8D2B1976A0C6C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":282553,"discussion_content":"java用的是jacoco，那python呢，用的是什么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592014833,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":55284,"user_name":"楚耳","can_delete":false,"product_type":"c1","uid":1068208,"ip_address":"","ucode":"7661633F3297C6","user_header":"https://static001.geekbang.org/account/avatar/00/10/4c/b0/f22017b0.jpg","comment_is_top":false,"comment_ctime":1546089796,"is_pvip":false,"replies":[{"id":"20854","content":"很好的点，内部调用主要靠splunk来获取","user_name":"作者回复","user_name_real":"dhrbc","uid":"1002226","ctime":1546923698,"ip_address":"","comment_id":55284,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40200795460","product_id":100009601,"comment_content":"api gateway 并不是每个服务间都存在的，只有面向客户端的服务才会有这一层。内部服务间是不存在在这一层的。所以这种方式去过滤不是很全面","like_count":9,"discussions":[{"author":{"id":1002226,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/f2/6ea13762.jpg","nickname":"茹炳晟","note":"","ucode":"1361AE1931E2DD","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434727,"discussion_content":"很好的点，内部调用主要靠splunk来获取","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546923698,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":188912,"user_name":"ghost","can_delete":false,"product_type":"c1","uid":1824119,"ip_address":"","ucode":"8F99ACAEEF7EB6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK6xc7vGca4Kv6ShoXVr2skyGDfic0jxRicU6rLzXAyj6iaJZldLMvuXuiahsghZR8CTLdHBtqoIuibhmA/132","comment_is_top":false,"comment_ctime":1584433493,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35944171861","product_id":100009601,"comment_content":"这个问题有点尴尬的是，如果开发的代码进行了变动，以前测试的契约文件（mock）就错了。茹老师我想知道，这块怎么能把开发的代码变动和mock文件关联起来。","like_count":8},{"had_liked":false,"id":22151,"user_name":"图·美克尔","can_delete":false,"product_type":"c1","uid":1076720,"ip_address":"","ucode":"021FB5AE110066","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eppQqDE6TNibvr3DNdxG323AruicIgWo5DpVr6U7yZVNkbF2rKluyDfhdpgAEcYEOZTAnbrMdTzFkUw/0","comment_is_top":false,"comment_ctime":1535511382,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"35895249750","product_id":100009601,"comment_content":"感觉基于消费者契约这种方式也没有显著降低case的数量啊","like_count":8},{"had_liked":false,"id":21050,"user_name":"sylan215","can_delete":false,"product_type":"c1","uid":1019029,"ip_address":"","ucode":"5A2CF31BC69F40","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8c/95/4544d905.jpg","comment_is_top":false,"comment_ctime":1534898616,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27304702392","product_id":100009601,"comment_content":"1.微服务架构、单体架构、消费者契约，学到几个新的概念，涨姿势了；<br><br>2.对微服务架构，之前确实没有深入了解，我知道的是现在的 App 多采用插件的方式进行功能更新和维护，我们这边的客户端也是类似的，这种插件模式感觉是介入微服务和单体架构之间的，就是整体上还是一个整体，但是可以在整体的各个位置进行功能的插入并独立维护，既达到了整体的一致性，同时也满足了可扩展性、可维护下、少依赖性，不知道和这个微服务架构是不是一回事；<br><br>3.基于消费者契约的测试，我有一个疑问，消费者契约基于的是用户的常规操作，这部分的用例是 P1 级别必须覆盖的，但是对于某些环境异常导致的问题，可以就不会覆盖到，因为属于非用户操作，比如我们 windows 系统的某个 API 的入参是一个指针，而这个指针是上一个函数的返回值，理论上，这个返回的指针肯定有效，所以开发在接收入参后也没有校验参数的合法性，但是因为环境异常，导致就是出现了空指针，那么从消费者契约角度看，用例没问题，从代码覆盖率角度看，也没问题，但实际上确实出现了问题，所以，在有限的时间内我们当然会按优先级执行用例，但是不是还是需要从功能测试角度保证用例的覆盖率？如果我有理解不正确的地方，请批评指正。<br><br>以上，欢迎沟通交流，公众号「sylan215」","like_count":6},{"had_liked":false,"id":21030,"user_name":"假装乐","can_delete":false,"product_type":"c1","uid":1093437,"ip_address":"","ucode":"97A7D0A6D93865","user_header":"https://static001.geekbang.org/account/avatar/00/10/af/3d/28b61e6b.jpg","comment_is_top":false,"comment_ctime":1534895071,"is_pvip":false,"replies":[{"id":"7750","content":"答案是需要两部分结合起来，老的功能走契约测试，新的功能和api继续沿用老的方法","user_name":"作者回复","user_name_real":"dhrbc","uid":"1002226","ctime":1535329948,"ip_address":"","comment_id":21030,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18714764255","product_id":100009601,"comment_content":"期待文末问题的答案","like_count":4,"discussions":[{"author":{"id":1002226,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/f2/6ea13762.jpg","nickname":"茹炳晟","note":"","ucode":"1361AE1931E2DD","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422503,"discussion_content":"答案是需要两部分结合起来，老的功能走契约测试，新的功能和api继续沿用老的方法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1535329948,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34953,"user_name":"颜瑞","can_delete":false,"product_type":"c1","uid":1170056,"ip_address":"","ucode":"A837AF2DEF9558","user_header":"https://static001.geekbang.org/account/avatar/00/11/da/88/09ccab4a.jpg","comment_is_top":false,"comment_ctime":1540368268,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14425270156","product_id":100009601,"comment_content":"在大部分微服务的接口维护中，推荐使用swagger工具维护接口，贵司有维护接口文档么？是用什么工具呢？<br>另外一个关键点mock service，接口json文档的来源是开发维护的还是从API Gateway抽取的？mock service是用什么工具启动的呢？","like_count":3},{"had_liked":false,"id":21058,"user_name":"三生三世","can_delete":false,"product_type":"c1","uid":1165495,"ip_address":"","ucode":"95B835532B4CB6","user_header":"https://static001.geekbang.org/account/avatar/00/11/c8/b7/2ef830e4.jpg","comment_is_top":false,"comment_ctime":1534900008,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14419801896","product_id":100009601,"comment_content":"很有深度，理解不透","like_count":3},{"had_liked":false,"id":235792,"user_name":"不将就","can_delete":false,"product_type":"c1","uid":1168579,"ip_address":"","ucode":"9BEC01AEE1D885","user_header":"https://static001.geekbang.org/account/avatar/00/11/d4/c3/d41e8c79.jpg","comment_is_top":false,"comment_ctime":1595204598,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5890171894","product_id":100009601,"comment_content":"老师，您说的“如何获取Service的契约”，是采用了搜集的方式，只有有了用户调用以后才可以搜集到，那么如果实际场景中，更多的是我们新开发了一个接口，在上线前需要测试，这时候其实还没有用户调用，那怎么搜集这些契约呢？是不是没有办法？","like_count":1,"discussions":[{"author":{"id":2663324,"avatar":"https://static001.geekbang.org/account/avatar/00/28/a3/9c/836d7bb3.jpg","nickname":"11月的萧邦","note":"","ucode":"E7A2236BFD9ABE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551490,"discussion_content":"我也有同样的疑问 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645024977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":235374,"user_name":"捷后愚生","can_delete":false,"product_type":"c1","uid":1170483,"ip_address":"","ucode":"A1F935D39C8488","user_header":"https://static001.geekbang.org/account/avatar/00/11/dc/33/a68c6b26.jpg","comment_is_top":false,"comment_ctime":1594987972,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5889955268","product_id":100009601,"comment_content":"学习文章后，接触到的新概念：微服务、基于消费者契约的 API 测试、API Gateway。<br>自己现在没有接触微服务API测试，看完老师的文章，觉得老师把知识点讲的相当清楚在，赞。听了音频没完全理解，再细看文字，理解了整体的思路。<br>觉得老师这句话讲得很好：讲清楚某一技术的来龙去脉及其应用场景，但是很多具体操作级别、代码实现级别的内容，还是需要你在实践中不断积累。<br>以后工作如果有机会，一定得多实操才行。","like_count":1},{"had_liked":false,"id":175825,"user_name":"陈九思","can_delete":false,"product_type":"c1","uid":1281247,"ip_address":"","ucode":"81E4EC6A5BD9AC","user_header":"https://static001.geekbang.org/account/avatar/00/13/8c/df/4d77c1ca.jpg","comment_is_top":false,"comment_ctime":1580861607,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5875828903","product_id":100009601,"comment_content":"实际项目中，消费者契约测试，是否可以通过openapi的规范接口定义自动生成测试用例？这样可以省去录制的时间，也可以将测试的设计提前。","like_count":1},{"had_liked":false,"id":163243,"user_name":"脊椎疼","can_delete":false,"product_type":"c1","uid":1514927,"ip_address":"","ucode":"4F47D0A72EEDA4","user_header":"","comment_is_top":false,"comment_ctime":1576675143,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5871642439","product_id":100009601,"comment_content":"期待的测试框架访问数据库，消息队列的部分没有展开说一下。我现在只能写代码来实现。有没有比较成熟的解决方案？或者比较好的实践。","like_count":1,"discussions":[{"author":{"id":1951999,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/c8/ff/bd602ee9.jpg","nickname":"Luke","note":"","ucode":"72202F5FB5A896","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393533,"discussion_content":"我的理解是你提到的这些功能只能通过代码实现，我也特别想试试测试是如何搞定消息队列的测试的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631491498,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121832,"user_name":"倔强的潇洒小姐","can_delete":false,"product_type":"c1","uid":1167484,"ip_address":"","ucode":"A1CB6588A352E9","user_header":"https://static001.geekbang.org/account/avatar/00/11/d0/7c/868ccb4a.jpg","comment_is_top":false,"comment_ctime":1565230420,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5860197716","product_id":100009601,"comment_content":"之前经常听Mock，但不是很明白原理，这次算是听明白了，谢谢茹老师的讲解","like_count":1},{"had_liked":false,"id":99913,"user_name":"楚耳","can_delete":false,"product_type":"c1","uid":1068208,"ip_address":"","ucode":"7661633F3297C6","user_header":"https://static001.geekbang.org/account/avatar/00/10/4c/b0/f22017b0.jpg","comment_is_top":false,"comment_ctime":1559357353,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5854324649","product_id":100009601,"comment_content":"老师能讲讲api测试中，用例设计这块吗，到底是只做单接口测试还是也要做用单接口串联起来做场景测试，这两块用例分别要怎么设计？","like_count":1,"discussions":[{"author":{"id":1736807,"avatar":"","nickname":"Geek_8593e5","note":"","ucode":"B316E40C400CC8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249890,"discussion_content":"同疑问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587972158,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":85415,"user_name":"口水窝","can_delete":false,"product_type":"c1","uid":1004838,"ip_address":"","ucode":"6028B5AA10D8A1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/26/154f9578.jpg","comment_is_top":false,"comment_ctime":1555055811,"is_pvip":false,"replies":[{"id":"31240","content":"感谢支持","user_name":"作者回复","user_name_real":"dhrbc","uid":"1002226","ctime":1555472144,"ip_address":"","comment_id":85415,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5850023107","product_id":100009601,"comment_content":"现在待得的公司还是传统的单体架构，没有接触到微服务架构，这篇文章给我打开了一个全新的视角，思路上也有很多。","like_count":1,"discussions":[{"author":{"id":1002226,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/f2/6ea13762.jpg","nickname":"茹炳晟","note":"","ucode":"1361AE1931E2DD","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446663,"discussion_content":"感谢支持","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555472144,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35620,"user_name":"wanj","can_delete":false,"product_type":"c1","uid":1259549,"ip_address":"","ucode":"BE9ECC67ABC004","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLnYfSUc8hJ3oLfa39qkNiaXNibs3VyAbgT7ZXasZXp89fRL7YBakIZdNNEE7kClOjN2KpBUuGpacfQ/132","comment_is_top":false,"comment_ctime":1540713667,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5835680963","product_id":100009601,"comment_content":"怎么才能打印出所有的日志，需要先进行手工测试所有功能吗？","like_count":1},{"had_liked":false,"id":21158,"user_name":"emilymeng","can_delete":false,"product_type":"c1","uid":1164285,"ip_address":"","ucode":"CB5155F4D9BC0C","user_header":"https://static001.geekbang.org/account/avatar/00/11/c3/fd/f4663263.jpg","comment_is_top":false,"comment_ctime":1534943326,"is_pvip":false,"replies":[{"id":"7749","content":"主要取决于开发代码的语言，如果是java就可以直接使用jacoco","user_name":"作者回复","user_name_real":"dhrbc","uid":"1002226","ctime":1535329894,"ip_address":"","comment_id":21158,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5829910622","product_id":100009601,"comment_content":"老师，能详细讲解一下代码覆盖率的测试方法和使用到的工具?","like_count":1,"discussions":[{"author":{"id":1002226,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/f2/6ea13762.jpg","nickname":"茹炳晟","note":"","ucode":"1361AE1931E2DD","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422555,"discussion_content":"主要取决于开发代码的语言，如果是java就可以直接使用jacoco","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1535329894,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":351493,"user_name":"小强","can_delete":false,"product_type":"c1","uid":1033011,"ip_address":"","ucode":"803A393AE6866E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c3/33/ab8bafa0.jpg","comment_is_top":false,"comment_ctime":1657849090,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1657849090","product_id":100009601,"comment_content":"mock数据的方式仅仅是在服务上线后才能拿到？。。那怎么在服务上线前保证质量呢？","like_count":0,"discussions":[{"author":{"id":1077731,"avatar":"https://static001.geekbang.org/account/avatar/00/10/71/e3/afdc92e1.jpg","nickname":"花灰","note":"","ucode":"CA1474945A2A7E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590768,"discussion_content":"我们现在的项目是,新开发的接口或者改动的接口还是乖乖的用 postman 或者写 Python代码来测试,上线后有用户流量后,回归的时候在用 mock","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666072462,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":348260,"user_name":"熊猫宝宝","can_delete":false,"product_type":"c1","uid":1663921,"ip_address":"","ucode":"F082F925933C4E","user_header":"https://static001.geekbang.org/account/avatar/00/19/63/b1/6b9b9d8e.jpg","comment_is_top":false,"comment_ctime":1654909630,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1654909630","product_id":100009601,"comment_content":"代码覆盖率的那个图是怎么出来的？，用什么工具啊","like_count":0},{"had_liked":false,"id":324892,"user_name":"小呀么小二郎","can_delete":false,"product_type":"c1","uid":1326905,"ip_address":"","ucode":"149540DCFDF43E","user_header":"https://static001.geekbang.org/account/avatar/00/14/3f/39/b1558fc9.jpg","comment_is_top":false,"comment_ctime":1638705722,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638705722","product_id":100009601,"comment_content":"只做过单体架构的接口测试，以后接触微服务架构的接口测试再来复习一下~","like_count":0},{"had_liked":false,"id":322670,"user_name":"纪泽和","can_delete":false,"product_type":"c1","uid":2752508,"ip_address":"","ucode":"E85E1CFE7DA23E","user_header":"","comment_is_top":false,"comment_ctime":1637547538,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637547538","product_id":100009601,"comment_content":"这一节和上上节的一些链接都没用了","like_count":0},{"had_liked":false,"id":307930,"user_name":"金子般的心","can_delete":false,"product_type":"c1","uid":1006897,"ip_address":"","ucode":"8F6F217AF0C0EA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5d/31/2ccc4675.jpg","comment_is_top":false,"comment_ctime":1629331326,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1629331326","product_id":100009601,"comment_content":"Spring Cloud 的Sleuth可以完成调用关系记录吧?","like_count":0},{"had_liked":false,"id":296514,"user_name":"海朋森","can_delete":false,"product_type":"c1","uid":1165084,"ip_address":"","ucode":"212BADF1F9E962","user_header":"https://static001.geekbang.org/account/avatar/00/11/c7/1c/e59a699b.jpg","comment_is_top":false,"comment_ctime":1623028290,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623028290","product_id":100009601,"comment_content":"这篇总结太超值了，我作为测试，分别开发过单体架构以及微服务架构的测试项目，从demo角度出发，了解到了这两者带给测试的便利性和挑战性","like_count":0},{"had_liked":false,"id":272090,"user_name":"Geek_xiaoxi","can_delete":false,"product_type":"c1","uid":1526972,"ip_address":"","ucode":"89EC318D6176C6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK6oBCs8X9XzHVlaIRUpnoaBd9AvMVwOcr0pVFvScNzhezrCa6xLyTLtFibYStPrjkV73UKUxbAIFA/132","comment_is_top":false,"comment_ctime":1609930565,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609930565","product_id":100009601,"comment_content":"只测试调用的API，没调用的API不管，那没被调用的API存在的意义是什么？他们没有被用，为什么还要写呢？还是说现在他们没有被用，后边可能会被用到，用到的时候再去测？","like_count":0},{"had_liked":false,"id":268419,"user_name":"Five-Tool","can_delete":false,"product_type":"c1","uid":1786195,"ip_address":"","ucode":"E7520D562B019B","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q12j0kibBQKXxqwZQmNFHRozpbgaIjnfX6XzBu5OZYvHlvOfB2ibKRU73XvyEuuShBTINDhEKULPxdm6WRwnVRWA/132","comment_is_top":false,"comment_ctime":1608187864,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1608187864","product_id":100009601,"comment_content":"茹老师好，请问国外有什么做接口自动化比较好的工具或者平台吗，收费的也可以，无论是否免费开源的，我对国外的工具或者平台真的是了解的太少了，先感谢。","like_count":0},{"had_liked":false,"id":235378,"user_name":"捷后愚生","can_delete":false,"product_type":"c1","uid":1170483,"ip_address":"","ucode":"A1F935D39C8488","user_header":"https://static001.geekbang.org/account/avatar/00/11/dc/33/a68c6b26.jpg","comment_is_top":false,"comment_ctime":1594988331,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594988331","product_id":100009601,"comment_content":"补充一个感想，觉得以后工作中遇上老师说到的测试工作，都应该把老师的文章再拿出来好好读一读。","like_count":0},{"had_liked":false,"id":119409,"user_name":"呵喂辉","can_delete":false,"product_type":"c1","uid":1087929,"ip_address":"","ucode":"EB2C98622574DD","user_header":"https://static001.geekbang.org/account/avatar/00/10/99/b9/5774d1eb.jpg","comment_is_top":false,"comment_ctime":1564580578,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1564580578","product_id":100009601,"comment_content":"你好，想问下，微服务架构中那些实际没有用到的api具体是什么样的功能？能麻烦举个例子么？谢谢","like_count":0,"discussions":[{"author":{"id":1672674,"avatar":"https://static001.geekbang.org/account/avatar/00/19/85/e2/540b91fa.jpg","nickname":"凯耐","note":"","ucode":"DF9C2170509BD0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318894,"discussion_content":"微服务开发的接口不一定调用，实际没有用到的api可以是任何不想调用的接口","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603875580,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":89458,"user_name":"与你相遇","can_delete":false,"product_type":"c1","uid":1364607,"ip_address":"","ucode":"455AB64EEB31E9","user_header":"https://static001.geekbang.org/account/avatar/00/14/d2/7f/bb938b47.jpg","comment_is_top":false,"comment_ctime":1556178555,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556178555","product_id":100009601,"comment_content":"你好，我这边遇到个问题，就是接口测试的万能脚本，我该如何写，因为在文章中看到，自己又研究了一段时间，但是始终找不到解决的办法，希望你能给我点建议，谢谢。<br><br>","like_count":0},{"had_liked":false,"id":77228,"user_name":"roychris","can_delete":false,"product_type":"c1","uid":1171260,"ip_address":"","ucode":"B0E239FB11A006","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/etbNBmR5PEicra7jbaV9pRsCaibXZ3ichB6JicMOnYowP65W5QMKb8Zicud19jicmEGAGh8ylwDXoYM3SHVU6hf6dFpQ/132","comment_is_top":false,"comment_ctime":1552892770,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1552892770","product_id":100009601,"comment_content":"我想请教下,在单体架构下测试API，是如何统计代码覆盖率问题的？谢谢！","like_count":0,"discussions":[{"author":{"id":1672674,"avatar":"https://static001.geekbang.org/account/avatar/00/19/85/e2/540b91fa.jpg","nickname":"凯耐","note":"","ucode":"DF9C2170509BD0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318895,"discussion_content":"java应用使用jococo工具就可以统计出来，支持报表查看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603875700,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":63031,"user_name":"johnny","can_delete":false,"product_type":"c1","uid":1210226,"ip_address":"","ucode":"54E78B7BBC6AF0","user_header":"https://static001.geekbang.org/account/avatar/00/12/77/72/8f77ddb0.jpg","comment_is_top":false,"comment_ctime":1548233446,"is_pvip":false,"replies":[{"id":"26131","content":"感谢分享","user_name":"作者回复","user_name_real":"dhrbc","uid":"1002226","ctime":1551528276,"ip_address":"","comment_id":63031,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548233446","product_id":100009601,"comment_content":"这篇文章也有助于理解文中提到的的实例代码。<br>http:&#47;&#47;www.bubuko.com&#47;infodetail-2317705.html","like_count":0,"discussions":[{"author":{"id":1002226,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/f2/6ea13762.jpg","nickname":"茹炳晟","note":"","ucode":"1361AE1931E2DD","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437444,"discussion_content":"感谢分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551528276,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":37386,"user_name":"小老鼠","can_delete":false,"product_type":"c1","uid":1257460,"ip_address":"","ucode":"C663A0C863A515","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/f4/2dede51a.jpg","comment_is_top":false,"comment_ctime":1541563945,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1541563945","product_id":100009601,"comment_content":"比如新版本中，有个ServiceC来调用serviceT，且ServiceA、ServiceB发生了变更是不是重新需要建立契约。","like_count":0,"discussions":[{"author":{"id":2055977,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/5f/29/6b750d58.jpg","nickname":"会飞的鱼","note":"","ucode":"C1AF8E749F688E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553225,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645773420,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":35909,"user_name":"hold","can_delete":false,"product_type":"c1","uid":1087129,"ip_address":"","ucode":"4C0303D50B73EB","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/MqW7XCh9Mc651Ah7S6PLzelXeYbSaMVNzBtWwnFwBlicdicrXfc1ZrHGuaz7bqcLvhLU0hJzeFZjzTL0aQOgsRUg/132","comment_is_top":false,"comment_ctime":1540860623,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540860623","product_id":100009601,"comment_content":"问题1:被调用的服务t，采用mock的方式，那怎么被测试呢？问题2:微服务之间采用的是thrift这类接口，有好的测试思路吗？","like_count":0},{"had_liked":false,"id":34951,"user_name":"颜瑞","can_delete":false,"product_type":"c1","uid":1170056,"ip_address":"","ucode":"A837AF2DEF9558","user_header":"https://static001.geekbang.org/account/avatar/00/11/da/88/09ccab4a.jpg","comment_is_top":false,"comment_ctime":1540367504,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540367504","product_id":100009601,"comment_content":"从服务消费者角度，过滤不使用的API测试场景，有两个方面：一是过滤不使用的API，二是过滤不使用的API输入参数组合。过滤不使用的API比较简单，对于第二个问题，不太理解是怎么通过 API Gateway 的日志分析将各种输入参数组合按照等价类的方式抽象的。","like_count":0},{"had_liked":false,"id":23060,"user_name":"yinyin","can_delete":false,"product_type":"c1","uid":1184090,"ip_address":"","ucode":"153BE86B9E8F7E","user_header":"https://static001.geekbang.org/account/avatar/00/12/11/5a/9d808df4.jpg","comment_is_top":false,"comment_ctime":1536127058,"is_pvip":false,"replies":[{"id":"8636","content":"这要具体问题具体分析了，理论上是可以的","user_name":"作者回复","user_name_real":"dhrbc","uid":"1002226","ctime":1536631737,"ip_address":"","comment_id":23060,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1536127058","product_id":100009601,"comment_content":"如果依赖的服务是中间件，能用mock代替吗？","like_count":0,"discussions":[{"author":{"id":1002226,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/f2/6ea13762.jpg","nickname":"茹炳晟","note":"","ucode":"1361AE1931E2DD","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423394,"discussion_content":"这要具体问题具体分析了，理论上是可以的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536631737,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":22109,"user_name":"涅槃Ls","can_delete":false,"product_type":"c1","uid":1163943,"ip_address":"","ucode":"39EDBFB303D668","user_header":"https://static001.geekbang.org/account/avatar/00/11/c2/a7/c4de1048.jpg","comment_is_top":false,"comment_ctime":1535501336,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1535501336","product_id":100009601,"comment_content":"打卡24 API测试","like_count":0}]}