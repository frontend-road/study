{"id":71525,"title":"33 | 字符串匹配基础（中）：如何实现文本编辑器中的查找功能？","content":"<p>文本编辑器中的查找替换功能，我想你应该不陌生吧？比如，我们在Word中把一个单词统一替换成另一个，用的就是这个功能。你有没有想过，它是怎么实现的呢？</p><p>当然，你用上一节讲的BF算法和RK算法，也可以实现这个功能，但是在某些极端情况下，BF算法性能会退化的比较严重，而RK算法需要用到哈希算法，设计一个可以应对各种类型字符的哈希算法并不简单。</p><p>对于工业级的软件开发来说，我们希望算法尽可能的高效，并且在极端情况下，性能也不要退化的太严重。那么，<strong><span class=\"orange\">对于查找功能是重要功能的软件来说，比如一些文本编辑器，它们的查找功能都是用哪种算法来实现的呢？有没有比BF算法和RK算法更加高效的字符串匹配算法呢？</span></strong></p><p>今天，我们就来学习BM（Boyer-Moore）算法。它是一种非常高效的字符串匹配算法，有实验统计，它的性能是著名的<a href=\"https://zh.wikipedia.org/wiki/%E5%85%8B%E5%8A%AA%E6%96%AF-%E8%8E%AB%E9%87%8C%E6%96%AF-%E6%99%AE%E6%8B%89%E7%89%B9%E7%AE%97%E6%B3%95\">KMP算法</a>的3到4倍<strong>。</strong>BM算法的原理很复杂，比较难懂，学起来会比较烧脑，我会尽量给你讲清楚，同时也希望你做好打硬仗的准备。好，现在我们正式开始！</p><h2>BM算法的核心思想</h2><p>我们把模式串和主串的匹配过程，看作模式串在主串中不停地往后滑动。当遇到不匹配的字符时，BF算法和RK算法的做法是，模式串往后滑动一位，然后从模式串的第一个字符开始重新匹配。我举个例子解释一下，你可以看我画的这幅图。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/43/f9/4316dd98eac500a01a0fd632bb5e77f9.jpg?wh=1142*519\" alt=\"\"></p><p>在这个例子里，主串中的c，在模式串中是不存在的，所以，模式串向后滑动的时候，只要c与模式串没有重合，肯定无法匹配。所以，我们可以一次性把模式串往后多滑动几位，把模式串移动到c的后面。</p><p><img src=\"https://static001.geekbang.org/resource/image/cf/15/cf362f9e59c01aaf40a34d2f10e1ef15.jpg?wh=1142*538\" alt=\"\"></p><p>由现象找规律，你可以思考一下，当遇到不匹配的字符时，有什么固定的规律，可以将模式串往后多滑动几位呢？这样一次性往后滑动好几位，那匹配的效率岂不是就提高了？</p><p>我们今天要讲的BM算法，本质上其实就是在寻找这种规律。借助这种规律，在模式串与主串匹配的过程中，当模式串和主串某个字符不匹配的时候，能够跳过一些肯定不会匹配的情况，将模式串往后多滑动几位。</p><h2>BM算法原理分析</h2><p>BM算法包含两部分，分别是<strong>坏字符规则</strong>（bad character rule）和<strong>好后缀规则</strong>（good suffix shift）。我们下面依次来看，这两个规则分别都是怎么工作的。</p><h3>1.坏字符规则</h3><p>前面两节讲的算法，在匹配的过程中，我们都是按模式串的下标从小到大的顺序，依次与主串中的字符进行匹配的。这种匹配顺序比较符合我们的思维习惯，而BM算法的匹配顺序比较特别，它是按照模式串下标从大到小的顺序，倒着匹配的。我画了一张图，你可以看下。</p><p><img src=\"https://static001.geekbang.org/resource/image/29/e1/29521f541dd45e13162013b3364fece1.jpg?wh=1142*557\" alt=\"\"><img src=\"https://static001.geekbang.org/resource/image/54/9e/540809418354024206d9989cb6cdd89e.jpg?wh=1142*545\" alt=\"\"></p><p>从模式串的末尾往前倒着匹配，当发现某个字符没法匹配的时候，我们把这个没有匹配的字符叫作<strong>坏字符</strong>（主串中的字符）。</p><p><img src=\"https://static001.geekbang.org/resource/image/22/da/220daef736418df84367215647bca5da.jpg?wh=1142*475\" alt=\"\"></p><p>我们拿坏字符c在模式串中查找，发现模式串中并不存在这个字符，也就是说，字符c与模式串中的任何字符都不可能匹配。这个时候，我们可以将模式串直接往后滑动三位，将模式串滑动到c后面的位置，再从模式串的末尾字符开始比较。</p><p><img src=\"https://static001.geekbang.org/resource/image/4e/64/4e36c4d48d1b6c3b499fb021f03c7f64.jpg?wh=1142*607\" alt=\"\"></p><p>这个时候，我们发现，模式串中最后一个字符d，还是无法跟主串中的a匹配，这个时候，还能将模式串往后滑动三位吗？答案是不行的。因为这个时候，坏字符a在模式串中是存在的，模式串中下标是0的位置也是字符a。这种情况下，我们可以将模式串往后滑动两位，让两个a上下对齐，然后再从模式串的末尾字符开始，重新匹配。</p><p><img src=\"https://static001.geekbang.org/resource/image/a8/ca/a8d229aa217a67051fbb31b8aeb2edca.jpg?wh=1142*547\" alt=\"\"></p><p>第一次不匹配的时候，我们滑动了三位，第二次不匹配的时候，我们将模式串后移两位，那具体滑动多少位，到底有没有规律呢？</p><p>当发生不匹配的时候，我们把坏字符对应的模式串中的字符下标记作si。如果坏字符在模式串中存在，我们把这个坏字符在模式串中的下标记作xi。如果不存在，我们把xi记作-1。那模式串往后移动的位数就等于si-xi。（注意，我这里说的下标，都是字符在模式串的下标）。</p><p><img src=\"https://static001.geekbang.org/resource/image/8f/2e/8f520fb9d9cec0f6ea641d4181eb432e.jpg?wh=1142*509\" alt=\"\"></p><p>这里我要特别说明一点，如果坏字符在模式串里多处出现，那我们在计算xi的时候，选择最靠后的那个，因为这样不会让模式串滑动过多，导致本来可能匹配的情况被滑动略过。</p><p>利用坏字符规则，BM算法在最好情况下的时间复杂度非常低，是O(n/m)。比如，主串是aaabaaabaaabaaab，模式串是aaaa。每次比对，模式串都可以直接后移四位，所以，匹配具有类似特点的模式串和主串的时候，BM算法非常高效。</p><p>不过，单纯使用坏字符规则还是不够的。因为根据si-xi计算出来的移动位数，有可能是负数，比如主串是aaaaaaaaaaaaaaaa，模式串是baaa。不但不会向后滑动模式串，还有可能倒退。所以，BM算法还需要用到“好后缀规则”。</p><h3>2.好后缀规则</h3><p>好后缀规则实际上跟坏字符规则的思路很类似。你看我下面这幅图。当模式串滑动到图中的位置的时候，模式串和主串有2个字符是匹配的，倒数第3个字符发生了不匹配的情况。</p><p><img src=\"https://static001.geekbang.org/resource/image/d7/8a/d78990dbcb794d1aa2cf4a3c646ae58a.jpg?wh=1142*515\" alt=\"\"></p><p>这个时候该如何滑动模式串呢？当然，我们还可以利用坏字符规则来计算模式串的滑动位数，不过，我们也可以使用好后缀处理规则。两种规则到底如何选择，我稍后会讲。抛开这个问题，现在我们来看，好后缀规则是怎么工作的？</p><p>我们把已经匹配的bc叫作好后缀，记作{u}。我们拿它在模式串中查找，如果找到了另一个跟{u}相匹配的子串{u*}，那我们就将模式串滑动到子串{u*}与主串中{u}对齐的位置。</p><p><img src=\"https://static001.geekbang.org/resource/image/b9/63/b9785be3e91e34bbc23961f67c234b63.jpg?wh=1142*667\" alt=\"\"></p><p>如果在模式串中找不到另一个等于{u}的子串，我们就直接将模式串，滑动到主串中{u}的后面，因为之前的任何一次往后滑动，都没有匹配主串中{u}的情况。</p><p><img src=\"https://static001.geekbang.org/resource/image/de/cd/de97c461b9b9dbc42d35768db59908cd.jpg?wh=1142*556\" alt=\"\"></p><p>不过，当模式串中不存在等于{u}的子串时，我们直接将模式串滑动到主串{u}的后面。这样做是否有点太过头呢？我们来看下面这个例子。这里面bc是好后缀，尽管在模式串中没有另外一个相匹配的子串{u*}，但是如果我们将模式串移动到好后缀的后面，如图所示，那就会错过模式串和主串可以匹配的情况。</p><p><img src=\"https://static001.geekbang.org/resource/image/9b/70/9b3fa3d1cd9c0d0f914a9b1f518ad070.jpg?wh=1142*802\" alt=\"\"></p><p>如果好后缀在模式串中不存在可匹配的子串，那在我们一步一步往后滑动模式串的过程中，只要主串中的{u}与模式串有重合，那肯定就无法完全匹配。但是当模式串滑动到前缀与主串中{u}的后缀有部分重合的时候，并且重合的部分相等的时候，就有可能会存在完全匹配的情况。</p><p><img src=\"https://static001.geekbang.org/resource/image/05/23/0544d2997d8bb57c10e13ccac4015e23.jpg?wh=1142*616\" alt=\"\"></p><p>所以，针对这种情况，我们不仅要看好后缀在模式串中，是否有另一个匹配的子串，我们还要考察好后缀的后缀子串，是否存在跟模式串的前缀子串匹配的。</p><p>所谓某个字符串s的后缀子串，就是最后一个字符跟s对齐的子串，比如abc的后缀子串就包括c, bc。所谓前缀子串，就是起始字符跟s对齐的子串，比如abc的前缀子串有a，ab。我们从好后缀的后缀子串中，找一个最长的并且能跟模式串的前缀子串匹配的，假设是{v}，然后将模式串滑动到如图所示的位置。</p><p><img src=\"https://static001.geekbang.org/resource/image/6c/f9/6caa0f61387fd2b3109fe03d803192f9.jpg?wh=1142*584\" alt=\"\"></p><p>坏字符和好后缀的基本原理都讲完了，我现在回答一下前面那个问题。当模式串和主串中的某个字符不匹配的时候，如何选择用好后缀规则还是坏字符规则，来计算模式串往后滑动的位数？</p><p>我们可以分别计算好后缀和坏字符往后滑动的位数，然后取两个数中最大的，作为模式串往后滑动的位数。这种处理方法还可以避免我们前面提到的，根据坏字符规则，计算得到的往后滑动的位数，有可能是负数的情况。</p><h2>BM算法代码实现</h2><p>学习完了基本原理，我们再来看，如何实现BM算法？</p><p>“坏字符规则”本身不难理解。当遇到坏字符时，要计算往后移动的位数si-xi，其中xi的计算是重点，我们如何求得xi呢？或者说，如何查找坏字符在模式串中出现的位置呢？</p><p>如果我们拿坏字符，在模式串中顺序遍历查找，这样就会比较低效，势必影响这个算法的性能。有没有更加高效的方式呢？我们之前学的散列表，这里可以派上用场了。我们可以将模式串中的每个字符及其下标都存到散列表中。这样就可以快速找到坏字符在模式串的位置下标了。</p><p>关于这个散列表，我们只实现一种最简单的情况，假设字符串的字符集不是很大，每个字符长度是1字节，我们用大小为256的数组，来记录每个字符在模式串中出现的位置。数组的下标对应字符的ASCII码值，数组中存储这个字符在模式串中出现的位置。</p><p><img src=\"https://static001.geekbang.org/resource/image/bf/02/bf78f8a0506e069fa318f36c42a95e02.jpg?wh=1142*526\" alt=\"\"></p><p>如果将上面的过程翻译成代码，就是下面这个样子。其中，变量b是模式串，m是模式串的长度，bc表示刚刚讲的散列表。</p><pre><code>private static final int SIZE = 256; // 全局变量或成员变量\nprivate void generateBC(char[] b, int m, int[] bc) {\n  for (int i = 0; i &lt; SIZE; ++i) {\n    bc[i] = -1; // 初始化bc\n  }\n  for (int i = 0; i &lt; m; ++i) {\n    int ascii = (int)b[i]; // 计算b[i]的ASCII值\n    bc[ascii] = i;\n  }\n}\n</code></pre><p>掌握了坏字符规则之后，我们先把BM算法代码的大框架写好，先不考虑好后缀规则，仅用坏字符规则，并且不考虑si-xi计算得到的移动位数可能会出现负数的情况。</p><pre><code>public int bm(char[] a, int n, char[] b, int m) {\n  int[] bc = new int[SIZE]; // 记录模式串中每个字符最后出现的位置\n  generateBC(b, m, bc); // 构建坏字符哈希表\n  int i = 0; // i表示主串与模式串对齐的第一个字符\n  while (i &lt;= n - m) {\n    int j;\n    for (j = m - 1; j &gt;= 0; --j) { // 模式串从后往前匹配\n      if (a[i+j] != b[j]) break; // 坏字符对应模式串中的下标是j\n    }\n    if (j &lt; 0) {\n      return i; // 匹配成功，返回主串与模式串第一个匹配的字符的位置\n    }\n    // 这里等同于将模式串往后滑动j-bc[(int)a[i+j]]位\n    i = i + (j - bc[(int)a[i+j]]); \n  }\n  return -1;\n}\n</code></pre><p>代码里的注释已经很详细了，我就不再赘述了。不过，为了你方便理解，我画了一张图，将其中的一些关键变量标注在上面了，结合着图，代码应该更好理解。</p><p><img src=\"https://static001.geekbang.org/resource/image/53/c6/5380b6ef906a5210f782fccd044b36c6.jpg?wh=1142*606\" alt=\"\"></p><p>至此，我们已经实现了包含坏字符规则的框架代码，只剩下往框架代码中填充好后缀规则了。现在，我们就来看看，如何实现好后缀规则。它的实现要比坏字符规则复杂一些。</p><p>在讲实现之前，我们先简单回顾一下，前面讲过好后缀的处理规则中最核心的内容：</p><ul>\n<li>\n<p>在模式串中，查找跟好后缀匹配的另一个子串；</p>\n</li>\n<li>\n<p>在好后缀的后缀子串中，查找最长的、能跟模式串前缀子串匹配的后缀子串；</p>\n</li>\n</ul><p>在不考虑效率的情况下，这两个操作都可以用很“暴力”的匹配查找方式解决。但是，如果想要BM算法的效率很高，这部分就不能太低效。如何来做呢？</p><p>因为好后缀也是模式串本身的后缀子串，所以，我们可以在模式串和主串正式匹配之前，通过预处理模式串，预先计算好模式串的每个后缀子串，对应的另一个可匹配子串的位置。这个预处理过程比较有技巧，很不好懂，应该是这节最难懂的内容了，你要认真多读几遍。</p><p>我们先来看，<strong>如何表示模式串中不同的后缀子串呢？</strong>因为后缀子串的最后一个字符的位置是固定的，下标为m-1，我们只需要记录长度就可以了。通过长度，我们可以确定一个唯一的后缀子串。</p><p><img src=\"https://static001.geekbang.org/resource/image/77/c8/7742f1d02d0940a1ef3760faf4929ec8.jpg?wh=1142*625\" alt=\"\"></p><p>现在，我们要<strong>引入最关键的变量suffix数组</strong>。suffix数组的下标k，表示后缀子串的长度，下标对应的数组值存储的是，在模式串中跟好后缀{u}相匹配的子串{u*}的起始下标值。这句话不好理解，我举一个例子。</p><p><img src=\"https://static001.geekbang.org/resource/image/99/c2/99a6cfadf2f9a713401ba8feac2484c2.jpg?wh=1142*598\" alt=\"\"></p><p>但是，如果模式串中有多个（大于1个）子串跟后缀子串{u}匹配，那suffix数组中该存储哪一个子串的起始位置呢？为了避免模式串往后滑动得过头了，我们肯定要存储模式串中最靠后的那个子串的起始位置，也就是下标最大的那个子串的起始位置。不过，这样处理就足够了吗？</p><p>实际上，仅仅是选最靠后的子串片段来存储是不够的。我们再回忆一下好后缀规则。</p><p>我们不仅要在模式串中，查找跟好后缀匹配的另一个子串，还要在好后缀的后缀子串中，查找最长的能跟模式串前缀子串匹配的后缀子串。</p><p>如果我们只记录刚刚定义的suffix，实际上，只能处理规则的前半部分，也就是，在模式串中，查找跟好后缀匹配的另一个子串。所以，除了suffix数组之外，我们还需要另外一个boolean类型的prefix数组，来记录模式串的后缀子串是否能匹配模式串的前缀子串。</p><p><img src=\"https://static001.geekbang.org/resource/image/27/83/279be7d64e6254dac1a32d2f6d1a2383.jpg?wh=1142*642\" alt=\"\"></p><p>现在，我们来看下，<strong>如何来计算并填充这两个数组的值</strong>？这个计算过程非常巧妙。</p><p>我们拿下标从0到i的子串（i可以是0到m-2）与整个模式串，求公共后缀子串。如果公共后缀子串的长度是k，那我们就记录suffix[k]=j（j表示公共后缀子串的起始下标）。如果j等于0，也就是说，公共后缀子串也是模式串的前缀子串，我们就记录prefix[k]=true。</p><p><img src=\"https://static001.geekbang.org/resource/image/57/7c/5723be3c77cdbddb64b1f8d6473cea7c.jpg?wh=1142*586\" alt=\"\"></p><p>我们把suffix数组和prefix数组的计算过程，用代码实现出来，就是下面这个样子：</p><pre><code>// b表示模式串，m表示长度，suffix，prefix数组事先申请好了\nprivate void generateGS(char[] b, int m, int[] suffix, boolean[] prefix) {\n  for (int i = 0; i &lt; m; ++i) { // 初始化\n    suffix[i] = -1;\n    prefix[i] = false;\n  }\n  for (int i = 0; i &lt; m - 1; ++i) { // b[0, i]\n    int j = i;\n    int k = 0; // 公共后缀子串长度\n    while (j &gt;= 0 &amp;&amp; b[j] == b[m-1-k]) { // 与b[0, m-1]求公共后缀子串\n      --j;\n      ++k;\n      suffix[k] = j+1; //j+1表示公共后缀子串在b[0, i]中的起始下标\n    }\n    if (j == -1) prefix[k] = true; //如果公共后缀子串也是模式串的前缀子串\n  }\n}\n</code></pre><p>有了这两个数组之后，我们现在来看，<strong>在模式串跟主串匹配的过程中，遇到不能匹配的字符时，如何根据好后缀规则，计算模式串往后滑动的位数？</strong></p><p>假设好后缀的长度是k。我们先拿好后缀，在suffix数组中查找其匹配的子串。如果suffix[k]不等于-1（-1表示不存在匹配的子串），那我们就将模式串往后移动j-suffix[k]+1位（j表示坏字符对应的模式串中的字符下标）。如果suffix[k]等于-1，表示模式串中不存在另一个跟好后缀匹配的子串片段。我们可以用下面这条规则来处理。</p><p><img src=\"https://static001.geekbang.org/resource/image/1d/72/1d046df5cc40bc57d3f92ff7c51afb72.jpg?wh=1142*570\" alt=\"\"></p><p>好后缀的后缀子串b[r, m-1]（其中，r取值从j+2到m-1）的长度k=m-r，如果prefix[k]等于true，表示长度为k的后缀子串，有可匹配的前缀子串，这样我们可以把模式串后移r位。</p><p><img src=\"https://static001.geekbang.org/resource/image/63/0d/63a357abc9766393a77a9a006a31b10d.jpg?wh=1142*549\" alt=\"\"></p><p>如果两条规则都没有找到可以匹配好后缀及其后缀子串的子串，我们就将整个模式串后移m位。</p><p><img src=\"https://static001.geekbang.org/resource/image/d9/a1/d982db00467964666de18ed5ac647fa1.jpg?wh=1142*509\" alt=\"\"></p><p>至此，好后缀规则的代码实现我们也讲完了。我们把好后缀规则加到前面的代码框架里，就可以得到BM算法的完整版代码实现。</p><pre><code>// a,b表示主串和模式串；n，m表示主串和模式串的长度。\npublic int bm(char[] a, int n, char[] b, int m) {\n  int[] bc = new int[SIZE]; // 记录模式串中每个字符最后出现的位置\n  generateBC(b, m, bc); // 构建坏字符哈希表\n  int[] suffix = new int[m];\n  boolean[] prefix = new boolean[m];\n  generateGS(b, m, suffix, prefix);\n  int i = 0; // j表示主串与模式串匹配的第一个字符\n  while (i &lt;= n - m) {\n    int j;\n    for (j = m - 1; j &gt;= 0; --j) { // 模式串从后往前匹配\n      if (a[i+j] != b[j]) break; // 坏字符对应模式串中的下标是j\n    }\n    if (j &lt; 0) {\n      return i; // 匹配成功，返回主串与模式串第一个匹配的字符的位置\n    }\n    int x = j - bc[(int)a[i+j]];\n    int y = 0;\n    if (j &lt; m-1) { // 如果有好后缀的话\n      y = moveByGS(j, m, suffix, prefix);\n    }\n    i = i + Math.max(x, y);\n  }\n  return -1;\n}\n\n// j表示坏字符对应的模式串中的字符下标; m表示模式串长度\nprivate int moveByGS(int j, int m, int[] suffix, boolean[] prefix) {\n  int k = m - 1 - j; // 好后缀长度\n  if (suffix[k] != -1) return j - suffix[k] +1;\n  for (int r = j+2; r &lt;= m-1; ++r) {\n    if (prefix[m-r] == true) {\n      return r;\n    }\n  }\n  return m;\n}\n</code></pre><h2>BM算法的性能分析及优化</h2><p>我们先来分析BM算法的内存消耗。整个算法用到了额外的3个数组，其中bc数组的大小跟字符集大小有关，suffix数组和prefix数组的大小跟模式串长度m有关。</p><p>如果我们处理字符集很大的字符串匹配问题，bc数组对内存的消耗就会比较多。因为好后缀和坏字符规则是独立的，如果我们运行的环境对内存要求苛刻，可以只使用好后缀规则，不使用坏字符规则，这样就可以避免bc数组过多的内存消耗。不过，单纯使用好后缀规则的BM算法效率就会下降一些了。</p><p>对于执行效率来说，我们可以先从时间复杂度的角度来分析。</p><p>实际上，我前面讲的BM算法是个初级版本。为了让你能更容易理解，有些复杂的优化我没有讲。基于我目前讲的这个版本，在极端情况下，预处理计算suffix数组、prefix数组的性能会比较差。</p><p>比如模式串是aaaaaaa这种包含很多重复的字符的模式串，预处理的时间复杂度就是O(m^2)。当然，大部分情况下，时间复杂度不会这么差。关于如何优化这种极端情况下的时间复杂度退化，如果感兴趣，你可以自己研究一下。</p><p>实际上，BM算法的时间复杂度分析起来是非常复杂，这篇论文“<a href=\"http://dl.acm.org/citation.cfm?id=1382431.1382552\">A new proof of the linearity of the Boyer-Moore string searching algorithm</a>”证明了在最坏情况下，BM算法的比较次数上限是5n。这篇论文“<a href=\"http://dl.acm.org/citation.cfm?id=127830\">Tight bounds on the complexity of the Boyer-Moore string matching algorithm</a>”证明了在最坏情况下，BM算法的比较次数上限是3n。你可以自己阅读看看。</p><h2>解答开篇&amp;内容小结</h2><p>今天，我们讲了一种比较复杂的字符串匹配算法，BM算法。尽管复杂、难懂，但匹配的效率却很高，在实际的软件开发中，特别是一些文本编辑器中，应用比较多。如果一遍看不懂的话，你就多看几遍。</p><p>BM算法核心思想是，利用模式串本身的特点，在模式串中某个字符与主串不能匹配的时候，将模式串往后多滑动几位，以此来减少不必要的字符比较，提高匹配的效率。BM算法构建的规则有两类，坏字符规则和好后缀规则。好后缀规则可以独立于坏字符规则使用。因为坏字符规则的实现比较耗内存，为了节省内存，我们可以只用好后缀规则来实现BM算法。</p><h2>课后思考</h2><p>你熟悉的编程语言中的查找函数，或者工具、软件中的查找功能，都是用了哪种字符串匹配算法呢？</p><p>欢迎留言和我分享，也欢迎点击“<span class=\"orange\">请朋友读</span>”，把今天的内容分享给你的好友，和他一起讨论、学习。</p>","comments":[{"had_liked":false,"id":47943,"user_name":"Smallfly","can_delete":false,"product_type":"c1","uid":1013841,"ip_address":"","ucode":"D388D5E0249A69","user_header":"https://static001.geekbang.org/account/avatar/00/0f/78/51/4790e13e.jpg","comment_is_top":false,"comment_ctime":1544262517,"is_pvip":false,"replies":[{"id":"17173","content":"👍","user_name":"作者回复","comment_id":47943,"uid":"1190123","ip_address":"","utype":1,"ctime":1544407229,"user_name_real":"gg"}],"discussion_count":17,"race_medal":0,"score":"2101783270261","product_id":100017301,"comment_content":"BM 算法分析着实比较复杂，不过按照老师的思路，一步一步走，看懂应该没问题的。但其实有些代码实现细节看不懂关系也不大。我们学算法主要目的是学习算法的思想，能在需要的时候加以应用就好。<br><br>但对于平时工作，几乎不可能遇到，需要自己手写一个字符串匹配算法的场景。那我们还要学，图的是什么？<br><br>我认为文章中值得学习借鉴的思想有：<br><br>1、要有优化意识，前面的 BF，RK 算法已经能够满足我们需求了，为什么发明 BM 算法？是为了减少时间复杂度，但是带来的弊端是，优化代码变得复杂，维护成本变高。<br><br>2、需要查找，需要减少时间复杂度，应该想到什么？散列表。<br><br>3、如果某个表达式计算开销比较大，又需要频繁的使用怎么办？预处理，并缓存。<br><br>（一点拙见，可能文中还有其它优秀的思想，没能 Get 到）","like_count":490,"discussions":[{"author":{"id":1528163,"avatar":"https://static001.geekbang.org/account/avatar/00/17/51/63/9da9ae1f.jpg","nickname":"Lib","note":"","ucode":"7A2BEC8100F2F6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":257355,"discussion_content":"写的很好！\n我补充一条，就是逆向思维：一般都是从前往后做比较，而BM用到的是从后往前的比较。","likes_number":14,"is_delete":false,"is_hidden":false,"ctime":1588561846,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1806618,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/91/1a/c51b24f4.jpg","nickname":"佳娃","note":"","ucode":"47004C40CBE019","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":195566,"discussion_content":"你总是能出来说点人话。爱您。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1583288242,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2215110,"avatar":"","nickname":"Geek_e8a328","note":"","ucode":"3E17DFDC505EA9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1806618,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/91/1a/c51b24f4.jpg","nickname":"佳娃","note":"","ucode":"47004C40CBE019","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328640,"discussion_content":"哈哈哈","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1606201474,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":195566,"ip_address":""},"score":328640,"extra":""}]},{"author":{"id":2708005,"avatar":"https://static001.geekbang.org/account/avatar/00/29/52/25/185763e4.jpg","nickname":"薇尔莉特","note":"","ucode":"1465A6F3005CA9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388402,"discussion_content":"逻辑看一遍就清楚了，但是代码实现哪里还不一定能立马写出来，有些细节用代码来表达还真十分巧妙，不容易看出来。但为了整体的效率能提上去，代码实现能看懂就不错了","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1628752256,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2962599,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/34/a7/52c4ea60.jpg","nickname":"年少挽滑稽世无双","note":"","ucode":"793DCBDE25A07B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2708005,"avatar":"https://static001.geekbang.org/account/avatar/00/29/52/25/185763e4.jpg","nickname":"薇尔莉特","note":"","ucode":"1465A6F3005CA9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574803,"discussion_content":"兄弟，看到你好多次了，优秀啊！Long may the sunshine!","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654354301,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":388402,"ip_address":""},"score":574803,"extra":""}]},{"author":{"id":1127175,"avatar":"https://static001.geekbang.org/account/avatar/00/11/33/07/8f351609.jpg","nickname":"JustDoDT","note":"","ucode":"6AF0B80F00EAEF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":23849,"discussion_content":"这块先放放，整体学完，重点啃一啃没学会的这几节，比较难的。没看懂还是以前接触的少。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1569921648,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1013841,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/78/51/4790e13e.jpg","nickname":"Smallfly","note":"","ucode":"D388D5E0249A69","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1127175,"avatar":"https://static001.geekbang.org/account/avatar/00/11/33/07/8f351609.jpg","nickname":"JustDoDT","note":"","ucode":"6AF0B80F00EAEF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":23969,"discussion_content":"加油。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1569949046,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":23849,"ip_address":""},"score":23969,"extra":""}]},{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431954,"discussion_content":"👍","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1544407229,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2694205,"avatar":"https://static001.geekbang.org/account/avatar/00/29/1c/3d/76465ee4.jpg","nickname":"摘星","note":"","ucode":"55D8CAFC938F91","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":531898,"discussion_content":"哇 离作者最近的一次","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637462975,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":431954,"ip_address":""},"score":531898,"extra":"{\"user_type\":1}"}]},{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352633,"discussion_content":"厉害","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614783419,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1336475,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","nickname":"J.Smile","note":"","ucode":"C4D98DFDBF7584","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":255440,"discussion_content":"第二遍刷，逻辑看懂问题不大，代码实现不过分强求。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588400128,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1314724,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0f/a4/0b49469f.jpg","nickname":"木子00","note":"","ucode":"8F78CA722EB29B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1336475,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","nickname":"J.Smile","note":"","ucode":"C4D98DFDBF7584","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":272392,"discussion_content":"我也是看懂逻辑没问题，也能讲出来。就是代码实现不好写。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1590297948,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":255440,"ip_address":""},"score":272392,"extra":""}]},{"author":{"id":1634044,"avatar":"https://static001.geekbang.org/account/avatar/00/18/ee/fc/8717c26b.jpg","nickname":"柠檬","note":"","ucode":"AF73A8B705CE76","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":85950,"discussion_content":"谢谢分享 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576584138,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1212873,"avatar":"https://static001.geekbang.org/account/avatar/00/12/81/c9/9194612b.jpg","nickname":"百里","note":"","ucode":"2CE96129AA7F78","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":77921,"discussion_content":"总结的好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575955652,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":77916,"discussion_content":"为了性能，需要复杂的算法，但是越复杂的算法，代码实现就越复杂，细节就越容易错。。。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575955032,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1328977,"avatar":"https://static001.geekbang.org/account/avatar/00/14/47/51/e2d4833b.jpg","nickname":"子午河洲","note":"","ucode":"BB282CEBB590A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":39801,"discussion_content":"受教受教","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571990220,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1272047,"avatar":"https://static001.geekbang.org/account/avatar/00/13/68/ef/6264ca3d.jpg","nickname":"Magic","note":"","ucode":"FD9CEDAA419EB0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":18574,"discussion_content":"厉害","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569069381,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":48019,"user_name":"meng","can_delete":false,"product_type":"c1","uid":1252478,"ip_address":"","ucode":"0A497CA3B5C67B","user_header":"","comment_is_top":false,"comment_ctime":1544323712,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"443925955200","product_id":100017301,"comment_content":"我对这次课的内容一知半解，于是在网上搜到一个文档，里面的图挺好的，跟大家分享一下：http:&#47;&#47;www.cs.jhu.edu&#47;~langmea&#47;resources&#47;lecture_notes&#47;boyer_moore.pdf","like_count":104,"discussions":[{"author":{"id":1207038,"avatar":"https://static001.geekbang.org/account/avatar/00/12/6a/fe/7566542f.jpg","nickname":"布衣","note":"","ucode":"BFAD9049508330","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4716,"discussion_content":"我觉你推荐的文章上那些 在这片文章里 也讲了 这些应该都能看懂 不难.这节难点在 模式串字处理上的理解","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1565684720,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2573766,"avatar":"https://static001.geekbang.org/account/avatar/00/27/45/c6/146ced9b.jpg","nickname":"深水炸弹","note":"","ucode":"AFDC6F079A8EBC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577958,"discussion_content":"看这节在好后缀看得懵懵懂懂，老哥这文章一看就懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656431053,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2694205,"avatar":"https://static001.geekbang.org/account/avatar/00/29/1c/3d/76465ee4.jpg","nickname":"摘星","note":"","ucode":"55D8CAFC938F91","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531900,"discussion_content":"流下了 英语不好的 眼泪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637463208,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1494436,"avatar":"https://static001.geekbang.org/account/avatar/00/16/cd/a4/38cbf7f3.jpg","nickname":"二哥","note":"","ucode":"AF51032C2232EA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347510,"discussion_content":"看不懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612245757,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1521486,"avatar":"https://static001.geekbang.org/account/avatar/00/17/37/4e/5c3153b2.jpg","nickname":"知行合一","note":"","ucode":"2B8E634FC4CFB7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":77914,"discussion_content":"纯英文的啊 更看不懂了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575954839,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":51569,"user_name":"suke","can_delete":false,"product_type":"c1","uid":1007753,"ip_address":"","ucode":"C0287C31A4F45B","user_header":"","comment_is_top":false,"comment_ctime":1545201329,"is_pvip":false,"discussion_count":8,"race_medal":0,"score":"439631865521","product_id":100017301,"comment_content":"老师以后的代码中的变量能不能起的有意义一些，这样更加方便大家理解代码啊，不要总拿a b c bc这种完全没有意义的名字来命名变量","like_count":102,"discussions":[{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":77919,"discussion_content":"以后要注意看 老师提到的中文名称的英文单词，我之前也没看懂。。。共勉\n代码实现中的 \nbc 就是 bad character 坏字符\ngs 就是 good suffix 好后缀。。。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1575955172,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1007753,"avatar":"","nickname":"suke","note":"","ucode":"C0287C31A4F45B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":78024,"discussion_content":"我说的是整个专栏，你才看了几篇啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575969010,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":77919,"ip_address":""},"score":78024,"extra":""},{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1007753,"avatar":"","nickname":"suke","note":"","ucode":"C0287C31A4F45B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":78070,"discussion_content":"😁刚看到这儿","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575973586,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":78024,"ip_address":""},"score":78070,"extra":""}]},{"author":{"id":1000004,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/44/d3d67640.jpg","nickname":"Hills录","note":"","ucode":"779020947ACABA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":45600,"discussion_content":"a，b 用来指主串和模式串，我觉得无可厚非吧；bc 是 bad char 缩写；而 c 并没有用到。总的来说我觉得没有什么问题，在简洁和可读性上达到了平衡。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1573051148,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1451605,"avatar":"https://static001.geekbang.org/account/avatar/00/16/26/55/e72a671e.jpg","nickname":"rookie","note":"","ucode":"F23FB0F2CC9AD0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":76827,"discussion_content":"bc是bad char，表示坏字符，gs是good string，表示好字符串","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575857261,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1441187,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKbwJ55niaS6Df8BjvKK2ug2jFibCYhicz1lx7GDYOGs9MMgbHJmWoH1DXZAR5TKsESyUz1zsaw4Flew/132","nickname":"Virtue","note":"","ucode":"67B2D1AD06D714","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362664,"discussion_content":"哈哈哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617003717,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2335374,"avatar":"https://static001.geekbang.org/account/avatar/00/23/a2/8e/b08c7a8a.jpg","nickname":"听心声","note":"","ucode":"DC110E5556059F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1441187,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKbwJ55niaS6Df8BjvKK2ug2jFibCYhicz1lx7GDYOGs9MMgbHJmWoH1DXZAR5TKsESyUz1zsaw4Flew/132","nickname":"Virtue","note":"","ucode":"67B2D1AD06D714","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":396501,"discussion_content":"哈哈哈哈这个键盘侠，好有笑点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632446913,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":362664,"ip_address":""},"score":396501,"extra":""},{"author":{"id":2077080,"avatar":"","nickname":"Geek_f41e5c","note":"","ucode":"4D06C1A86E57E5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2335374,"avatar":"https://static001.geekbang.org/account/avatar/00/23/a2/8e/b08c7a8a.jpg","nickname":"听心声","note":"","ucode":"DC110E5556059F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":409174,"discussion_content":"可读性是不咋滴，不是当老师就啥都对。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1635387630,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":396501,"ip_address":""},"score":409174,"extra":""}]}]},{"had_liked":false,"id":48403,"user_name":"纯洁的憎恶","can_delete":false,"product_type":"c1","uid":1130512,"ip_address":"","ucode":"5E9757DE6F45DF","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/10/b6bf3c3c.jpg","comment_is_top":false,"comment_ctime":1544436399,"is_pvip":true,"discussion_count":6,"race_medal":0,"score":"323666983599","product_id":100017301,"comment_content":"大体思路应该是看懂了，不过具体实现和代码细节还需要时间消化。BM算法的核心思想是通过将模式串沿着主串大踏步的向后滑动，从而大大减少比较次数，降低时间复杂度。而算法的关键在于如何兼顾步子迈得足够大与无遗漏，同时要尽量提高执行效率。这就需要模式串在向后滑动时，遵守坏字符规则与好后缀规则，同时采用一些技巧。<br><br>坏字符规则：从后往前逐位比较模式串与主串的字符，当找到不匹配的坏字符时，记录模式串的下标值si，并找到坏字符在模式串中，位于下标si前的最近位置xi（若无则记为-1），si-xi即为向后滑动距离。（PS：我觉得加上xi必须在si前面，也就是比si小的条件，就不用担心计算出的距离为负了）。但是坏字符规则向后滑动的步幅还不够大，于是需要好后缀规则。<br><br>好后缀规则：从后往前逐位比较模式串与主串的字符，当出现坏字符时停止。若存在已匹配成功的子串｛u｝，那么在模式串的｛u｝前面找到最近的｛u｝，记作｛u&#39;｝。再将模式串后移，使得模式串的｛u&#39;｝与主串的｛u｝重叠。若不存在｛u&#39;｝，则直接把模式串移到主串的｛u｝后面。为了没有遗漏，需要找到最长的、能够跟模式串的前缀子串匹配的，好后缀的后缀子串（同时也是模式串的后缀子串）。然后把模式串向右移到其左边界，与这个好后缀的后缀子串在主串中的左边界对齐。<br><br>何时使用坏字符规则和好后缀规则呢？首先在每次匹配过程中，一旦发现坏字符，先执行坏字符规则，如果发现存在好后缀，还要执行好后缀规则，并从两者中选择后移距离最大的方案执行。<br><br>技巧：<br>1.通过散列表实现，坏字符在模式串中下标位置的快速查询。<br>2.每次执行好后缀原则时，都会计算多次能够与模式串前缀子串相匹配的好后缀的最长后缀子串。为了提高效率，可以预先计算模式串的所有后缀子串，在模式串中与之匹配的另一个子串的位置。同时预计算模式串中（同长度的）后缀子串与前缀子串是否匹配并记录。在具体操作中直接使用，大大提高效率。<br>3.如何快速记录模式串后缀子串匹配的另一个子串位置，以及模式串（相同长度）前缀与后缀子串石否匹配呢？先用一个suffix数组，下标值k为后缀子串的长度，从模式串下标为i（0~m-2）的字符为最后一个字符，查找这个子串是否与后缀子串匹配，若匹配则将子串起始位置的下标值j赋给suffix[k]。若j为0，说明这个匹配子串的起始位置为模式串的起始位置，则用一个数组prefix，将prefix[k]设为true，否则设为false。k从0到m（模式串的长度）于是就得到了模式串所有前缀与后缀子串的匹配情况。","like_count":75,"discussions":[{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":77923,"discussion_content":"坏字符的那个移动为负的问题和我想法一致，si<xi 时，xi 修正为-1就好了\n其他理解基本ok，\n就是 坏字符和好后缀的先后顺序 应该是 没啥要求的","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1575955851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1372581,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f1/a5/ae0e7b88.jpg","nickname":"Suy","note":"","ucode":"4E38188803F689","race_medal":2,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389816,"discussion_content":"看了三遍没看懂，看了您的总结看懂了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629442902,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1475423,"avatar":"https://static001.geekbang.org/account/avatar/00/16/83/5f/50f2fdf2.jpg","nickname":"『至爱闫』","note":"","ucode":"2A4F0E0DE6C196","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":346123,"discussion_content":"你这个比主讲总结的清晰多了。。感觉这个专栏有点坑。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611879498,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1250922,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIzGGthScz54sECZJKX3lgyjCATkgrvSt5N3eOsYB34jibCr3SkAX88QaZ5IVmME9Ec7VdkQGwRSPw/132","nickname":"哈哈哈","note":"","ucode":"8AC20A1C9C7DF8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304602,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599624142,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1109640,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ee/88/a890b41e.jpg","nickname":"chris","note":"","ucode":"6663E3E09457E3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":255901,"discussion_content":"顶一下！总结比较到位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588431791,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1239233,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e8/c1/e2cc1d04.jpg","nickname":"海贼王","note":"","ucode":"9F35793FAA3F5E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":47517,"discussion_content":"短发需要消化","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573357157,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":70321,"user_name":"前端西瓜哥","can_delete":false,"product_type":"c1","uid":1248576,"ip_address":"","ucode":"150130C34CD1C1","user_header":"https://static001.geekbang.org/account/avatar/00/13/0d/40/f70e5653.jpg","comment_is_top":false,"comment_ctime":1551073710,"is_pvip":false,"discussion_count":12,"race_medal":0,"score":"319378653614","product_id":100017301,"comment_content":"。。。我知道为什么老师说 si-xi 可能是负数了。<br><br>虽然理论上应该是从 si 的位置往前找 xi。但代码实现为了提高效率，使用了哈希表，记录的是不同字符在模式串中“最后出现的位置”，并不是 si 的位置往前查找的第一个位置，所以确实会出现 xi 大于 si 的情况，原来如此原来如此。。。<br>awsl。。","like_count":74,"discussions":[{"author":{"id":2193156,"avatar":"","nickname":"Geek_1b8580","note":"","ucode":"649033274EB0D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":354223,"discussion_content":"按照前面si和xi的定义来，主串是 aaaaaaaaaaaaaaaa，模式串是 baaa,si=0,xi=3,0-3为负数","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1615257297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":353097,"discussion_content":"是的，大聪明","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1615002764,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1528610,"avatar":"https://static001.geekbang.org/account/avatar/00/17/53/22/cce9a2e5.jpg","nickname":"naku","note":"","ucode":"B49EF5B5B38400","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":224934,"discussion_content":"我看了半天评论就是再找你，虽然还没懂","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1586337860,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1245334,"avatar":"https://static001.geekbang.org/account/avatar/00/13/00/96/6df95326.jpg","nickname":"Zeng Shine","note":"","ucode":"15D2618C92D662","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":404289,"discussion_content":"也是想了半天，谢谢分享。王老师，这个点一点要好好解析一下呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634282902,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1202801,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5a/71/a062bb69.jpg","nickname":"Loran","note":"","ucode":"0D8C51F372AF92","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368268,"discussion_content":"Mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618636637,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1487584,"avatar":"https://static001.geekbang.org/account/avatar/00/16/b2/e0/d856f5a4.jpg","nickname":"鱼","note":"","ucode":"89EC9CE3AD0281","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307717,"discussion_content":"我第一反应也是应该从si开始找匹配的，这样的话坏字符算法就可以独立使用了吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600741858,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2019799,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Rccaya3zw31Pxu1fRSiakKxjn7gBcXTyy7YE4BHVsGczceABMnKBRicrnxUlcptrOArQdj4hOP8AjRekrDvBx7KQ/132","nickname":"万政","note":"","ucode":"E59C2C660D6582","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1487584,"avatar":"https://static001.geekbang.org/account/avatar/00/16/b2/e0/d856f5a4.jpg","nickname":"鱼","note":"","ucode":"89EC9CE3AD0281","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369298,"discussion_content":"只是为了方便用散列表，坏字符就无法独立使用。坏字符表示很不甘心！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618998555,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":307717,"ip_address":""},"score":369298,"extra":""}]},{"author":{"id":1092218,"avatar":"https://static001.geekbang.org/account/avatar/00/10/aa/7a/ae8c247d.jpg","nickname":"指尖以东","note":"","ucode":"1DEE134FE92FD0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":273352,"discussion_content":"学习了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590452085,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1108832,"avatar":"https://static001.geekbang.org/account/avatar/00/10/eb/60/17f279cc.jpg","nickname":"筑梦","note":"","ucode":"702137FB9EF79B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":269007,"discussion_content":"看的时候有相同的困惑，多谢解惑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589855772,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1270780,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er8AdNibZHbZriaqLQZrNPcX8hVOpY91o0ELl7eOq7qy3aTibjia10ymIsKUKW6Ucs9SuXBDWlg6sjahw/132","nickname":"逆舟","note":"","ucode":"B303B4B8E10E0C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":232569,"discussion_content":"改为哈希表存储所有位置，发现为负数就取前面位置再算应该可以","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586872606,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1003366,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4f/66/1f8fccfb.jpg","nickname":"云之崖","note":"","ucode":"724C0614F40EC1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":192071,"discussion_content":"哈哈，我也疑惑了老半天，怎么也想不通什么情况为负。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583061292,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1098637,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c3/8d/214ad614.jpg","nickname":"朱坤","note":"","ucode":"65224DA2456EAB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":111768,"discussion_content":"原来如此","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577804636,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47584,"user_name":"Jerry银银","can_delete":false,"product_type":"c1","uid":1008404,"ip_address":"","ucode":"80DA1172A2360A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/14/06eff9a4.jpg","comment_is_top":false,"comment_ctime":1544158973,"is_pvip":false,"discussion_count":9,"race_medal":0,"score":"216292523773","product_id":100017301,"comment_content":"曾经一度觉得字符串匹配的几大算法，都是高山仰止的，难以理解。<br><br>但是前阵子受两句话启发，从此以后对字符串匹配问题，至少在战略层面藐视了它：<br>1. 善用之前信息(从信息论的角度：消除信息的不确定性，就是引入信息)<br><br>2. 增加效率，在资源有限的情况下，只有想办法少做事情","like_count":50,"discussions":[{"author":{"id":1357303,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKg3ia2DDFuGLZRtHw6to43icxKyia1eHbxTUh1CY1dSuTp5WmQN01A1aLAia1lkaR8EAkXD4h76n8Bog/132","nickname":"Hxd","note":"","ucode":"B8B04AA5738CC9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":28364,"discussion_content":"高山仰止这个成语的意思是高尚的品德","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1570692620,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1008404,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/63/14/06eff9a4.jpg","nickname":"Jerry银银","note":"","ucode":"80DA1172A2360A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1357303,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKg3ia2DDFuGLZRtHw6to43icxKyia1eHbxTUh1CY1dSuTp5WmQN01A1aLAia1lkaR8EAkXD4h76n8Bog/132","nickname":"Hxd","note":"","ucode":"B8B04AA5738CC9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":28961,"discussion_content":"😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570719968,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":28364,"ip_address":""},"score":28961,"extra":""},{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1357303,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKg3ia2DDFuGLZRtHw6to43icxKyia1eHbxTUh1CY1dSuTp5WmQN01A1aLAia1lkaR8EAkXD4h76n8Bog/132","nickname":"Hxd","note":"","ucode":"B8B04AA5738CC9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":77926,"discussion_content":"666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575956281,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":28364,"ip_address":""},"score":77926,"extra":""}]},{"author":{"id":1609624,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/98/7d1287d9.jpg","nickname":"韩 * *","note":"","ucode":"4F08BE3D081FFC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3059,"discussion_content":"听着这么像吴军博士的话","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1564139091,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1008404,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/63/14/06eff9a4.jpg","nickname":"Jerry银银","note":"","ucode":"80DA1172A2360A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1609624,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/98/7d1287d9.jpg","nickname":"韩 * *","note":"","ucode":"4F08BE3D081FFC","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":28963,"discussion_content":"😀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570720019,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":3059,"ip_address":""},"score":28963,"extra":""},{"author":{"id":1008404,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/63/14/06eff9a4.jpg","nickname":"Jerry银银","note":"","ucode":"80DA1172A2360A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1609624,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/98/7d1287d9.jpg","nickname":"韩 * *","note":"","ucode":"4F08BE3D081FFC","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":28964,"discussion_content":"确实从吴军老师那里学到的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570720052,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":3059,"ip_address":""},"score":28964,"extra":""}]},{"author":{"id":1441187,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKbwJ55niaS6Df8BjvKK2ug2jFibCYhicz1lx7GDYOGs9MMgbHJmWoH1DXZAR5TKsESyUz1zsaw4Flew/132","nickname":"Virtue","note":"","ucode":"67B2D1AD06D714","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362666,"discussion_content":"🐂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617003754,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1376730,"avatar":"https://static001.geekbang.org/account/avatar/00/15/01/da/834fc35a.jpg","nickname":"海洋行者","note":"","ucode":"3C3A1F8686EED0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306267,"discussion_content":"在枯燥的算法海洋中眼前一亮，遇到友军了������","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600236714,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1047968,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fd/a0/1367112b.jpg","nickname":"bayannamor","note":"","ucode":"BF3092D6DEFE0B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285323,"discussion_content":"看来都是吴军老师的粉丝，哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592807073,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47607,"user_name":"杨伟","can_delete":false,"product_type":"c1","uid":1239937,"ip_address":"","ucode":"D5B521A0688E02","user_header":"https://static001.geekbang.org/account/avatar/00/12/eb/81/43f4b52c.jpg","comment_is_top":false,"comment_ctime":1544164650,"is_pvip":false,"replies":[{"id":"16985","content":"怎么讲呢 平常不大可能会自己去实现一个bm算法 顶多就用个bf算法。不过bm算法号称最高效的 比如grep命令就是用它实现的 所以有必要讲一下 不然不完整啊 你全当思维训练吧","user_name":"作者回复","comment_id":47607,"uid":"1190123","ip_address":"","utype":1,"ctime":1544179145,"user_name_real":"gg"}],"discussion_count":3,"race_medal":0,"score":"173342856490","product_id":100017301,"comment_content":"这个算法用的多么？老师为什么讲解这个算法？","like_count":40,"discussions":[{"author":{"id":2045997,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/38/2d/f3c6493e.jpg","nickname":"罗樱罂","note":"","ucode":"9072E79E625ED1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295526,"discussion_content":"看见有个谷歌面经说，就是把easy的string matching题用了moore的方法给面试官讲明白了，就进入了下一轮。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1596227545,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431829,"discussion_content":"怎么讲呢 平常不大可能会自己去实现一个bm算法 顶多就用个bf算法。不过bm算法号称最高效的 比如grep命令就是用它实现的 所以有必要讲一下 不然不完整啊 你全当思维训练吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1544179145,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1254012,"avatar":"https://static001.geekbang.org/account/avatar/00/13/22/7c/7169323f.jpg","nickname":"飘逸的翔云","note":"","ucode":"0E756D3AC3D889","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380953,"discussion_content":"怪不得grep这么快","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1624839001,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":52841,"user_name":"meng","can_delete":false,"product_type":"c1","uid":1252478,"ip_address":"","ucode":"0A497CA3B5C67B","user_header":"","comment_is_top":false,"comment_ctime":1545538601,"is_pvip":false,"discussion_count":14,"race_medal":0,"score":"160459328553","product_id":100017301,"comment_content":"这篇文章啃了很长时间了，有个问题请教：是否可以不要prefix数组，直接通过suffix[k]==0来判断前缀子串的匹配与否？","like_count":37,"discussions":[{"author":{"id":1461993,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/nY6ykMrdBVzDqmqBIibWjFkeUnegTwA0SIhYd729rS0m132doM7BcWtnzgicicCsLp4kk4pOwJv0xqTqDAo0pcVyg/132","nickname":"Jade","note":"","ucode":"FDBDA568ACAB24","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384,"discussion_content":"不可以。例如模式串是cabcabcab，可以知道prefix[3]和prefix[6]的值都是true，但是对应的suffix[3]=3，suffix[6]=0，因此不能直接通过suffix[k]==0来判断前缀子串的匹配与否。prefix数组是十分必要的。","likes_number":36,"is_delete":false,"is_hidden":false,"ctime":1561518330,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1461993,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/nY6ykMrdBVzDqmqBIibWjFkeUnegTwA0SIhYd729rS0m132doM7BcWtnzgicicCsLp4kk4pOwJv0xqTqDAo0pcVyg/132","nickname":"Jade","note":"","ucode":"FDBDA568ACAB24","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":77925,"discussion_content":"棒棒的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575956202,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":384,"ip_address":""},"score":77925,"extra":""},{"author":{"id":1625340,"avatar":"https://static001.geekbang.org/account/avatar/00/18/cc/fc/92646317.jpg","nickname":"骑着驴读着书的谢小夕","note":"","ucode":"56F0A469B630A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1461993,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/nY6ykMrdBVzDqmqBIibWjFkeUnegTwA0SIhYd729rS0m132doM7BcWtnzgicicCsLp4kk4pOwJv0xqTqDAo0pcVyg/132","nickname":"Jade","note":"","ucode":"FDBDA568ACAB24","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349321,"discussion_content":"suffix[6] 不是为 -1 的么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613056928,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":384,"ip_address":""},"score":349321,"extra":""}]},{"author":{"id":1162159,"avatar":"https://static001.geekbang.org/account/avatar/00/11/bb/af/2624cc07.jpg","nickname":"looper","note":"","ucode":"899D50A315BCAE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300691,"discussion_content":"前面两个楼中楼感觉没有说到点上。我来尝试完善下逻辑\nsuffix数组储存的是模式串匹配到的子后缀最靠后位置的起始坐标，为什么是最靠后是怕滑动过头。而这种存储方式是为suffix[好后缀size]！=-1时候服务的，也就是能匹配到完整好后缀的时候用的，所以才存储靠后的。\n而当suffix[好后缀size]=-1时候，即完整好后缀在模式串中不存在的时候，我们需要去前缀中去找suffix[好后缀size-n]这样的好后缀的子串，而如果有多个重复匹配suffix注定不能粗糙前缀匹配到的起始位置，也就是0，所以才需要prefix数组","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1598233801,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2708005,"avatar":"https://static001.geekbang.org/account/avatar/00/29/52/25/185763e4.jpg","nickname":"薇尔莉特","note":"","ucode":"1465A6F3005CA9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1162159,"avatar":"https://static001.geekbang.org/account/avatar/00/11/bb/af/2624cc07.jpg","nickname":"looper","note":"","ucode":"899D50A315BCAE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388410,"discussion_content":"题主的意思是：当suffix[好后缀]=-1，开始要找匹配前缀的时候，这个时候找出suffix[好后缀子串] == 0不就正好等价于prefix[好后缀子串] == true的时候吗？不需要设立prefix数组来检测和前缀匹配的最大好后缀的子串，只需要从suffix[次大好后缀子串]中缩小范围检查其值是否等于0即可。前文也表示了：“ suffix[k]=j，如果 j 等于 0，也就是说，公共后缀子串也是模式串的前缀子串，我们就记录 prefix[k]=true。”的这个意思。我也觉得确实可以不需要使用prefix，直接从最大suffix数组开始遍历是否存在值为0的知道该移动在哪里了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1628755292,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300691,"ip_address":""},"score":388410,"extra":""},{"author":{"id":2699218,"avatar":"","nickname":"Geek_279849","note":"","ucode":"FC6A3514FC955C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2708005,"avatar":"https://static001.geekbang.org/account/avatar/00/29/52/25/185763e4.jpg","nickname":"薇尔莉特","note":"","ucode":"1465A6F3005CA9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554028,"discussion_content":"不可以的，suffix数据存的是最后能匹配的后缀子串。可能存在suffix[k]第一次为0，prefix[k]为true，之后suffix[k]变成大于0的值。比如ccccac，suffix[1]第一次为0之后变成3","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1646189058,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":388410,"ip_address":""},"score":554028,"extra":""}]},{"author":{"id":1160678,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b5/e6/c67f12bd.jpg","nickname":"左耳朵东","note":"","ucode":"60134ACF12BB52","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368505,"discussion_content":"不可以，不能把 suffix 和 prefix 的用途搞混了。\n\n在某一次具体的匹配过程中，只要 suffix[k]>-1，就表示找到了 {u*}，可以直接移动模式串了，无需特别关注 suffix[k] 是否等于 0 ;\n只有在 suffix[k]==-1 时，也就是找不到 {u*} 的时候，才要多做一步，去当前好后缀的所有后缀子串中找最长的、能与模式串的前缀子串匹配的，这时才用到了 prefix 。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1618736310,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1375756,"avatar":"https://static001.geekbang.org/account/avatar/00/14/fe/0c/f9cb1af4.jpg","nickname":"李艺轩","note":"","ucode":"EF387413327B1D","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":346946,"discussion_content":"同一个模式串的子串：用来匹配好后缀时，找的是靠后的位置；用来匹配后缀子串时，找的是0的位置。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1612104595,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1128420,"avatar":"https://static001.geekbang.org/account/avatar/00/11/37/e4/5d7a32c6.jpg","nickname":"creasylai19","note":"","ucode":"F9B04060FCFD3F","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582857,"discussion_content":"可以，但是当suffix[k]==-1时，需要找suffix[k-1]，如果还为-1，还要找suffix[k-2]...假设通过前缀能找到匹配的串，那suffix[k-x]肯定也能找到这个匹配的串","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659709642,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2085689,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/d3/39/834365a4.jpg","nickname":"康海泉","note":"","ucode":"58AF0DE608AC37","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390855,"discussion_content":"可以的。如果好后缀长度k=5，后面检索最长好前缀肯定是对suffix[ j<5 ] == 0 进行的判断啊，因为好后缀的子串长度变短了，对应的是suffix数组之前的位置的值，有几楼的人搞混了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630078724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2525085,"avatar":"https://static001.geekbang.org/account/avatar/00/26/87/9d/f311f79e.jpg","nickname":"now you see me","note":"","ucode":"55DCC03888212B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2085689,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/d3/39/834365a4.jpg","nickname":"康海泉","note":"","ucode":"58AF0DE608AC37","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413481,"discussion_content":"不可以，举个例子“absssabccccab”，suffix[2]记录的是5而不是0","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636475347,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":390855,"ip_address":""},"score":413481,"extra":""}]},{"author":{"id":1944052,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/a9/f4/3d1bea4b.jpg","nickname":"宋鹏飞","note":"","ucode":"90DCCE4453CFA3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371507,"discussion_content":"suffix 记录的是后缀最后一次出现的位置，和 prefix 功能不一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619797129,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1228518,"avatar":"https://static001.geekbang.org/account/avatar/00/12/be/e6/7808520d.jpg","nickname":"Edward Lee","note":"","ucode":"156223F1D7E94A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3641,"discussion_content":"请问什么时候会用到 suffix[3]=3 的 prefix=true 的条件判断呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564651977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1941034,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/9e/2a/f1d8913f.jpg","nickname":"唯心主义蠢货🍁","note":"","ucode":"836B09E0459953","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1228518,"avatar":"https://static001.geekbang.org/account/avatar/00/12/be/e6/7808520d.jpg","nickname":"Edward Lee","note":"","ucode":"156223F1D7E94A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277852,"discussion_content":"我觉得比如 模式串cabcabcab  然后 *dcab* 匹配到一个坏字符d，这时候判断suffix[3]=3 的 prefix=true然后就直接跳到对齐到开头","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591110306,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":3641,"ip_address":""},"score":277852,"extra":""}]}]},{"had_liked":false,"id":47384,"user_name":"五岳寻仙","can_delete":false,"product_type":"c1","uid":1247467,"ip_address":"","ucode":"88A46A4E1832CE","user_header":"https://static001.geekbang.org/account/avatar/00/13/08/eb/594e9e6c.jpg","comment_is_top":false,"comment_ctime":1544139930,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"147573027994","product_id":100017301,"comment_content":"老师好！今天讲的BM算法确实有点复杂，不过听的时候有熟悉的感觉，似乎跟之前接触过的Boyer Moore算法很像，查了一下才发现原来是同一种算法😂<br><br>在工作中遇到过这样的情况，需要在一个长度为n (比如十亿级)的巨大的主串中查找长度为m(比如几百)的模式串。主串是固定的，从直观上讲，要加快搜索速度，就需要对主串建索引。BWT-FM算法是解决这类问题最经典的算法，刚接触时也是不好理解，但感觉非常神奇，可以将搜索的时间复杂度降到O(m)，是我认为最伟大的算法之一。","like_count":34},{"had_liked":false,"id":48355,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1544427465,"is_pvip":false,"replies":[{"id":"17385","content":"是的 就是要覆盖掉 留最大的","user_name":"作者回复","comment_id":48355,"uid":"1190123","ip_address":"","utype":1,"ctime":1544493543,"user_name_real":"gg"}],"discussion_count":1,"race_medal":0,"score":"108918609865","product_id":100017301,"comment_content":"在用一个256的数组 用字符的ascii码做下标 记录该字符出现的位置 如果存在相同字符怎么办呢？之前的会被新的覆盖掉的把！","like_count":25,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432146,"discussion_content":"是的 就是要覆盖掉 留最大的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544493543,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47578,"user_name":"Liam","can_delete":false,"product_type":"c1","uid":1094597,"ip_address":"","ucode":"1D15D3B64F2606","user_header":"https://static001.geekbang.org/account/avatar/00/10/b3/c5/7fc124e2.jpg","comment_is_top":false,"comment_ctime":1544158318,"is_pvip":false,"replies":[{"id":"16959","content":"你说的对 👍 我改下","user_name":"作者回复","comment_id":47578,"uid":"1190123","ip_address":"","utype":1,"ctime":1544164750,"user_name_real":"gg"}],"discussion_count":1,"race_medal":0,"score":"104623373422","product_id":100017301,"comment_content":"好后缀原则下，最后一种情况为什么移到坏字符后面呢，不能移到好后缀的后面吗？即m+1,而不是j + 1","like_count":24,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431814,"discussion_content":"你说的对 👍 我改下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544164750,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179833,"user_name":"小伟","can_delete":false,"product_type":"c1","uid":1359701,"ip_address":"","ucode":"124953423491E2","user_header":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","comment_is_top":false,"comment_ctime":1582107189,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"78891518517","product_id":100017301,"comment_content":"关于suffix[4] = -1的问题，我来解释下。<br><br>模式串为：cabcab<br>b =&gt; suffix[1] = 2<br>ab =&gt; suffix[2] = 1<br>cab =&gt; suffix[3] = 0<br>bcab =&gt; suffix[4] = -1<br>abcab =&gt; suffix[5] = -1 <br>这里的suffix是这么找的，在排除自身外在模式串中从后向前查找是否还有匹配，有的话记录最后匹配的下标(suffix子串的第一个字符)，没有的话就记录-1(表示除自身无其他匹配子串了)。<br>对照上表，b自身的下标是5，向前还能找到b，最后一个b的下标是2，所以b =&gt; suffix[1] = 2<br>再看ab，ab自身下标是4，向前还是找到ab，最后一个ab的下标是1，所以ab =&gt; suffix[2]   = 1<br>最后来看看bcab，bcab自身下标是2，向前再也找不到匹配了，所以bcab =&gt; suffix[4] = -1<br>我相信你看到这里应该已经明了了。","like_count":18},{"had_liked":false,"id":47694,"user_name":"nopsky","can_delete":false,"product_type":"c1","uid":1045663,"ip_address":"","ucode":"4E4297D3AFFC93","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f4/9f/c41c0142.jpg","comment_is_top":false,"comment_ctime":1544183537,"is_pvip":false,"discussion_count":10,"race_medal":0,"score":"48788823793","product_id":100017301,"comment_content":"讲shuffix的第一个图中shuffix[4] = -1，这个-1怎么来的，不能理解，能不能再讲一下","like_count":11,"discussions":[{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":77928,"discussion_content":"em 查找的是 “另一个” 子串\n","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1575956435,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1199645,"avatar":"https://static001.geekbang.org/account/avatar/00/12/4e/1d/96b33c5f.jpg","nickname":"王雷(Wally)","note":"","ucode":"210EB688878A65","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":63706,"discussion_content":"好后缀在前面字符中是否再次存在，存在则是下表，不存在就是-1，关键是再次，不是首次，你就理解了","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1574904053,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1201054,"avatar":"https://static001.geekbang.org/account/avatar/00/12/53/9e/e932c1a8.jpg","nickname":"jing","note":"","ucode":"C0186996EBD25A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":227380,"discussion_content":"之前纠结了好久，也觉得明明有，后来看到老师原文中有：查找跟好后缀匹配的另一个子串。另一个圈起来，重点考~","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1586487036,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1920722,"avatar":"","nickname":"Geek_crazycatmax","note":"","ucode":"5419044F6EA0E3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":218774,"discussion_content":"这里我也纠结了半天，后来才明白，是以模式串后缀为标本，在模式串中找匹配，没有匹配到标本以外的串，所以标记-1。\n那么为什么标本不算在内呢，因为标本是主串和模式串的公共后缀，如果匹配的是这个标本，好后缀会开始原地太空步（不动）","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1585699952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1160026,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b3/5a/5f22ae68.jpg","nickname":"洋芋。","note":"","ucode":"B90A6A6FEDEDC5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299885,"discussion_content":"初始化的-1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597848359,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1027285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ac/d5/abb7bfe3.jpg","nickname":"veyron","note":"","ucode":"428803B6A52293","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51569,"discussion_content":"我也疑惑suffix[3],suffix[4]，应该不是-1。表示不理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573900950,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1358312,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b9/e8/0b3cf295.jpg","nickname":"HaiSky","note":"","ucode":"ECE7C263142432","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1027285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ac/d5/abb7bfe3.jpg","nickname":"veyron","note":"","ucode":"428803B6A52293","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":275117,"discussion_content":"要把自己本身排除才对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590666709,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":51569,"ip_address":""},"score":275117,"extra":""}]},{"author":{"id":1135761,"avatar":"https://static001.geekbang.org/account/avatar/00/11/54/91/845de758.jpg","nickname":"L","note":"","ucode":"68954D2A92AB01","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41959,"discussion_content":"额，我觉得没毛病啊 bcab除了自己本身没有其它与之匹配的串了啊 所以是-1啊。个人理解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572539137,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1206034,"avatar":"https://static001.geekbang.org/account/avatar/00/12/67/12/5c6eb568.jpg","nickname":"Tom.G","note":"","ucode":"7929B45C1A51F8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":40107,"discussion_content":"我觉得这个是不是老师写错了，suffix[3],suffix[4]，应该不是-1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572080379,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1219496,"avatar":"https://static001.geekbang.org/account/avatar/00/12/9b/a8/6a391c66.jpg","nickname":"Leon📷","note":"","ucode":"B9BBD1EFAAE5A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3182,"discussion_content":"我同意，明明有匹配的后缀，为什么是-1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564281341,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47849,"user_name":"P@tricK","can_delete":false,"product_type":"c1","uid":1233716,"ip_address":"","ucode":"293B2B3261A793","user_header":"https://static001.geekbang.org/account/avatar/00/12/d3/34/5dee4f70.jpg","comment_is_top":false,"comment_ctime":1544236191,"is_pvip":false,"replies":[{"id":"17182","content":"是的","user_name":"作者回复","comment_id":47849,"uid":"1190123","ip_address":"","utype":1,"ctime":1544407643,"user_name_real":"gg"}],"discussion_count":1,"race_medal":0,"score":"44493909151","product_id":100017301,"comment_content":"高票那个留言，是移动m位，不是m+1位。<br><br>这节课细节上小问题有点多，不过瑕不掩瑜，思想重要，细节自己钻研。","like_count":10,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431908,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544407643,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146307,"user_name":"niexia","can_delete":false,"product_type":"c1","uid":1238585,"ip_address":"","ucode":"FB95E807E0B1BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/e6/39/1dad4153.jpg","comment_is_top":false,"comment_ctime":1572493575,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"40227199239","product_id":100017301,"comment_content":"关于 suffix 和 prefix 的判断取值过程，这样可以帮助理解一下<br>模式串为：cabcab，所以后缀子串有：<br>后缀子串  长度<br>         b     1<br>       ab     2<br>     cab     3<br>   bcab     4<br> abcab     5<br>这些后缀子串都有可能是好后缀{u}！（suffix[k] = j，k{u}是长度，j是在模式串中跟{u}相匹配的{u*}的起始位置）<br>1. 好后缀是 b =&gt; suffix[1] = 2 prefix[1] = false，不是模式串的前缀子串<br>2. 好后缀是 ab =&gt; suffix[2] = 1 prefix[1] = false，不是模式串的前缀子串<br>3. 好后缀是 cab =&gt; suffix[3] = 0  prefix[1] = true，是模式串的前缀子串<br>4. 好后缀是 bcab =&gt; suffix[4] = -1 prefix[1] = false，不是模式串的前缀子串<br>5. 好后缀是 abcab =&gt; suffix[5] = -1 prefix[1] = false，不是模式串的前缀子串<br>从 1,2,3 中可以看出，如果长度更长的匹配了，前面肯定匹配，因为长度长的包含了长度短的，反之不成立。<br><br>这就是结果，然后在看看代码实现：<br>是从头开始匹配，依次将 b[0, i] 和 b[0,m-1]匹配。<br>在 while 循环里，依次从后面判断是否匹配，都是先取最后一个来判断，如果匹配就往前，并记录更新位置。如果最后一个都不匹配，那肯定不匹配了<br><br>当匹配了 b，就判断 ab是否匹配，接着判断 cab是否匹配... 最后就得到 suffix 和 prefix。<br>","like_count":9,"discussions":[{"author":{"id":1689380,"avatar":"https://static001.geekbang.org/account/avatar/00/19/c7/24/19d0683e.jpg","nickname":"crossing","note":"","ucode":"3B66CFFF38BA67","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":88777,"discussion_content":"不错，分析的很清楚，老师讲的太笼统了~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576730850,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1027285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ac/d5/abb7bfe3.jpg","nickname":"veyron","note":"","ucode":"428803B6A52293","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51477,"discussion_content":"4. 好后缀是 bcab => suffix[4] = -1 prefix[1] = false，不是模式串的前缀子串\n5. 好后缀是 abcab => suffix[5] = -1 prefix[1] = false，不是模式串的前缀子串\n\n请问这里为什么是suffix[4] = -1 ，suffix[5] = -1 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573881396,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1099304,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c6/28/d6f49ec2.jpg","nickname":"MarlboroKay","note":"","ucode":"3F6B5861795A61","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1027285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ac/d5/abb7bfe3.jpg","nickname":"veyron","note":"","ucode":"428803B6A52293","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":60528,"discussion_content":"这个地确实不好理解，你可以参考一下文章中的代码实现；\nb => suffix[1] = 2 \n ab => suffix[2] = 1 \n  cab => suffix[3] = 0 \n你可以这么理解， 从第一个b 开始往前推， ab存在，而a的下标是1；cab存在，而c的下标是0；bcab不存在，所以是-1；同理 abcab也不存在，也是-1；\n希望可以帮到您；","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1574736291,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":51477,"ip_address":""},"score":60528,"extra":""},{"author":{"id":1613665,"avatar":"https://static001.geekbang.org/account/avatar/00/18/9f/61/c46b42f4.jpg","nickname":"talkyoung","note":"","ucode":"8D231FA9004B64","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1027285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ac/d5/abb7bfe3.jpg","nickname":"veyron","note":"","ucode":"428803B6A52293","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":276610,"discussion_content":"首先，你列出的列子所对应的问题是：求出模式串中的后缀子串在模式串中是否有其他对应的子串，并不包括当前所查找的后缀字串本身。其次你可以看代码实现，i的循环条件是小于模式串长度-1，也就是根本不会从模式串的最后一个字符作为j的起点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590913509,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":51477,"ip_address":""},"score":276610,"extra":""}]}]},{"had_liked":false,"id":115795,"user_name":"CathyLin","can_delete":false,"product_type":"c1","uid":1240546,"ip_address":"","ucode":"F7CDFF5E1A235F","user_header":"https://static001.geekbang.org/account/avatar/00/12/ed/e2/0e1c6c5a.jpg","comment_is_top":false,"comment_ctime":1563742193,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"40218447857","product_id":100017301,"comment_content":"断断续续看了一整天，终于搞明白了！<br>记录一下我当初学习时候遇到的困惑：<br>1) 前缀子串和后缀子串都不包含它们本身，所以 suffix[4] = -1；<br>2) 查找坏字符规则的时候，会减出来小于 0 的原因是并没有限制只往左边找。<br><br>其他的部分，如果有时候看不懂文字，可以尝试着结合着代码看看，就会发现还是不那么难懂的哈哈～<br><br>最近双休日有点颓，不过还是要让自己继续加油！不要浪费了自己的时间！","like_count":9,"discussions":[{"author":{"id":1583499,"avatar":"https://static001.geekbang.org/account/avatar/00/18/29/8b/3629c0f8.jpg","nickname":"游山行人","note":"","ucode":"E559BD0A3C6484","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":234767,"discussion_content":"-1那个老师举的例子也没有解释。。。太奇怪了，我想了半天那不是后缀能匹配吗为什么还是-1.....","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586998719,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1201054,"avatar":"https://static001.geekbang.org/account/avatar/00/12/53/9e/e932c1a8.jpg","nickname":"jing","note":"","ucode":"C0186996EBD25A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":227382,"discussion_content":"同纠结的点，后悔没有早点翻翻你的笔记了~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586487111,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1761508,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/e0/e4/9279d8d0.jpg","nickname":"3_3","note":"","ucode":"E3803D20F1669F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":112994,"discussion_content":"感谢啊兄弟 在-1那卡了半天🥺","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577888462,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":49531,"user_name":"Ryoma","can_delete":false,"product_type":"c1","uid":1130590,"ip_address":"","ucode":"7F692369239692","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/5e/b8fada94.jpg","comment_is_top":false,"comment_ctime":1544706653,"is_pvip":true,"discussion_count":1,"race_medal":2,"score":"40199412317","product_id":100017301,"comment_content":"跟课程以来觉得最难的一次，也有可能之前使用手机看的原因。总体上，拿手机看了3次，今天在电脑上看了第一次，终于将好后缀那部分理解清晰。学生时代接触的性能较高字符串匹配算法就是KMP，个人感觉BM比KMP更难理解，大家如果有没理解的，还是要多多看，或者拿着笔画一画","like_count":9,"discussions":[{"author":{"id":2260390,"avatar":"https://static001.geekbang.org/account/avatar/00/22/7d/a6/15798bf2.jpg","nickname":"温雅小公子","note":"","ucode":"9EA63E36D7C85C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":405292,"discussion_content":"学校老师都说模式串匹配算法是数据结构里最难的部分。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1634549952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":48361,"user_name":"距离","can_delete":false,"product_type":"c1","uid":1253869,"ip_address":"","ucode":"6BD2EDD5CCCB69","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK8TaSUiaeecVxGob4DGovz0JTXAMd0kTKzfHeHEytP9LrjzxFK8V0kapyaibpk4DfybU1bq1Ba0HkQ/132","comment_is_top":false,"comment_ctime":1544428382,"is_pvip":false,"replies":[{"id":"17320","content":"再坚持一下","user_name":"编辑回复","comment_id":48361,"uid":"1058895","ip_address":"","utype":2,"ctime":1544452702,"user_name_real":"王锦"}],"discussion_count":4,"race_medal":0,"score":"31609199454","product_id":100017301,"comment_content":"对于还没毕业的我有点坚持不下去了","like_count":7,"discussions":[{"author":{"id":1058895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/28/4f/48e48553.jpg","nickname":"@阿锦啊","note":"","ucode":"3C5F00333D7174","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432150,"discussion_content":"再坚持一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544452702,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1178812,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fc/bc/06d42ecc.jpg","nickname":"万万","note":"","ucode":"7ECB1DD9E9A3A7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":252896,"discussion_content":"没毕业就能遇到这么好的专栏，福气啊","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1588205356,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1245468,"avatar":"https://static001.geekbang.org/account/avatar/00/13/01/1c/d638d46e.jpg","nickname":"宋世通","note":"","ucode":"C7AA3F0E6930F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531968,"discussion_content":"毕业的也快坚持不下去了。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637484422,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2672436,"avatar":"https://static001.geekbang.org/account/avatar/00/28/c7/34/f7fdf17f.jpg","nickname":"bkpp","note":"","ucode":"CE4E0762979754","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408376,"discussion_content":"快要毕业的我必须得坚持下去了\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635237809,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47928,"user_name":"cygnus","can_delete":false,"product_type":"c1","uid":1120452,"ip_address":"","ucode":"C60A86E3084754","user_header":"https://static001.geekbang.org/account/avatar/00/11/18/c4/e55fdc1c.jpg","comment_is_top":false,"comment_ctime":1544258272,"is_pvip":false,"replies":[{"id":"17176","content":"j表示坏字符的下标 好狗追其实下标j+1","user_name":"作者回复","comment_id":47928,"uid":"1190123","ip_address":"","utype":1,"ctime":1544407577,"user_name_real":"gg"}],"discussion_count":3,"race_medal":0,"score":"31609029344","product_id":100017301,"comment_content":"generateGS函数里suffix和prefix的赋值应该放到while循环内，即每次k变动时都要赋值。<br>另外请问下：好后缀的后缀子串 b[r, m-1]，这里的r的初值j+2是怎么得来的啊？<br>","like_count":7,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431949,"discussion_content":"j表示坏字符的下标 好狗追其实下标j+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544407577,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":77929,"discussion_content":"这样算，坏字符的下标是 j ，那好后缀的下标起始就是 j+1\n其 子后缀串的起始下标 就只能是 j+2 了","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1575956546,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2037677,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/17/ad/96ff4c27.jpg","nickname":"边缘","note":"","ucode":"2437864D6E4333","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305181,"discussion_content":"在好后缀规则下，模式串中不存在和好后缀匹配的另一个子串，所以，就要判断模式串的前缀子串是否存在和后缀子串匹配的情况，而且这种情况下，坏字符的下标为j，好后缀为j+1，已经比较过了，所以，直接从好后缀的后缀子串开始比较，即j+2，判断其是否和前缀子串相等","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1599810440,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":52220,"user_name":"不凉青年","can_delete":false,"product_type":"c1","uid":1238519,"ip_address":"","ucode":"305A5D92CAD98F","user_header":"https://static001.geekbang.org/account/avatar/00/12/e5/f7/70ae6368.jpg","comment_is_top":false,"comment_ctime":1545352788,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"23020189268","product_id":100017301,"comment_content":"这块断断续续看了好几天- -","like_count":5,"discussions":[{"author":{"id":1286251,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a0/6b/0a21b2b8.jpg","nickname":"迷羊","note":"","ucode":"85AF8CED3436C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":182849,"discussion_content":"你不是一个人","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582460164,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":77930,"discussion_content":"看了好几个小时。。。一定要耐心，一不耐心就看不下去了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575956575,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47688,"user_name":"seniusen","can_delete":false,"product_type":"c1","uid":1237719,"ip_address":"","ucode":"93F98AE01BA69F","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/d7/7f95119d.jpg","comment_is_top":false,"comment_ctime":1544182470,"is_pvip":false,"replies":[{"id":"17186","content":"是的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544407822,"ip_address":"","comment_id":47688,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23019018950","product_id":100017301,"comment_content":"好后缀原则中，最后一种情况，应该是移动 m 位吧，移动整个模式串的长度。<br>","like_count":5,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431856,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544407822,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47554,"user_name":"P@tricK","can_delete":false,"product_type":"c1","uid":1233716,"ip_address":"","ucode":"293B2B3261A793","user_header":"https://static001.geekbang.org/account/avatar/00/12/d3/34/5dee4f70.jpg","comment_is_top":false,"comment_ctime":1544154124,"is_pvip":false,"replies":[{"id":"17203","content":"是的 多谢","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544408284,"ip_address":"","comment_id":47554,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23018990604","product_id":100017301,"comment_content":"老师，suffix和prefix的赋值那里有BUG，应该在每一次k的变动都要有suffix赋值。","like_count":5,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431808,"discussion_content":"是的 多谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544408284,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98387,"user_name":"tuyu","can_delete":false,"product_type":"c1","uid":1448863,"ip_address":"","ucode":"B235325B541408","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/BIRpwViaN51yynIeFonD7QRlwDCVtKibrG956NTxzEqibOZZVjhMMgibOPmd3VicfYxpknZsic1oJq8KicZvXkmmiajuQg/132","comment_is_top":false,"comment_ctime":1558974063,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18738843247","product_id":100017301,"comment_content":"哈哈, 给自己定了flag, 不看懂不睡觉, 果然一颗睡觉的心让我看懂了","like_count":4},{"had_liked":false,"id":49227,"user_name":"Alan","can_delete":false,"product_type":"c1","uid":1243563,"ip_address":"","ucode":"EF3B6A90054B34","user_header":"https://static001.geekbang.org/account/avatar/00/12/f9/ab/374fe105.jpg","comment_is_top":false,"comment_ctime":1544626373,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18724495557","product_id":100017301,"comment_content":"在计算suffix 数组和 prefix 数组的代码中，第15行的i是不是多余的诶~？","like_count":4},{"had_liked":false,"id":47681,"user_name":"🐱您的好友William🐱","can_delete":false,"product_type":"c1","uid":1215456,"ip_address":"","ucode":"427786DB178965","user_header":"https://static001.geekbang.org/account/avatar/00/12/8b/e0/9a79ddac.jpg","comment_is_top":false,"comment_ctime":1544179573,"is_pvip":false,"replies":[{"id":"17188","content":"看懂就够了 能看懂我就没白画这文章中的22张图 ","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544407885,"ip_address":"","comment_id":47681,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18724048757","product_id":100017301,"comment_content":"懂了是懂了，但是你让我自己实现是不可能实现的，这辈子。。。。之后有可能实现。。。。<br>其实精髓都在最后那三张移动的图里，记住两原则取最大的，好后缀按“suffix”，“prefix”，“都没对上”，三个顺序输出。其中一旦在原则中出现了匹配到多次的情况，都按最保守最接近右侧的取。","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431854,"discussion_content":"看懂就够了 能看懂我就没白画这文章中的22张图 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544407885,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47479,"user_name":"Liam","can_delete":false,"product_type":"c1","uid":1094597,"ip_address":"","ucode":"1D15D3B64F2606","user_header":"https://static001.geekbang.org/account/avatar/00/10/b3/c5/7fc124e2.jpg","comment_is_top":false,"comment_ctime":1544146922,"is_pvip":false,"replies":[{"id":"16943","content":"移动到坏字符后面 移动m+1位是怎么理解的呢","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544152332,"ip_address":"","comment_id":47479,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18724016106","product_id":100017301,"comment_content":"好后缀原则中，最后一种情况，为什么是移动j + 1 位，而不是m+1位","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431779,"discussion_content":"移动到坏字符后面 移动m+1位是怎么理解的呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544152332,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47474,"user_name":"dapaul","can_delete":false,"product_type":"c1","uid":1239335,"ip_address":"","ucode":"A53E0018F138A1","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/27/2aa8fb31.jpg","comment_is_top":false,"comment_ctime":1544146573,"is_pvip":true,"replies":[{"id":"16944","content":"代码实现就难了 也没那么高效了","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544152381,"ip_address":"","comment_id":47474,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18724015757","product_id":100017301,"comment_content":"坏字符规则那，算xi的位置时，应该只从坏字符对齐时模式串往前的字符中匹配，这样就不会出现si-xi为负了","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431778,"discussion_content":"代码实现就难了 也没那么高效了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544152381,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":69697,"user_name":"华烬","can_delete":false,"product_type":"c1","uid":1008444,"ip_address":"","ucode":"D36AE0FBEF665A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/3c/b4cfbce9.jpg","comment_is_top":false,"comment_ctime":1550811901,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"14435713789","product_id":100017301,"comment_content":"如果好后缀在模式串中不存在可匹配的子串，那在我们一步一步往后滑动模式串的过程中，只要主串中的{u}与模式串有重合，那肯定就无法完全匹配。<br>============<br>我理解这句话说得有问题吧，不存在可匹配的子串怎么还有和模式串有重合了啊，主串中的{u}与模式串有重合就是第一种情况了吧，希望老师给解答一下","like_count":3,"discussions":[{"author":{"id":1360928,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c4/20/796ee6f7.jpg","nickname":"Overwind","note":"","ucode":"53A69C4FFCE589","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300608,"discussion_content":"指的应该是位置重合，而不是内容重合","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598190209,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1101894,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d0/46/1a9229b3.jpg","nickname":"NEVER SETTLE","note":"","ucode":"9C86BDAFDBF768","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":105748,"discussion_content":"对啊，我觉得也是有问题，前前后后想了半个小时，也不知道要表达啥","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577468718,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":63529,"user_name":"叶明","can_delete":false,"product_type":"c1","uid":1274237,"ip_address":"","ucode":"E9BF73B2C443F3","user_header":"https://static001.geekbang.org/account/avatar/00/13/71/7d/43c27c12.jpg","comment_is_top":false,"comment_ctime":1548393272,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14433295160","product_id":100017301,"comment_content":"@meng 这篇文章啃了很长时间了，有个问题请教：是否可以不要prefix数组，直接通过suffix[k]==0来判断前缀子串的匹配与否？<br>这个应该不行，如果模式串中存在多个与好后缀匹配的子串，比如模式串是ababab，好后缀是ab，那么此时suffix[2] = 2(此时suffix[2]不等于0，因为为了移动步数最小，要匹配后一个ab)，prefix[2]=true","like_count":3},{"had_liked":false,"id":48743,"user_name":"Jamin","can_delete":false,"product_type":"c1","uid":1236792,"ip_address":"","ucode":"0449B773FE4D21","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJhyK1QiaqyNox3wr3GmBibziau9pPDxN5HjYBpYCd7ytDmLNtJ1cKKaq2WYFF3jpRSg6638M8NFDf2w/132","comment_is_top":false,"comment_ctime":1544528458,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14429430346","product_id":100017301,"comment_content":"generateGS code第15行 没有写完吗？<br>","like_count":3},{"had_liked":false,"id":47914,"user_name":"DADDYHINS","can_delete":false,"product_type":"c1","uid":1189131,"ip_address":"","ucode":"C5676EF53CA248","user_header":"https://static001.geekbang.org/account/avatar/00/12/25/0b/f9fc5255.jpg","comment_is_top":false,"comment_ctime":1544256076,"is_pvip":true,"replies":[{"id":"17180","content":"看懂就行了","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544407609,"ip_address":"","comment_id":47914,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14429157964","product_id":100017301,"comment_content":"这 倒是能看懂，但是代码实现自己写还是一脑袋浆糊","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431942,"discussion_content":"看懂就行了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544407609,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":176053,"user_name":"发霉的宅大人","can_delete":false,"product_type":"c1","uid":1738243,"ip_address":"","ucode":"6757E30FE5E48D","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/03/95004954.jpg","comment_is_top":false,"comment_ctime":1580920835,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10170855427","product_id":100017301,"comment_content":"总结一下就是：<br>1、坏字规则找匹配的坏字<br>2、找与好后缀全匹配模式串中的子串<br>3、找与好后缀的子串匹配的模式串前缀子串。<br>最后，取三者下标最大值（滑动最小的距离）","like_count":2},{"had_liked":false,"id":119648,"user_name":"Edward Lee","can_delete":false,"product_type":"c1","uid":1228518,"ip_address":"","ucode":"156223F1D7E94A","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/e6/7808520d.jpg","comment_is_top":false,"comment_ctime":1564645397,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10154579989","product_id":100017301,"comment_content":"课后思考：Java 中的 String.indexOf 使用的是 BF 算法<br>个人心得：<br>真是非常烧脑的一节课，晚上因此睡不着，因为还没搞懂，还好最后搞懂了，不然就失眠了哈。以前是看图能理解，这次需要细扣文字，还被 i j k m 这类变量绕进去了 T.T<br>看到评论区中提及的 suffix[i]=0 用来表示前缀串（prefix=true），是不可行的，可看下面一组数据<br><br>bbbbab<br>------------------<br>b     suffix[1]=3  prefix[1]=true  (这里的 suffix[1] 就是非 0)<br>ab    suffix[2]=-1 prefix[2]=false<br>bab   suffix[3]=-1 prefix[3]=false<br>bbab  suffix[4]=-1 prefix[4]=false<br>bbbab suffix[5]=-1 prefix[5]=false","like_count":2},{"had_liked":false,"id":83406,"user_name":"独舟泛海","can_delete":false,"product_type":"c1","uid":1238514,"ip_address":"","ucode":"E35C8CEFAF062D","user_header":"https://static001.geekbang.org/account/avatar/00/12/e5/f2/21ea4d37.jpg","comment_is_top":false,"comment_ctime":1554562913,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"10144497505","product_id":100017301,"comment_content":"大神，好后缀中，r的取值为啥是j+2啊，看了好几遍也没搞懂，按照我的理解，r应该是j+1啊，求解惑","like_count":2,"discussions":[{"author":{"id":1050508,"avatar":"https://static001.geekbang.org/account/avatar/00/10/07/8c/0d886dcc.jpg","nickname":"蚂蚁内推+v","note":"","ucode":"24B10AEE54B3FD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2365,"discussion_content":"r = j+1 时，实际上就是好后缀，而好后缀在模式串中没有匹配（之前判断过了），所以r可以从 j+2开始","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1563519610,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1358312,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b9/e8/0b3cf295.jpg","nickname":"HaiSky","note":"","ucode":"ECE7C263142432","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":275119,"discussion_content":"j 是坏字符， j+1是好后缀开始字符， 好后缀的子后缀是不包括第一位的，所以从j+2开始","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1590666924,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2813766,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erX65FTLyn3JMbqLKdFkkv9okdx7qmVIibl1zKB7pnCIbtElSgibULma5cTsSMyS5KGMBy5MRdXtN8g/132","nickname":"小竹子","note":"","ucode":"D20F56114426EA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535489,"discussion_content":"举个例子模式串为aacaa,主串为bbcaabc,从后往左遍历比对，坏字符为主串中的b,即j=1,那么好后缀为caa,好后缀的子后缀不包括本身，c为j+1,a为j+2,从j+2开始","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638451424,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":82416,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1554205516,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10144140108","product_id":100017301,"comment_content":"在cabcab这个示例图中 字符b 长度为1 suffix[1] = 2?也是就会中间的那个b吗？ 为什么不是最后一个字符b?为什么suffix[1] = 2而不是suffix[1] = 5? 一直理解的时候找得后缀子串啊","like_count":2,"discussions":[{"author":{"id":2813766,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erX65FTLyn3JMbqLKdFkkv9okdx7qmVIibl1zKB7pnCIbtElSgibULma5cTsSMyS5KGMBy5MRdXtN8g/132","nickname":"小竹子","note":"","ucode":"D20F56114426EA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535490,"discussion_content":"后缀子串b在模式串中另一个匹配开始位置为2","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638451508,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":69823,"user_name":"miracle","can_delete":false,"product_type":"c1","uid":1276137,"ip_address":"","ucode":"FD7074F1062AE9","user_header":"https://static001.geekbang.org/account/avatar/00/13/78/e9/9d807269.jpg","comment_is_top":false,"comment_ctime":1550854669,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10140789261","product_id":100017301,"comment_content":"计算 suffix 数组和 prefix 数组的代码第15行是个bug吧？无缘无故多了一行只有一个i","like_count":2},{"had_liked":false,"id":66559,"user_name":"ldd","can_delete":false,"product_type":"c1","uid":1208157,"ip_address":"","ucode":"E8344FAFFE5CF3","user_header":"https://static001.geekbang.org/account/avatar/00/12/6f/5d/f0a19f09.jpg","comment_is_top":false,"comment_ctime":1549959020,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10139893612","product_id":100017301,"comment_content":"BM算法中坏字符规则，HashTable只存储模式串中的字符，可以不用存全部字符，取的时候，先判断是否存在，不存在就当 -1 处理，这样子坏字符规则的空间复杂度就是O(m)了，老师，不知道这样子可不可以？","like_count":2},{"had_liked":false,"id":51773,"user_name":"western","can_delete":false,"product_type":"c1","uid":1215550,"ip_address":"","ucode":"21BCB130722780","user_header":"https://static001.geekbang.org/account/avatar/00/12/8c/3e/e767c15f.jpg","comment_is_top":false,"comment_ctime":1545236315,"is_pvip":false,"replies":[{"id":"18784","content":"我估计搞了一个礼拜吧。不会手写的。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545271250,"ip_address":"","comment_id":51773,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10135170907","product_id":100017301,"comment_content":"我的亲娘咧，这个算法老师写了几遍才学会？实际工作中也需要自己手写吗","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433613,"discussion_content":"我估计搞了一个礼拜吧。不会手写的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545271250,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1314724,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0f/a4/0b49469f.jpg","nickname":"木子00","note":"","ucode":"8F78CA722EB29B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":272474,"discussion_content":"这个老师也搞了一个礼拜,才些出来的吗?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590315033,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":51696,"user_name":"The Sword of Damocles","can_delete":false,"product_type":"c1","uid":1188527,"ip_address":"","ucode":"42B462FC572F24","user_header":"https://static001.geekbang.org/account/avatar/00/12/22/af/1a31bc11.jpg","comment_is_top":false,"comment_ctime":1545224981,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10135159573","product_id":100017301,"comment_content":"全文搜索“如果公共后缀子串也是模式串的前缀子串”，位于代码块的16行，它的上面一行15行，好像多敲了一个字母i","like_count":2},{"had_liked":false,"id":50512,"user_name":"李皮皮皮皮皮","can_delete":false,"product_type":"c1","uid":1200281,"ip_address":"","ucode":"3BF1DEE4A12359","user_header":"https://static001.geekbang.org/account/avatar/00/12/50/99/44378317.jpg","comment_is_top":false,"comment_ctime":1545005111,"is_pvip":false,"replies":[{"id":"18143","content":"嗯嗯 多谢指正 笔误","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545009063,"ip_address":"","comment_id":50512,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10134939703","product_id":100017301,"comment_content":"关于这个散列表，我们只实现一种最简单的情况，假设字符串的字符集不是很大，每个字符长度是 8 字节，我们用大小为 256 的数组，来记录每个字符在模式串中出现的位置。<br><br>—————————<br><br>这里每个字符应该是1个字节吧，1byte=8bit","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433004,"discussion_content":"嗯嗯 多谢指正 笔误","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545009063,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47935,"user_name":"weizhe","can_delete":false,"product_type":"c1","uid":1045336,"ip_address":"","ucode":"CDFA08B3170888","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f3/58/026fc232.jpg","comment_is_top":false,"comment_ctime":1544260415,"is_pvip":false,"replies":[{"id":"17175","content":"已改正 不好意思","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544407528,"ip_address":"","comment_id":47935,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10134195007","product_id":100017301,"comment_content":"老师，为什么suffix数组的代码实现中只记录了模式串中最长的后缀且在子串出现的情况，而没有记录其他子串{u*}的起始下标值?<br>（感觉generateGS方法中的每一条while判断成功后都应该在suffix数组中记录下来）<br>","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431952,"discussion_content":"已改正 不好意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544407528,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47919,"user_name":"ZX","can_delete":false,"product_type":"c1","uid":1235583,"ip_address":"","ucode":"0D2622FE6D1774","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/7f/8069035d.jpg","comment_is_top":false,"comment_ctime":1544257435,"is_pvip":false,"replies":[{"id":"17177","content":"👍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544407596,"ip_address":"","comment_id":47919,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10134192027","product_id":100017301,"comment_content":"用js写了一遍<br><br>&#47;**<br> * BM算法，取好坏部分，进行模式串的移动<br> * 1.主串从左往右匹配模式串<br> * 2.模式串从右往左每个字符匹配<br> * 3.如果出现不匹配的字符，取坏字符规则和好字符规则中较大的值进行移动<br> * 4.坏字符规则：看不匹配的值在模式串前面是否还有出现过，进行相应的移动<br> * 5.好字符规则：先看好字符串在前面是否有出现，没有就看好字符的后缀子串是否是模式串的前缀子串，进行相应的移动<br> * 6.技巧，模式串是固定的，可以预先构建一个查找某个字符在模式串位置的对象(方便后面查找坏字符)，构建一个后缀串是否在模式串出现和后缀串是否是前缀串的数组(方便进行好字符规则进行匹配)<br> *&#47;<br><br>&#47;**<br> * @param {*} s 模式串<br> * @param {*} m 主串<br> *&#47;<br>function BM(s, m) {<br>  const bc = {}<br>  generateBC(bc, s)<br>  const suffix = [] &#47;&#47; 模式串后缀串在模式串前面是否有出现<br>  const prefix = [] &#47;&#47; 模式串后缀串是否是模式串前缀串<br>  generateSP(s, suffix, prefix)<br><br>  const mLength = m.length<br>  const sLength = s.length<br><br>  let i = sLength - 1<br>  while (i &lt; mLength) {<br>    let j = sLength - 1<br>    while (j &gt;=0 &amp;&amp; m[i] === s[j]) {<br>      i--<br>      j--<br>    }<br>    if (j === -1) return i + 1<br>    const badMove = j - bc[m[i]]<br>    const goodMove = moveByGood(s, j, suffix, prefix)<br>    i += Math.max(badMove, goodMove)<br>  }<br>  return false<br>}<br><br>&#47;**<br> * 计算好后缀规则需要移动的步数<br> * @param {} s <br> * @param {*} j <br> * @param {*} suffix <br> * @param {*} prefix <br> *&#47;<br>function moveByGood(s, j, suffix, prefix) {<br>  const m = s.length<br>  const k = m - j - 1<br>  if (typeof suffix[k] !== &#39;undefined&#39;) return j - suffix[k]<br>  for (let i = k; i &gt; 0 ; i--) {<br>    if (prefix[i] === true) return m - i<br>  }<br>  return m<br>}<br><br>&#47;**<br> * 构建坏字符<br> * @param {*} bc <br> * @param {*} s <br> *&#47;<br>function generateBC(bc, s) {<br>  const length = s.length<br>  for(let i = 0; i&lt; length - 1; i++) {<br>    bc[s[i]] = i<br>  }<br>}<br><br>&#47;**<br> * 构建模式串后缀和前缀的数组<br> * @param {*} s <br> * @param {*} suffix <br> * @param {*} prefix <br> *&#47;<br>function generateSP(s, suffix, prefix) {<br>  const length = s.length<br>  for(let i = 0; i &lt; length - 1; i++) {<br>    let j = i<br>    let k = 0<br>    while(j &gt;= 0 &amp;&amp; s[j] === s[length - k - 1]) {<br>      j--<br>      k++<br>    }<br>    if (k !== 0) suffix[k] = j<br>    if (j === -1) prefix[k] = true<br>  }<br>}","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431945,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544407596,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47895,"user_name":"菜菜","can_delete":false,"product_type":"c1","uid":1243536,"ip_address":"","ucode":"888AC33663B774","user_header":"https://static001.geekbang.org/account/avatar/00/12/f9/90/f90903e5.jpg","comment_is_top":false,"comment_ctime":1544250191,"is_pvip":false,"replies":[{"id":"17181","content":"已经改正","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544407629,"ip_address":"","comment_id":47895,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10134184783","product_id":100017301,"comment_content":"老师，您好，文中得generateGS函数，似乎不能求得模式串中存在多个好后缀得时候，靠右好后缀的起始下标。","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431933,"discussion_content":"已经改正","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544407629,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47659,"user_name":"blacknhole","can_delete":false,"product_type":"c1","uid":1098286,"ip_address":"","ucode":"271682FFE28F25","user_header":"https://static001.geekbang.org/account/avatar/00/10/c2/2e/c4a527d9.jpg","comment_is_top":false,"comment_ctime":1544173658,"is_pvip":false,"replies":[{"id":"16984","content":"1 笔误 是bc数组<br>2 我改下 多谢指正","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544178985,"ip_address":"","comment_id":47659,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10134108250","product_id":100017301,"comment_content":"有几点疑问：<br>1，“BM 算法的性能分析及优化”小节中说“suffix 数组的大小跟字符集大小有关”，这是书写错误吗？suffix数组长度应该与字符集大小无关，只跟模式串长度有关。与字符集大小有关的是bc数组。<br>2，BM 算法的完整版代码实现中的语句for (int r = j+2; r &lt; m-1; ++r) { if (prefix[m-r+1] == true) { return r; } }有误吧？应为r &lt; m和prefix[m-r]，即for (int r = j+2; r &lt; m; ++r) { if (prefix[m-r] == true) { return r; } }。","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431846,"discussion_content":"1 笔误 是bc数组\n2 我改下 多谢指正","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544178985,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47523,"user_name":"任雪龙","can_delete":false,"product_type":"c1","uid":1126708,"ip_address":"","ucode":"E0D5F4DDB729D6","user_header":"https://static001.geekbang.org/account/avatar/00/11/31/34/ba1c8fc7.jpg","comment_is_top":false,"comment_ctime":1544150414,"is_pvip":false,"replies":[{"id":"16939","content":"就是只保存最后一个  再看看文章","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544152088,"ip_address":"","comment_id":47523,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10134085006","product_id":100017301,"comment_content":"坏字节匹配时，构造的 bc 数组这里是不是有问题，模式串中出现两个 a 的情况下，数组下标为 97 的地方值只会保存模式串中最后一个 a 字符在串中的位置，这样出现坏字符时怎么能确定上一个 a 的位置呢？","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431793,"discussion_content":"就是只保存最后一个  再看看文章","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544152088,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1358312,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b9/e8/0b3cf295.jpg","nickname":"HaiSky","note":"","ucode":"ECE7C263142432","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":275120,"discussion_content":"保留靠后的这一个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590667053,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47410,"user_name":"深蓝...","can_delete":false,"product_type":"c1","uid":1067358,"ip_address":"","ucode":"4FCF94BC87CB49","user_header":"https://static001.geekbang.org/account/avatar/00/10/49/5e/855768b0.jpg","comment_is_top":false,"comment_ctime":1544142812,"is_pvip":false,"replies":[{"id":"16942","content":"正常的。但凡是上难度的 都会有掉队的 就看谁能跟上了","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544152294,"ip_address":"","comment_id":47410,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10134077404","product_id":100017301,"comment_content":"有点掉队的节奏","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431761,"discussion_content":"正常的。但凡是上难度的 都会有掉队的 就看谁能跟上了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544152294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":353973,"user_name":"焦太郎","can_delete":false,"product_type":"c1","uid":1325464,"ip_address":"河南","ucode":"72D48AD49C07C3","user_header":"https://static001.geekbang.org/account/avatar/00/14/39/98/4c96c6f4.jpg","comment_is_top":false,"comment_ctime":1659964871,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"5954932167","product_id":100017301,"comment_content":"假设主串是aabaaa 子串是aabaa，模式串是abaaa，这种错位情况呢？用好字符匹配不是错过了么？","like_count":1,"discussions":[{"author":{"id":1325464,"avatar":"https://static001.geekbang.org/account/avatar/00/14/39/98/4c96c6f4.jpg","nickname":"焦太郎","note":"","ucode":"72D48AD49C07C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583551,"discussion_content":"完结撒花","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660199042,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"河南"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1325464,"avatar":"https://static001.geekbang.org/account/avatar/00/14/39/98/4c96c6f4.jpg","nickname":"焦太郎","note":"","ucode":"72D48AD49C07C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583550,"discussion_content":"我在其他平台找到答案了 ，自己来回答一下，在寻找是否有模式串其他子串匹配时，我对子串的理解有点歧义 ，首先在子串aaa中， aa-a 的aa就算一个子串 而 a-aa中的aa也算一个子串 等于子串aaa中应看作有两个aa子串,在进行遍历匹配的时候，会匹配上 aa-a ,然后位移一位 ，刚好匹配","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660199028,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"河南"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1325464,"avatar":"https://static001.geekbang.org/account/avatar/00/14/39/98/4c96c6f4.jpg","nickname":"焦太郎","note":"","ucode":"72D48AD49C07C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583470,"discussion_content":"比如这个主串aabaaaa  匹配串  abaaa     ,第一次匹配 aabaa 和 abaaa 时，好字符是aa  ，前缀子串和后缀子串匹配了前缀a, a-baaa 下一次 从 aaba-aaa 的 aaa匹配 ，不是直接错过了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660129466,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"河南"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1325464,"avatar":"https://static001.geekbang.org/account/avatar/00/14/39/98/4c96c6f4.jpg","nickname":"焦太郎","note":"","ucode":"72D48AD49C07C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583252,"discussion_content":"救救孩子吧，困扰好几天了呜呜呜","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659973736,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"河南"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":313551,"user_name":"书有径","can_delete":false,"product_type":"c1","uid":2666247,"ip_address":"","ucode":"887B0414A8E87A","user_header":"https://static001.geekbang.org/account/avatar/00/28/af/07/4553214d.jpg","comment_is_top":false,"comment_ctime":1632491120,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5927458416","product_id":100017301,"comment_content":"如果你不耐心的看完，那么看完的时候你会明白不耐心浪费了很多时间","like_count":1},{"had_liked":false,"id":263805,"user_name":"拉布拉多","can_delete":false,"product_type":"c1","uid":1204353,"ip_address":"","ucode":"637A88D9F29F57","user_header":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","comment_is_top":false,"comment_ctime":1606270923,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5901238219","product_id":100017301,"comment_content":"makr! 只能先放弃这个和kmp，和ac自动机。进入高级篇。回头再来看。这三节投入太大。","like_count":1},{"had_liked":false,"id":252416,"user_name":"Fire","can_delete":false,"product_type":"c1","uid":2057513,"ip_address":"","ucode":"8D3E102E690443","user_header":"https://static001.geekbang.org/account/avatar/00/1f/65/29/8c0fe011.jpg","comment_is_top":false,"comment_ctime":1602295531,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"5897262827","product_id":100017301,"comment_content":"    文中提到，单纯使用“坏字符串规则”，si-xi 计算出来的移动位数，有可能是负数，比如主串是 aaaaaaaaaaaaaaaa，模式串是 baaa。<br>    我觉得，每次在模式串中取 xi 时，应该取比 si 要小的。这样就不会出现负数的情况了。比如前面提到的两个串，坏字符是‘a’，si=0，a在模式串中比0小的坐标不存在，所以xi依旧等于-1.此时 si - xi = 1。所以单纯使用这样的坏字符规则，也能实现字符串匹配。","like_count":1},{"had_liked":false,"id":217804,"user_name":"RedDevil","can_delete":false,"product_type":"c1","uid":1131128,"ip_address":"","ucode":"F8F5DC209BB3B9","user_header":"https://static001.geekbang.org/account/avatar/00/11/42/78/7ba89c75.jpg","comment_is_top":false,"comment_ctime":1589616553,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5884583849","product_id":100017301,"comment_content":"看了老师写的代码，我觉得我不会写代码","like_count":1},{"had_liked":false,"id":215440,"user_name":"Scott","can_delete":false,"product_type":"c1","uid":1002165,"ip_address":"","ucode":"9420AB752BEFA2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/b5/89cb9ff0.jpg","comment_is_top":false,"comment_ctime":1588992438,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5883959734","product_id":100017301,"comment_content":"这里suffix数组和prefix数组的含义做个说明，方便理解<br>     *  suffix 数组的含义 suffix数组的下标为 好后缀的长度，suffix数组的值 为与好后缀相同的子串在模式串中的位置<br>     *  举例说明<br>     *  模式串为 cabcab<br>     *  则好后缀 可能为以下 几种<br>     *  b<br>     *  ab<br>     *  cab<br>     *  bcab<br>     *  abcab<br>     *  在模式串中与这些好后缀相等的子串的位置（取最靠右边的）是<br>     *  2<br>     *  1<br>     *  0<br>     *  -1<br>     *  -1<br>     *  则suffix 数组的值为 [-1,2,1,0,-1,-1]<br>     *  prefix 数组的含义 数组的下标表示好后缀的长度， 数组的值 表示 好后缀在模式串中对应相等的子串是不是 前缀子串<br>     *  比如 cabcab 的前缀子串<br>     *  c<br>     *  ca<br>     *  cab<br>     *  cabc<br>     *  cabca<br>     *  那么 当 好后缀为 cab 时，有一个相等的子串 cab,它同时也是前缀子串 prefix[3] = true<br>     *<br>   ","like_count":1},{"had_liked":false,"id":210986,"user_name":"社会你强哥","can_delete":false,"product_type":"c1","uid":1243570,"ip_address":"","ucode":"325B9005588D9B","user_header":"https://static001.geekbang.org/account/avatar/00/12/f9/b2/2ed800b4.jpg","comment_is_top":false,"comment_ctime":1587875164,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5882842460","product_id":100017301,"comment_content":"那个求最长前后缀只和好后缀有关系，不用每次遍历，用个数组一次搞定，跟KMP算法好前缀类似。","like_count":1,"discussions":[{"author":{"id":1252235,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1b/8b/ca59be30.jpg","nickname":"向阳生","note":"","ucode":"C2E9E463CA9B38","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325083,"discussion_content":"应该不是直接找好后缀和最长前缀，在此之前会找整个后缀是否在模式串中有除后缀之外的匹配，遍历的目的也是这个，不知道有没有理解错误，欢迎指正或者讨论","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605232723,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97916,"user_name":"staywild","can_delete":false,"product_type":"c1","uid":1031390,"ip_address":"","ucode":"01BF93EF2F2341","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bc/de/84abadd8.jpg","comment_is_top":false,"comment_ctime":1558840212,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5853807508","product_id":100017301,"comment_content":"generateGS是不是可以增加一次for循环，让prefix数组直接存储最长可匹配前缀子串的长度，这样就可以减少moveByGS里面的for循环遍历。","like_count":1},{"had_liked":false,"id":90989,"user_name":"Zhangxuesong","can_delete":false,"product_type":"c1","uid":1396503,"ip_address":"","ucode":"F5C4C3AC9429AD","user_header":"https://static001.geekbang.org/account/avatar/00/15/4f/17/2185685f.jpg","comment_is_top":false,"comment_ctime":1556770135,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5851737431","product_id":100017301,"comment_content":"利用坏字符规则，BM 算法在最好情况下的时间复杂度非常“低” -&gt; &quot;高&quot;，是O(n&#47;m). <br>","like_count":1},{"had_liked":false,"id":86132,"user_name":"董浩","can_delete":false,"product_type":"c1","uid":1439579,"ip_address":"","ucode":"5D23AA3186F625","user_header":"https://static001.geekbang.org/account/avatar/00/15/f7/5b/ea08ef8e.jpg","comment_is_top":false,"comment_ctime":1555312764,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5850280060","product_id":100017301,"comment_content":"BM算法选取两种规则算法的结果最大值作为移位值进行移位。<br>坏字符规则和好后缀规则目的相同，都是为了找主串与模式串中的匹配子串。<br>坏字符规则：方式是从后往前找第一个不匹配的字符，记录模式串中的下标和字符值（主串中的字符值，即坏字符），然后在模式串中找是否存在于该字符值一致的字符，若存在则移位对齐，否则将模式串移位到坏字符后面（将模式串首字符与主串坏字符后一位字符对齐），如果最后得出的移位值为负数则采用好后缀规则：<br>好后缀规则：同样从后往前找到第一个不匹配的字符，如果首个就不匹配那么就不存在好后缀，采用坏字符规则移位，如果存在好后缀，那么首先在模式串中查找是否存在与好后缀一致的子串（除好后缀自身之外），如果存在则移位对齐，如果不存在，则进一步查找好后缀中的各个子串中是否有与模式串前缀子串一致的子串，取最长子串，然后将模式串移动到子串对齐，如果不存在匹配的子串，那么直接将模式串移动到主串中与好后缀一致的子串后面（即将模式串首字符与主串好后缀末字符的下一字符对齐）","like_count":1},{"had_liked":false,"id":78099,"user_name":"wmmmeng","can_delete":false,"product_type":"c1","uid":1117517,"ip_address":"","ucode":"C5E29DBB39BB0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0d/4d/f692ba8b.jpg","comment_is_top":false,"comment_ctime":1553070601,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5848037897","product_id":100017301,"comment_content":"我看维基百科中对坏字符的描述是，将模式串移动到模式串失配点左边部分中，最靠近失配点的坏字符出现的位置，说起来有点拗口：<br>https:&#47;&#47;zh.wikipedia.org&#47;wiki&#47;Boyer-Moore%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95#%E5%9D%8F%E5%AD%97%E7%AC%A6%E8%A7%84%E5%88%99<br>请问下这是对bm算法的优化吗？","like_count":1},{"had_liked":false,"id":77714,"user_name":"Jason Peng","can_delete":false,"product_type":"c1","uid":1431817,"ip_address":"","ucode":"F0F47AB9FEC3E9","user_header":"https://static001.geekbang.org/account/avatar/00/15/d9/09/fcffaf91.jpg","comment_is_top":false,"comment_ctime":1552985912,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"5847953208","product_id":100017301,"comment_content":"好后缀的后缀子串b[r,m-1]中的r从j+2开始....<br>r从j+1开始完全可以呀。","like_count":1,"discussions":[{"author":{"id":1047733,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fc/b5/ac717737.jpg","nickname":"肖臧","note":"","ucode":"4FAC9FF54DD6A0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1830,"discussion_content":"再仔细阅读吧。这是规则2描述，在规则1不满足条件的情况下，求公共字串，后缀字串的起始当然应该是j+2","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1562936145,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2708005,"avatar":"https://static001.geekbang.org/account/avatar/00/29/52/25/185763e4.jpg","nickname":"薇尔莉特","note":"","ucode":"1465A6F3005CA9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1047733,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fc/b5/ac717737.jpg","nickname":"肖臧","note":"","ucode":"4FAC9FF54DD6A0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388406,"discussion_content":"感谢，看到你总算明白了，自己原来忘记了这个是规则2下的条件执行了，所以不可能还存在最大好后缀的公共子串，所以从j+1开始找没有意义，应该从次大的好后缀子串中找到和模式串匹配的前缀子串。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628753867,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":1830,"ip_address":""},"score":388406,"extra":""}]},{"author":{"id":2609930,"avatar":"https://static001.geekbang.org/account/avatar/00/27/d3/0a/92640aae.jpg","nickname":"我爱夜来香","note":"","ucode":"10761E677EF05F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578288,"discussion_content":"因为规则1为m-1-j,规则2若是j+1开始,那(m-r = m -1 -j),相当于也是规则1,规则1不满足才走规则2的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656642889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1358312,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b9/e8/0b3cf295.jpg","nickname":"HaiSky","note":"","ucode":"ECE7C263142432","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":275121,"discussion_content":"最长后缀字串的起点就是第二个位置 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590667126,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":72109,"user_name":"stonelee","can_delete":false,"product_type":"c1","uid":1265346,"ip_address":"","ucode":"E263025E8A5D26","user_header":"https://static001.geekbang.org/account/avatar/00/13/4e/c2/9b7c7434.jpg","comment_is_top":false,"comment_ctime":1551521345,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5846488641","product_id":100017301,"comment_content":"<br>坏字符规则：寻找坏字符在模式串中最后一次出现的位置，然后移动到坏字符对齐<br>好后缀规则：<br>\t如果在模式串中能找到，则移动对齐<br>\t如果找不到，看模式串前缀跟好后缀的部分后缀重合，则移动对齐<br>\t\t如果没有任何重合，移动整个模式串","like_count":1},{"had_liked":false,"id":65564,"user_name":"幻大米","can_delete":false,"product_type":"c1","uid":1048143,"ip_address":"","ucode":"8196BEF69AE084","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fe/4f/3a7b8033.jpg","comment_is_top":false,"comment_ctime":1549456128,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5844423424","product_id":100017301,"comment_content":"“模式串向后滑动的时候，只要 c 与模式串有重合，肯定无法匹配。”<br><br>以上有笔误，应该是“只要 c 与模式串没有重合，肯定无法匹配”。","like_count":1},{"had_liked":false,"id":63312,"user_name":"z","can_delete":false,"product_type":"c1","uid":1149575,"ip_address":"","ucode":"C4FBF3F6B51FE3","user_header":"https://static001.geekbang.org/account/avatar/00/11/8a/87/7ad32df9.jpg","comment_is_top":false,"comment_ctime":1548320543,"is_pvip":false,"replies":[{"id":"22473","content":"哈哈，主要是如果不简写的话，一行代码贼长，在手机上看会很痛苦的。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1548404596,"ip_address":"","comment_id":63312,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5843287839","product_id":100017301,"comment_content":"老师，变量名请尽量不要简写或简写加点注释哇，翻下翻下，读起来费劲啊","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437541,"discussion_content":"哈哈，主要是如果不简写的话，一行代码贼长，在手机上看会很痛苦的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548404596,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62047,"user_name":"MrVito","can_delete":false,"product_type":"c1","uid":1252169,"ip_address":"","ucode":"716FF6F8871706","user_header":"https://static001.geekbang.org/account/avatar/00/13/1b/49/ddefc656.jpg","comment_is_top":false,"comment_ctime":1547894453,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5842861749","product_id":100017301,"comment_content":"硬啃了两天，发现自己对每一节课的内容都会斟酌，都特别有意思，而且发现算法的思想真的博大精深，希望自己每一天都有进步。特别是这节课，虽然说很难，但是老师已经说了要打硬仗的准备，匹配，滑动，每一个步骤的讲得易懂，好后缀也是模式串本身的后缀，这句话特别让我醍醐灌顶，从而明白suffix数组怎么来的，根据长度又能在程序中体现他这一步的重要性。prefix体现的前缀匹配，能想到这样真的很厉害。BM算法确实很巧妙！","like_count":1},{"had_liked":false,"id":61803,"user_name":"Kermit Sun","can_delete":false,"product_type":"c1","uid":1245430,"ip_address":"","ucode":"9B0560FB228629","user_header":"https://static001.geekbang.org/account/avatar/00/13/00/f6/f6cf138c.jpg","comment_is_top":false,"comment_ctime":1547803150,"is_pvip":false,"replies":[{"id":"22483","content":"还好吧。我基本上都解释了每个变量的含义了：）","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1548405814,"ip_address":"","comment_id":61803,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5842770446","product_id":100017301,"comment_content":"老师，提个意见， 每次看到参数 a, b, c 这种入参都很头疼， 入参时候没有注明每个参数是什么， 还要看源码分析，能不能够用对应英文替代一下","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437000,"discussion_content":"还好吧。我基本上都解释了每个变量的含义了：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548405814,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":58279,"user_name":"luo","can_delete":false,"product_type":"c1","uid":1148742,"ip_address":"","ucode":"00FBDC12101419","user_header":"https://static001.geekbang.org/account/avatar/00/11/87/46/2850b4a9.jpg","comment_is_top":false,"comment_ctime":1547025756,"is_pvip":false,"replies":[{"id":"21063","content":"😂 应该是公共后缀子串","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1547085989,"ip_address":"","comment_id":58279,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5841993052","product_id":100017301,"comment_content":"大部分理解了，但是代码实现上的公共后缀子串那一块表示不大明白，不过花了些功夫总算理解了。<br>什么是公共后缀子串？其实就是模式串中后缀子串与之前子串的 公共子串。这么理解应该是对的吧。","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435986,"discussion_content":"😂 应该是公共后缀子串","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547085989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":58274,"user_name":"几多不几多","can_delete":false,"product_type":"c1","uid":1326270,"ip_address":"","ucode":"B5021F8D2F2D13","user_header":"https://static001.geekbang.org/account/avatar/00/14/3c/be/2bce7512.jpg","comment_is_top":false,"comment_ctime":1547025254,"is_pvip":false,"replies":[{"id":"21064","content":"si指的模式串的下标 字符串从0开始编号。坏字符对应模式串中的第二个a 所以si是1。si-xi=2","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1547086139,"ip_address":"","comment_id":58274,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5841992550","product_id":100017301,"comment_content":"老师，看了下面的评论有同学问如下的字符串:  a b c d a a d<br>a a d <br>他计算出来si-xi=2 老师说计算出来是1 我计算出来却是3，坏字符为c，si为2，xi为-1，si-xi=3。请问老师我这样计算哪里错了呢？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435984,"discussion_content":"si指的模式串的下标 字符串从0开始编号。坏字符对应模式串中的第二个a 所以si是1。si-xi=2","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547086139,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":57094,"user_name":"wei","can_delete":false,"product_type":"c1","uid":1013347,"ip_address":"","ucode":"345682FEFD1A90","user_header":"","comment_is_top":false,"comment_ctime":1546627822,"is_pvip":false,"replies":[{"id":"21844","content":"😄，可以","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1547708384,"ip_address":"","comment_id":57094,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5841595118","product_id":100017301,"comment_content":"老师，我想对于大的字符集，把 bc 改为 HashMap，内存消耗就没问题了，应该可以的。是这样么？老师","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435401,"discussion_content":"😄，可以","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547708384,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":56685,"user_name":"佛学渣","can_delete":false,"product_type":"c1","uid":1175044,"ip_address":"","ucode":"43928CD8E7BCA8","user_header":"https://static001.geekbang.org/account/avatar/00/11/ee/04/81d19d82.jpg","comment_is_top":false,"comment_ctime":1546522742,"is_pvip":false,"replies":[{"id":"21321","content":"不行啊  suffix跟prefix是两个东西 一个是前缀 一个是后缀","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1547262214,"ip_address":"","comment_id":56685,"utype":1}],"discussion_count":1,"race_medal":5,"score":"5841490038","product_id":100017301,"comment_content":"在好字符匹配时，suffix为-1时从当前往前找第一个不为-1的就好了么，prexfix数组是否有点多余？(看不出prefix为true的时候而suffix为-1的情况)","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435179,"discussion_content":"不行啊  suffix跟prefix是两个东西 一个是前缀 一个是后缀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547262214,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":51196,"user_name":"sky","can_delete":false,"product_type":"c1","uid":1060892,"ip_address":"","ucode":"B29CA98AC45F88","user_header":"https://static001.geekbang.org/account/avatar/00/10/30/1c/e160955d.jpg","comment_is_top":false,"comment_ctime":1545131435,"is_pvip":false,"replies":[{"id":"18553","content":"👍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545184917,"ip_address":"","comment_id":51196,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5840098731","product_id":100017301,"comment_content":"看了好几天，终于看懂了","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433337,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545184917,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50416,"user_name":"linus","can_delete":false,"product_type":"c1","uid":1246600,"ip_address":"","ucode":"910606671D1706","user_header":"https://static001.geekbang.org/account/avatar/00/13/05/88/0a1f1b1d.jpg","comment_is_top":false,"comment_ctime":1544970336,"is_pvip":false,"replies":[{"id":"18146","content":"si-xi也是1吧","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545009286,"ip_address":"","comment_id":50416,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5839937632","product_id":100017301,"comment_content":"a b c  d  a  a  d<br>          a  a  d<br>对于上述情况，按照si-xi的计算应该是移动两位，但实际应该移动1位即可<br>","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432978,"discussion_content":"si-xi也是1吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545009286,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":49996,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1544831276,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5839798572","product_id":100017301,"comment_content":"如果好后缀在模式串中不存在可匹配的子串，那在我们一步一步往后滑动模式串的过程中，【只要主串中的{u}与模式串有重合】，那肯定就无法完全匹配。但是当模式串滑动到前缀与主串中{u}的后缀有部分重合的时候，并且重合的部分相等的时候，就有可能会存在完全匹配的情况。<br>中括号内那句是不是写反了？","like_count":1,"discussions":[{"author":{"id":1101894,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d0/46/1a9229b3.jpg","nickname":"NEVER SETTLE","note":"","ucode":"9C86BDAFDBF768","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":105755,"discussion_content":"这句话前前后后想了半个小时，也不知道要表达啥","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577468908,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":48900,"user_name":"crazyone","can_delete":false,"product_type":"c1","uid":1115042,"ip_address":"","ucode":"705E34642E41F5","user_header":"https://static001.geekbang.org/account/avatar/00/11/03/a2/ceb37046.jpg","comment_is_top":false,"comment_ctime":1544576932,"is_pvip":false,"replies":[{"id":"17735","content":"是的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544666772,"ip_address":"","comment_id":48900,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5839544228","product_id":100017301,"comment_content":"如果好后缀在模式串中不存在可匹配的子串，那在我们一步一步往后滑动模式串的过程中，只要<br>主串中的{u}与模式串有重合，那肯定就无法完全匹配。<br>------------------------<br>总是感觉这里看着别扭，这个主串中的{u}指的就是好后缀吧？重合就是指匹配上的意思？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432409,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544666772,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1101894,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d0/46/1a9229b3.jpg","nickname":"NEVER SETTLE","note":"","ucode":"9C86BDAFDBF768","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":105754,"discussion_content":"这句话前前后后想了半个小时，也不知道要表达啥","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577468876,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":48668,"user_name":"猫头鹰爱拿铁","can_delete":false,"product_type":"c1","uid":1105958,"ip_address":"","ucode":"24266B58968428","user_header":"https://static001.geekbang.org/account/avatar/00/10/e0/26/4942a09e.jpg","comment_is_top":false,"comment_ctime":1544511781,"is_pvip":true,"replies":[{"id":"17740","content":"写错正常的 我也写错了好几个地方 还是小伙伴给我指出的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544667183,"ip_address":"","comment_id":48668,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5839479077","product_id":100017301,"comment_content":"老师这篇真让我受益匪浅。逻辑条理都好清晰，一点点剖析下来，基本理解了这个算法的原理。<br>可是自己练习了下，发现很容易在边界的情况下很容易写错。。。比如说多计算或者少计算一位。","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432299,"discussion_content":"写错正常的 我也写错了好几个地方 还是小伙伴给我指出的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544667183,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":48086,"user_name":"sarahsnow","can_delete":false,"product_type":"c1","uid":1249446,"ip_address":"","ucode":"63D0832C4F75CA","user_header":"https://static001.geekbang.org/account/avatar/00/13/10/a6/564f9143.jpg","comment_is_top":false,"comment_ctime":1544345860,"is_pvip":false,"replies":[{"id":"17170","content":"必须是前缀才是true","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544407036,"ip_address":"","comment_id":48086,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5839313156","product_id":100017301,"comment_content":"例子中，prefix数组的值有误吧？<br>suffix b和ab，可以在模式串cabcab的前缀中找到<br>应该是：<br>prefix[1] = true<br>prefix[2] = true<br>","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432019,"discussion_content":"必须是前缀才是true","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544407036,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":48030,"user_name":"微秒","can_delete":false,"product_type":"c1","uid":1249195,"ip_address":"","ucode":"65A2E8B565B191","user_header":"https://static001.geekbang.org/account/avatar/00/13/0f/ab/9748f40b.jpg","comment_is_top":false,"comment_ctime":1544325996,"is_pvip":false,"replies":[{"id":"17392","content":"最长的 模式串往后滑动的最少 这就避免了滑动过头","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544493905,"ip_address":"","comment_id":48030,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5839293292","product_id":100017301,"comment_content":"老师，我们从好后缀的后缀子串中，找一个最长的并且能跟模式串的前缀子串匹配的。为什么会是最长呢？万一公共的后缀子串中出现更小的公共子串，这种情况也有可能出现匹配的情况吧。","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431995,"discussion_content":"最长的 模式串往后滑动的最少 这就避免了滑动过头","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544493905,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47690,"user_name":"喵吉豆豆","can_delete":false,"product_type":"c1","uid":1144651,"ip_address":"","ucode":"1F3322FF5EDF58","user_header":"https://static001.geekbang.org/account/avatar/00/11/77/4b/ede8aa13.jpg","comment_is_top":false,"comment_ctime":1544182939,"is_pvip":false,"replies":[{"id":"17185","content":"是的 已经改正","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544407814,"ip_address":"","comment_id":47690,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5839150235","product_id":100017301,"comment_content":"如果我们处理字符集很大的字符串匹配问题，suffix 数组对内存的消耗就会比较多。因为好后缀和坏字符规则是独立的，如果我们运行的环境对内存要求苛刻，可以只使用好后缀规则，不使用坏字符规则，这样就可以避免 suffix 数组过多的内存消耗。不过，单纯使用好后缀规则的 BM 算法效率就会下降一些了。<br>这里应该是bc数组吧","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431858,"discussion_content":"是的 已经改正","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544407814,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47677,"user_name":"拉欧","can_delete":false,"product_type":"c1","uid":1206605,"ip_address":"","ucode":"40996A8093A95F","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/4d/81c44f45.jpg","comment_is_top":false,"comment_ctime":1544177855,"is_pvip":false,"replies":[{"id":"17190","content":"👍","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544407937,"ip_address":"","comment_id":47677,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5839145151","product_id":100017301,"comment_content":"花了一下午时间全弄明白了，感觉字符串匹配算法方面精进不少","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431853,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544407937,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47661,"user_name":"槛外人","can_delete":false,"product_type":"c1","uid":1053058,"ip_address":"","ucode":"3F821FB998E63A","user_header":"https://static001.geekbang.org/account/avatar/00/10/11/82/ab3f0985.jpg","comment_is_top":false,"comment_ctime":1544173845,"is_pvip":false,"replies":[{"id":"17192","content":"两个算法是独立的 坏字符移动3 是对的 好后缀移动5也是对的 那我们就选最大的移动","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544408009,"ip_address":"","comment_id":47661,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5839141141","product_id":100017301,"comment_content":"最后为什么是从这两个移动位数中取最大值而不是最小值来避免错过了？<br>","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431847,"discussion_content":"两个算法是独立的 坏字符移动3 是对的 好后缀移动5也是对的 那我们就选最大的移动","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544408009,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47651,"user_name":"walor","can_delete":false,"product_type":"c1","uid":1003066,"ip_address":"","ucode":"F349FF0591E598","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/3a/fc019528.jpg","comment_is_top":false,"comment_ctime":1544172343,"is_pvip":false,"replies":[{"id":"17193","content":"是的 已经改正","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544408022,"ip_address":"","comment_id":47651,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5839139639","product_id":100017301,"comment_content":"BM 算法的性能分析及优化<br>我们先来分析 BM 算法的内存消耗。整个算法用到了额外的 2 个数组，其中 suffix 数组的大小跟<br>字符集大小有关，prefix 数组的大小跟模式串长度 m 有关。<br><br>问题：<br>这里说的 suffix 数组，应该是 bc 数组吧","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431843,"discussion_content":"是的 已经改正","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544408022,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47564,"user_name":"sherry","can_delete":false,"product_type":"c1","uid":1234416,"ip_address":"","ucode":"4F1BB26390527D","user_header":"https://static001.geekbang.org/account/avatar/00/12/d5/f0/1f86793d.jpg","comment_is_top":false,"comment_ctime":1544155931,"is_pvip":false,"replies":[{"id":"17202","content":"不矛盾 比如有10个人 我量了一下这10人的身高 说身高上限是1.8m。你又量了一遍说是1.79m。我俩都没错 你更精确","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544408267,"ip_address":"","comment_id":47564,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5839123227","product_id":100017301,"comment_content":"上面有个同学提到，“坏字符规则计算xi的位置时，从坏字符对齐时模式串往前的字符中匹配，这样就不会出现si-xi为负”。我觉得这样是可行的，并且这样操作之后只使用坏字符规则就能完成字符串的匹配了，但是效率不一定会更高。因为老师在讲解代码实现时提到：为了更高效地查找坏字符的xi，所以使用了散列表，从例子中可以看出，相同字符在散列之后前面的就被覆盖掉了（只留下相同字符的最后位置在散列表中，数组的下标为字符的ASCII码，值为该字符出现的最后位置），这样获取xi简单有效。如果从对齐位置往前查找模式串中是否有该字符，那么要么使用顺序遍历查找这种低效的方法，要么就要解决散列冲突，所以这种方法不一定会更好。<br><br>另外我的问题是老师给了两篇文章的链接，证明了在最坏情况下BM的比较次数上限分别为5n和3n，这两个证明都是正确的吗？还没有读论文，但是第一感觉看起来这句话是矛盾的呀，对于确定问题怎么会有不同结果呢？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431812,"discussion_content":"不矛盾 比如有10个人 我量了一下这10人的身高 说身高上限是1.8m。你又量了一遍说是1.79m。我俩都没错 你更精确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544408267,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47521,"user_name":"Fieldhunter","can_delete":false,"product_type":"c1","uid":1250680,"ip_address":"","ucode":"AAEAAE6AF64137","user_header":"https://static001.geekbang.org/account/avatar/00/13/15/78/8298abb8.jpg","comment_is_top":false,"comment_ctime":1544149787,"is_pvip":false,"replies":[{"id":"17209","content":"是bc 已经改正","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544408335,"ip_address":"","comment_id":47521,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5839117083","product_id":100017301,"comment_content":"suffix数组的下标是后缀字符的长度，那不应该和模式串的长度m有关系吗，跟字符集有什么关系？希望老师解答","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431792,"discussion_content":"是bc 已经改正","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544408335,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47468,"user_name":"fumeck.com🍋🌴summer sky","can_delete":false,"product_type":"c1","uid":1134567,"ip_address":"","ucode":"6349BF32257990","user_header":"https://static001.geekbang.org/account/avatar/00/11/4f/e7/7e51052a.jpg","comment_is_top":false,"comment_ctime":1544146446,"is_pvip":false,"replies":[{"id":"16941","content":"那就多看几遍啊 内容的难度摆在那里 要么多思考搞定它 要么就放弃这篇 直接看后面的 其他没啥办法了","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544152237,"ip_address":"","comment_id":47468,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5839113742","product_id":100017301,"comment_content":"看得有点懵逼哎","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431776,"discussion_content":"那就多看几遍啊 内容的难度摆在那里 要么多思考搞定它 要么就放弃这篇 直接看后面的 其他没啥办法了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544152237,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359156,"user_name":"111","can_delete":false,"product_type":"c1","uid":3109487,"ip_address":"北京","ucode":"D6E8E83A118A3E","user_header":"https://static001.geekbang.org/account/avatar/00/2f/72/6f/44c10658.jpg","comment_is_top":false,"comment_ctime":1665292839,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665292839","product_id":100017301,"comment_content":"总结：<br>首先是根据坏字符来移动，在实现中会有往回走的情况。所以采用好后缀来避免，为了避免后缀会移动过多又增加了一个前缀来避免。","like_count":0},{"had_liked":false,"id":357486,"user_name":"Geek_009666","can_delete":false,"product_type":"c1","uid":2955648,"ip_address":"福建","ucode":"86DD98FE808E0A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJQ8AP2ZQCmzKSwhhDvlWa2d37V1KQ5Qib89uNJkYhRddI2YENUhJpuGPwl4oht7KD52plkgLo8QdQ/132","comment_is_top":false,"comment_ctime":1663301844,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663301844","product_id":100017301,"comment_content":"我们把坏字符对应的模式串中的字符下标记作 si。如果坏字符在模式串中存在，我们把这个坏字符在模式串中的下标记作 xi。如果不存在，我们把 xi 记作 -1。<br>第一个例子<br>abcababdc<br>abd<br>si-xi=3<br>&#39;c&#39;在模式串找不到xi=-1<br>si=2是不是？","like_count":0},{"had_liked":false,"id":344654,"user_name":"！null","can_delete":false,"product_type":"c1","uid":1242483,"ip_address":"","ucode":"4E5B7922980397","user_header":"https://static001.geekbang.org/account/avatar/00/12/f5/73/f7d3a996.jpg","comment_is_top":false,"comment_ctime":1651712508,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651712508","product_id":100017301,"comment_content":"已知好后缀{u}找到好后缀{v}的步骤没看明白，长度k一个一个往下减，直到找到prefix是true的吗？","like_count":0},{"had_liked":false,"id":338285,"user_name":"当你的世界里有风吹过","can_delete":false,"product_type":"c1","uid":2051946,"ip_address":"","ucode":"42712891366309","user_header":"https://static001.geekbang.org/account/avatar/00/1f/4f/6a/0a6b437e.jpg","comment_is_top":false,"comment_ctime":1647406296,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647406296","product_id":100017301,"comment_content":"坏字符，为啥要从整个模式串中找坏字符呢，如果从si的位置往前找，不就没有负的情况了吗！","like_count":0},{"had_liked":false,"id":338004,"user_name":"Today","can_delete":false,"product_type":"c1","uid":1235000,"ip_address":"","ucode":"4FA397F0BD8C6E","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/38/41027bda.jpg","comment_is_top":false,"comment_ctime":1647228945,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647228945","product_id":100017301,"comment_content":"本来认为字符串匹配这件事，应该挺简单的，今天才知道要想高效匹配需要考虑这么多，真的开拓了眼界； 学习到了 Boyer Moore 算法中实现的匹配效率优化有：<br>1. 末位开始匹配， 增大移动距离<br>2. 末位匹配情况一： 使用 Bad Character 来记录坏点的位置，查询哈希表中坏点的可能位置，直接平移过去<br>3. 末位匹配情况二： Bad Character 可能是负数，预处理所有的 good suffix 和 prefix 标记，当满足 good suffix 直接获取起始索引，从坏点位置平移过去；没有 good suffix 就找 prefix 是否存在，存在就直接按照最大 prefix 平移过去， 都不存在直接 m 兜底<br>4. 比较前两次末尾的匹配情况，取较大值，移动模式串在主串的起始匹配位置； 知道模式串起始位置到达 n - m 停止<br>以上就是我理解的匹配主线，代码中的小细节真挺多的","like_count":0},{"had_liked":false,"id":336589,"user_name":"周扬","can_delete":false,"product_type":"c1","uid":2613627,"ip_address":"","ucode":"3DE5210624C38E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/IXd7rNYSNfgk3CpDRsqic1I0NIamEY0NPEQnibRagn5scPNVkHQ3V0sAnq8O9jgaUxnIibvsjOn3zVjCphC00tJ6w/132","comment_is_top":false,"comment_ctime":1646229733,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646229733","product_id":100017301,"comment_content":"我天啊，我从8点看这篇文章看到了10点","like_count":0},{"had_liked":false,"id":334219,"user_name":"喵吉","can_delete":false,"product_type":"c1","uid":2865714,"ip_address":"","ucode":"391F95F69058BD","user_header":"https://static001.geekbang.org/account/avatar/00/2b/ba/32/a8ab2f36.jpg","comment_is_top":false,"comment_ctime":1644819130,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644819130","product_id":100017301,"comment_content":"<br>public int bm(char[] a, int n, char[] b, int m) {<br>  int[] bc = new int[SIZE]; &#47;&#47; 记录模式串中每个字符最后出现的位置<br>  generateBC(b, m, bc); &#47;&#47; 构建坏字符哈希表<br>  int i = 0; &#47;&#47; i表示主串与模式串对齐的第一个字符<br>  while (i &lt;= n - m) {<br>    int j;<br>    for (j = m - 1; j &gt;= 0; --j) { &#47;&#47; 模式串从后往前匹配<br>      if (a[i+j] != b[j]) break; &#47;&#47; 坏字符对应模式串中的下标是j<br>    }<br>    if (j &lt; 0) {<br>      return i; &#47;&#47; 匹配成功，返回主串与模式串第一个匹配的字符的位置<br>    }<br>    &#47;&#47; 这里等同于将模式串往后滑动j-bc[(int)a[i+j]]位<br>    i = i + (j - bc[(int)a[i+j]]); <br>  }<br>  return -1;<br>}<br><br>这段代码的每个字母是什么意思啊？？？","like_count":0},{"had_liked":false,"id":328534,"user_name":"心悟","can_delete":false,"product_type":"c1","uid":1121148,"ip_address":"","ucode":"788505FDF9B65E","user_header":"https://static001.geekbang.org/account/avatar/00/11/1b/7c/060da365.jpg","comment_is_top":false,"comment_ctime":1640764911,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1640764911","product_id":100017301,"comment_content":"简单总结了一下BM算法：<br>一：使用坏字符规则<br>      坏字符指的是在主串和模式串从模式串的末位向前开始匹配过程中，当模式串和主串不相同时，这时，主串中的那个字符叫作坏字符。为了方便下边的说明，我们把此时，主串停留的位置表示为i,模式串停留的位置表示为si(和作者对Si的定义保持一致，方便大家理解)<br>      从模式串的第一位开始查找坏字符，一直到在位置si，<br>      1、没有找到坏字符串时，模式串可以直接移动到和坏字符串后边一位对齐的位置<br>      2、找到坏字符串时，比如在xi(和作者对Si的定义保持一致，方便大家理解)位置，这时，模式串可以移动到si-xi位置<br>      3、找到多个坏字符串时，选择最右边一个坏字符串的位置为xi,这样si-xi最小，保持移动最少的位置，防止移动过多错过匹配的情况<br>二、好后缀规则<br>     好后缀是主串和模式串在某个位置匹配时，从模式串的末位开始匹配，可以匹配的最多位字符串。这个位置，在主串中我们定义为i,在模式串中我们定义为j<br>     从模式串第一位开始查找好后缀，一直查找到位置j,<br>     1、如果找到了，直接把模式串移动到和模式串中好后缀和主串好后缀对齐。当然，模式串中有多个好后缀时，对齐最右边一个。防止移动过多位，遗漏匹配情况。<br>     2、如果没找到，这时，又出现一个好前缀规则。<br>         好前缀，是模式串中，除了和好后缀一样的字符串以外的字符串，去和主串的好后缀字符串匹配。这个匹配的方式是，模式串从第一位开始取字符串，把取的字符串和好后缀字符串从末尾开始匹配（这句话表达不太好，可以去看看作者的图），模式串中，可以匹配到的字符串 就是好前缀字符串。<br>         如果找到好前缀字符串，我们把模式串移动到和主串的好后缀字符串中匹配的好前缀字符串对齐的位置。<br>         如果没找到好前缀字符串，我们把模式串移动到主串中好后缀字符串下一位。<br>      <br>       好前缀规则复杂，但是实现起来，代码却比较少。思路巧妙。     ","like_count":0},{"had_liked":false,"id":324476,"user_name":"小竹子","can_delete":false,"product_type":"c1","uid":2813766,"ip_address":"","ucode":"D20F56114426EA","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erX65FTLyn3JMbqLKdFkkv9okdx7qmVIibl1zKB7pnCIbtElSgibULma5cTsSMyS5KGMBy5MRdXtN8g/132","comment_is_top":false,"comment_ctime":1638451707,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638451707","product_id":100017301,"comment_content":"这一篇很难啃，目前只求看懂，不强求自己会算法实现了。学习的好方法是自己画图举例。","like_count":0},{"had_liked":false,"id":318673,"user_name":"Geek_f41e5c","can_delete":false,"product_type":"c1","uid":2077080,"ip_address":"","ucode":"4D06C1A86E57E5","user_header":"","comment_is_top":false,"comment_ctime":1635386930,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635386930","product_id":100017301,"comment_content":"坏字符怎么可能是负的呢","like_count":0},{"had_liked":false,"id":315092,"user_name":"拓山","can_delete":false,"product_type":"c1","uid":1545647,"ip_address":"","ucode":"11FE9CF3821898","user_header":"https://static001.geekbang.org/account/avatar/00/17/95/af/b7f8dc43.jpg","comment_is_top":false,"comment_ctime":1633685418,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633685418","product_id":100017301,"comment_content":"BM的算法....... 看起来比我想象的要low一些。","like_count":0},{"had_liked":false,"id":310660,"user_name":"inmo","can_delete":false,"product_type":"c1","uid":1159530,"ip_address":"","ucode":"A9590E563C93CC","user_header":"https://static001.geekbang.org/account/avatar/00/11/b1/6a/b1e05143.jpg","comment_is_top":false,"comment_ctime":1630826653,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630826653","product_id":100017301,"comment_content":"abcijk，这样命名，无异于增加理解难度。我不知道老师你是故意，还是偷懒，但作为一个讲师，老师，能让学生理解，才是第一要责，而不是代码的简洁与否","like_count":0},{"had_liked":false,"id":310659,"user_name":"inmo","can_delete":false,"product_type":"c1","uid":1159530,"ip_address":"","ucode":"A9590E563C93CC","user_header":"https://static001.geekbang.org/account/avatar/00/11/b1/6a/b1e05143.jpg","comment_is_top":false,"comment_ctime":1630826427,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630826427","product_id":100017301,"comment_content":"从第一章到这一章，我要提个问题，能否不要再是用abc命名法了？","like_count":0},{"had_liked":false,"id":309902,"user_name":"ღ","can_delete":false,"product_type":"c1","uid":1514229,"ip_address":"","ucode":"A2DB9F3168EDEF","user_header":"https://static001.geekbang.org/account/avatar/00/17/1a/f5/2ec1eb78.jpg","comment_is_top":false,"comment_ctime":1630389039,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630389039","product_id":100017301,"comment_content":"public int ss(String oriStr,String targetStr){<br>        char[] oriChars = oriStr.toCharArray();<br>        char[] targetChars = targetStr.toCharArray();<br>        int oriCount = oriChars.length;<br>        int targetCount = targetChars.length;<br>        for(int i = 0;i &lt; oriCount;){<br>            &#47;&#47;第一个不同的位置<br>            int si = 0;<br>            &#47;&#47;第一个相同的位置<br>            int xi = 0;<br>            int count = 0;<br>            for(int m = targetCount-1;m &gt;= 0;m--){<br>                if(targetChars[m] != oriChars[i+m]){<br>                    &#47;&#47;循环<br>                    si = m;<br>                    for(int k = m-1;k &gt;= 0;k--){<br>                        if(oriChars[i+m] == targetChars[k]){<br>                            xi = k;<br>                            break;<br>                        }<br>                    }<br>                    int length = si - xi;<br>                    i = i + length;<br>                }else{<br>                    count++;<br>                    if(count == targetCount){<br>                        return i;<br>                    }<br>                }<br>            }<br>        }<br>        return -1;<br>    }","like_count":0},{"had_liked":false,"id":309136,"user_name":"Geek_6cf199","can_delete":false,"product_type":"c1","uid":1809885,"ip_address":"","ucode":"CDD7D46D3D9FAE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/bcIibiaSu84wkP1kD9iaWpSriaBVmXJDvOFg22jjsy9GBdx9L9eGzHmAA0ZbFnohdLl2c0WYXMvoDiaq99ANxI298Rg/132","comment_is_top":false,"comment_ctime":1629957527,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629957527","product_id":100017301,"comment_content":"好后缀规则的代码改成下面这样，可能更好懂一点，和原来的代码是等效的。<br>    <br>private static int moveByGoodSuf(int j, int m, int[] suffix, boolean[] prefix) {<br><br>        &#47;&#47; 好后缀长度<br>        int k = m - 1 - j;<br><br>        if (suffix[k] != -1) {<br>            &#47;&#47;则让该片段与好后缀对齐<br>            return j - suffix[k] + 1;<br>        }<br><br>        &#47;&#47;好后缀长度位K,它的子串，最多k-1位，最少1位<br>        for (int len = k - 1; len &gt; 0; --len) {<br>            &#47;&#47;从最长的子串开始判断，是否存在与之匹配的前缀串<br>            if (prefix[len] == true) {<br>                &#47;&#47;如果将模式串的长度m 减去 子串的长度即可得出移动的位数<br>                return m - len;<br>            }<br>        }<br>        &#47;&#47;全部字串都不能匹配，则可以移动m步<br>        return m;<br>    }","like_count":0},{"had_liked":false,"id":307782,"user_name":"樱小路依然","can_delete":false,"product_type":"c1","uid":1269957,"ip_address":"","ucode":"DBA9FF68015FE5","user_header":"https://static001.geekbang.org/account/avatar/00/13/60/c5/69286d58.jpg","comment_is_top":false,"comment_ctime":1629253955,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629253955","product_id":100017301,"comment_content":"我发现好像并没有提到bm算法如何兼容中文搜索，由于中文无法适用ascii值，如果直接给size几万的值的话，初始化会变得很慢，请问作者有兼容中文的bm算法实现吗","like_count":0},{"had_liked":false,"id":305932,"user_name":"Geek_842f07","can_delete":false,"product_type":"c1","uid":2698987,"ip_address":"","ucode":"ED772AF755FE7E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/WP4Ge8ABcINFkccKaNYKibicFnI0JAoojBBAUGrichNeRAgzm5RGbHG7GqYrFX3ELEzenuEbicQHJy2HZ72RxSOuMA/132","comment_is_top":false,"comment_ctime":1628235189,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628235189","product_id":100017301,"comment_content":"“所以，模式串向后滑动的时候，只要 c 与模式串没有重合，肯定无法匹配。所以，我们可以一次性把模式串往后多滑动几位，把模式串移动到 c 的后面。”<br>这里写错了，应该是c与模式串有重合，肯定无法匹配","like_count":0},{"had_liked":false,"id":304773,"user_name":"Bonnie","can_delete":false,"product_type":"c1","uid":2267052,"ip_address":"","ucode":"ADB73E28A870AE","user_header":"","comment_is_top":false,"comment_ctime":1627609624,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627609624","product_id":100017301,"comment_content":"我觉得prefix没有讲的太清楚。纠结了好多天，prefix就是匹配到的前缀开始的index是从0开始的。看例句的例子，没有suffix[x] = -1 &amp; prefix[x] = true的情况。但是在BM算法的时候，逻辑就是这么写的，想了很久真的存在这种情况吗？真心没有想到。不知道老师是否可以举一个例子。","like_count":0},{"had_liked":false,"id":301337,"user_name":"放飞心情","can_delete":false,"product_type":"c1","uid":1244845,"ip_address":"","ucode":"75A2192D91D86C","user_header":"https://static001.geekbang.org/account/avatar/00/12/fe/ad/7fa85a7d.jpg","comment_is_top":false,"comment_ctime":1625638695,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625638695","product_id":100017301,"comment_content":"刷了三遍才懂，过程中借鉴bilibili：https:&#47;&#47;www.bilibili.com&#47;video&#47;BV1j4411o7X3?from=search&amp;seid=6556805258281921343讲解，里面有些讲解通过画图的方式容易弄懂点","like_count":0},{"had_liked":false,"id":298437,"user_name":"InHero","can_delete":false,"product_type":"c1","uid":2634637,"ip_address":"","ucode":"F1D09AA0EBABDF","user_header":"https://static001.geekbang.org/account/avatar/00/28/33/8d/767a13ec.jpg","comment_is_top":false,"comment_ctime":1624107964,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1624107964","product_id":100017301,"comment_content":"断断续续看了三天终于看懂BM了","like_count":0},{"had_liked":false,"id":298084,"user_name":"奥雷里亚诺布恩迪亚上校","can_delete":false,"product_type":"c1","uid":2628319,"ip_address":"","ucode":"6A16E9D5A57A32","user_header":"https://static001.geekbang.org/account/avatar/00/28/1a/df/75af7513.jpg","comment_is_top":false,"comment_ctime":1623907302,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623907302","product_id":100017301,"comment_content":"比红黑树那篇讲的好多了，有考虑到读者的思考过程，仔细看两遍能看得懂，也挺精炼。","like_count":0},{"had_liked":false,"id":297899,"user_name":"海崖","can_delete":false,"product_type":"c1","uid":2552745,"ip_address":"","ucode":"9D42E0B0D30A56","user_header":"https://static001.geekbang.org/account/avatar/00/26/f3/a9/bb9d8450.jpg","comment_is_top":false,"comment_ctime":1623834830,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623834830","product_id":100017301,"comment_content":"叮~打卡","like_count":0},{"had_liked":false,"id":297863,"user_name":"大大王阿","can_delete":false,"product_type":"c1","uid":1973465,"ip_address":"","ucode":"7FFD139D467E90","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erf883jgR7BowWITPGPwoIYibxuA08NelA18ABItje4SV5Pb8WjKLseUIClEK8icibZygmR5zZykTFFA/132","comment_is_top":false,"comment_ctime":1623824604,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623824604","product_id":100017301,"comment_content":"看了一天加一下午算是把大致思路理解了，generateGS这一块的代码看完之后真是感叹连连~~","like_count":0},{"had_liked":false,"id":294754,"user_name":"🐑🌞","can_delete":false,"product_type":"c1","uid":1807053,"ip_address":"","ucode":"50ECBEA87CBD65","user_header":"https://static001.geekbang.org/account/avatar/00/1b/92/cd/a2709453.jpg","comment_is_top":false,"comment_ctime":1622082306,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622082306","product_id":100017301,"comment_content":"老师 我想请问BM和BMH的比较 我看文献说BMH的效率比BM更高<br>通过我的调研,BMH是将好后缀规则摒弃了的BM算法<br>没有好后缀规则的话,BMH难道没有问题吗<br>","like_count":0},{"had_liked":false,"id":291474,"user_name":"双木公子","can_delete":false,"product_type":"c1","uid":1116567,"ip_address":"","ucode":"751885864D3AB7","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/97/4314e2d8.jpg","comment_is_top":false,"comment_ctime":1620300407,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620300407","product_id":100017301,"comment_content":"相关内容整理见：https:&#47;&#47;blog.csdn.net&#47;BruceLee1314&#47;article&#47;details&#47;116455482，另外我想问下老师，if (j &lt; m-1) { &#47;&#47; 如果有好后缀的话 y = moveByGS(j, m, suffix, prefix); }， 这里的条件判断是不是多余了？因为如果有这个条件可能就会出现没有好后缀并且x也为负数的情况，在该情况下应该后移m步，而不是原地不动，这样可能会产生死循环，不知道我思考的是否正确，望批评指正。","like_count":0},{"had_liked":false,"id":288884,"user_name":"Geek_4e4ec2","can_delete":false,"product_type":"c1","uid":1603078,"ip_address":"","ucode":"6DAD5EE4FFB195","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/zAZv4NyuS21Y1qk45j8JiaoEYdA5Zgc1PqpJsBokz5bZVmdkf6kNWvT4cUAAKAdH6TgN52DWZhiaH6wNFhw14nRg/132","comment_is_top":false,"comment_ctime":1618750078,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618750078","product_id":100017301,"comment_content":"请问下应用到中文搜索上有什么不一样的地方吗？坏字符表会比较大吗？除了这点还有什么特殊情况吗？","like_count":0},{"had_liked":false,"id":285197,"user_name":"Geek_alogrithm","can_delete":false,"product_type":"c1","uid":2335540,"ip_address":"","ucode":"482245F585FEA6","user_header":"","comment_is_top":false,"comment_ctime":1616663556,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616663556","product_id":100017301,"comment_content":"如果是我，我会优先使用坏字符串，当step&lt;0时，我在用好后缀，这样避免每次都要计算好后缀，或许效率更高一些","like_count":0},{"had_liked":false,"id":282543,"user_name":"hph","can_delete":false,"product_type":"c1","uid":2027011,"ip_address":"","ucode":"83EF84001C3BA9","user_header":"https://static001.geekbang.org/account/avatar/00/1e/ee/03/50b5e0d5.jpg","comment_is_top":false,"comment_ctime":1615295082,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1615295082","product_id":100017301,"comment_content":"对于坏字符规则，文章中数组中的值是字符出现的最后位置，才会导致 si-xi 可能是负数。数组中的值维护一个动态数组，存放字符出现的所有位置（不需要排序，产生过程本身就是有序的），用二分法变形（获取小于某个值的最大值）获取坏字符对应位置之前从后往前最先出现的位置，在根据那个位置移动过来即可（找不到的话就直接移动到坏字符后面了），这样坏字符规则也可以独立使用","like_count":0},{"had_liked":false,"id":280902,"user_name":"罗耀龙@坐忘","can_delete":false,"product_type":"c1","uid":1917663,"ip_address":"","ucode":"3CEA258DE7F3C7","user_header":"https://static001.geekbang.org/account/avatar/00/1d/42/df/a034455d.jpg","comment_is_top":false,"comment_ctime":1614474711,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1614474711","product_id":100017301,"comment_content":"茶艺师学编程<br><br>“遇到不能匹配的字符，就多往后挪动几位”这么简单的一句话，背后需要这么复杂的代码来实现，这算是“上面一句话，下面跑断腿”么？","like_count":0},{"had_liked":false,"id":277844,"user_name":"A风轻云淡","can_delete":false,"product_type":"c1","uid":1098798,"ip_address":"","ucode":"3A096E33C30856","user_header":"https://static001.geekbang.org/account/avatar/00/10/c4/2e/b0c56fca.jpg","comment_is_top":false,"comment_ctime":1612619403,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612619403","product_id":100017301,"comment_content":"这个课程真的是非常好，堪属极客上面最好的付费学习资料，量很大，足斤足两，而且很通俗易懂，非常适合系统化学习","like_count":0},{"had_liked":false,"id":276222,"user_name":"小七七的老父亲","can_delete":false,"product_type":"c1","uid":2063302,"ip_address":"","ucode":"36EBA7C94CA5BD","user_header":"https://static001.geekbang.org/account/avatar/00/1f/7b/c6/069c8a86.jpg","comment_is_top":false,"comment_ctime":1611836497,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611836497","product_id":100017301,"comment_content":"坏字符串规则x1在没有的情况如果设置1然后s1取下标+1那样是不是就不会出现移动倒退","like_count":0},{"had_liked":false,"id":271337,"user_name":"dst","can_delete":false,"product_type":"c1","uid":1861196,"ip_address":"","ucode":"9177BBB6C8B905","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKx6EdicYYuYK745brMa9yAlkZs2YmzxRAm4BQ2kw9GbtcC8ebnQlyBfIJnGjH57ib4HVlQIpSbTrBw/132","comment_is_top":false,"comment_ctime":1609569614,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1609569614","product_id":100017301,"comment_content":"这个文章是目前掌握起来用时最长的了，不过坚持下来，理解了和掌握了就好了<br>","like_count":0},{"had_liked":false,"id":269582,"user_name":"Yichar","can_delete":false,"product_type":"c1","uid":2184724,"ip_address":"","ucode":"FDD8433EAE318F","user_header":"https://static001.geekbang.org/account/avatar/00/21/56/14/72849f96.jpg","comment_is_top":false,"comment_ctime":1608706160,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608706160","product_id":100017301,"comment_content":"好后缀里面的图有一个地方画的不太好，就是那个模式串头部和好后缀匹配的地方，那个有重合的地方，应该是部分重合，图中含义是完全和好后缀重合了。","like_count":0},{"had_liked":false,"id":253707,"user_name":"youyou.L","can_delete":false,"product_type":"c1","uid":1796438,"ip_address":"","ucode":"B3DB0D0700EEAC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/zlWt0lPDicdib5BTUbuwA3wLLUuejtZ5icGu3DHMBPd6PicXOdhZ3zYFts8VkXjjyQuxzUJas2w5OTmx3icWKiaZM1Vg/132","comment_is_top":false,"comment_ctime":1602838659,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602838659","product_id":100017301,"comment_content":"希望各位同学或者老师解答一下以下算法是否正确：<br><br>如果把坏字符规则优化一下，匹配到坏字符时，往模式串si前找xi，如果不存在xi，则把模式串的头i移动到si+1的位置，如果存在则移动si-xi个位置；这样在实现复杂度和性能之间做个折中。<br><br>当然，寻在模式串中的字符依然使用HashMap来提高性能，key为字符，value是存储的是相同字符的最后一个下标。当遇到坏字符时，比较si和value，当si &gt; value，移动si - value，当si &lt; value，可能存在index &lt; si的坏字符，所以从si处往前遍历模式串，获取第一个与坏字符相同的下标；若没有，则把模式串头i移动到si + 1的位置<br><br>时间复杂度分析：主要耗费性能在于从si往前遍历的次数，这个复杂度分析真不会。。。<br>","like_count":0},{"had_liked":false,"id":247839,"user_name":"Geek_99ae14","can_delete":false,"product_type":"c1","uid":1909732,"ip_address":"","ucode":"268852986A6B69","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLY0FFoux40Negib6LrE7EwT3T2BUbpYzOzUeiaiaXBmNGDGVgIZr5NeWBTEeCuALOg3ODtWa21bHMgg/132","comment_is_top":false,"comment_ctime":1599884108,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599884108","product_id":100017301,"comment_content":"老师的坏字符规则原理了解了但是代码看的有点蒙，自己在idea中跑了一下才清楚，自己加了一些注释，可以参考<br>public int bm(char[] a, int n, char[] b, int m) {<br>        int[] bc = new int[SIZE]; &#47;&#47; 记录模式串中每个字符最后出现的位置<br>        generateBC(b, m, bc); &#47;&#47; 构建坏字符哈希表<br>        int i = 0; &#47;&#47; i表示主串与模式串对齐的第一个字符<br>        while (i &lt;= n - m) {<br>            int j;<br>            for (j = m - 1; j &gt;= 0; --j) { &#47;&#47; 模式串从后往前匹配<br>                if (a[i+j] != b[j]) break; &#47;&#47; 坏字符对应模式串中的下标是j<br>            }<br>            if (j &lt; 0) {&#47;&#47;表示没有坏串，主串和模式串匹配成功<br>                return i; &#47;&#47; 匹配成功，返回主串与模式串第一个匹配的字符的位置<br>            }<br>            &#47;&#47;c是在主串中的坏串<br>            char c = a[i+j];<br>            &#47;&#47;查询c在模式串b中的位置<br>            int x = bc[(int)c];<br>            &#47;&#47;计算i移动的位置  j - x 是坏串在主串中匹配到相等的第一个字符的差<br>            &#47;&#47; 这里等同于将模式串往后滑动j-bc[(int)a[i+j]]位<br>            i = i + (j - x);<br>        }<br>        return -1;<br>    }","like_count":0},{"had_liked":false,"id":245438,"user_name":"cqc","can_delete":false,"product_type":"c1","uid":1099493,"ip_address":"","ucode":"18053C9C62805F","user_header":"https://static001.geekbang.org/account/avatar/00/10/c6/e5/7e86498f.jpg","comment_is_top":false,"comment_ctime":1598945235,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598945235","product_id":100017301,"comment_content":"看了好几遍，同时又试着自己实现了一下，跟着调试了好多遍，通过UT来验证，确实很高效，老师对于逻辑的讲解还是很清楚的，关于好后缀的最长前缀匹配子串稍微觉得有点费解，不过转换成k-1-&gt;0的思路之后就觉得清楚多了，感谢老师。<br><br>func bm_sim(main string, mode string) {<br>\t&#47;**<br>\t1、预处理，得到bc、suffix、prefix<br>\t2、如果主串中找到模式串，返回起始下标，结束查找<br>\t3、坏字符处理（计算stepBC）<br>\t\t3.1、如果坏字符不在模式串中，xi=-1<br>\t\t3.2、在模式串中，xi = bc[ a[i+j] ]<br>\t\tstepBC = si - xi = j - xi<br>\t4、好后缀处理（计算stepGS）<br>\t\tstepGS = m（模式串长度）<br>\t\t3.1、如果好后缀找到匹配：stepGS = j - suffix[k] + 1<br>\t\t3.2、如果没找到，则寻找与前缀匹配的最长好后缀子串<br>\t\t\tfor r=k-1; r&gt;=0;r-- {<br>\t\t\t\tif prefix[k] break<br>\t\t\t}<br>\t\t\tif r&gt;0 { stepGS = m - r }<br>\t5、step = max(stepBC, stepGS)<br>\t6、在主串中移动step，继续查找<br>\t*&#47;<br>}","like_count":0},{"had_liked":false,"id":243366,"user_name":"Broucetrong","can_delete":false,"product_type":"c1","uid":1240614,"ip_address":"","ucode":"F69C68463728C1","user_header":"https://static001.geekbang.org/account/avatar/00/12/ee/26/bf336b1b.jpg","comment_is_top":false,"comment_ctime":1598074393,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598074393","product_id":100017301,"comment_content":"计算好后缀规则的移动位数时，是否可以用 好后缀 的尾部下标 减去 公共后缀子串 的尾部下标，这样感觉就不需要 prefix 数组了","like_count":0},{"had_liked":false,"id":238650,"user_name":"无为而立","can_delete":false,"product_type":"c1","uid":2003887,"ip_address":"","ucode":"A74526BF43A077","user_header":"https://static001.geekbang.org/account/avatar/00/1e/93/af/54e2a654.jpg","comment_is_top":false,"comment_ctime":1596249157,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596249157","product_id":100017301,"comment_content":"你好，老师：这段描述：“如果好后缀在模式串中不存在可匹配的子串，那在我们一步一步往后滑动模式串的过程中，只要主串中的{u}与模式串有重合，那肯定就无法完全匹配。但是当模式串滑动到前缀与主串中{u}的后缀有部分重合的时候，并且重合的部分相等的时候，就有可能会存在完全匹配的情况。”<br>里面“只要主串中的{u}与模式串有重合，那肯定就无法完全匹配” 应该是这个吧：  “只要主串中的{u}与模式串没有重合，那肯定就无法完全匹配”","like_count":0},{"had_liked":false,"id":238615,"user_name":"罗樱罂","can_delete":false,"product_type":"c1","uid":2045997,"ip_address":"","ucode":"9072E79E625ED1","user_header":"https://static001.geekbang.org/account/avatar/00/1f/38/2d/f3c6493e.jpg","comment_is_top":false,"comment_ctime":1596231036,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596231036","product_id":100017301,"comment_content":"请问一下老师为什么会这样做？<br>“我们可以分别计算好后缀和坏字符往后滑动的位数，然后取两个数中最大的，作为模式串往后滑动的位数。这种处理方法还可以避免我们前面提到的，根据坏字符规则，计算得到的往后滑动的位数，有可能是负数的情况。”<br>按照好后缀的那个坏的例子来说，中间取最大的，不就又是错误的case了吗？","like_count":0},{"had_liked":false,"id":236645,"user_name":"℡ __ 柚稚","can_delete":false,"product_type":"c1","uid":1740282,"ip_address":"","ucode":"07A8CBFC563C5E","user_header":"https://static001.geekbang.org/account/avatar/00/1a/8d/fa/93e48f3b.jpg","comment_is_top":false,"comment_ctime":1595488723,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595488723","product_id":100017301,"comment_content":"<br>private static final int SIZE = 256; &#47;&#47; 全局变量或成员变量<br>private void generateBC(char[] b, int m, int[] bc) {<br>  for (int i = 0; i &lt; SIZE; ++i) {<br>    bc[i] = -1; &#47;&#47; 初始化bc<br>  }<br>  for (int i = 0; i &lt; m; ++i) {<br>    int ascii = (int)b[i]; &#47;&#47; 计算b[i]的ASCII值<br>    bc[ascii] = i;<br>  }<br>}<br>老师，我想问一下，这个如果模式串出现重复字符，那下标就被覆盖了？这样没问题嘛<br>","like_count":0},{"had_liked":false,"id":235335,"user_name":"GeekYanger","can_delete":false,"product_type":"c1","uid":2046036,"ip_address":"","ucode":"E674B7D25261CC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/sOuSC65kXWdWBAIIs6uXAD41Ed8Wo8tib81LLVOQJ2oK23TgPDy6x0PGmp7rXwLR3BHOicaKx1zib1DyfpCITK3dw/132","comment_is_top":false,"comment_ctime":1594977403,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594977403","product_id":100017301,"comment_content":"“实际上，我前面讲的 BM 算法是个初级版本。为了让你能更容易理解，有些复杂的优化我没有讲。”老师，我想知道复杂的优化是哪些，可以告诉我吗，吊着胃口好难受。","like_count":0},{"had_liked":false,"id":235110,"user_name":"孤鸿傲雪Geek_79dd4b","can_delete":false,"product_type":"c1","uid":1582649,"ip_address":"","ucode":"C0C3286D9E08D0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/dLrfSKs4kCPyBVTKSkHcEPx3iaRoQGvj2ejyxydZODIMquOz1tape8gOX8FlWuRS5Ysibia3RQfZ8wjPJWmeW6Czg/132","comment_is_top":false,"comment_ctime":1594893953,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594893953","product_id":100017301,"comment_content":"BM 算法。尽管复杂、难懂，但匹配的效率却很高，在实际的软件开发中，特别是一些文本编辑器中，应用比较多。如果一遍看不懂的话，你就多看几遍。我果然三天看了N遍，终于有点懵懵懂懂了，赶紧发表一下评论记录一下，以免自己忘了。<br><br>0、背景引入——文本编辑器中的查找替换功能<br><br>1、BM 算法的核心思想<br>\t匹配的过程中，当模式串和主串某个【字符】不匹配的时候，尽可能（即不遗漏的情况下）<br>将模式串往后多滑动几位。<br><br><br>2、BM 算法原理——坏字符规则（bad character rule）和好后缀规则（good suffix shift）<br>\t【注】与BF暴力匹配很大的一个不同之处就是<br>BM算法是按照模式串下标从大到小的顺序，倒着匹配的<br><br>◆坏字符规则<br>\t首先搞清楚何为坏字符？主串中的（倒序即从右往左或者从尾至首【第一个】不匹配的字符串）【单个字符】（不是子串）。<br>\t我当时一直犯迷糊，就是思维惯势把这个坏字符默认为了子串。<br>\t还有想当然所以不匹配的字符都是坏字符，实际上找到第一个字符不匹配就找到目标了。<br>移动 si-xi位，<br>\t把坏字符对应的模式串中的字符下标记作 si，该坏字符在模式串中的下标记作 xi，如果不存在就默认为-1。<br><br>◆好后缀规则<br>\t实际上主要完成两件事。<br>①找最右公共子串，相对于后缀串。<br>②前后相配。<br><br>◆两虎相争，勇者胜。——选择坏字符还是好后缀呢？<br>\t当模式串和主串中的某个字符不匹配的时候，如何选择用好后缀规则还是坏字符规则，来计算模式串往后滑动的位数？<br>分别计算，然后取大。<br>\t这种处理方法还可以避免我们前面提到的，根据坏字符规则，有可能是负数的情况。<br><br><br>3、BM 算法代码实现<br><br>难点之一：j - bc[(int)a[i+j]] ？<br>如何查找坏字符在模式串中出现的位置是“坏字符规则”的重点。<br>\t散列表显神威。<br>\t另外不得不说，王老师在这里图文并茂，是问题更加直观容易理解。<br>si对应图中的下标j；<br>xi对应代码中的bc[(int)a[i+j]]，套了好几层，扒去bc 是散列表的外衣，<br>\t终于明白了 j - bc[(int)a[i+j]] 这个表达式的含义。<br><br>好后缀的预处理模式串，是难点之二。 int suffix 数组与boolean prefix 数组。<br>\t这两个数组含义不再赘述，计算过程可以合并为求公共子串。<br>while (j &gt;= 0 &amp;&amp; b[j] == b[m-1-k]) { …… } 这一段代码看了好久，看注释才恍然大悟，<br>\t原来是这就是求公共子串。<br><br>难点三：如何根据好后缀规则，计算模式串往后滑动的位数？<br>分为三种情况讨论：存在公共子串（suffix[k]不等于 -1）、<br>\t有可匹配的前缀子串（suffix[k] == -1 &amp;&amp; prefix[k] == true）、<br>\t都不匹配就大胆移动m（m表示模式串的长度）。<br>深究一下，这三种情况下的就算过程。<br>* j-suffix[k]+1（j 表示坏字符对应的模式串中的字符下标），<br>\t看到j的含义就明白这个表达式了，如果还不明白就回到文档中看图更直观。<br>** 有可匹配的前缀子串，为什么后移r位，r又是什么含义呢？<br>\tr实际上还是很好理解与计算的，r实际上就是有可匹配前缀的后缀子串的起始下标。<br>\t但是，判断有可匹配的前缀子串，这点真不好想，想通了就行了。<br>\t其实我想说，过程太曲折复杂，我没想通。<br> 大胆移动m不赘述。<br><br><br>看完完整代码，心中又有疑惑了。<br>文中两处实现bm()方法，第一处只有坏字符，第二处在第一处的基础上融合了好后缀。<br>即分别计算好后缀和坏字符往后滑动的位数，然后取两个数中最大的，作为模式串往后滑动的位数。<br>if (j &lt; m-1) { &#47;&#47; 如果有好后缀的话<br>      y = moveByGS(j, m, suffix, prefix);<br>}<br>\t疑惑之处在这两三行代码，为什么这样写，不明白啊。<br>最主要不明白为什么j &lt; m-1就意味着有好后缀？还望老师给出解答。<br><br><br>4、 内容小结<br>BM 算法核心思想是，利用模式串本身的特点，在模式串中某个字符与主串不能匹配的时候，将模式串往后多滑动几位，以此来减少不必要的字符比较，提高匹配的效率。<br>BM 算法构建的规则有两类，坏字符规则和好后缀规则。<br>\t好后缀规则可以独立于坏字符规则使用。因为坏字符规则的实现比较耗内存，为了节省内存，我们可以只用好后缀规则来实现 BM 算法。","like_count":0},{"had_liked":false,"id":234856,"user_name":"游魂客","can_delete":false,"product_type":"c1","uid":2030731,"ip_address":"","ucode":"99289552B9E655","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ19UmygmZsYYNzZCM1luMg7IicBzf8Q0AFZCfIBOwXLcCNjnug6rCSOuhoYGK00HupUzc1GgJcv8g/132","comment_is_top":false,"comment_ctime":1594813468,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1594813468","product_id":100017301,"comment_content":"这玩意 理解了 原理 就不难.<br>但是描述出来复杂 在脑海里复现是真麻烦 什么前缀子串 后缀子串 这个子串 那个子串 另一个子串 绕着绕着就晕了, <br>搞了两天终于恍然大悟 一拍大腿 其实就这么简单点事<br><br>还是要画图, 推演. 推着推着就明白了. 搞明白原理再看代码就简单了","like_count":0,"discussions":[{"author":{"id":1238166,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e4/96/a5d775e9.jpg","nickname":"牧凉","note":"","ucode":"1F57A16E37C668","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381727,"discussion_content":"看懂原理撸代码不知道怎么撸","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625194224,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231770,"user_name":"墨灵","can_delete":false,"product_type":"c1","uid":1409700,"ip_address":"","ucode":"185D70CA20BEEE","user_header":"https://static001.geekbang.org/account/avatar/00/15/82/a4/a92c6eca.jpg","comment_is_top":false,"comment_ctime":1593767271,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593767271","product_id":100017301,"comment_content":"BM 算法适合用来做wild card的题吗？","like_count":0},{"had_liked":false,"id":231549,"user_name":"madcat","can_delete":false,"product_type":"c1","uid":1938004,"ip_address":"","ucode":"EBED3FC6C463CC","user_header":"https://static001.geekbang.org/account/avatar/00/1d/92/54/95c0e0ef.jpg","comment_is_top":false,"comment_ctime":1593703895,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593703895","product_id":100017301,"comment_content":"变量命名讲究一点就好了","like_count":0},{"had_liked":false,"id":230907,"user_name":"豆豆","can_delete":false,"product_type":"c1","uid":1275407,"ip_address":"","ucode":"97788B134C3212","user_header":"https://static001.geekbang.org/account/avatar/00/13/76/0f/c7c8021d.jpg","comment_is_top":false,"comment_ctime":1593520173,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593520173","product_id":100017301,"comment_content":"看了第三遍了，前两遍对算法的思想掌握了，第三遍死磕了算法实现，有点烧脑，尤其是好后缀的实现技巧。","like_count":0},{"had_liked":false,"id":227768,"user_name":"少主江衫","can_delete":false,"product_type":"c1","uid":1443369,"ip_address":"","ucode":"95B503FE19604F","user_header":"https://static001.geekbang.org/account/avatar/00/16/06/29/00a319e3.jpg","comment_is_top":false,"comment_ctime":1592472992,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592472992","product_id":100017301,"comment_content":"b 是模式串 for (int i = 0; i &lt; m; ++i) { int ascii = (int)b[i]; &#47;&#47; 计算b[i]的ASCII值 bc[ascii] = i; }<br>假设此时模式串中有好几个重复的字符，其中一个是aaaabccc,a就是有多个，前面的存储会被后面的覆盖，最会存储的是57下标的值是3。<br>移动bc[a[i + j]]，默认是移动3？","like_count":0},{"had_liked":false,"id":227359,"user_name":"Beyond myself","can_delete":false,"product_type":"c1","uid":1921394,"ip_address":"","ucode":"BB0218446CD64F","user_header":"https://static001.geekbang.org/account/avatar/00/1d/51/72/16b13cd4.jpg","comment_is_top":false,"comment_ctime":1592363465,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592363465","product_id":100017301,"comment_content":"我感觉，大多算法，就是充分利用已经做过的计算来优化接下来的任务。","like_count":0},{"had_liked":false,"id":223984,"user_name":"你在不远的未来","can_delete":false,"product_type":"c1","uid":1318404,"ip_address":"","ucode":"5B34C8BD03B71A","user_header":"https://static001.geekbang.org/account/avatar/00/14/1e/04/f902047e.jpg","comment_is_top":false,"comment_ctime":1591249638,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591249638","product_id":100017301,"comment_content":"有个很重要的问题，文本出现中文是很大概率的事，bc应该如何处理。","like_count":0},{"had_liked":false,"id":223571,"user_name":"吴贤龙","can_delete":false,"product_type":"c1","uid":1220566,"ip_address":"","ucode":"45085FE86D6030","user_header":"https://static001.geekbang.org/account/avatar/00/12/9f/d6/f66133b4.jpg","comment_is_top":false,"comment_ctime":1591117129,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591117129","product_id":100017301,"comment_content":"除去特殊情况，模式串越长，BM算法效率越高，反之则越慢，退化到极端情况，模式串的长度只有1， 那么这个情况是不是应该直接绕过BM算法，直接挨个匹配还更快呢， 老师？","like_count":0},{"had_liked":false,"id":223535,"user_name":"唯心主义蠢货🍁","can_delete":false,"product_type":"c1","uid":1941034,"ip_address":"","ucode":"836B09E0459953","user_header":"https://static001.geekbang.org/account/avatar/00/1d/9e/2a/f1d8913f.jpg","comment_is_top":false,"comment_ctime":1591110424,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591110424","product_id":100017301,"comment_content":"好后缀部分的预处理加缓存的思路很棒！<br>对于长度为k的后缀，我们在suffix[k]中存储前一个这个后缀的位置，这个是好后缀的整体匹配部分<br>但是好后缀的子串还要匹配模式串的前缀子串看是否可以对其，所以需要prefix[k] 存储是否可以对其到前缀<br>【对于prefix有无用个人理解，<br>比如 abcabcabc suffix[3] == 3 且 prefix[3] == true，这样就可以直接对其到开头的abc了，如果没有prefix只通过suffix[k] == 0判断对齐，那么对于循环重复的这种情况就需要判断多次了 】","like_count":0},{"had_liked":false,"id":222816,"user_name":"talkyoung","can_delete":false,"product_type":"c1","uid":1613665,"ip_address":"","ucode":"8D231FA9004B64","user_header":"https://static001.geekbang.org/account/avatar/00/18/9f/61/c46b42f4.jpg","comment_is_top":false,"comment_ctime":1590918619,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590918619","product_id":100017301,"comment_content":"最后的代码实现中 moveByGS方法中 for循环的 r=j+2是啥意思呀 琢磨半天没看懂 有没有大佬解答一下","like_count":0},{"had_liked":false,"id":222739,"user_name":"郭星","can_delete":false,"product_type":"c1","uid":1182219,"ip_address":"","ucode":"8A0F5DF80E0C61","user_header":"https://static001.geekbang.org/account/avatar/00/12/0a/0b/985d3800.jpg","comment_is_top":false,"comment_ctime":1590903319,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1590903319","product_id":100017301,"comment_content":"对于坏字符规则中 &quot; 比如主串是 aaaaaaaaaaaaaaaa，模式串是 baaa。不但不会向后滑动模式串，还有可能倒退&quot; 的例子没有明白,为什么会需要后退, 按照计算 si = 0 ,xi = -1,  si-xi = 1;  后移位数为1才对,为什么说会是后退呢?<br>我的个人理解为当极端情况下应该说是性能退化时间复杂度为O(n) (n为主串的长度)","like_count":0,"discussions":[{"author":{"id":1024001,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a0/01/0415fc3c.jpg","nickname":"魔偶","note":"","ucode":"6A40B6BD406D56","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":339909,"discussion_content":"si=0, xi=3 (xi 坏字符a在模式串baaa中最后出现的位置)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609837029,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":222046,"user_name":"HaiSky","can_delete":false,"product_type":"c1","uid":1358312,"ip_address":"","ucode":"ECE7C263142432","user_header":"https://static001.geekbang.org/account/avatar/00/14/b9/e8/0b3cf295.jpg","comment_is_top":false,"comment_ctime":1590663235,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590663235","product_id":100017301,"comment_content":"模式串的子前缀、模式串的子后缀、好后缀的子后缀   理解这三个之间的关系就没问题了；","like_count":0},{"had_liked":false,"id":221582,"user_name":"🎏往事随风🎏","can_delete":false,"product_type":"c1","uid":1227188,"ip_address":"","ucode":"D1A19195FCEAF0","user_header":"https://static001.geekbang.org/account/avatar/00/12/b9/b4/8b65959a.jpg","comment_is_top":false,"comment_ctime":1590544298,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590544298","product_id":100017301,"comment_content":"后缀子串长度大于模式串长度的一半，是不是suffix一直等于-1，prefix一直等于false。","like_count":0},{"had_liked":false,"id":221029,"user_name":"o0oi1i","can_delete":false,"product_type":"c1","uid":1132312,"ip_address":"","ucode":"D1F6AD4AAEAFBE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/18/293cd24d.jpg","comment_is_top":false,"comment_ctime":1590386235,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590386235","product_id":100017301,"comment_content":"后半部分没有看懂，还需多看几遍才行！","like_count":0},{"had_liked":false,"id":220168,"user_name":"John","can_delete":false,"product_type":"c1","uid":1020861,"ip_address":"","ucode":"E4ADF8488953FB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/93/bd/f3977ebb.jpg","comment_is_top":false,"comment_ctime":1590195798,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590195798","product_id":100017301,"comment_content":"艾玛 看了很多其他的视频之后 再回来看第二遍终于看明白了. 总结来说, 先用坏字符作为stop sign来卡位, 然后进行针对后缀的比较. 对于这两种模块的匹配(全部好后缀与P中间的整块匹配, 以及好后缀的后缀子串与P的前缀子串的匹配)的选择比较: 先选小步横移, 否则再选大步横移, 都不行的话, 整个P全家漂移走.<br>收集了一些很厉害的视频讲解, 收藏在了B站, 有兴趣的同学可以移步: https:&#47;&#47;www.bilibili.com&#47;medialist&#47;detail&#47;ml972118233?type=1. 但不得不说 小争哥的表格做的十分完美, 无懈可击.","like_count":0},{"had_liked":false,"id":219418,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1590024116,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1590024116","product_id":100017301,"comment_content":"翻来覆去看了两天，虽然 BM 算法的大意我是清楚了，找到坏字符和好后缀，然后计算得出滑动的位数，但是代码部分似乎还是看的不是很清楚。<br><br>好在面试的时候不问这个，作为思维训练，后面有时间的话可以接着看。<br><br>和昨天一样，在 algs4 里面看到了相对简单的代码，但是似乎只计算了坏孩子，而没有计算好后缀，不过这样应该也可以，使用了一个 max 函数保证了不会出现负数的滑动距离。<br><br>https:&#47;&#47;algs4.cs.princeton.edu&#47;53substring&#47;BoyerMoore.java.html<br><br>public int search(String txt) {<br>    int m = pat.length();<br>    int n = txt.length();<br>    int skip;<br>    for (int i = 0; i &lt;= n - m; i += skip) {<br>        skip = 0;<br>        for (int j = m -1; j &gt;= 0 ; j--) {<br>            if (pat.charAt(j) != txt.charAt(i + j)) {<br>                skip = Math.max(1, j - right[txt.charAt(i + j)]);<br>            }<br>        }<br>        &#47;&#47; found<br>        if (skip == 0) {<br>            return i;<br>        }<br>    }<br>    &#47;&#47; not found<br>    return n;<br>}<br><br>其中 txt 是主串（文本），pat 是模式串。<br><br>留言里面 @meng 给出的链接确实很不错。<br><br>瞅了一眼下一章的题目：如何借助 BM 算法……好吧，明天可能还会回来看看。","like_count":0},{"had_liked":false,"id":219074,"user_name":"万有引力","can_delete":false,"product_type":"c1","uid":1107289,"ip_address":"","ucode":"82C15A427EAD42","user_header":"https://static001.geekbang.org/account/avatar/00/10/e5/59/ad185a6c.jpg","comment_is_top":false,"comment_ctime":1589939871,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1589939871","product_id":100017301,"comment_content":"有个地方想探讨下。坏字符那里，用的256的数组去假设字符集大小。如果是中文或者字符集很大，那就很费内存了。<br>我觉得不按字符集来存储，而是改为hash模式串会很省空间。因为模式串更短，hash模式串需要的内存最大就是模式串长度。在比较时遇到坏字符，从这个hash中去找坏字符的hash值。找不到的话就说明模式串中没有。这样个人感觉可行，还是有没考虑到的情况？","like_count":0,"discussions":[{"author":{"id":1603078,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/zAZv4NyuS21Y1qk45j8JiaoEYdA5Zgc1PqpJsBokz5bZVmdkf6kNWvT4cUAAKAdH6TgN52DWZhiaH6wNFhw14nRg/132","nickname":"Geek_4e4ec2","note":"","ucode":"6DAD5EE4FFB195","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368553,"discussion_content":"我也在想这个问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618750162,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":217794,"user_name":"RedDevil","can_delete":false,"product_type":"c1","uid":1131128,"ip_address":"","ucode":"F8F5DC209BB3B9","user_header":"https://static001.geekbang.org/account/avatar/00/11/42/78/7ba89c75.jpg","comment_is_top":false,"comment_ctime":1589615121,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589615121","product_id":100017301,"comment_content":"bm算法我能搞一天，我是不是太菜了","like_count":0},{"had_liked":false,"id":216822,"user_name":"哈哈","can_delete":false,"product_type":"c1","uid":1494369,"ip_address":"","ucode":"40F14C939F33EB","user_header":"https://static001.geekbang.org/account/avatar/00/16/cd/61/2a4aa0e6.jpg","comment_is_top":false,"comment_ctime":1589350045,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589350045","product_id":100017301,"comment_content":"文稿中：<br>但是，如果模式串中有多个（大于 1 个）子串跟后缀子串{u}匹配，那 suffix 数组中该存储哪一个子串的起始位置呢？为了避免模式串往后滑动得过头了，我们肯定要存储模式串中最靠后的那个子串的起始位置，也就是下标最大的那个子串的起始位置。不过，这样处理就足够了吗？<br><br>这里我看图中储存的是最小的那个下标，有人帮忙解释一下么","like_count":0},{"had_liked":false,"id":215115,"user_name":"Jiemr","can_delete":false,"product_type":"c1","uid":1243092,"ip_address":"","ucode":"AB1FDD61E9151F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f7/d4/b71779ff.jpg","comment_is_top":false,"comment_ctime":1588907340,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588907340","product_id":100017301,"comment_content":"计算好后缀长度k = m - r不对吧，应该是k = m - r - 1。","like_count":0},{"had_liked":false,"id":214137,"user_name":"Happy","can_delete":false,"product_type":"c1","uid":1799074,"ip_address":"","ucode":"2A57674BF06317","user_header":"https://static001.geekbang.org/account/avatar/00/1b/73/a2/420f04ab.jpg","comment_is_top":false,"comment_ctime":1588664893,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588664893","product_id":100017301,"comment_content":"要是整个好后缀都是匹配串的前缀子串呢？那从j+2遍历岂不是漏掉了","like_count":0},{"had_liked":false,"id":214136,"user_name":"Happy","can_delete":false,"product_type":"c1","uid":1799074,"ip_address":"","ucode":"2A57674BF06317","user_header":"https://static001.geekbang.org/account/avatar/00/1b/73/a2/420f04ab.jpg","comment_is_top":false,"comment_ctime":1588664713,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588664713","product_id":100017301,"comment_content":"为什么在好后缀判断是否是前缀的时候是从j+2开始判断的呢？ 不应该是从坏字符后面一位也就是j+1开始判断吗？","like_count":0},{"had_liked":false,"id":213732,"user_name":"Damo","can_delete":false,"product_type":"c1","uid":1599197,"ip_address":"","ucode":"F332EA67F5A40C","user_header":"https://static001.geekbang.org/account/avatar/00/18/66/dd/c9f17139.jpg","comment_is_top":false,"comment_ctime":1588525481,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1588525481","product_id":100017301,"comment_content":"我有一个问题，也没地方问。就放这里问老师了哈，不好意思了<br><br>这是我的样例数据<br> 2020-05-04 00:00:12 00:00:22<br> 2020-05-04 00:00:40 00:00:50<br><br> 2020-05-04 01:00:20 01:00:30<br> 2020-05-04 01:00:40 01:00:50<br><br> 2020-05-04 01:00:55 02:00:10<br> 2020-05-04 02:00:20 02:00:40<br><br>我需要得到的结果是<br><br>2020-05-04 00:00:00 10 + 10 = 20s<br>2020-05-04 01:00:00 10 + 10 + 5 = 35s<br>2020-05-04 02:00:00 10 + 20 = 20s<br><br>其实也是就是，按照小时为划分单位得到每个小时的占用时间，也就是一个分类问题。值得注意的点是，第五天数据，它已经跨了一个小时了。所以需要分别计算出他在每个时间段分布的值。<br>请问同学们或者老师，有没有有一种高效的准确的算法老搞定这个问题。请帮忙把问题置顶谢谢。<br>","like_count":0,"discussions":[{"author":{"id":1599197,"avatar":"https://static001.geekbang.org/account/avatar/00/18/66/dd/c9f17139.jpg","nickname":"Damo","note":"","ucode":"F332EA67F5A40C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":257191,"discussion_content":"第五条数据打成了第五天 不好意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588525818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":212882,"user_name":"侠湉","can_delete":false,"product_type":"c1","uid":1239259,"ip_address":"","ucode":"4EED98603810D2","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/db/77989d09.jpg","comment_is_top":false,"comment_ctime":1588231174,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588231174","product_id":100017301,"comment_content":"有点复杂，关于求公共后缀串，不是很理解","like_count":0},{"had_liked":false,"id":210015,"user_name":"王jojo","can_delete":false,"product_type":"c1","uid":1812840,"ip_address":"","ucode":"1ABE7FA2614F86","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a9/68/ec442a70.jpg","comment_is_top":false,"comment_ctime":1587651820,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587651820","product_id":100017301,"comment_content":"看完了坏字符后还好,好后缀就晕了","like_count":0},{"had_liked":false,"id":200811,"user_name":"吃鱼卡刺喵","can_delete":false,"product_type":"c1","uid":1123214,"ip_address":"","ucode":"7D170F436A0C46","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erHEIS2mF9zahOSdSMxiao14MQXBe2ENIDZDqMgXberX5Ng1aFwP7dHbZlRtdEFJ3TGb8vJvxyoeJQ/132","comment_is_top":false,"comment_ctime":1585654702,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585654702","product_id":100017301,"comment_content":"为什么不是先判断prefix是否为true, suffix为-1的时候prefix肯定是false","like_count":0},{"had_liked":false,"id":192616,"user_name":"小谢","can_delete":false,"product_type":"c1","uid":1879476,"ip_address":"","ucode":"82D54A61D2FDB9","user_header":"https://static001.geekbang.org/account/avatar/00/1c/ad/b4/e4dcd4d7.jpg","comment_is_top":false,"comment_ctime":1584864168,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1584864168","product_id":100017301,"comment_content":"关于好后缀的子串滑动有个小问题就是  为什么一定要是前缀=后缀子串  而不能字符串中有子字符串=后缀子串呢？希望老师能解答一下","like_count":0,"discussions":[{"author":{"id":1325464,"avatar":"https://static001.geekbang.org/account/avatar/00/14/39/98/4c96c6f4.jpg","nickname":"焦太郎","note":"","ucode":"72D48AD49C07C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583467,"discussion_content":"我也发现这个问题了，并且只用好后缀会发生错过匹配的情况，比如这个主串aabaaaa  匹配串  abaaa     ,第一次匹配 aabaa 和 abaaa 时，好字符是aa  ，前缀子串和后缀子串匹配了前缀a, abaa-a ，直接错过了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660128924,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"河南"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":191241,"user_name":"獨自去遠方","can_delete":false,"product_type":"c1","uid":1503941,"ip_address":"","ucode":"E246B33F397441","user_header":"https://static001.geekbang.org/account/avatar/00/16/f2/c5/2a441c27.jpg","comment_is_top":false,"comment_ctime":1584757515,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584757515","product_id":100017301,"comment_content":"字符串匹配基础（2）<br>\tBM算法<br>\t\t跳过一些一定不会匹配的情况<br>\t\t\t不存在的字符<br>\t\t\t固定的模式<br><br>\t\t算法两部分<br>\t\t\t坏字符规则（没有匹配的字符是坏字符）\t<br>\t\t\t\t从后往前匹配，遇到坏字符<br>\t\t\t\t将其对应模式串的位置标记为Si<br>\t\t\t\t\t如果坏字符在模式串中存在，将距离最近的标记为Xi<br>\t\t\t\t\t如果不存在，Xi下标为-1<br>\t\t\t\t模式串向后移动的长度为  Si下标-Xi下标<br><br>\t\t\t\taaaaaaaaaaa\t\tbaaa:这种情况失效<br><br>\t\t\t好后缀规则（匹配上的后缀）<br>\t\t\t\t从后往前已经匹配上的称之为好后缀<br>\t\t\t\t拿好后缀在模式串中查找<br>\t\t\t\t\t如果找到，将模式串中匹配到的位置滑动到好后缀的位置<br>\t\t\t\t\t\t如果有多个，取最近的一个，没有匹配成功继续向前匹配<br>\t\t\t\t\t没有找到，需要考虑好后缀的后缀子串和模式串前缀子串匹配的情况<br>\t\t\t\t\t\t如果存在匹配，查找最长的、能跟模式串前缀子串匹配的后缀子串，匹配部分 是 模式串要滑动到的位置<br>\t\t算法实现<br>\t\t\t需要考虑的点<br>\t\t\t\t1.坏字符：如何查找坏字符在模式串中出现的位置<br>\t\t\t\t\t散列表：模式串的每个字符转换的数字对应到数组下标，字符在模式串中的位置对应到数组的值<br>\t\t\t\t2.好后缀：如何处理模式串后缀子串与模式串前缀子串匹配<br>\t\t\t\t\t这两部分都在模式串上面，所以可以 预先处理<br><br>\t\t\t\t","like_count":0},{"had_liked":false,"id":189982,"user_name":"问心","can_delete":false,"product_type":"c1","uid":1250775,"ip_address":"","ucode":"6808568D61CE36","user_header":"https://static001.geekbang.org/account/avatar/00/13/15/d7/96e77edd.jpg","comment_is_top":false,"comment_ctime":1584588376,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1584588376","product_id":100017301,"comment_content":"解决问题可以简单快速处理，不考虑性能；优化问题，就要把hash、array、tree等算法做一个排列组合，虽然复杂度会增加，但程序的执行效率会越来越快。","like_count":0},{"had_liked":false,"id":187956,"user_name":"zhangbl","can_delete":false,"product_type":"c1","uid":1812621,"ip_address":"","ucode":"A3CF441AFA2683","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a8/8d/3367bdda.jpg","comment_is_top":false,"comment_ctime":1584283025,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584283025","product_id":100017301,"comment_content":"老师，请教您一下。我找了几本书，上面的BM算法讲解都没您这个详细清晰，想知道您是从哪本书学得这么详细的。","like_count":0},{"had_liked":false,"id":187116,"user_name":"Baymax","can_delete":false,"product_type":"c1","uid":1577286,"ip_address":"","ucode":"DAE81AB14F9B63","user_header":"https://static001.geekbang.org/account/avatar/00/18/11/46/63bd0740.jpg","comment_is_top":false,"comment_ctime":1584019931,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1584019931","product_id":100017301,"comment_content":"“如果好后缀在模式串中不存在可匹配的子串，那在我们一步一步往后滑动模式串的过程中，只要主串中的{u}与模式串有重合，那肯定就无法完全匹配。”这句话啥意思，都说了不匹配了还怎么重合？","like_count":0,"discussions":[{"author":{"id":1358312,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b9/e8/0b3cf295.jpg","nickname":"HaiSky","note":"","ucode":"ECE7C263142432","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":275124,"discussion_content":"重合用的不标准，应该用重叠，字面意思","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1590667489,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":187068,"user_name":"伏特加不加冰","can_delete":false,"product_type":"c1","uid":1689196,"ip_address":"","ucode":"C5A8FA4E882458","user_header":"https://static001.geekbang.org/account/avatar/00/19/c6/6c/b5571512.jpg","comment_is_top":false,"comment_ctime":1584004661,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1584004661","product_id":100017301,"comment_content":"好词缀那里看了挺久的，后来才发现了关系，主串好词缀=模式串后缀子串，模式串后缀子串=模式串前缀子串，由此可以推出模式串前缀子串=主串好词缀，然后将模式串移动使该前缀子串和主串好词缀相应的位置即可。","like_count":0,"discussions":[{"author":{"id":1358312,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b9/e8/0b3cf295.jpg","nickname":"HaiSky","note":"","ucode":"ECE7C263142432","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":275126,"discussion_content":"模式串的子前缀、模式串的子后缀、好后缀的子后缀 理解这三个之间的关系就没问题了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590667638,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":186144,"user_name":"o文蚊蚊o","can_delete":false,"product_type":"c1","uid":1320881,"ip_address":"","ucode":"B24FAE308B47BE","user_header":"https://static001.geekbang.org/account/avatar/00/14/27/b1/2cb1dbb3.jpg","comment_is_top":false,"comment_ctime":1583765986,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583765986","product_id":100017301,"comment_content":"prefix值为true的后缀子串表示这个子串可以与相对应的前缀子串匹配，那么最大的prefix为true的后缀子串之前的所有子串一定可以在模式串中找到匹配串（哪怕是前缀串），假设这个子串长为x，那么当好后缀长度小于x时suffix[k]一定不等于-1，当好后缀长度大于x时一定会向前找到这个x子串，所以prefix数组没有存在的必要，只需用一个变量记录这个x子串的位置即可，且当好后缀长度大于x同时suffix[k] == -1时（长度大于x的后缀子串仍有可能与中间某子串匹配）模式串整体向前移动的距离是一个固定值，等于x子串第一个字符与模式串第一个字符的距离差值，算法还有很大的优化空间，不知道我理解的对嘛","like_count":0},{"had_liked":false,"id":185599,"user_name":"一只独立特行的猪","can_delete":false,"product_type":"c1","uid":1473358,"ip_address":"","ucode":"52263607CCBE6F","user_header":"https://static001.geekbang.org/account/avatar/00/16/7b/4e/73a9deec.jpg","comment_is_top":false,"comment_ctime":1583641532,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583641532","product_id":100017301,"comment_content":"我们拿下标为0到I的子串与整个模式串，求公共后缀子串，如果公共后缀子串的长度是k，我们记作suffix[k]=j，如果j等于0，也就是说，公共后缀子串也是模式串的前缀子串，记作prefix[k]=true。<br>花了两个小时，把上面这句话和文中的图，以及代码对应起来，看懂了。妙啊","like_count":0},{"had_liked":false,"id":183991,"user_name":"谢真","can_delete":false,"product_type":"c1","uid":1124650,"ip_address":"","ucode":"8C3402DE107C9F","user_header":"https://static001.geekbang.org/account/avatar/00/11/29/2a/9079f152.jpg","comment_is_top":false,"comment_ctime":1583198118,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583198118","product_id":100017301,"comment_content":"第一遍没看懂，后面多看几遍","like_count":0},{"had_liked":false,"id":183800,"user_name":"马建伟","can_delete":false,"product_type":"c1","uid":1745775,"ip_address":"","ucode":"EC4F32B8E3A2D2","user_header":"https://static001.geekbang.org/account/avatar/00/1a/a3/6f/250520f2.jpg","comment_is_top":false,"comment_ctime":1583137107,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583137107","product_id":100017301,"comment_content":"老师在讲好后缀移动会不会过头时的一段话“如果好后缀在模式串中不存在可匹配的子串，那在我们一步一步往后滑动模式串的过程中，只要主串中的{u}与模式串有重合，那肯定就无法完全匹配。但是当模式串滑动到前缀与主串中{u}的后缀有部分重合的时候，并且重合的部分相等的时候，就有可能会存在完全匹配的情况。“    其中一句：  “只要主串中的{u}与模式串有重合，那肯定就无法完全匹配” 这句是不是有笔误呢？ 要表达的意思是这样吧：“只要主串中的{u}与模式串没有重合，那肯定就无法完全匹配”","like_count":0},{"had_liked":false,"id":180873,"user_name":"RyuGou","can_delete":false,"product_type":"c1","uid":1200793,"ip_address":"","ucode":"8D424CB6005DD7","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/99/4a7f2fc9.jpg","comment_is_top":false,"comment_ctime":1582432864,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582432864","product_id":100017301,"comment_content":"BM算法中如何选择“坏字符串”还是“好后缀”，看完文章我的感觉是：“坏字符串”规则是不严谨的，因为会出现负数的情况，所以可不可以这样：如果模式串中最后一个字符串和主串不匹配，就使用“坏字符串”规则，如果相等，就使用好后缀规则","like_count":0},{"had_liked":false,"id":179530,"user_name":",","can_delete":false,"product_type":"c1","uid":1439568,"ip_address":"","ucode":"191431A878D7B6","user_header":"https://static001.geekbang.org/account/avatar/00/15/f7/50/cbfe1bc0.jpg","comment_is_top":false,"comment_ctime":1582022342,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582022342","product_id":100017301,"comment_content":"学习第二遍，一直考虑下面的j为啥不先用了，在减减，老师这样写是有啥性能或者安全考虑吗<br>```code<br>while (j &gt;= 0 &amp;&amp; b[j] == b[m-1-k]) { <br>          --j;      <br>          ++k;      <br>           suffix[k] = j+1; <br>}<br>```","like_count":0},{"had_liked":false,"id":179069,"user_name":"MooNight","can_delete":false,"product_type":"c1","uid":1810050,"ip_address":"","ucode":"B5B5876841E33E","user_header":"https://static001.geekbang.org/account/avatar/00/1b/9e/82/61e5acf7.jpg","comment_is_top":false,"comment_ctime":1581907426,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581907426","product_id":100017301,"comment_content":"“如果好后缀在模式串中不存在可匹配的子串，那在我们一步一步往后滑动模式串的过程中，只要主串中的{u}与模式串有重合，那肯定就无法完全匹配。”这句话不太理解啊，既然好后缀在模式串中不存在可匹配的子串，为什么主串中的{u}与模式串还会有重合呢？谁给答疑下嘞，谢谢各路大神🙏","like_count":0},{"had_liked":false,"id":178690,"user_name":"陈颖","can_delete":false,"product_type":"c1","uid":1594422,"ip_address":"","ucode":"157A771F326C45","user_header":"https://static001.geekbang.org/account/avatar/00/18/54/36/1843a5f1.jpg","comment_is_top":false,"comment_ctime":1581779752,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581779752","product_id":100017301,"comment_content":"我理解的好后缀法则：其实是跟坏字符法则类似。<br>1. 在模式串里面查找，好后缀以及好后缀的子串，如果查找成功，就移动相应的距离。（跟坏字符法则中，在模式串里面查找坏字符串的位置，查找成功移动相应距离）<br>2. 如果模式串里面查找不成功，移动这个模式串的长度（跟坏字符法则里面，查找不成功，直接跳转模式串的长度）。<br>最大的不同：在于好后缀是一个字符串，要匹配其子串和本身，坏字符串法则，只是单个字符，只需要匹配单个字符情况。","like_count":0},{"had_liked":false,"id":178581,"user_name":"Geek_94adb8","can_delete":false,"product_type":"c1","uid":1638187,"ip_address":"","ucode":"B142F473E1A0B3","user_header":"","comment_is_top":false,"comment_ctime":1581751602,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1581751602","product_id":100017301,"comment_content":"“如果好后缀在模式串中不存在可匹配的子串，那在我们一步一步往后滑动模式串的过程中，只要主串中的{u}与模式串有重合，那肯定就无法完全匹配。但是当模式串滑动到前缀与主串中{u}的后缀有部分重合的时候，并且重合的部分相等的时候，就有可能会存在完全匹配的情况。”<br>这一段可以不要，容易误解。","like_count":0,"discussions":[{"author":{"id":1745775,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/a3/6f/250520f2.jpg","nickname":"马建伟","note":"","ucode":"EC4F32B8E3A2D2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":193196,"discussion_content":"其中的“只要主串中的{u}与模式串有重合，那肯定就无法完全匹配” 这句是不是有笔误呢？是这个意思吧：“只要主串中的{u}与模式串没有重合，那肯定就无法完全匹配”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583137195,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178352,"user_name":"smiler","can_delete":false,"product_type":"c1","uid":1090136,"ip_address":"","ucode":"B10D1DDEA74165","user_header":"https://static001.geekbang.org/account/avatar/00/10/a2/58/066b8005.jpg","comment_is_top":false,"comment_ctime":1581667444,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581667444","product_id":100017301,"comment_content":"请问老师，ASCII 码的范围不是 0--127 吗，散列表的大小为什么要用 256 而不是 128？","like_count":0},{"had_liked":false,"id":178032,"user_name":"刘","can_delete":false,"product_type":"c1","uid":1327177,"ip_address":"","ucode":"BEBCC6874600BD","user_header":"https://static001.geekbang.org/account/avatar/00/14/40/49/7436c252.jpg","comment_is_top":false,"comment_ctime":1581575578,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581575578","product_id":100017301,"comment_content":"如果好后缀在模式串中不存在可匹配的子串，那在我们一步一步往后滑动模式串的过程中，只要主串中的{u}与模式串有重合，那肯定就无法完全匹配。<br><br>不存在怎么重合？？<br>有重合为什么无法匹配？","like_count":0},{"had_liked":false,"id":177233,"user_name":"lcp","can_delete":false,"product_type":"c1","uid":1147461,"ip_address":"","ucode":"3C9975BFF7654E","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/45/981ac8ab.jpg","comment_is_top":false,"comment_ctime":1581328892,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581328892","product_id":100017301,"comment_content":"现在，我们要引入最关键的变量 suffix 数组。suffix 数组的下标 k，表示后缀子串的长度，下标对应的数组值存储的是，在模式串中跟好后缀{u}相匹配的子串{u*}的起始下标值。这句话不好理解，我举一个例子。<br>---<br><br>一直没看懂这句话跟例子怎么对于起来，不明白为什么例子中 suffix[4]=-1, suffix[5]=-1。","like_count":0},{"had_liked":false,"id":176281,"user_name":"短迪大魔王","can_delete":false,"product_type":"c1","uid":1236079,"ip_address":"","ucode":"37E8117E0495B8","user_header":"https://static001.geekbang.org/account/avatar/00/12/dc/6f/5d86dbe9.jpg","comment_is_top":false,"comment_ctime":1581005505,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581005505","product_id":100017301,"comment_content":"suffix数据结构精妙绝伦，把一个串编码串长度对应初始点的位置，通过相等包含的数学关系找到找到前面需要移动的距离。<br>人工智能也是在编码，机器学习把特征编码成可以处理，机器处理的好的编码，深度学习则是构建网络让模型自己编码能力更强。<br>后面的有权图搜索最短路径老师说的非常好，建模过程就是数据结构的过程。老师讲的非常好！","like_count":0},{"had_liked":false,"id":176277,"user_name":"短迪大魔王","can_delete":false,"product_type":"c1","uid":1236079,"ip_address":"","ucode":"37E8117E0495B8","user_header":"https://static001.geekbang.org/account/avatar/00/12/dc/6f/5d86dbe9.jpg","comment_is_top":false,"comment_ctime":1581005069,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581005069","product_id":100017301,"comment_content":"强烈建议大家看python的代码，不明白的地方对着文稿debug，这个算法的suffix数据结构实在是精妙绝伦","like_count":0},{"had_liked":false,"id":174507,"user_name":"抱小星","can_delete":false,"product_type":"c1","uid":1504652,"ip_address":"","ucode":"BA7B0DAFDA4AF5","user_header":"https://static001.geekbang.org/account/avatar/00/16/f5/8c/82fb5890.jpg","comment_is_top":false,"comment_ctime":1580261155,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1580261155","product_id":100017301,"comment_content":"其实从逻辑上来看，这个算法只能说&quot;复杂&quot;而不是&quot;难&quot;，逻辑条目比较多，两条判断并行，为的是最大化匹配效率。代码简短，是逻辑推理的结果，理论复杂，实现不难。这个算法和RK复杂度一样，但是不会出现RK算法时间复杂度退化的情况，比较适合大型字符匹配应用。","like_count":0},{"had_liked":false,"id":173701,"user_name":"秀秀","can_delete":false,"product_type":"c1","uid":1145162,"ip_address":"","ucode":"9D4D327324570B","user_header":"https://static001.geekbang.org/account/avatar/00/11/79/4a/10348395.jpg","comment_is_top":false,"comment_ctime":1579663833,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579663833","product_id":100017301,"comment_content":"为啥后缀子串一定要匹配到前缀子串呢？<br><br>如果不是前缀子串，移动之后，不能从第一位开始就匹配上，移动也是白忙活","like_count":0},{"had_liked":false,"id":173696,"user_name":"秀秀","can_delete":false,"product_type":"c1","uid":1145162,"ip_address":"","ucode":"9D4D327324570B","user_header":"https://static001.geekbang.org/account/avatar/00/11/79/4a/10348395.jpg","comment_is_top":false,"comment_ctime":1579662676,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579662676","product_id":100017301,"comment_content":"对于串 dabcab <br>suffix 数组和 prefix 数组的计算过程  j=-1的判断不成立啊<br><br>是不是应该<br>if (suffix[k] != -1) prefix[k] = true;","like_count":0},{"had_liked":false,"id":170859,"user_name":"敲键盘的人","can_delete":false,"product_type":"c1","uid":1232210,"ip_address":"","ucode":"59AFFFE9DA5B4E","user_header":"https://static001.geekbang.org/account/avatar/00/12/cd/52/a2478536.jpg","comment_is_top":false,"comment_ctime":1578741633,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578741633","product_id":100017301,"comment_content":"计算suffix和prefix这两个数组的时候的方法也太巧妙了吧，正常想根本想不到啊","like_count":0},{"had_liked":false,"id":170352,"user_name":"注定非凡","can_delete":false,"product_type":"c1","uid":1113597,"ip_address":"","ucode":"80673056E131B7","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/fd/326be9bb.jpg","comment_is_top":false,"comment_ctime":1578576896,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1578576896","product_id":100017301,"comment_content":"BM（Boyer-Moore）算法，是一种非常高效的字符匹配算法，有实验统计他的性能是著名的KMP算法的3到4倍。BM算法的原理复杂<br>\t1，BM算法的核心思想<br>将模式串和主串的匹配过程，看作模式串在主串中不停地往后滑动。当遇到不匹配的字符时，BF算法和RK算法的做法是，模式串往后滑动一位，然后从模式串的第一个字符开始重新匹配。<br><br>BM算法，本质上就是在寻找当模式串不匹配时，可以将模式串往后多滑动几位多的规律，提高匹配的效率<br>\t2，BM算法原理分析<br>\t\t&gt;1，BM算法包含两部分，分别是坏字符规则（bad character rule）和好后缀规则（good suffix shift）<br>\t\t&gt;2，坏字符规则：<br>①：在BF，RK规则中，在匹配的过程中，都是按模式串的下标从小到大的顺序，依次与主串中的字符进行匹配的。这种匹配顺序比较符合我们的思维习惯。<br>②：BM算法的匹配顺序比较特别，它是按照模式串下标从大到小的顺序，倒着匹配<br>③：从模式串的末尾往前倒着匹配，当我们发现某个字符没法匹配的时候，这个没有匹配的字符叫做坏字符（坏主串的字符）。<br>④：坏字符c在模式串中查找，发现模式串中并不存在这个字符，即，字符c与模式串中的任何字符都不可能匹配。这个时候就可以将模式串直接往后滑动三位，将模式串滑动到c后面的位置，再次从模式串的末尾字符开始比较。<br> <br>⑤：这次发现模式串中最后一个字符d，还是无法跟主串中a匹配，但此时不能将模式串往后滑动三位。因为坏字符a在模式串中是存在的，模式串中下标是0的位置也是字符a。<br><br>⑥：当反生不匹配时，我们把坏字符对应的模式串中的字符下标记作si。如果坏字符在模式串中存在，我们把这个坏字符在模式串中的下标记作xi。如果不存在记作-1。模式串往后移动的位数就等于si-xi。<br><br>⑦：利用坏字符规则，BM算法在最好情况先的时间复杂度非常低，是O(n&#47;m)。<br>⑧：不过，单纯使用坏字符规则还是不够得，因为根据si-xi计算出来的移动位数，有可能是负数，如主串是aaaaaaaaaaaaaaaa，模式串是baaaa。不但不会向后滑动模式串，还有可能倒退。所以BM算法还需要用到“好后缀规则”。<br><br>&gt;3，好后缀规则<br>①：好后缀规则实际上跟坏字符规则的思路很类似。<br> <br>②：将已经匹配的bc叫做好后缀，记作{u}。我们那它在模式串中查找，如果找打了另一个跟{u}相匹配的字串{u*}，那我们就将模式串滑动到子串{u*}与主串中{u}对齐的位置。<br> <br>③：如果在模式串中找不到另一个等于{u}的子串，将模式串，滑动到主串中{u}的后面，因为之前的任何一次往后滑动，都没有匹配主串中{u}的情况。<br>④：但模式串中国不存在等于{u}的子串时，不能直接将模式串滑动到主串{u}的后面。因为这会导致错过模式串和主串可以匹配的情况。<br> <br>⑤：如果好后缀在模式串中不存在可匹配的子串，那么一步步往后滑动模式串的过程中，只要主串中的{u}与模式串有重合，那肯定就无法完全匹配。但是当模式串滑动到前缀与主串中{u}的后缀有重合的时候，并且重合的部分相等的时候，就可能存在完全匹配的情况。<br> <br>所以，针对这种情况，不仅要看好后缀在模式串中，是否有另一个匹配的子串，还要考察好后缀的后缀子串，是否存在跟模式串的前缀子串匹配的。<br><br>⑥：所谓某个字符串s的后缀子串，就是最后一个字符跟s对齐的子串，比如abc的后缀子串就包括c，bc。所谓前缀子串，找一个最长并且能跟模式串的前缀子串匹配的，假设是{v}，然后将模式串滑动到如图所示的位置。<br> <br>\t\t&gt;4，好后缀和坏字符选用标准<br>①：可以分别计算好后缀和坏字符往后滑动的位数，然后取两个 中最大的，作为模式串往后滑动的位数。<br><br>\t4，BM算法代码实现<br>》1，“坏字符规则”本身不难理解。当遇到坏字符时，要计算王后移动的位数si-xi，其中xi的计算是重点，该如何查找坏字符在模式串中国出现的位置呢？<br>》2，如果那坏字符，在模式串中顺序遍历查找，效率低下影响整个算法的性能。使用散列表将模式串中的每个字符及其下标都存在散列表中。这样就可以快速找到坏字符在模式串中的位置了。<br>\t\t》3， <br>\t\t》4，好后缀的处理规则中最核心的内容：<br>\t在模式中，查找跟好后缀匹配的另一个子串；<br>\t在好后缀的后缀子串中，查找最长的，能跟模式前缀子串匹配的后缀子串；<br>》5，在不考虑效率的情况下，这两个操作都可以用“暴力”的匹配查找方式解决。但若要BM算法的效率高，需要：<br>\t因为好后缀也是模式串本身的后缀子串，所以，可以在模式串和主串正式匹配之前，通过预处理模式串，预先计算好模式串的每个后缀子串。对应的另一一个可匹配子串的位置。<br><br> <br><br><br>","like_count":0},{"had_liked":false,"id":169523,"user_name":"梦想的优惠券","can_delete":false,"product_type":"c1","uid":1257418,"ip_address":"","ucode":"D3B44F6C618CA7","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/ca/cbce6e94.jpg","comment_is_top":false,"comment_ctime":1578369894,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1578369894","product_id":100017301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":169393,"user_name":"小文","can_delete":false,"product_type":"c1","uid":1177540,"ip_address":"","ucode":"974071FAA5F173","user_header":"https://static001.geekbang.org/account/avatar/00/11/f7/c4/bd7dd30a.jpg","comment_is_top":false,"comment_ctime":1578326024,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578326024","product_id":100017301,"comment_content":"烧脑了 先跳过了","like_count":0},{"had_liked":false,"id":168188,"user_name":"Allen_","can_delete":false,"product_type":"c1","uid":1677187,"ip_address":"","ucode":"CA5E00E4644CD5","user_header":"https://static001.geekbang.org/account/avatar/00/19/97/83/845b48e2.jpg","comment_is_top":false,"comment_ctime":1578030656,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578030656","product_id":100017301,"comment_content":"这节课上了好迷醉，特别被这个“好后缀”带出了戏","like_count":0},{"had_liked":false,"id":167633,"user_name":"朱坤","can_delete":false,"product_type":"c1","uid":1098637,"ip_address":"","ucode":"65224DA2456EAB","user_header":"https://static001.geekbang.org/account/avatar/00/10/c3/8d/214ad614.jpg","comment_is_top":false,"comment_ctime":1577883947,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577883947","product_id":100017301,"comment_content":"老师，应该也可以只用坏字符规则来实现BM算法吧？因为之所以Si - Xi 会产生负数，是因为用了bs数组这项优化。如果每次Xi的计算都是从 Si-1 开始一直遍历到 0，那就不会有负数的可能。。。而且就算使用bs数组，也可以在计算出Si-Xi时判断下是否为负数，如果为负数位移用1，就好了？ <br><br>但我估算不出这样做以后的，性能效果如何。。","like_count":0},{"had_liked":false,"id":167616,"user_name":"朱坤","can_delete":false,"product_type":"c1","uid":1098637,"ip_address":"","ucode":"65224DA2456EAB","user_header":"https://static001.geekbang.org/account/avatar/00/10/c3/8d/214ad614.jpg","comment_is_top":false,"comment_ctime":1577879566,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577879566","product_id":100017301,"comment_content":"这段代码中，y是不是初始化为1比较合适，否则坏后缀算出是负数的话，这边就变成了 i = i+0了。变成死循环了，y为1的话，就保证至少移动一位。<br>```<br>int x = j - bc[(int)a[i+j]]; <br>int y = 0; <br>if (j &lt; m-1) { &#47;&#47; 如果有好后缀的话 <br>  y = moveByGS(j, m, suffix, prefix);<br>} <br>i = i + Math.max(x, y);<br>```","like_count":0},{"had_liked":false,"id":167545,"user_name":"SteveYang","can_delete":false,"product_type":"c1","uid":1754829,"ip_address":"","ucode":"C42BCA4F40A9EF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKCbnOvEatUN4ysE2cl6zJNoAJVXXuQVhicQ1jxh6Z2Towrmmc1I6PndaicuQQ0RyyJPyJQicv4tSib9Q/132","comment_is_top":false,"comment_ctime":1577852951,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577852951","product_id":100017301,"comment_content":"String. Indexof查找函数应该用的是kmp算法，与bm算法思路有点像，不过都不好理解。","like_count":0},{"had_liked":false,"id":166570,"user_name":"一枝梅","can_delete":false,"product_type":"c1","uid":1121677,"ip_address":"","ucode":"7DCE43B638EA6A","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/8d/9717e593.jpg","comment_is_top":false,"comment_ctime":1577504469,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577504469","product_id":100017301,"comment_content":"这个好后缀子串有点难懂啊！","like_count":0},{"had_liked":false,"id":166529,"user_name":"NEVER SETTLE","can_delete":false,"product_type":"c1","uid":1101894,"ip_address":"","ucode":"9C86BDAFDBF768","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/46/1a9229b3.jpg","comment_is_top":false,"comment_ctime":1577467390,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577467390","product_id":100017301,"comment_content":"“如果好后缀在模式串中不存在可匹配的子串，那在我们一步一步往后滑动模式串的过程中，只要主串中的{u}与模式串有重合，那肯定就无法完全匹配。”<br>这句说的啥意思啊，没懂","like_count":0},{"had_liked":false,"id":165104,"user_name":"Geek_342489","can_delete":false,"product_type":"c1","uid":1477359,"ip_address":"","ucode":"40610664021607","user_header":"https://static001.geekbang.org/account/avatar/00/16/8a/ef/ac2937ac.jpg","comment_is_top":false,"comment_ctime":1577161859,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577161859","product_id":100017301,"comment_content":"没人对suffix和prefix数组的大小有疑问吗？大小应该比模式串大一   <br>int[] suffix = new int[m+1];<br>boolean[] prefix = new boolean[m+1];","like_count":0},{"had_liked":false,"id":164644,"user_name":"seven","can_delete":false,"product_type":"c1","uid":1180307,"ip_address":"","ucode":"55CE5F60051F89","user_header":"https://static001.geekbang.org/account/avatar/00/12/02/93/44672231.jpg","comment_is_top":false,"comment_ctime":1577064596,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1577064596","product_id":100017301,"comment_content":"<br>private static final int SIZE = 256; &#47;&#47; 全局变量或成员变量<br>private void generateBC(char[] b, int m, int[] bc) {<br>  for (int i = 0; i &lt; SIZE; ++i) {<br>    bc[i] = -1; &#47;&#47; 初始化bc<br>  }<br>  for (int i = 0; i &lt; m; ++i) {<br>    int ascii = (int)b[i]; &#47;&#47; 计算b[i]的ASCII值<br>    bc[ascii] = i;<br>  }<br>}<br>模式串中存在相同的字符，计算的ascii被覆盖，会不会有影响","like_count":0},{"had_liked":false,"id":164577,"user_name":"book尾汁","can_delete":false,"product_type":"c1","uid":1446375,"ip_address":"","ucode":"AE2B8DFC643ACC","user_header":"https://static001.geekbang.org/account/avatar/00/16/11/e7/044a9a6c.jpg","comment_is_top":false,"comment_ctime":1577030417,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1577030417","product_id":100017301,"comment_content":"第四天<br> BM算法：<br> 坏字符规则算法：<br>模式式串与主串进行比较，比较时从模式串的最后一个字符从后往前比较，第一个不相同的字符为坏字符，记其在主串中的下标为i，在模式串中的下标为j，模式串长度为m，在模式串中找到最后的坏字符的坐标x，如果没有下标记为-1，则模式串需向后移动j-x位，再进行比较。<br> 好后缀规则算法：<br> 1 模式串与主串匹配的下标位置[x,m-1],长度为m-x，预处理好后缀子串中各子串中最后一个在模式串中出现的位置，以及好后缀子串是否与模式前缀子串相符<br> 2 比较的时候，好后缀子串长度大于0，则找出模式串中除好后缀外与好后缀匹配的最后一个位置x，如果存在的话，则向后移动 m-x-1位。<br> 3 如果不存在完全与好后缀一致的子串，则找出与好后缀子串匹配的最长子串在模式串中除了好后缀外的最后位置j。<br> 4 如果其刚好为前缀子串，则模式串向后移动j个单位，否则移动m个单位。，如果其刚好为前缀子串，则模式串向后移动j个单位，否则移动m个单位。","like_count":0},{"had_liked":false,"id":162625,"user_name":"luxuabc","can_delete":false,"product_type":"c1","uid":1642257,"ip_address":"","ucode":"73BAC7A3276743","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJMW3f6jeDLDVaZODBwJmZOrHRT31bZ0bHLibTRF8xBmfQ6PjfbmqWbw5P92vcEFMAoYSkV4Vt1iarg/132","comment_is_top":false,"comment_ctime":1576568573,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576568573","product_id":100017301,"comment_content":"这个算法处处透露智慧","like_count":0},{"had_liked":false,"id":161572,"user_name":"Sid","can_delete":false,"product_type":"c1","uid":1115041,"ip_address":"","ucode":"0461B574B2736B","user_header":"https://static001.geekbang.org/account/avatar/00/11/03/a1/e6a0f60b.jpg","comment_is_top":false,"comment_ctime":1576235327,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576235327","product_id":100017301,"comment_content":"模式串求公共后缀子串的方法generateGS，这种实现思路谁想出来的，太牛了，我感觉拿个刀架在脖子上我也想不出来，只能傻傻得 for 循环 k=1,k=2..这样一遍遍去找有没有匹配的。<br>","like_count":0},{"had_liked":false,"id":161100,"user_name":"ub8","can_delete":false,"product_type":"c1","uid":1481811,"ip_address":"","ucode":"0D937C3EAEB781","user_header":"https://static001.geekbang.org/account/avatar/00/16/9c/53/ade0afb0.jpg","comment_is_top":false,"comment_ctime":1576118869,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576118869","product_id":100017301,"comment_content":"真他妈的难啊","like_count":0},{"had_liked":false,"id":161022,"user_name":"spark","can_delete":false,"product_type":"c1","uid":1264022,"ip_address":"","ucode":"D84C36D957ECCF","user_header":"https://static001.geekbang.org/account/avatar/00/13/49/96/7523cdb6.jpg","comment_is_top":false,"comment_ctime":1576081925,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576081925","product_id":100017301,"comment_content":"想向大拿们请教一个关于字符串的问题:<br><br>Given a string of length 1048576, find the position of the longest substring made from identical characters. It is guaranteed that there is only one such substring and its length is 8192. You are not allowed to peek inside the string, however you can call an external function &quot;getMaxLength(int startPosition, int endPosition)&quot; which will return the longest number of identical consecutive characters found within the interval. Describe your solution.<br><br>请问谁有没有比较好的高效的解决思路?<br>谢谢<br>","like_count":0},{"had_liked":false,"id":160879,"user_name":"Victor Sun","can_delete":false,"product_type":"c1","uid":1321499,"ip_address":"","ucode":"D2AD631E849662","user_header":"https://static001.geekbang.org/account/avatar/00/14/2a/1b/a99f4e1c.jpg","comment_is_top":false,"comment_ctime":1576052989,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576052989","product_id":100017301,"comment_content":"本讲的BM，和信息检索领域的BM25算法有什么联系吗？","like_count":0},{"had_liked":false,"id":160625,"user_name":"倡印","can_delete":false,"product_type":"c1","uid":1455958,"ip_address":"","ucode":"4F53AA5D017D89","user_header":"https://static001.geekbang.org/account/avatar/00/16/37/56/11068390.jpg","comment_is_top":false,"comment_ctime":1575988575,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575988575","product_id":100017301,"comment_content":"我觉得最神奇的还是计算suffix，prefix数组那里。太巧妙了，真想不到发明算法的人是通过什么步骤推导出来的，这真想知道。<br>其实BM算法核心就是每个字符串比较，但是比较是有原则的。就是每次比较之后移动的距离：通俗的总结就是最近，最优，且不移动过头原则。按照这个原则就导致出了有俩种判断标准：好后缀规则；坏后缀规则。<br>还有就是课程里实现的代码是只能匹配一个串的，多个要稍加修改。","like_count":0},{"had_liked":false,"id":160467,"user_name":"Swing","can_delete":false,"product_type":"c1","uid":1330065,"ip_address":"","ucode":"55FCA9ECEFBBEB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","comment_is_top":false,"comment_ctime":1575956675,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575956675","product_id":100017301,"comment_content":"老师，这个BM算法 只能查找 第一个匹配模式串的主串位置啊。。<br><br>那 一般的文本处理软件比如 notepad++ 那种 全文正则搜索的 得是啥算法啊。。。","like_count":0},{"had_liked":false,"id":160466,"user_name":"知行合一","can_delete":false,"product_type":"c1","uid":1521486,"ip_address":"","ucode":"2B8E634FC4CFB7","user_header":"https://static001.geekbang.org/account/avatar/00/17/37/4e/5c3153b2.jpg","comment_is_top":false,"comment_ctime":1575956365,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575956365","product_id":100017301,"comment_content":"看三遍才大概看懂了，但还是写不出来，信息量太大，多看几遍结合看评论才看懂","like_count":0},{"had_liked":false,"id":160010,"user_name":"rookie","can_delete":false,"product_type":"c1","uid":1451605,"ip_address":"","ucode":"F23FB0F2CC9AD0","user_header":"https://static001.geekbang.org/account/avatar/00/16/26/55/e72a671e.jpg","comment_is_top":false,"comment_ctime":1575857371,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575857371","product_id":100017301,"comment_content":"老师写得太棒了，看了五遍，终于弄懂了","like_count":0},{"had_liked":false,"id":159401,"user_name":"SmallAnimal","can_delete":false,"product_type":"c1","uid":1085372,"ip_address":"","ucode":"AB80D5975CE29A","user_header":"https://static001.geekbang.org/account/avatar/00/10/8f/bc/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1575615316,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575615316","product_id":100017301,"comment_content":"我是看大话数据结构看到KMP的时候看蒙了，然后就想看看这个课里面肯定也有这个，然后就看了字符串的匹配，这个BM循序渐进，虽然一开始不懂，但是可以慢慢看下去，大话数据结构那个计算next[] 这个太跳跃，看完这个BM相信再看KMP应该好一点","like_count":0},{"had_liked":false,"id":158907,"user_name":"freesocean","can_delete":false,"product_type":"c1","uid":1529210,"ip_address":"","ucode":"CAD4C80CF569D3","user_header":"https://static001.geekbang.org/account/avatar/00/17/55/7a/d44df1d6.jpg","comment_is_top":false,"comment_ctime":1575476379,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575476379","product_id":100017301,"comment_content":"看了好几遍，加上留言区@ME的留言，看懂了。suffix和prefix数组的作用是当做预处理的字典查阅，所以计算过程考虑了各种长度的好后缀情况，不要和具体的举例混淆，不然很难懂。 算法太巧妙了。","like_count":0},{"had_liked":false,"id":154557,"user_name":"luoxi","can_delete":false,"product_type":"c1","uid":1028800,"ip_address":"","ucode":"CDFF33D33932E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b2/c0/f77cdaeb.jpg","comment_is_top":false,"comment_ctime":1574479781,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574479781","product_id":100017301,"comment_content":"很受用，老师","like_count":0},{"had_liked":false,"id":154410,"user_name":"大明的微信","can_delete":false,"product_type":"c1","uid":1644922,"ip_address":"","ucode":"687341327E704B","user_header":"https://static001.geekbang.org/account/avatar/00/19/19/7a/67e245ca.jpg","comment_is_top":false,"comment_ctime":1574424381,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574424381","product_id":100017301,"comment_content":"大佬，请教json串里面替换部分子串问题。两个json结构相同，a串里面是完整的kv，b串里面只有部分kv，然后要用b里面有的替换到对应a里面的kv，最后返回新的a。<br><br>a不是一层，也许是两层，或者三层。<br><br>请问这种问题适合使用什么算法解决。目前我是转成hashmap，然后递归替换hashmap中元素。<br>最后map转回json字符串来做的。<br><br>这样做明显时间空间复杂度都比较高。（用的Java，org.apache.json的包）<br><br>请问有什么算法比较适合解决这类问题吗？<br><br>","like_count":0},{"had_liked":false,"id":153986,"user_name":"hi 张凯🌊","can_delete":false,"product_type":"c1","uid":1488700,"ip_address":"","ucode":"A513DC0FBF3347","user_header":"https://static001.geekbang.org/account/avatar/00/16/b7/3c/6a762ae3.jpg","comment_is_top":false,"comment_ctime":1574342913,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1574342913","product_id":100017301,"comment_content":"老师您好，针对坏字符使用散列表存储那里有一个地方不理解，因为您采用的方法只记录了字符最后出现的位置，那么坏字符假设同时存在于好后缀里面，那么在主串中查询坏字符在模式串中的位置下标就会返回一个错误的数值且后移位数肯定为负数。不知道我理解的对不对，请老师解答下。<br>举例（主串A模式串B）：<br>A：a b c a d c a f a d g<br>B：s a d s d c a<br>此时A(4)=a 为坏字符 对应的Si=4 <br>若采用散列表将模式串下标全部存储 则bc(a)=6而不是1<br>此时Xi=6 那么后移位数必然是负数<br>还是说老师举的例子就是不考虑这种情况吗？","like_count":0,"discussions":[{"author":{"id":1488700,"avatar":"https://static001.geekbang.org/account/avatar/00/16/b7/3c/6a762ae3.jpg","nickname":"hi 张凯🌊","note":"","ucode":"A513DC0FBF3347","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":55154,"discussion_content":"或者说这个算法正是这样设计的，在这种负数的场景下就会去使用好后缀规则计算向后的滑动次数吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574343618,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":150828,"user_name":"牛味浓龙魏流","can_delete":false,"product_type":"c1","uid":1605322,"ip_address":"","ucode":"FB58F144635B2A","user_header":"https://static001.geekbang.org/account/avatar/00/18/7e/ca/0689da8f.jpg","comment_is_top":false,"comment_ctime":1573614102,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573614102","product_id":100017301,"comment_content":"我们要引入最关键的变量 suffix 数组。suffix 数组的下标 k，表示后缀子串的长度，下标对应的数组值存储的是，在模式串中跟好后缀{u}相匹配的子串{u*}的起始下标值。这句话不好理解，我举一个例子<br><br>那张图里的例子没太明白。。cab在模式串中有两个匹配的，为什么suffix[3]=0，bcab和abcab在模式串中都能匹配上，为什么都是-1呢<br>","like_count":0},{"had_liked":false,"id":150466,"user_name":"anker","can_delete":false,"product_type":"c1","uid":1218937,"ip_address":"","ucode":"6EDF1FB9D45238","user_header":"https://static001.geekbang.org/account/avatar/00/12/99/79/74d4f24f.jpg","comment_is_top":false,"comment_ctime":1573541266,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573541266","product_id":100017301,"comment_content":"坏字符规则：<br>1.从后往前找到第一个不匹配的坏字符<br>2.找到后，在模式串中匹配坏字符；找到的话直接移动匹配串到到相应字符对应位置。<br>3.找不到的话，直接移动跳过坏字符。<br>好后缀规则：<br>1.从后往前匹配连续匹配的后缀，成为好后缀 u<br>2.在模式串中找好后缀 u* 的情况：找到则直接移动匹配过去<br>3.找不到则尝试往前移动，寻找 u 的后缀与模式串前缀匹配情况，匹配到则停止","like_count":0},{"had_liked":false,"id":149696,"user_name":"剑八","can_delete":false,"product_type":"c1","uid":1297630,"ip_address":"","ucode":"0A09F41DB8A4E7","user_header":"https://static001.geekbang.org/account/avatar/00/13/cc/de/e28c01e1.jpg","comment_is_top":false,"comment_ctime":1573347603,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573347603","product_id":100017301,"comment_content":"牛，讲的很好","like_count":0},{"had_liked":false,"id":145018,"user_name":"James","can_delete":false,"product_type":"c1","uid":1134861,"ip_address":"","ucode":"48B0F2A334D1C1","user_header":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","comment_is_top":false,"comment_ctime":1572161904,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572161904","product_id":100017301,"comment_content":"后缀子串,前缀子串举得例子...好像在图中都没有找到.....","like_count":0},{"had_liked":false,"id":144327,"user_name":"冰风落叶","can_delete":false,"product_type":"c1","uid":1128059,"ip_address":"","ucode":"E4DE480B95A17D","user_header":"https://static001.geekbang.org/account/avatar/00/11/36/7b/3788ca13.jpg","comment_is_top":false,"comment_ctime":1571898404,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571898404","product_id":100017301,"comment_content":"坏字符规则那里，b是坏字符，si = 0 , xi = -1 , si - xi = 1，这也不是负数啊，老师能解释一下吗？<br>aaaaaaaa<br>baaa","like_count":0},{"had_liked":false,"id":143887,"user_name":"Lincoln","can_delete":false,"product_type":"c1","uid":1365798,"ip_address":"","ucode":"9AA8A2F6263AE1","user_header":"https://static001.geekbang.org/account/avatar/00/14/d7/26/502f2f0a.jpg","comment_is_top":false,"comment_ctime":1571803276,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571803276","product_id":100017301,"comment_content":"貌似Sunday算法比bm算法还要快，可很多查找功能都采用bm算法，比如GNU grep，为什么Sunday算法没有bm那么出名呢？是因为通用性不够？","like_count":0},{"had_liked":false,"id":138589,"user_name":"zaab","can_delete":false,"product_type":"c1","uid":1683063,"ip_address":"","ucode":"EE846895FF0C85","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/QYKSUV20DMgBHAPLfgngdw4N8FHRCSBLCJueVRu9Ya1Ba2x4icx70zoVVFOZtG1K6TkHj5CFbuztQhRFyCjWXHQ/132","comment_is_top":false,"comment_ctime":1570351383,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570351383","product_id":100017301,"comment_content":"感觉先以最直接的想法去按照思路实现一下，再看老师优化后的代码印象会比较深刻。<br>&#47;&#47;我很菜，错了请指出来。。。<br>&#47;&#47; 只要使用了坏规则的   <br> public static int bm(String s, String p){<br>        for(int i = 0; i &lt; s.length() - p.length() + 1; ){<br>            int i1 = badCharacterRule(s, p, i);<br>            if(i == i1){<br>                return i;<br>            }else{<br>                i = i1;<br>            }<br>        }<br>        return -1;<br>    }<br><br>    public static int badCharacterRule(String s, String p, int index) {<br>        int pIndex = p.length() - 1;<br><br>        for(int i = index + p.length() - 1; i &gt;= index; i--){<br>            if(s.charAt(i) == p.charAt(pIndex)){<br>                pIndex--;<br>            }else{<br>                &#47;&#47;这个坏的字符串在p串的哪一个位置，<br>                int badCharIndex = getCharIndex(p, s.charAt(i));<br>                if(badCharIndex &lt; 0){<br>                    return badCharIndex;<br>                }else{<br>                    i = i  - badCharIndex;<br>                    return i;<br>                }<br>            }<br>        }<br><br>        return index;<br>    }<br><br>    public static int getCharIndex(String p, char badChar){&#47;&#47;这一步就是通过散列表映射优化的地方<br>        for(int i = 0; i &lt; p.length(); i ++){<br>            if(p.charAt(i) == badChar){<br>                return i;<br>            }<br>        }<br>        return -1;<br>    }","like_count":0},{"had_liked":false,"id":137909,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1569914705,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569914705","product_id":100017301,"comment_content":"终于看懂了，特么大国庆的，坐在家里看了几个小时，确实有点复杂度，脑容量没那么大，看着后边的，前提忘记了，反复看反复记，思维活跃起来，才可以！","like_count":0},{"had_liked":false,"id":137461,"user_name":"陌臣","can_delete":false,"product_type":"c1","uid":1643898,"ip_address":"","ucode":"EC1B2DA7483F11","user_header":"https://static001.geekbang.org/account/avatar/00/19/15/7a/db9879e1.jpg","comment_is_top":false,"comment_ctime":1569746829,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569746829","product_id":100017301,"comment_content":"关于BM算法还没懂的小伙伴可以看这篇博客里面举的例子，比较通俗易懂。http:&#47;&#47;www.ruanyifeng.com&#47;blog&#47;2013&#47;05&#47;boyer-moore_string_search_algorithm.html","like_count":0},{"had_liked":false,"id":135940,"user_name":"junjun","can_delete":false,"product_type":"c1","uid":1547322,"ip_address":"","ucode":"1F7EE146B9BE04","user_header":"https://static001.geekbang.org/account/avatar/00/17/9c/3a/bfd73920.jpg","comment_is_top":false,"comment_ctime":1569310191,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569310191","product_id":100017301,"comment_content":"其实没那么难懂，结果看了前面，感觉好怕，不建议在前面说本章很难，很容易让人很慌。","like_count":0},{"had_liked":false,"id":135297,"user_name":"一叶知秋","can_delete":false,"product_type":"c1","uid":1196664,"ip_address":"","ucode":"070F6B392E34D0","user_header":"https://static001.geekbang.org/account/avatar/00/12/42/78/19195183.jpg","comment_is_top":false,"comment_ctime":1569120382,"is_pvip":true,"replies":[{"id":"51934","content":"ipad paper","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1569191350,"ip_address":"","comment_id":135297,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1569120382","product_id":100017301,"comment_content":"我想请问一下，图是用什么工具画的呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468130,"discussion_content":"ipad paper","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569191350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133714,"user_name":"静静聆听","can_delete":false,"product_type":"c1","uid":1263932,"ip_address":"","ucode":"0A8600CB928EFE","user_header":"https://static001.geekbang.org/account/avatar/00/13/49/3c/5d54c510.jpg","comment_is_top":false,"comment_ctime":1568640584,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568640584","product_id":100017301,"comment_content":"就粗略看了下，感觉此生没有用到这个算法的机会","like_count":0},{"had_liked":false,"id":133544,"user_name":"色即是空","can_delete":false,"product_type":"c1","uid":1189638,"ip_address":"","ucode":"46B8975ED087B8","user_header":"https://static001.geekbang.org/account/avatar/00/12/27/06/7ab75a5b.jpg","comment_is_top":false,"comment_ctime":1568601151,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568601151","product_id":100017301,"comment_content":"秉承时间紧，任务重，不想加班的原则，写个字少的学习总结吧！<br>坏字符就一个字符，好后缀是一串，都是发现不匹配终止，往前跳，过滤掉不必要的比较；好后缀由于是批处理，原子是字符，对于跳过头的情况做了处理显得复杂。<br><br>具体实现又有很多具体的技巧了，那部分是&#47;不是重点？！<br><br>","like_count":0},{"had_liked":false,"id":131855,"user_name":"黑色毛衣","can_delete":false,"product_type":"c1","uid":1135912,"ip_address":"","ucode":"FF7E235F91BA5C","user_header":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","comment_is_top":false,"comment_ctime":1567938065,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567938065","product_id":100017301,"comment_content":"看是能看懂，实际上平时是不会直接使用这种算法的，就是自己写的话，肺经～～","like_count":0},{"had_liked":false,"id":131301,"user_name":"Xinming","can_delete":false,"product_type":"c1","uid":1454945,"ip_address":"","ucode":"F7330DD975D248","user_header":"https://static001.geekbang.org/account/avatar/00/16/33/61/da6d8713.jpg","comment_is_top":false,"comment_ctime":1567697529,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567697529","product_id":100017301,"comment_content":"想问 bc 数组的保存形式是不是会出问题？例如模式串 abcbbc 中第二个 b 被匹配为坏字符时，bc 数组中保存的位置是第三个 b 的位置吧？","like_count":0},{"had_liked":false,"id":131196,"user_name":"指尖流逝","can_delete":false,"product_type":"c1","uid":1005381,"ip_address":"","ucode":"417009F674FAF1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/45/c418ea5c.jpg","comment_is_top":false,"comment_ctime":1567668894,"is_pvip":false,"replies":[{"id":"49796","content":"看看这个：https:&#47;&#47;mp.weixin.qq.com&#47;s&#47;t8z4KQMrTrR3NljtWJm2zg","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1567723533,"ip_address":"","comment_id":131196,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567668894","product_id":100017301,"comment_content":"花了我三个早上。6个小时，已经怀疑智商。。。。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466331,"discussion_content":"看看这个：https://mp.weixin.qq.com/s/t8z4KQMrTrR3NljtWJm2zg","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567723533,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125298,"user_name":"XinghaiVictorStarseaSingHoy星海","can_delete":false,"product_type":"c1","uid":1028923,"ip_address":"","ucode":"1E45557EAAC7D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b3/3b/1104b8e6.jpg","comment_is_top":false,"comment_ctime":1566141284,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1566141284","product_id":100017301,"comment_content":"请假问题:<br>讲实现之前，我们先简单回顾一下，前面讲过好后缀的处理规则中最核心的内容：<br><br>1.在模式串中，查找跟好后缀匹配的另一个子串；<br><br>2.在好后缀的后缀子串中，查找最长的、能跟模式串前缀子串匹配的后缀子串；<br><br>代码实现有做第一点吗？<br>第一点是在模式串中查找子串，就不一定是前缀&#47;后缀吧。看这个moveByGS好像直接上第二点的逻辑了。<br><br>第一点的逻辑，应该是对于每一个好后缀的子串，都尝试去和模式串匹配，这里面不也是一个字符串匹配问题吗?<br>","like_count":0},{"had_liked":false,"id":124030,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1565794330,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565794330","product_id":100017301,"comment_content":"最近几天都在看这篇，死磕，虽然代码还是不能写出来，但每写一次都有新的理解了。","like_count":0},{"had_liked":false,"id":123961,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1565784900,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565784900","product_id":100017301,"comment_content":"其实suffix和preffix的算法就是一个对称结构吧！","like_count":0},{"had_liked":false,"id":123945,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1565783476,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565783476","product_id":100017301,"comment_content":"好后缀规则里边那个preffix和suffix的算法太牛逼了！太巧妙了！赞叹，不过它们的长度应该是m-1吧，虽然定义为m也没事，还有有些循环条件，不应该有=的情况吧","like_count":0},{"had_liked":false,"id":121857,"user_name":"poplar","can_delete":false,"product_type":"c1","uid":1240635,"ip_address":"","ucode":"A768E3DA53EA3F","user_header":"https://static001.geekbang.org/account/avatar/00/12/ee/3b/a0c2d0f1.jpg","comment_is_top":false,"comment_ctime":1565235355,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565235355","product_id":100017301,"comment_content":"    int x = j - bc[(int)a[i+j]];<br>    int y = 0;<br>    if (j &lt; m-1) { &#47;&#47; 如果有好后缀的话<br>      y = moveByGS(j, m, suffix, prefix);<br>    }<br>    i = i + Math.max(x, y);<br>-------------------------------------------------------------<br>感觉这里的y应该初始化为1，因为x可能算出来是负数。","like_count":0},{"had_liked":false,"id":120200,"user_name":"之城","can_delete":false,"product_type":"c1","uid":1252519,"ip_address":"","ucode":"12451253E366A2","user_header":"https://static001.geekbang.org/account/avatar/00/13/1c/a7/6a837523.jpg","comment_is_top":false,"comment_ctime":1564805785,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564805785","product_id":100017301,"comment_content":"我们把 suffix 数组和 prefix 数组的计算过程，...这一段下面的代码有问题吧？第一是因为看不懂。第二是因为某两个大括号之间凭空多了一个i。灵异事件了。。。","like_count":0},{"had_liked":false,"id":120006,"user_name":"DFighting","can_delete":false,"product_type":"c1","uid":1233193,"ip_address":"","ucode":"F3BA2426FF8582","user_header":"https://static001.geekbang.org/account/avatar/00/12/d1/29/1b1234ed.jpg","comment_is_top":false,"comment_ctime":1564753516,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1564753516","product_id":100017301,"comment_content":"一边看完，看到suffix那里实在静不下心来看了，做个标记，下次再战","like_count":0},{"had_liked":false,"id":118135,"user_name":"空也空","can_delete":false,"product_type":"c1","uid":1073533,"ip_address":"","ucode":"56976779192E02","user_header":"https://static001.geekbang.org/account/avatar/00/10/61/7d/1bd071ba.jpg","comment_is_top":false,"comment_ctime":1564278425,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564278425","product_id":100017301,"comment_content":"老师, 好后缀的实现那一块读了几遍还是没理解: &quot;为了避免模式串往后滑动得过头了，我们肯定要存储模式串中最靠后&quot;, 这句话, 比如说b, 匹配字符中, 下标最大的是5, 为什么记的是2呢? 是说要除去第一个匹配的串么?","like_count":0},{"had_liked":false,"id":117343,"user_name":"William","can_delete":false,"product_type":"c1","uid":1346215,"ip_address":"","ucode":"55F5D9DEE485B1","user_header":"https://static001.geekbang.org/account/avatar/00/14/8a/a7/674c1864.jpg","comment_is_top":false,"comment_ctime":1564027177,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1564027177","product_id":100017301,"comment_content":"<br><br>比如主串是 aaaaaaaaaaaaaaaa，模式串是 baaa。不但不会向后滑动模式串，还有可能倒退。<br><br><br>如  aaaaaaaaaaaaaaaa<br><br>    baaa <br>    si=0    xi= 4 所以出现  si-xi=-4负数 是这个意思么? \t<br>   <br>     <br>","like_count":0},{"had_liked":false,"id":114764,"user_name":"小白菜","can_delete":false,"product_type":"c1","uid":1568340,"ip_address":"","ucode":"ACD1267D329B96","user_header":"https://static001.geekbang.org/account/avatar/00/17/ee/54/dac0a6b6.jpg","comment_is_top":false,"comment_ctime":1563380276,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563380276","product_id":100017301,"comment_content":"确实很费脑，看来确实得多看几遍啊！谢谢老师！","like_count":0},{"had_liked":false,"id":113740,"user_name":"Geek_18b741","can_delete":false,"product_type":"c1","uid":1368496,"ip_address":"","ucode":"097BA0C2F44150","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLlztvlBgajZMEph8AvkP2pfoqNCGtYSalIKgrCbCg0MWDZJgJwqVRfWA6cgIoZicL6dKibfK0zjsWg/132","comment_is_top":false,"comment_ctime":1563149726,"is_pvip":false,"replies":[{"id":"41564","content":"你的感受没错。你可以看下这篇文章，能解答你和读者的疑惑：怎么才算真正掌握了一个数据结构或算法？<br>https:&#47;&#47;mp.weixin.qq.com&#47;s&#47;t8z4KQMrTrR3NljtWJm2zg","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1563232536,"ip_address":"","comment_id":113740,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563149726","product_id":100017301,"comment_content":"写一下感受吧。确实看懂了。但是要我自己去分析写一遍，写不出来，估计能抄写出来。一直以为算法都是简洁的。每当我写代码写到逻辑处理非常复杂的，代码段很长的时候，就会怀疑自己写错了，没有找到更好的方法。这是我看到的第一个如此复杂的算法。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458367,"discussion_content":"你的感受没错。你可以看下这篇文章，能解答你和读者的疑惑：怎么才算真正掌握了一个数据结构或算法？\nhttps://mp.weixin.qq.com/s/t8z4KQMrTrR3NljtWJm2zg","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563232536,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":113544,"user_name":"better","can_delete":false,"product_type":"c1","uid":1169063,"ip_address":"","ucode":"AF1DB566EBB8A5","user_header":"https://static001.geekbang.org/account/avatar/00/11/d6/a7/ac23f5a6.jpg","comment_is_top":false,"comment_ctime":1563074213,"is_pvip":false,"replies":[{"id":"41401","content":"可以配合图看一下","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1563141184,"ip_address":"","comment_id":113544,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1563074213","product_id":100017301,"comment_content":"BF 与 RF 算法是【模式串】往后滑动一位，然后从模式串的第一个字符重新匹配；是不是【主串】往后滑动一位呢？还是我理解错了。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458271,"discussion_content":"可以配合图看一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563141184,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1455958,"avatar":"https://static001.geekbang.org/account/avatar/00/16/37/56/11068390.jpg","nickname":"倡印","note":"","ucode":"4F53AA5D017D89","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":78324,"discussion_content":"其实看代码就是移动的主串。画图只是为了好理解。。。\nwhile的终止条件就是主串当前所在的下标值，所以可以理解成移动的是主串，模式串不动","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575987788,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":111886,"user_name":"拯救地球好累","can_delete":false,"product_type":"c1","uid":1339022,"ip_address":"","ucode":"7643439601EF4C","user_header":"https://static001.geekbang.org/account/avatar/00/14/6e/8e/5d309a85.jpg","comment_is_top":false,"comment_ctime":1562634296,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562634296","product_id":100017301,"comment_content":"BM算法启发：<br>1. 从前往后匹配变为从后往前匹配，是个逆向思维的很好的例子<br>2. 字符串匹配的优化也是减少无用功，尽最大努力移动最大步数<br>3. 灵活运用哈希表预处理能巧妙地减少时间复杂度<br>4. 尽可能预处理在之后循环中可能反复计算或用到的值","like_count":0},{"had_liked":false,"id":111083,"user_name":"苦行僧","can_delete":false,"product_type":"c1","uid":1055334,"ip_address":"","ucode":"726024A9A9CF44","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","comment_is_top":false,"comment_ctime":1562468266,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562468266","product_id":100017301,"comment_content":"继续啃算法","like_count":0},{"had_liked":false,"id":109684,"user_name":"88591","can_delete":false,"product_type":"c1","uid":1254656,"ip_address":"","ucode":"04CE3E46455185","user_header":"https://static001.geekbang.org/account/avatar/00/13/25/00/3afbab43.jpg","comment_is_top":false,"comment_ctime":1562076496,"is_pvip":false,"replies":[{"id":"39746","content":"兄弟，自己研究下吧","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1562112588,"ip_address":"","comment_id":109684,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1562076496","product_id":100017301,"comment_content":"老师，git diff 里面是怎么匹配字符串不同的，比较tree 不同，有什么高效的算法吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456512,"discussion_content":"兄弟，自己研究下吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562112588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":108653,"user_name":"hamber","can_delete":false,"product_type":"c1","uid":1269506,"ip_address":"","ucode":"768ED393B3A2A5","user_header":"https://static001.geekbang.org/account/avatar/00/13/5f/02/00fac88e.jpg","comment_is_top":false,"comment_ctime":1561821528,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561821528","product_id":100017301,"comment_content":"if (j == -1) prefix[k] = true<br>但是上文又说 j == 0 的时候是 true<br>应该是写错了","like_count":0},{"had_liked":false,"id":108205,"user_name":"赵鹏举","can_delete":false,"product_type":"c1","uid":1260182,"ip_address":"","ucode":"B3785788D6176C","user_header":"https://static001.geekbang.org/account/avatar/00/13/3a/96/9fddfb4a.jpg","comment_is_top":false,"comment_ctime":1561695886,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561695886","product_id":100017301,"comment_content":"规则本身的确没必要记，因为不看原始论文中整个推导过程，我们无法知道不同规则的正确性，而这些是科学家们缜密严谨地推演出来的。","like_count":0},{"had_liked":false,"id":105271,"user_name":"seamoontime","can_delete":false,"product_type":"c1","uid":1235304,"ip_address":"","ucode":"09E36EAE215355","user_header":"https://static001.geekbang.org/account/avatar/00/12/d9/68/38703855.jpg","comment_is_top":false,"comment_ctime":1560952226,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560952226","product_id":100017301,"comment_content":"断断续续看了几天，终于看懂了。基本思想已经领悟，代码还是有点看不懂。很佩服我自己这一块能坚持下来。","like_count":0},{"had_liked":false,"id":104549,"user_name":"windcaller","can_delete":false,"product_type":"c1","uid":1514157,"ip_address":"","ucode":"1CA3E849805770","user_header":"https://static001.geekbang.org/account/avatar/00/17/1a/ad/faf1bf19.jpg","comment_is_top":false,"comment_ctime":1560775545,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560775545","product_id":100017301,"comment_content":"kmp 能懂，这章看了一天suffix 和 prefix <br>真心不明白","like_count":0},{"had_liked":false,"id":104169,"user_name":"覃钰栋","can_delete":false,"product_type":"c1","uid":1251835,"ip_address":"","ucode":"19080C463658EF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/oiboHpgukqib2ASXeU0H7W1ibgRMqyrNE5KaWicicPEDy0ia8YdoneZAtvW0EFIiaqZJp2OS4dnweOgXaJ5EjJicicEqic5A/132","comment_is_top":false,"comment_ctime":1560673593,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560673593","product_id":100017301,"comment_content":"被suffix,preffix搞蒙了","like_count":0},{"had_liked":false,"id":99807,"user_name":"frame_0224","can_delete":false,"product_type":"c1","uid":1514905,"ip_address":"","ucode":"7692DF4EA3607A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJF2gTFBleTUJK4BNqia5Ov2yiatpmLiclxibMFmCwXvIUMicL52ajftUxlQS0SIXldUk2n9BiaOczdaqFQ/132","comment_is_top":false,"comment_ctime":1559306996,"is_pvip":false,"replies":[{"id":"35856","content":"哈哈，多谢！","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1559352265,"ip_address":"","comment_id":99807,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559306996","product_id":100017301,"comment_content":"感觉这章讲的很好","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452277,"discussion_content":"哈哈，多谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559352265,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99292,"user_name":"张伯毅","can_delete":false,"product_type":"c1","uid":1099929,"ip_address":"","ucode":"E9EAF5ECFE32C7","user_header":"https://static001.geekbang.org/account/avatar/00/10/c8/99/22d2a6a7.jpg","comment_is_top":false,"comment_ctime":1559186995,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559186995","product_id":100017301,"comment_content":"我们把 suffix 数组和 prefix 数组的计算过程，用代码实现出来，就是下面这个样子：<br><br>下面代码， 第十五行：   i  语法错误。","like_count":0},{"had_liked":false,"id":97389,"user_name":"康斯坦丁","can_delete":false,"product_type":"c1","uid":1368096,"ip_address":"","ucode":"C130E800E8D5C9","user_header":"https://static001.geekbang.org/account/avatar/00/14/e0/20/003190c1.jpg","comment_is_top":false,"comment_ctime":1558663684,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558663684","product_id":100017301,"comment_content":"java String里的这个方法用的是BF算法    <br>static int indexOf(char[] source, int sourceOffset, int sourceCount,<br>            char[] target, int targetOffset, int targetCount,<br>            int fromIndex) {","like_count":0},{"had_liked":false,"id":96496,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1558433994,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558433994","product_id":100017301,"comment_content":"c++中&lt;algorithm&gt;的Search用的是BF算法","like_count":0},{"had_liked":false,"id":96487,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1558432853,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558432853","product_id":100017301,"comment_content":"Go里面的stringFinder用的是BM算法","like_count":0},{"had_liked":false,"id":96455,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1558428407,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558428407","product_id":100017301,"comment_content":"strstr()函数用的是BF算法","like_count":0},{"had_liked":false,"id":92553,"user_name":"箭指流云","can_delete":false,"product_type":"c1","uid":1367877,"ip_address":"","ucode":"21571A7D60B10D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/VqgchrJWswwSLmxf1ict6icDDlZG5wChBEiaiblnJAQEdu1nYtB4EZq07mibUurOSDFr16dho6DhGyOpIW4eib57lK8Q/132","comment_is_top":false,"comment_ctime":1557300491,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557300491","product_id":100017301,"comment_content":"看的浮躁，静下心来，再看一遍","like_count":0},{"had_liked":false,"id":92123,"user_name":"亮","can_delete":false,"product_type":"c1","uid":1238210,"ip_address":"","ucode":"33975BD95BF54A","user_header":"https://static001.geekbang.org/account/avatar/00/12/e4/c2/e8ac8b6d.jpg","comment_is_top":false,"comment_ctime":1557190761,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557190761","product_id":100017301,"comment_content":"要是在校的时候能看到这个就好了，现在工作中很难挤出时间静下心来仔细研究这个","like_count":0},{"had_liked":false,"id":86278,"user_name":"xfan","can_delete":false,"product_type":"c1","uid":1315147,"ip_address":"","ucode":"48ED8D498D7F56","user_header":"https://static001.geekbang.org/account/avatar/00/14/11/4b/fa64f061.jpg","comment_is_top":false,"comment_ctime":1555337036,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555337036","product_id":100017301,"comment_content":"好像在hash算法的地方有问题，把每个字符和下标存在数组，但是有两个a，那不是每个字符只能存储一次了，","like_count":0},{"had_liked":false,"id":83331,"user_name":"星亦辰","can_delete":false,"product_type":"c1","uid":1284592,"ip_address":"","ucode":"B0388FBFFDEE7E","user_header":"https://static001.geekbang.org/account/avatar/00/13/99/f0/d9343049.jpg","comment_is_top":false,"comment_ctime":1554535190,"is_pvip":true,"replies":[{"id":"30232","content":"不能忽略","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1554679872,"ip_address":"","comment_id":83331,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554535190","product_id":100017301,"comment_content":"坏字符 方法，预处理时，是否忽略了 字符串重复的情况。比如 abaa这样的模式串 ","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445981,"discussion_content":"不能忽略","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554679872,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83294,"user_name":"hh","can_delete":false,"product_type":"c1","uid":1239635,"ip_address":"","ucode":"C0A90DDC22F92C","user_header":"https://static001.geekbang.org/account/avatar/00/12/ea/53/3d1beec3.jpg","comment_is_top":false,"comment_ctime":1554522741,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554522741","product_id":100017301,"comment_content":"看好后缀规则计算suffix和prefix的例子，看了半天文字没懂，跑了一遍代码就明白了。。。感觉虽然自己明白了这个bm算法是怎么回事，但是如果让我面试的时候当场写出来，10有89还是写不对。。。","like_count":0},{"had_liked":false,"id":82923,"user_name":"Z-ll","can_delete":false,"product_type":"c1","uid":1266233,"ip_address":"","ucode":"68A75A53D1455E","user_header":"https://static001.geekbang.org/account/avatar/00/13/52/39/2211b1a2.jpg","comment_is_top":false,"comment_ctime":1554349097,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554349097","product_id":100017301,"comment_content":"妈呀，终于看懂啦!","like_count":0},{"had_liked":false,"id":79292,"user_name":"CoderSinger","can_delete":false,"product_type":"c1","uid":1238255,"ip_address":"","ucode":"DA2A3FB608B01F","user_header":"https://static001.geekbang.org/account/avatar/00/12/e4/ef/c0b2e806.jpg","comment_is_top":false,"comment_ctime":1553425606,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553425606","product_id":100017301,"comment_content":"老师，BM 算法的完整版代码里面<br>if(j &lt; 0){<br>    return i;<br>}我能理解了，因为能倒着匹配直到模式串的第一个字符。但是后面，有坏字符时，i等于好后缀和坏字符往后滑动位数的较大者，i = i + Math.max(x, y); 这个i如何返回给调用bm方法的方法呢？这一行代码位于循环末尾，下一个循环从头开始，也没办法进入 if(j &lt; 0){return i;}了","like_count":0},{"had_liked":false,"id":78449,"user_name":"草长莺飞","can_delete":false,"product_type":"c1","uid":1243108,"ip_address":"","ucode":"7A281E8DB11BBB","user_header":"https://static001.geekbang.org/account/avatar/00/12/f7/e4/c8cfca11.jpg","comment_is_top":false,"comment_ctime":1553150805,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553150805","product_id":100017301,"comment_content":"刚看到坏字符的时候，从模式串找出是否包含主串中的字符，这个时间复杂度不就是O(m)如果m很大，也没有什么优化。后面看到了将模式串换为哈希值，马上变成了O(1)。其实这种思路在开发中经常遇到。拿到一个对象的集合，前端传来一个主键，从集合中取出符合这个主键的对象。做法是用java8的stream转为Map然后根据主键去取整个对象，算法马上从O(n)变成了O(1)。一直没有这个概念，这也可以算是hash算法的应用吧！","like_count":0},{"had_liked":false,"id":77048,"user_name":"Jason Peng","can_delete":false,"product_type":"c1","uid":1431817,"ip_address":"","ucode":"F0F47AB9FEC3E9","user_header":"https://static001.geekbang.org/account/avatar/00/15/d9/09/fcffaf91.jpg","comment_is_top":false,"comment_ctime":1552816419,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1552816419","product_id":100017301,"comment_content":"A=aaaaaaaaaaaaaa，B=baaa<br>当A[0]与B[0]对齐后，从B[3]开始往前匹配。在B[0]处失配。<br>此时Si=0，而Xi=-1。Si-Xi=1，没有出现负数。<br>为什么说可能会出现负数呢？是有情况，我没有考虑到吗？<br><br>","like_count":0,"discussions":[{"author":{"id":1047733,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fc/b5/ac717737.jpg","nickname":"肖臧","note":"","ucode":"4FAC9FF54DD6A0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1831,"discussion_content":"si=0, xi=3。再看看老师generateBC代码吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562936721,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":73716,"user_name":"不上进的码农","can_delete":false,"product_type":"c1","uid":1248890,"ip_address":"","ucode":"D0594DDDD1C5AE","user_header":"https://static001.geekbang.org/account/avatar/00/13/0e/7a/31328704.jpg","comment_is_top":false,"comment_ctime":1551962987,"is_pvip":false,"replies":[{"id":"27372","content":"indexOf应该是bf算法，理论上应该比BM慢。但是这个测试结果还依赖于：测试数据规模、特点，不好一概而论。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1552358006,"ip_address":"","comment_id":73716,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551962987","product_id":100017301,"comment_content":"今天用Java实现了一下，但是测试过程中发现比Java的indexOf方法慢了差不多10倍左右，这是什么原因。是我测试的方式不对？我测试，主串65500字节，模式串12字节，分别用两个方法执行100000遍，indexOf差不多3秒，但是BM执行了30秒！请老师指点一下什么原因导致的","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442241,"discussion_content":"indexOf应该是bf算法，理论上应该比BM慢。但是这个测试结果还依赖于：测试数据规模、特点，不好一概而论。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552358006,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":73472,"user_name":"骆驼草","can_delete":false,"product_type":"c1","uid":1332827,"ip_address":"","ucode":"6E95A6FD488232","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ0WhabYibFyXM0Lut5yst9HSIdWxknwII8NibxxrLgmWmcgSLIa8oZNNZDmdZENoI6yvAhQch7u17g/132","comment_is_top":false,"comment_ctime":1551911981,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551911981","product_id":100017301,"comment_content":"aaaaaaaaaaaaaaaa，模式串是 baaa。不但不会向后滑动模式串，还有可能倒退。所以，BM 算法还需要用到“好后缀规则”。<br>每次移动0-（-1）=1位，为什么说可能倒退？","like_count":0},{"had_liked":false,"id":73030,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1551780432,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551780432","product_id":100017301,"comment_content":"有点难度了😂","like_count":0},{"had_liked":false,"id":70071,"user_name":"前端西瓜哥","can_delete":false,"product_type":"c1","uid":1248576,"ip_address":"","ucode":"150130C34CD1C1","user_header":"https://static001.geekbang.org/account/avatar/00/13/0d/40/f70e5653.jpg","comment_is_top":false,"comment_ctime":1550985021,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550985021","product_id":100017301,"comment_content":"老师，si-xi 计算出来的移动位数不可能是负数吧？甚至不可能等于0。<br><br>因为 xi 是 si 的位置往前找的，xi永远都是小于si的。我觉得之所以还用上了 “好后缀原则”，是为了更好地提高移动效率，有时候坏字符规则只能移动1个位置，但用上了好后缀，就可以移动更长的位置。比如 a simple example 匹配 example，匹配到 &quot; simple&quot; 时，坏字符规则只能移动3位，而好后缀规则可以移动6位。","like_count":0},{"had_liked":false,"id":70001,"user_name":"泉","can_delete":false,"product_type":"c1","uid":1099760,"ip_address":"","ucode":"914709BE802A8D","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/f0/aa2e0749.jpg","comment_is_top":false,"comment_ctime":1550932381,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1550932381","product_id":100017301,"comment_content":"BM算法涉及到很多技巧，跟着老师的思路走，后续可以试着写一遍，肯定会受益匪浅","like_count":0},{"had_liked":false,"id":68703,"user_name":"xuery","can_delete":false,"product_type":"c1","uid":1027584,"ip_address":"","ucode":"F461B61BE06131","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ae/00/025f37e7.jpg","comment_is_top":false,"comment_ctime":1550579621,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1550579621","product_id":100017301,"comment_content":"坏字符规则：预处理很巧妙<br>好后缀规则：求好后缀{u}在模式串中的{u*},以及求好后缀的后缀子串与模式串的前缀匹配，<br>通过引入suffix数组，转化为求b[0..i](i=0..m-2)与b[0..m-1]的后缀公共子串，这个确实太巧妙了！","like_count":0},{"had_liked":false,"id":68505,"user_name":"kylexy_0817","can_delete":false,"product_type":"c1","uid":1068372,"ip_address":"","ucode":"392DD9DD5E4B6E","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/54/9c214885.jpg","comment_is_top":false,"comment_ctime":1550536310,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1550536310","product_id":100017301,"comment_content":"“如果好后缀在模式串中不存在可匹配的子串，那在我们一步一步往后滑动模式串的过程中，只要主串中的{u}与模式串有重合，那肯定就无法完全匹配。”这句话看了好几遍还是没法理解。主串中的{u}，不就是指好后缀吗？那为什么与模式串有重合，但却不存在可匹配子串？是不是应该改为不存在可匹配的另一个子串？","like_count":0,"discussions":[{"author":{"id":1101894,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d0/46/1a9229b3.jpg","nickname":"NEVER SETTLE","note":"","ucode":"9C86BDAFDBF768","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":105751,"discussion_content":"对啊，我觉得也是有问题，前前后后想了半个小时，也不知道要表达啥","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577468755,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":67887,"user_name":"谢特","can_delete":false,"product_type":"c1","uid":1248684,"ip_address":"","ucode":"9C30DBFECFE649","user_header":"https://static001.geekbang.org/account/avatar/00/13/0d/ac/09678490.jpg","comment_is_top":false,"comment_ctime":1550310377,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550310377","product_id":100017301,"comment_content":"我就记住思想是多移动几位就够了哈哈","like_count":0},{"had_liked":false,"id":64760,"user_name":"彭川宇","can_delete":false,"product_type":"c1","uid":1102540,"ip_address":"","ucode":"3BD59F6431DDEE","user_header":"https://static001.geekbang.org/account/avatar/00/10/d2/cc/b473ed5a.jpg","comment_is_top":false,"comment_ctime":1548902067,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548902067","product_id":100017301,"comment_content":"suffix【4】应该等于2吧","like_count":0},{"had_liked":false,"id":62335,"user_name":"匆匆","can_delete":false,"product_type":"c1","uid":1333414,"ip_address":"","ucode":"4DB39C6CD5743B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/H8NxrljQXliccaT5fjdXJQYS3ou3Z9ykAuKw6EgicicEA9L4jQLz3h85P0odgDSaK0cA9oTyUKibbiagdNvnHuuV5mQ/132","comment_is_top":false,"comment_ctime":1548034331,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548034331","product_id":100017301,"comment_content":"字符串匹配<br><br>主串长n，模式串长m；<br><br>BF算法：也叫暴力匹配算法。即将再主串中从前到后依次检查长度为m的字串，共n-m+1个字串，看有没有和模式串完全匹配的。时间复杂度O(n*m)。<br><br>RK算法：算是BF算法升级版，引入哈希算法。对主串的n-m+1个字串分别求哈希值，哈希算法是这样的：a-z的字母依次对应0-25，所以每个字串都可计算出一个值（如cba=2*26*26+1*26+0），而下一个字串的哈希值可以借助上一个字串的来求得（为了减少计算量），通过哈希值来进行匹配。如何处理哈希冲突的情况？当哈希值对应多个字串时，只需暴力匹配即可。<br><br><br>BM算法：是一个高效的字符串匹配算法。原则是将模式串大踏步的沿着主串向后移动，减少比较次数提高效率。中间涉及到坏字符规则、好后缀规则、将后缀字串存散列表等。<br><br>后面还要再看、实现。<br>","like_count":0},{"had_liked":false,"id":61819,"user_name":"smartjia","can_delete":false,"product_type":"c1","uid":1330509,"ip_address":"","ucode":"704BCDE56251D2","user_header":"https://static001.geekbang.org/account/avatar/00/14/4d/4d/58c2ffa1.jpg","comment_is_top":false,"comment_ctime":1547809278,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547809278","product_id":100017301,"comment_content":"老师写的还是很有条理的，一些小细节读第二遍就比较清晰了。<br><br>比如，meng 同学的问题：是否可以不要prefix数组，直接通过suffix[k]==0来判断前缀子串的匹配与否？<br><br>suffix 存储的是模式串中最靠后的那个子串的起始位置，也就是下标最大的那个子串的起始位置，如果模式串中有多个（大于 1 个）子串跟后缀子串{u}匹配，这种情况下就需要 prefix 数组。<br><br>这个文章中也有讨论，如果之前没接触过的话，只读一遍可能忽略掉了","like_count":0},{"had_liked":false,"id":61587,"user_name":"少盐","can_delete":false,"product_type":"c1","uid":1305743,"ip_address":"","ucode":"BCC7E264B75702","user_header":"https://static001.geekbang.org/account/avatar/00/13/ec/8f/8299495a.jpg","comment_is_top":false,"comment_ctime":1547729766,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547729766","product_id":100017301,"comment_content":"正则表达式各种匹配模式是怎么实现的，感觉很复杂","like_count":0},{"had_liked":false,"id":61469,"user_name":"董航","can_delete":false,"product_type":"c1","uid":1231787,"ip_address":"","ucode":"9CA208FD26F849","user_header":"https://static001.geekbang.org/account/avatar/00/12/cb/ab/1aac53bf.jpg","comment_is_top":false,"comment_ctime":1547704696,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547704696","product_id":100017301,"comment_content":"我觉得看代码看不懂的时候，应该先思考如果是你，你该怎么设计，再看看王老师写的代码，这样不仅收获更多，也更容易理解代码，最近很多不好的事蛮烦躁的，今天静下心来了。加油","like_count":0},{"had_liked":false,"id":61023,"user_name":"郭星志","can_delete":false,"product_type":"c1","uid":1257021,"ip_address":"","ucode":"0FA040B955CEE7","user_header":"https://static001.geekbang.org/account/avatar/00/13/2e/3d/58242861.jpg","comment_is_top":false,"comment_ctime":1547604998,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547604998","product_id":100017301,"comment_content":"看错了，确实会出现向后滑动；坏字符串为a，si=0，xi=3。","like_count":0},{"had_liked":false,"id":61022,"user_name":"郭星志","can_delete":false,"product_type":"c1","uid":1257021,"ip_address":"","ucode":"0FA040B955CEE7","user_header":"https://static001.geekbang.org/account/avatar/00/13/2e/3d/58242861.jpg","comment_is_top":false,"comment_ctime":1547604898,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547604898","product_id":100017301,"comment_content":"单纯使用坏字符串，怎么能出现后退滑动呢？我理解不回出现后退滑动呀<br>主串是 aaaaaaaaaaaaaaaa，模式串是 baaa；第一次比对是，坏字符串是b，si=0，xi=-1；滑动位置为si-xi，求得滑动位置为1。所以不回出现后退滑动呀。","like_count":0},{"had_liked":false,"id":60942,"user_name":"左瞳","can_delete":false,"product_type":"c1","uid":1206589,"ip_address":"","ucode":"B262A3E99C8605","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/3d/3cfb9b87.jpg","comment_is_top":false,"comment_ctime":1547597307,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547597307","product_id":100017301,"comment_content":"bc用散列表不是就不会占很多空间了吗？","like_count":0},{"had_liked":false,"id":60836,"user_name":"花仙子","can_delete":false,"product_type":"c1","uid":1249216,"ip_address":"","ucode":"9840BF416F1F0F","user_header":"https://static001.geekbang.org/account/avatar/00/13/0f/c0/e6151cce.jpg","comment_is_top":false,"comment_ctime":1547560659,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547560659","product_id":100017301,"comment_content":"老师，好后缀代码实现中，第二种情况就是模式串中没有匹配好后缀，但是有好前缀匹配好后缀情况下，为啥滑动的是r位，在上面例子中c,b,a,c,a,b,c中，bc为好后缀，这样m=7，r=5,好后缀是[5,6],k=2,应该向后滑动6位是r+1位的呀?","like_count":0},{"had_liked":false,"id":60789,"user_name":"花仙子","can_delete":false,"product_type":"c1","uid":1249216,"ip_address":"","ucode":"9840BF416F1F0F","user_header":"https://static001.geekbang.org/account/avatar/00/13/0f/c0/e6151cce.jpg","comment_is_top":false,"comment_ctime":1547552282,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547552282","product_id":100017301,"comment_content":"老师，你好，suffix和prefix数组生成的那段代码while循环中是不是应该是i++, 而不是i","like_count":0},{"had_liked":false,"id":59798,"user_name":"左瞳","can_delete":false,"product_type":"c1","uid":1206589,"ip_address":"","ucode":"B262A3E99C8605","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/3d/3cfb9b87.jpg","comment_is_top":false,"comment_ctime":1547426409,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547426409","product_id":100017301,"comment_content":"这篇今天没有消化完，明天还得继续看","like_count":0},{"had_liked":false,"id":58625,"user_name":"qinggeouye","can_delete":false,"product_type":"c1","uid":1251536,"ip_address":"","ucode":"5B53EEDD7BEC9C","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/d0/49b06424.jpg","comment_is_top":false,"comment_ctime":1547147768,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547147768","product_id":100017301,"comment_content":"「现在，引入最关键的变量 suffix 数组。suffix 数组的下标 k ，表示后缀字串的长度，下标对应的数组值存储的是，在模式串中跟好后缀 {u} 相匹配的子串 {u~} 的起始下标值」<br>这里我的理解是：<br>结合上文提到的「好后缀本身也是模式串的后缀子串」，上面这段话下的图例中的后缀子串，首先将它作为好后缀 {u}，然后在「模式串中，查找跟好后缀匹配的另一个子串」，该子串 {u*} 的起始下标值存入数组 suffix，子串{u*}的起始下标值是指在模式串中的下标值。<br>","like_count":0},{"had_liked":false,"id":58601,"user_name":"qinggeouye","can_delete":false,"product_type":"c1","uid":1251536,"ip_address":"","ucode":"5B53EEDD7BEC9C","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/d0/49b06424.jpg","comment_is_top":false,"comment_ctime":1547132042,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547132042","product_id":100017301,"comment_content":"「现在，引入最关键的变量 suffix 数组。suffix 数组的下标 k ，表示后缀字串的长度，下标对应的数组值存储的是，在模式串中跟好后缀 {u} 相匹配的子串 {u~} 的起始下标值」<br>您好，请问，这里的好后缀 {u} 是 cab 吗？我是根据这段话下面的图例推倒的。","like_count":0},{"had_liked":false,"id":57986,"user_name":"叽咕叽咕噗噗","can_delete":false,"product_type":"c1","uid":1210078,"ip_address":"","ucode":"C83FEFE668D09E","user_header":"https://static001.geekbang.org/account/avatar/00/12/76/de/5349a2e2.jpg","comment_is_top":false,"comment_ctime":1546957230,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546957230","product_id":100017301,"comment_content":"老师你好，有个疑问。针对坏匹配规则，我理解只要额外用散列表存储模式串中的出现的字符就可以了，key是模式串中的字符，value是在模式串中出现的相对位置。匹配的时候在散列表中查找坏匹配字符，查不到就整体往后移动，查到了就移动到相应位置。这样需要的额外空间就是模式串的长度的散列表","like_count":0},{"had_liked":false,"id":57845,"user_name":"o my love","can_delete":false,"product_type":"c1","uid":1243331,"ip_address":"","ucode":"307601ACAC5DCC","user_header":"https://static001.geekbang.org/account/avatar/00/12/f8/c3/1d557354.jpg","comment_is_top":false,"comment_ctime":1546925974,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546925974","product_id":100017301,"comment_content":"断断续续看了N遍，今天终于看懂了","like_count":0},{"had_liked":false,"id":57670,"user_name":"Mr.M","can_delete":false,"product_type":"c1","uid":1243730,"ip_address":"","ucode":"C32AE0A9CD6EEF","user_header":"https://static001.geekbang.org/account/avatar/00/12/fa/52/4781da3f.jpg","comment_is_top":false,"comment_ctime":1546866231,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546866231","product_id":100017301,"comment_content":"假设好后缀的长度是k。我们先拿好后缀，在suffix数组中查找其匹配的子串。如果suffix[k]不等于-1，那我们就将模式串往后移动j-suffix[k]+1位，为什么是移动j-suffix[k]+1位啊？","like_count":0},{"had_liked":false,"id":56312,"user_name":"张洋","can_delete":false,"product_type":"c1","uid":1182914,"ip_address":"","ucode":"549BE5DEEF8417","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/c2/bad34a50.jpg","comment_is_top":false,"comment_ctime":1546419635,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1546419635","product_id":100017301,"comment_content":"<br>老师你好。<br>suffix[k] = j+1; 这句代码是不是可以放在while循环外边。<br>","like_count":0},{"had_liked":false,"id":55228,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1546070406,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546070406","product_id":100017301,"comment_content":"把留言又翻了一遍 感觉好多大神啊.... 看老师的回复 这一节的内容只要了解思想就行了,但是我还是想把他写出来","like_count":0},{"had_liked":false,"id":55225,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1546069842,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546069842","product_id":100017301,"comment_content":"不过对于老师 的代码实现 理解起来还是懵逼 还是没理解到 尤其是suffix数组 和prefix数组","like_count":0},{"had_liked":false,"id":55223,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1546069747,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546069747","product_id":100017301,"comment_content":"今天又看了一遍 才把大体思路了解了 大概是 遇到好后缀的时候如果好后缀不能在模式串中找到另一个完全匹配的模式子串的时候就从好后缀的后缀子串中找一个能和模式串前缀子串中最长的一个 来决定移动好多位 同时 还要跟坏字符移动位数做比较来决定最后该移动多少位, 坏字符移动的逻辑过程中会出现怀字符出现在模式串串首位置 计算移动的时候坏字符 对应字符下标为si 但是si后面存在和坏字符相同的字符时 此时下标为xi 此时xi 大于si si-xi为负数 导致整个模式串向前移动","like_count":0},{"had_liked":false,"id":53847,"user_name":"kakasi","can_delete":false,"product_type":"c1","uid":1237297,"ip_address":"","ucode":"64F357E6A08CA5","user_header":"https://static001.geekbang.org/account/avatar/00/12/e1/31/eb103bdc.jpg","comment_is_top":false,"comment_ctime":1545741069,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545741069","product_id":100017301,"comment_content":"java String类中的indexof用了字符匹配。但让我没想到的是它竟然只是暴力匹配的基础上小优化了下，并没有用到RK, BM, KMP","like_count":0},{"had_liked":false,"id":53602,"user_name":"张三丰","can_delete":false,"product_type":"c1","uid":1155275,"ip_address":"","ucode":"3A6215A40B3B21","user_header":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","comment_is_top":false,"comment_ctime":1545700117,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545700117","product_id":100017301,"comment_content":"因为根据 si-xi 计算出来的移动位数，有可能是负数，比如主串是 aaaaaaaaaaaaaaaa，模式串是 baaa。<br><br>si=0<br>xi=1   <br><br>老师 这样分析对吗<br>","like_count":0},{"had_liked":false,"id":53003,"user_name":"满地可","can_delete":false,"product_type":"c1","uid":1240932,"ip_address":"","ucode":"C6F12326830999","user_header":"https://static001.geekbang.org/account/avatar/00/12/ef/64/126bb06b.jpg","comment_is_top":false,"comment_ctime":1545567955,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1545567955","product_id":100017301,"comment_content":"这篇文章啃了很长时间了，有个问题请教：是否可以不要prefix数组，直接通过suffix[k]==0来判断前缀子串的匹配与否？<br>-------------<br>同问这个问题，即：是否存在suffix[k]=-1，但prefix[k]=true的情况呢，<br>如果存在，为什么suffix[k]没能把这种情况识别出来呢？<br>希望老师解答，感谢~","like_count":0},{"had_liked":false,"id":52180,"user_name":"james","can_delete":false,"product_type":"c1","uid":1260477,"ip_address":"","ucode":"CB62CF7C4EF92D","user_header":"https://static001.geekbang.org/account/avatar/00/13/3b/bd/f9f780a4.jpg","comment_is_top":false,"comment_ctime":1545328499,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545328499","product_id":100017301,"comment_content":"看到一半，忍不住赞一个。文字比语言有力量多了。","like_count":0},{"had_liked":false,"id":51628,"user_name":"suke","can_delete":false,"product_type":"c1","uid":1007753,"ip_address":"","ucode":"C0287C31A4F45B","user_header":"","comment_is_top":false,"comment_ctime":1545211346,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545211346","product_id":100017301,"comment_content":"同问suffix[4]=-1是怎么来的，求老师回答啊","like_count":0},{"had_liked":false,"id":50600,"user_name":"色即是空","can_delete":false,"product_type":"c1","uid":1189638,"ip_address":"","ucode":"46B8975ED087B8","user_header":"https://static001.geekbang.org/account/avatar/00/12/27/06/7ab75a5b.jpg","comment_is_top":false,"comment_ctime":1545014847,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545014847","product_id":100017301,"comment_content":"BM 比 KMP算法快3倍以上；<br>1、坏字符规则------都是总结出来的规律，不能从数量级层面提高效率，但成倍的提速是杠杠的<br>主要对象是模式串，在模式串中标记<br> 2、好后缀规则<br>主要对象是主串，在模式串和主串中找规律移动<br><br>BM算法的核心思想，利用模式串本身的特点，在模式串中摸个字符串与主串不能匹配的时候，将模式串往后滑动纪委，以此减少不必要的字符比较，提高匹配效率","like_count":0},{"had_liked":false,"id":50205,"user_name":"Lisa Li","can_delete":false,"product_type":"c1","uid":1046663,"ip_address":"","ucode":"4F7CF929FF4C6B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/87/0491e9e5.jpg","comment_is_top":false,"comment_ctime":1544919550,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544919550","product_id":100017301,"comment_content":"同问：“好后缀的后缀子串 b[r, m-1]，这里的r的初值j+2是怎么得来的啊” 回答是 “作者回复<br>j表示坏字符的下标 好狗追其实下标j+1”。 没有看懂好狗是什么。：P<br><br>我的理解是： j 是坏字符的下标。{u} 是好后缀，用b表示为， b[r, m-1]（其中，r 取值从 j+1 到 m-1。{v}是{u}的子集，其最早开始的下标是j+2，因为，我们已经验证过模式串中不存在和{u}完全相同的子串。其实，这里写成 j+1也可，就是多比一次。对吗？<br><br>","like_count":0},{"had_liked":false,"id":49988,"user_name":"Laughing_Lz","can_delete":false,"product_type":"c1","uid":1251342,"ip_address":"","ucode":"7A7445E96F2978","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/0e/39307052.jpg","comment_is_top":false,"comment_ctime":1544813250,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544813250","product_id":100017301,"comment_content":"终于看完了，好难···问下老师两个问题：<br>1、单使用坏字符规则，你提到根据si-xi计算移动位数会出现为负数，如主串aaaaaaaaaa，模式串baaa。请问这里是指si=0,xi=3吗？xi=3应该犹豫BC方法计算哈希值得到的结果。那能否使得移动位数不出现负数呢？<br>2、最后提到好后缀规则可以独立于坏字符规则使用。那坏字符规则是否也可以独立于好后缀规则使用呢？（如果不会出现移动位数为负数）","like_count":0},{"had_liked":false,"id":49471,"user_name":"zixuan","can_delete":false,"product_type":"c1","uid":1131300,"ip_address":"","ucode":"C72920DD05B074","user_header":"https://static001.geekbang.org/account/avatar/00/11/43/24/3f9f7c70.jpg","comment_is_top":false,"comment_ctime":1544693657,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544693657","product_id":100017301,"comment_content":"应该是最适合m不太大的场景。文本编辑器的场景很合适。","like_count":0},{"had_liked":false,"id":48625,"user_name":"我来也","can_delete":false,"product_type":"c1","uid":1205253,"ip_address":"","ucode":"773D6104F56767","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","comment_is_top":false,"comment_ctime":1544499567,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1544499567","product_id":100017301,"comment_content":"第一遍没看懂,今天再来看了一遍.感觉差不多了,就有一处疑问.<br>-----------<br>文中有一句:<br>&quot;如果好后缀在模式串中不存在可匹配的子串，那在我们一步一步往后滑动模式串的过程中，只要主串中的{u}与模式串有重合，那肯定就无法完全匹配。&quot;<br>-----------<br>我的疑问:<br>既然&quot;好后缀在模式串中不存在可匹配的子串&quot;了,应该就不存在往后滑动模式串的过程中,出现&quot;主串中的{u}与模式串有重合&quot;的情况了吧.<br>-----------<br>还请老师和同学们来答疑,谢谢!","like_count":0,"discussions":[{"author":{"id":1101894,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d0/46/1a9229b3.jpg","nickname":"NEVER SETTLE","note":"","ucode":"9C86BDAFDBF768","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":105752,"discussion_content":"对啊，我觉得也是有问题，前前后后想了半个小时，也不知道要表达啥","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577468797,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":48298,"user_name":"他在她城断了弦","can_delete":false,"product_type":"c1","uid":1242521,"ip_address":"","ucode":"3D91CA87B64C8B","user_header":"https://static001.geekbang.org/account/avatar/00/12/f5/99/454b17c1.jpg","comment_is_top":false,"comment_ctime":1544413688,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544413688","product_id":100017301,"comment_content":"因为根据 si-xi 计算出来的移动位数，有可能是负数，比如主串是 aaaaaaaaaaaaaaaa，模式串是 baaa。不但不会向后滑动模式串，还有可能倒退。<br>这里不太懂，老师能解释下吗？","like_count":0},{"had_liked":false,"id":48289,"user_name":"纯洁的憎恶","can_delete":false,"product_type":"c1","uid":1130512,"ip_address":"","ucode":"5E9757DE6F45DF","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/10/b6bf3c3c.jpg","comment_is_top":false,"comment_ctime":1544411777,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1544411777","product_id":100017301,"comment_content":"太精妙啦～不知道是怎么想出来的","like_count":0},{"had_liked":false,"id":47673,"user_name":"吴月月鸟","can_delete":false,"product_type":"c1","uid":1115064,"ip_address":"","ucode":"2F068EDD166B49","user_header":"https://static001.geekbang.org/account/avatar/00/11/03/b8/961a5342.jpg","comment_is_top":false,"comment_ctime":1544175691,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544175691","product_id":100017301,"comment_content":"0\t1\t2\t3\t4\t5\t\t0\t1\t2\t3\t4\t5<br>c\ta\tb\tc\ta\tb\t\tc\ta\tb\tc\ta\tb<br>\t\t\t\t\t\t\t\t\t\t\t\t<br>\t\t\t\t\tb\t\tc\t\t\t\t\t<br>\t\t\t\ta\tb\t\tc\ta\t\t\t\t<br>\t\t\tc\ta\tb\t\tc\ta\tb\t\t\t<br>\t\tb\tc\ta\tb\t\tc\ta\tb\tc\t\t<br>\ta\tb\tc\ta\tb\t\tc\ta\tb\tc\ta\t<br>这是我在excel中画的suffix和prefix值的图，重点要理解suffix和prefix公式的含义，后续的内容才好理解，希望能帮助大家方便理解。","like_count":0}]}