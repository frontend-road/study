{"id":243319,"title":"12 | 三分天下的容器：恰当选择，事半功倍","content":"<p>你好，我是Chrono。</p><p>今天我要讲的是标准库里的一块“重地”：容器，它也是C++泛型编程范式的基础。</p><p>不过在正式开讲之前，我先问你个问题：什么是容器？</p><p>你也许会说：<strong>容器，就是能够“容纳”“存放”元素的一些数据结构</strong>。</p><p>这个回答非常正确，而且说到了“点”上。</p><p>还记得计算机先驱的那句经典名言吗？“<strong>算法 + 数据结构 = 程序。</strong>”在C++里，容器就是这个公式里面的“数据结构”。</p><p>所以，下面我就着重从数据结构的角度，来谈谈各种容器的区别、优缺点，还有如何选择最合适的容器。</p><h2>认识容器</h2><p>所谓的数据结构，就是数据在计算机里的存储和组织形式，比如堆、数组、链表、二叉树、B+树、哈希表，等等。</p><p>在计算机的发展历史上，众多“大牛”孜孜不倦地发明创造了这么多的数据结构，为什么呢？</p><p>因为没有一种数据结构是万能的、可以应用于任何场景。毕竟，不同的数据结构存储数据的形式不一样，效率也就不一样。有的是连续存放，有的是分散存放，有的存储效率高，有的查找效率高，我们必须要依据具体的应用场合来进行取舍。</p><p>我想，你肯定已经学过这些数据结构了，也知道它们的实现原理，自己写也不是什么太难的事情。</p><p>但是，对于最基本、最经典的那些数据结构，你完全没有必要去“自己造轮子”，因为C++标准库里的容器就已经把它们给实现了。</p><!-- [[[read_end]]] --><p>容器，其实就是C++对数据结构的抽象和封装。而且，因为标准库开发者的功力很深，对编译器的了解程度更是远超你我，所以，容器的性能和优化水平要比我们自己写的好上几十倍，这一点你绝对不用质疑。</p><p>我们要做的，就是仔细品鉴标准容器这盘大餐，从中找出最合适自己口味的那道菜。</p><p>由于容器相关的资料已经有很多了，无论是看图书还是网站，都可以找到非常详细的接口文档，所以今天，我就不去罗列每个容器的具体操作方法了，而是把重点放在特性介绍上。掌握了这些特性，今后你在面临选择的时候，不用太纠结，就可以选出最适合你的容器。</p><h2>容器的通用特性</h2><p>你必须要知道所有容器都具有的一个基本特性：它保存元素采用的是“值”（value）语义，也就是说，<strong>容器里存储的是元素的拷贝、副本，而不是引用</strong>。</p><p>从这个基本特性可以得出一个推论，容器操作元素的很大一块成本就是值的拷贝。所以，如果元素比较大，或者非常多，那么操作时的拷贝开销就会很高，性能也就不会太好。</p><p>一个解决办法是，<strong>尽量为元素实现转移构造和转移赋值函数</strong>，在加入容器的时候使用std::move()来“转移”，减少元素复制的成本：</p><pre><code>Point p;                        // 一个拷贝成本很高的对象\n\nv.push_back(p);                // 存储对象，拷贝构造，成本很高\nv.push_back(std::move(p));    // 定义转移构造后就可以转移存储，降低成本\n</code></pre><p>你也可以使用C++11为容器新增加的emplace操作函数，它可以“就地”构造元素，免去了构造后再拷贝、转移的成本，不但高效，而且用起来也很方便：</p><pre><code>v.emplace_back(...);            // 直接在容器里构造元素，不需要拷贝或者转移\n</code></pre><p>当然，你可能还会想到在容器里存放元素的指针，来间接保存元素，但我不建议采用这种方案。</p><p>虽然指针的开销很低，但因为它是“间接”持有，就不能利用容器自动销毁元素的特性了，你必须要自己手动管理元素的生命周期，麻烦而且非常容易出错，有内存泄漏的隐患。</p><p>如果真的有这种需求，可以考虑使用智能指针unique_ptr/shared_ptr，让它们帮你自动管理元素。建议你再仔细复习一下<a href=\"https://time.geekbang.org/column/article/239580\">第8讲</a>的内容，弄清楚这两个智能指针之间的差异，区分“独占语义”和“共享语义”。</p><p>一般情况下，shared_ptr是一个更好的选择，它的共享语义与容器的值语义基本一致。使用unique_ptr就要当心，它不能被拷贝，只能被转移，用起来就比较“微妙”。</p><h2>容器的具体特性</h2><p>上面讲的是所有容器的“共性”，接下来我们再来看看具体容器的“个性”。</p><p>C++里的容器很多，但可以按照不同的标准进行分类，常见的一种分类是依据元素的访问方式，分成<strong>顺序容器、有序容器和无序容器</strong>三大类别，先看一下最容易使用的顺序容器。</p><h3>顺序容器</h3><p>顺序容器就是数据结构里的线性表，一共有5种：array、vector、deque、list、forward_list。</p><p>按照存储结构，这5种容器又可以再细分成两组。</p><ul>\n<li>连续存储的数组：array、vector和deque。</li>\n<li>指针结构的链表：list和forward_list。</li>\n</ul><p><strong>array和vector直接对应C的内置数组，内存布局与C完全兼容，所以是开销最低、速度最快的容器</strong>。</p><p><strong>它们两个的区别在于容量能否动态增长</strong>。array是静态数组，大小在初始化的时候就固定了，不能再容纳更多的元素。而vector是动态数组，虽然初始化的时候设定了大小，但可以在后面随需增长，容纳任意数量的元素。</p><pre><code>array&lt;int, 2&gt; arr;                // 初始一个array，长度是2\nassert(arr.size() == 2);        // 静态数组的长度总是2\n\nvector&lt;int&gt; v(2);              // 初始一个vector，长度是2\nfor(int i = 0; i &lt; 10; i++) {\n    v.emplace_back(i);          // 追加多个元素\n}\nassert(v.size() == 12);          // 长度动态增长到12\n</code></pre><p>deque也是一种可以动态增长的数组，它和vector的区别是，它可以在两端高效地插入删除元素，这也是它的名字double-end queue的来历，而vector则只能用push_back在末端追加元素。</p><pre><code>deque&lt;int&gt; d;                  // 初始化一个deque，长度是0\nd.emplace_back(9);              // 末端添加一个元素\nd.emplace_front(1);              // 前端添加一个元素\nassert(d.size() == 2);          // 长度动态增长到2\n</code></pre><p>vector和deque里的元素因为是连续存储的，所以在中间的插入删除效率就很低，而list和forward_list是链表结构，插入删除操作只需要调整指针，所以在任意位置的操作都很高效。</p><p>链表的缺点是查找效率低，只能沿着指针顺序访问，这方面不如vector随机访问的效率高。list是双向链表，可以向前或者向后遍历，而forward_list，顾名思义，是单向链表，只能向前遍历，查找效率就更低了。</p><p>链表结构比起数组结构还有一个缺点，就是存储成本略高，因为必须要为每个元素附加一个或者两个的指针，指向链表的前后节点。</p><p>vector/deque和list/forward_list都可以动态增长来容纳更多的元素，但它们的内部扩容机制却是不一样的。</p><p>当vector的容量到达上限的时候（capacity），它会再分配一块两倍大小的新内存，然后把旧元素拷贝或者移动过去。这个操作的成本是非常大的，所以，你在使用vector的时候最好能够“预估”容量，使用reserve提前分配足够的空间，减少动态扩容的拷贝代价。</p><p>vector的做法太“激进”，而deque、list的的扩容策略就“保守”多了，只会按照固定的“步长”（例如N个字节、一个节点）去增加容量。但在短时间内插入大量数据的时候就会频繁分配内存，效果反而不如vector一次分配来得好。</p><p>说完了这5个容器的优缺点，你该怎么选择呢？</p><p>我的看法是，如果没有什么特殊需求，首选的容器就是array和vector，它们的速度最快、开销最低，数组的形式也令它们最容易使用，搭配算法也可以实现快速的排序和查找。</p><p>剩下的deque、list和forward_list则适合对插入删除性能比较敏感的场合，如果还很在意空间开销，那就只能选择非链表的deque了。</p><p><img src=\"https://static001.geekbang.org/resource/image/6a/24/6ac671f2c8523c09343a34811ad7e324.jpg?wh=2250*2558\" alt=\"\"></p><h3>有序容器</h3><p>顺序容器的特点是，元素的次序是由它插入的次序而决定的，访问元素也就按照最初插入的顺序。而有序容器则不同，它的元素在插入容器后就被按照某种规则自动排序，所以是“有序”的。</p><p>C++的有序容器使用的是树结构，通常是红黑树——有着最好查找性能的二叉树。</p><p>标准库里一共有四种有序容器：set/multiset和map/multimap。set是集合，map是关联数组（在其他语言里也叫“字典”）。</p><p>有multi前缀的容器表示可以容纳重复的key，内部结构与无前缀的相同，所以也可以认为只有两种有序容器。</p><p>因为有序容器的数量很少，所以使用的关键就是要理解它的“有序”概念，也就是说，<strong>容器是如何判断两个元素的“先后次序”，知道了这一点，才能正确地排序</strong>。</p><p>这就导致了有序容器与顺序容器的另一个根本区别，<strong>在定义容器的时候必须要指定key的比较函数</strong>。只不过这个函数通常是默认的less，表示小于关系，不用特意写出来：</p><pre><code>template&lt;\n    class T                          // 模板参数只有一个元素类型\n&gt; class vector;                      // vector\n\ntemplate&lt;\n    class Key,                      // 模板参数是key类型，即元素类型\n    class Compare = std::less&lt;Key&gt;  // 比较函数\n&gt; class set;                        // 集合\n\ntemplate&lt;\n    class Key,                      // 第一个模板参数是key类型\n    class T,                        // 第二个模板参数是元素类型\n    class Compare = std::less&lt;Key&gt;  // 比较函数\n&gt; class map;                        // 关联数组\n</code></pre><p>C++里的int、string等基本类型都支持比较排序，放进有序容器里毫无问题。但很多自定义类型没有默认的比较函数，要作为容器的key就有点麻烦。虽然这种情况不多见，但有的时候还真是个“刚性需求”。</p><p><strong>解决这个问题有两种办法：一个是重载“&lt;”，另一个是自定义模板参数</strong>。</p><p>比如说我们有一个Point类，它是没有大小概念的，但只要给它重载“&lt;”操作符，就可以放进有序容器里了：</p><pre><code>bool operator&lt;(const Point&amp; a, const Point&amp; b)\n{\n    return a.x &lt; b.x;            // 自定义比较运算\n}\n\nset&lt;Point&gt; s;                    // 现在就可以正确地放入有序容器\ns.emplace(7);\ns.emplace(3);\n</code></pre><p>另一种方式是编写专门的函数对象或者lambda表达式，然后在容器的模板参数里指定。这种方式更灵活，而且可以实现任意的排序准则：</p><pre><code>set&lt;int&gt; s = {7, 3, 9};           // 定义集合并初始化3个元素\n\nfor(auto&amp; x : s) {                // 范围循环输出元素\n    cout &lt;&lt; x &lt;&lt; &quot;,&quot;;              // 从小到大排序，3,7,9\n}   \n\nauto comp = [](auto a, auto b)  // 定义一个lambda，用来比较大小\n{   \n    return a &gt; b;                // 定义大于关系\n};  \n\nset&lt;int, decltype(comp)&gt; gs(comp)  // 使用decltype得到lambda的类型\n\nstd::copy(begin(s), end(s),          // 拷贝算法，拷贝数据\n          inserter(gs, gs.end()));  // 使用插入迭代器\n\nfor(auto&amp; x : gs) {                // 范围循环输出元素\n    cout &lt;&lt; x &lt;&lt; &quot;,&quot;;                // 从大到小排序，9,7,3\n}  \n</code></pre><p>除了<strong>比较函数</strong>这点，有序容器其实没有什么太多好说的，因为就这两个，选择起来很简单：<strong>集合关系就用set，关联数组就用map</strong>。</p><p>不过还是要再提醒你一点，因为有序容器在插入的时候会自动排序，所以就有隐含的插入排序成本，当数据量很大的时候，内部的位置查找、树旋转成本可能会比较高。</p><p>还有，如果你需要实时插入排序，那么选择set/map是没问题的。如果是非实时，那么最好还是用vector，全部数据插入完成后再一次性排序，效果肯定会更好。</p><h3>无序容器</h3><p>有“有序容器”，那自然会有对应的“无序容器”了。这两类容器不仅在字面上，在其他方面也真的是完全对应。</p><p>无序容器也有四种，名字里也有set和map，只是加上了unordered（无序）前缀，分别是unordered_set/unordered_multiset、unordered_map/unordered_multimap。</p><p>无序容器同样也是集合和关联数组，用法上与有序容器几乎是一样的，区别在于内部数据结构：<strong>它不是红黑树，而是散列表</strong>（也叫哈希表，hash table）。</p><p>因为它采用散列表存储数据，元素的位置取决于计算的散列值，没有规律可言，所以就是“无序”的，你也可以把它理解为“乱序”容器。</p><p>下面的代码简单示范了无序容器的操作，虽然接口与有序容器一样，但输出元素的顺序是不确定的乱序：</p><pre><code>using map_type =                    // 类型别名\n    unordered_map&lt;int, string&gt;;      // 使用无序关联数组\n\nmap_type dict;                      // 定义一个无序关联数组\n\ndict[1] = &quot;one&quot;;                      // 添加三个元素\ndict.emplace(2, &quot;two&quot;);\ndict[10] = &quot;ten&quot;;\n\nfor(auto&amp; x : dict) {                // 遍历输出\n    cout &lt;&lt; x.first &lt;&lt; &quot;=&gt;&quot;           // 顺序不确定\n         &lt;&lt; x.second &lt;&lt; &quot;,&quot;;          // 既不是插入顺序，也不是大小序\n} \n</code></pre><p>无序容器虽然不要求顺序，但是对key的要求反而比有序容器更“苛刻”一些，拿unordered_map的声明来看一下：</p><pre><code>template&lt;\n    class Key,                          // 第一个模板参数是key类型\n    class T,                            // 第二个模板参数是元素类型\n    class Hash = std::hash&lt;Key&gt;,        // 计算散列值的函数对象\n    class KeyEqual = std::equal_to&lt;Key&gt; // 相等比较函数\n&gt; class unordered_map; \n</code></pre><p>它要求key具备两个条件，一是<strong>可以计算hash值</strong>，二是<strong>能够执行相等比较操作</strong>。第一个是因为散列表的要求，只有计算hash值才能放入散列表，第二个则是因为hash值可能会冲突，所以当hash值相同时，就要比较真正的key值。</p><p>与有序容器一样，要把自定义类型作为key放入无序容器，必须要实现这两个函数。</p><p>“==”函数比较简单，可以用与“&lt;”函数类似的方式，通过重载操作符来实现：</p><pre><code>bool operator==(const Point&amp; a, const Point&amp; b)\n{\n    return a.x == b.x;              // 自定义相等比较运算\n}\n</code></pre><p>散列函数就略麻烦一点，你可以用函数对象或者lambda表达式实现，内部最好调用标准的std::hash函数对象，而不要自己直接计算，否则很容易造成hash冲突：</p><pre><code>auto hasher = [](const auto&amp; p)    // 定义一个lambda表达式\n{\n    return std::hash&lt;int&gt;()(p.x);  // 调用标准hash函数对象计算\n};\n\n</code></pre><p>有了相等函数和散列函数，自定义类型也就可以放进无序容器了：</p><pre><code>unordered_set&lt;Point, decltype(hasher)&gt; s(10, hasher);\n\ns.emplace(7);\ns.emplace(3);\n\n</code></pre><p>有序容器和无序容器的接口基本一样，这两者该如何选择呢？</p><p>其实看数据结构就清楚了，<strong>如果只想要单纯的集合、字典，没有排序需求，就应该用无序容器，没有比较排序的成本，它的速度就会非常快</strong>。</p><h2>小结</h2><p>好了，今天我从数据结构的角度全面介绍了C++标准库里的各种容器，只要你了解这些容器的基本特性，知道内部结构上的优缺点，今后在写程序的时候，也就不会再犯“选择困难症”了。</p><p>判断容器是否合适的基本依据是“<strong>不要有多余的操作</strong>”，也就是说，不要为不需要的功能付出代价。比如，只在末尾添加元素，就不要用deque/list；只想快速查找元素，不用排序，就应该选unordered_set。</p><p>再简单小结一下今天的内容：</p><ol>\n<li>标准容器可以分为三大类，即顺序容器、有序容器和无序容器；</li>\n<li>所有容器中最优先选择的应该是array和vector，它们的速度最快，开销最低；</li>\n<li>list是链表结构，插入删除的效率高，但查找效率低；</li>\n<li>有序容器是红黑树结构，对key自动排序，查找效率高，但有插入成本；</li>\n<li>无序容器是散列表结构，由hash值计算存储位置，查找和插入的成本都很低；</li>\n<li>有序容器和无序容器都属于关联容器，元素有key的概念，操作元素实际上是在操作key，所以要定义对key的比较函数或者散列函数。</li>\n</ol><p><img src=\"https://static001.geekbang.org/resource/image/8e/85/8e935b3e8573ab5a6eb417c314cea285.jpg?wh=2250*2466\" alt=\"\"></p><p>我再教你一个使用这些容器的小技巧，就是<strong>多利用类型别名，而不要“写死”容器定义</strong>。因为容器的大部分接口是相同的，所以只要变动别名定义，就能够随意改换不同的容器，对于开发、测试都非常方便。</p><h2>课下作业</h2><p>最后是课下作业时间，给你留两个思考题：</p><ol>\n<li>试着用自己的语言说一下这些容器的优点、缺点和区别。</li>\n<li>你最喜欢、最常用的是哪种容器？为什么？</li>\n</ol><p>欢迎在留言区写下你的思考和答案，如果觉得今天的内容对你有所帮助，也欢迎分享给你的朋友。我们下节课见。</p><p><img src=\"https://static001.geekbang.org/resource/image/18/54/1802953e56e91e6a06e1d601e6f8c854.jpg?wh=2000*3507\" alt=\"\"></p>","comments":[{"had_liked":false,"id":223480,"user_name":"EncodedStar","can_delete":false,"product_type":"c1","uid":1504234,"ip_address":"","ucode":"03958CA7DDD6AE","user_header":"https://static001.geekbang.org/account/avatar/00/16/f3/ea/2b2adda5.jpg","comment_is_top":false,"comment_ctime":1591099883,"is_pvip":false,"replies":[{"id":"82379","content":"thanks。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1591153069,"ip_address":"","comment_id":223480,"utype":1}],"discussion_count":1,"race_medal":0,"score":"83195478507","product_id":100051801,"comment_content":"这节课把容器简直讲活了，最后的小技巧很实用，nice","like_count":19,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497141,"discussion_content":"thanks。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591153069,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":223330,"user_name":"泰伦卢","can_delete":false,"product_type":"c1","uid":1141994,"ip_address":"","ucode":"FEA6B43C8D4FF9","user_header":"https://static001.geekbang.org/account/avatar/00/11/6c/ea/e03fec22.jpg","comment_is_top":false,"comment_ctime":1591063838,"is_pvip":true,"replies":[{"id":"82271","content":"感谢补充，在Linux下习惯了，不太关注其他平台。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1591065624,"ip_address":"","comment_id":223330,"utype":1}],"discussion_count":1,"race_medal":0,"score":"48835704094","product_id":100051801,"comment_content":"关于vector扩容机制，建议加个平台前置条件，windows和linux系统的stl vector平台的扩容倍数是不一样的，而且移动端平台也有好多种stl，有gnustl和c++sharedstl等，不清楚具体实现，可能也会有所区别！","like_count":11,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497101,"discussion_content":"感谢补充，在Linux下习惯了，不太关注其他平台。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591065624,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":223373,"user_name":"Eason Tai","can_delete":false,"product_type":"c1","uid":1200676,"ip_address":"","ucode":"4707577CC9C9E9","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/24/bd63c4de.jpg","comment_is_top":false,"comment_ctime":1591075376,"is_pvip":false,"replies":[{"id":"82321","content":"很好的学习方法，nice。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1591081953,"ip_address":"","comment_id":223373,"utype":1}],"discussion_count":1,"race_medal":0,"score":"44540748336","product_id":100051801,"comment_content":"有一说一，配合c++ prime和自己手敲来看专栏，互相验证，真的挺舒服的。","like_count":10,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497112,"discussion_content":"很好的学习方法，nice。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591081953,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":223285,"user_name":"无为而立","can_delete":false,"product_type":"c1","uid":2003887,"ip_address":"","ucode":"A74526BF43A077","user_header":"https://static001.geekbang.org/account/avatar/00/1e/93/af/54e2a654.jpg","comment_is_top":false,"comment_ctime":1591055892,"is_pvip":false,"replies":[{"id":"82264","content":"说得对，也可以把它理解成是编译阶段的函数，计算表达式的类型。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1591059831,"ip_address":"","comment_id":223285,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23065892372","product_id":100051801,"comment_content":"顺便复习了下，deltype哈哈，感觉把它当成函数更好理解","like_count":5,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497086,"discussion_content":"说得对，也可以把它理解成是编译阶段的函数，计算表达式的类型。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591059831,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":224867,"user_name":"java2c++","can_delete":false,"product_type":"c1","uid":1460660,"ip_address":"","ucode":"C4F8C3D7B1A910","user_header":"","comment_is_top":false,"comment_ctime":1591579744,"is_pvip":false,"replies":[{"id":"82764","content":"说的很好。<br><br>注重查询效率通常就会选择无序容器，但还有其他很多时候容器注重的是存储，所以就可以选择array、vector，等全存完了之后再排序查找。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1591581817,"ip_address":"","comment_id":224867,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18771448928","product_id":100051801,"comment_content":"问题1:所有的容器都是为了用来存放元素，理论上直接用数组就可以了，但是增删改查的效率未必如你所愿了。所以标准库又搞了那么多容器是为了满足各个不同的使用场景。<br>增删改查效率最高的underd_set，时间复杂度是O（1）<br>，不过它是无序的，另外不能按下标查询。<br>其次是红黑树，跳表，时间复杂度是O（logN）。<br>相对于array它们共同的优点是不需要显性扩容，底层都处理好了","like_count":4,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497635,"discussion_content":"说的很好。\n\n注重查询效率通常就会选择无序容器，但还有其他很多时候容器注重的是存储，所以就可以选择array、vector，等全存完了之后再排序查找。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591581817,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":224273,"user_name":"群","can_delete":false,"product_type":"c1","uid":1843313,"ip_address":"","ucode":"F8A363F19DAB9B","user_header":"https://static001.geekbang.org/account/avatar/00/1c/20/71/ad3465c0.jpg","comment_is_top":false,"comment_ctime":1591329917,"is_pvip":false,"replies":[{"id":"82576","content":"举个例子吧，比如说用string作为key，abc和cba，两者的hash值是相同的，都放进了一个开链表里，但这两个元素显然是不同的，真正要找cba就必须在这个链表里取比较查找。<br><br>关键在于hash值相等不代表key就一定相等，因为hash值只是一个映射，还必须去比较真正的实体。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1591336185,"ip_address":"","comment_id":224273,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18771199101","product_id":100051801,"comment_content":"文中说key必须具备两个条件,其中第二个条件,<br>&quot;第二个则是因为 hash 值可能会冲突，所以当 hash 值相同时，就要比较真正的 key 值&quot;,<br>当hash值一样时,直接把新添加的元素添加到hash值相等的队列后边不就行了吗?为什么再比较key值呢?<br>这里,比较key值有什么用处吗?比较了之后可以用来做什么呢?没明白这里的意思,老师可以稍微解释一下吗?","like_count":4,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497425,"discussion_content":"举个例子吧，比如说用string作为key，abc和cba，两者的hash值是相同的，都放进了一个开链表里，但这两个元素显然是不同的，真正要找cba就必须在这个链表里取比较查找。\n\n关键在于hash值相等不代表key就一定相等，因为hash值只是一个映射，还必须去比较真正的实体。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591336185,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1324007,"avatar":"https://static001.geekbang.org/account/avatar/00/14/33/e7/145be2f9.jpg","nickname":"怪兽","note":"","ucode":"3342C55CB83B08","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285394,"discussion_content":"所以hssh函数要计算出足够乱的hash值，这样查询效率才会高","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592825268,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317429,"user_name":"Wei Zhou","can_delete":false,"product_type":"c1","uid":2670319,"ip_address":"","ucode":"91B72493A8765D","user_header":"https://static001.geekbang.org/account/avatar/00/28/be/ef/a1bb0528.jpg","comment_is_top":false,"comment_ctime":1634795220,"is_pvip":false,"replies":[{"id":"115034","content":"std::hash是一个类，所以std::hash()就是构造函数，创建了一个临时对象，而std::hash又重载了operator()，所以这个临时对象可以像函数一样调用。<br><br>这是c++里函数对象的常见用法，第一次见可能会有点理解困难。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1634806368,"ip_address":"","comment_id":317429,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14519697108","product_id":100051801,"comment_content":"return std::hash()(p.x) 第一个括号是什么意思 ？","like_count":3,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528812,"discussion_content":"std::hash是一个类，所以std::hash()就是构造函数，创建了一个临时对象，而std::hash又重载了operator()，所以这个临时对象可以像函数一样调用。\n\n这是c++里函数对象的常见用法，第一次见可能会有点理解困难。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634806368,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":223614,"user_name":"木瓜777","can_delete":false,"product_type":"c1","uid":1512537,"ip_address":"","ucode":"FC52A499AF6374","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/aFAYPyw7ywC1xE9h1qibnTBwtWn2ClJqlicy5cMomhZVaruMyqSq76wMkS279mUaGhrLGwWo9ZnW0WCWfmMovlXw/132","comment_is_top":false,"comment_ctime":1591144889,"is_pvip":false,"replies":[{"id":"82373","content":"可以使用标准库里的std::hash函数对类成员逐个hash。<br><br>但浮点数不建议用hash，它不精确。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1591152824,"ip_address":"","comment_id":223614,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14476046777","product_id":100051801,"comment_content":"如果使用unorder_map，对自定义的结构，例如 struct Point {float x;float y}，该如何实现hash？对多个float 有没有好的hash方法？","like_count":3,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497188,"discussion_content":"可以使用标准库里的std::hash函数对类成员逐个hash。\n\n但浮点数不建议用hash，它不精确。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591152824,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240606,"user_name":"l c","can_delete":false,"product_type":"c1","uid":1245596,"ip_address":"","ucode":"7D43CC471595EC","user_header":"https://static001.geekbang.org/account/avatar/00/13/01/9c/1a750bc7.jpg","comment_is_top":false,"comment_ctime":1597000219,"is_pvip":false,"replies":[{"id":"88814","content":"简单方便，就地定义，不像普通函数，需要跑到源码文件前面去写，局部化更好理解和维护。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1597021005,"ip_address":"","comment_id":240606,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10186934811","product_id":100051801,"comment_content":"老师您好，<br>对于这里<br>auto comp = [](auto a, auto b)  &#47;&#47; 定义一个lambda，用来比较大小<br>{       <br>    return a &gt; b;                &#47;&#47; 定义大于关系<br>};<br><br>之前一般我都是直接用一般函数写的，请问使用lambda的优势在哪里呢？","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503500,"discussion_content":"简单方便，就地定义，不像普通函数，需要跑到源码文件前面去写，局部化更好理解和维护。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597021005,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240463,"user_name":"出卖灵魂的教练Kerry","can_delete":false,"product_type":"c1","uid":1807943,"ip_address":"","ucode":"8C64517DA556FE","user_header":"https://static001.geekbang.org/account/avatar/00/1b/96/47/93838ff7.jpg","comment_is_top":false,"comment_ctime":1596939760,"is_pvip":true,"replies":[{"id":"88817","content":"deque是多段不连续的数组组成的，既然是数组，如果要在中间插入删除元素，为了保持数据的连续性，就要在操作位置前后移动元素，这个就是插入删除的成本。<br>","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1597021147,"ip_address":"","comment_id":240463,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10186874352","product_id":100051801,"comment_content":"老师你好，既然deque底层是数组，怎么会对插入删除敏感呢？是插入一个分配一个内存吗？这样子效率会不会太低了？","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503453,"discussion_content":"deque是多段不连续的数组组成的，既然是数组，如果要在中间插入删除元素，为了保持数据的连续性，就要在操作位置前后移动元素，这个就是插入删除的成本。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597021147,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":224340,"user_name":"Ryan24G","can_delete":false,"product_type":"c1","uid":1631292,"ip_address":"","ucode":"EA1E134C18DA80","user_header":"https://static001.geekbang.org/account/avatar/00/18/e4/3c/dfcb86df.jpg","comment_is_top":false,"comment_ctime":1591348218,"is_pvip":true,"replies":[{"id":"82588","content":"C++标准只是规定了无序容器的基本概念和性能要求，而没有规定容器的具体实现，所以各家编译器和标准库可以自由发挥，采用不同的算法，不是统一的。<br><br>因为无序容器是散列表，所以查找效率通常来说要比红黑树来的高，因为只需要计算一次hash值，通常就可以直接定位到元素，比红黑树的多次查找要快很多。<br><br>但这个也只是理论上的说法，实际效果怎么样还是要做个测试。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1591351286,"ip_address":"","comment_id":224340,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10181282810","product_id":100051801,"comment_content":"老师，无序容器中，查找key使用的是什么算法，查询效率和有序容器比起来怎么样？","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497447,"discussion_content":"C++标准只是规定了无序容器的基本概念和性能要求，而没有规定容器的具体实现，所以各家编译器和标准库可以自由发挥，采用不同的算法，不是统一的。\n\n因为无序容器是散列表，所以查找效率通常来说要比红黑树来的高，因为只需要计算一次hash值，通常就可以直接定位到元素，比红黑树的多次查找要快很多。\n\n但这个也只是理论上的说法，实际效果怎么样还是要做个测试。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591351286,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":223273,"user_name":"逸清","can_delete":false,"product_type":"c1","uid":1996012,"ip_address":"","ucode":"B8EEFA299527EC","user_header":"https://static001.geekbang.org/account/avatar/00/1e/74/ec/973fb3b7.jpg","comment_is_top":false,"comment_ctime":1591053364,"is_pvip":false,"replies":[{"id":"82261","content":"后面会专门讲。<br><br>简单来说就是boost.asio，即将进入标准库，但它还是很复杂的，用好了不容易。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1591059682,"ip_address":"","comment_id":223273,"utype":1}],"discussion_count":4,"race_medal":0,"score":"10180987956","product_id":100051801,"comment_content":"老师，C++有什么比较常用的网络应用框架或库，最近要部署一个应用服务让其他人来调用，想用C++来实现","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497084,"discussion_content":"后面会专门讲。\n\n简单来说就是boost.asio，即将进入标准库，但它还是很复杂的，用好了不容易。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591059682,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277473,"discussion_content":"muduo好像很老了吧，也许开发比较简单，但和asio肯定是比不了的\n","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1591060262,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2041484,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/kUgXE9azak3lmKM5h1icdNLSW5xoM0vKcEHibmN9YuianC11ibdaqicyZMUicTZVEweGtb9HUPeCCvIbmBPIBvibBkWBA/132","nickname":"Geek_a5d0ae","note":"","ucode":"FFA0C9FE8A39D2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301378,"discussion_content":"Zero Ice","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598508927,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1197375,"avatar":"https://static001.geekbang.org/account/avatar/00/12/45/3f/86d2f4bd.jpg","nickname":"SometimesNever","note":"","ucode":"E82A2ABC1ABDE5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277413,"discussion_content":"muduo","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591056474,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":299495,"user_name":"逆风翻盘我可以","can_delete":false,"product_type":"c1","uid":2181588,"ip_address":"","ucode":"6DD9C60F38E675","user_header":"https://static001.geekbang.org/account/avatar/00/21/49/d4/dd47b045.jpg","comment_is_top":false,"comment_ctime":1624678852,"is_pvip":false,"replies":[{"id":"108644","content":"比如：<br><br>using data_type = map&lt;int,string&gt;;<br><br>这样，在代码里用data_type，而不是直接的map类型，以后可以随时改变data_type的定义，比如换成：<br><br>using data_type = unordered_map&lt;int,string&gt;;<br><br>","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1624710153,"ip_address":"","comment_id":299495,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5919646148","product_id":100051801,"comment_content":"多利用类型别名，而不要“写死”容器定义。老师，这句话能给个例子嘛？","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522455,"discussion_content":"比如：\n\nusing data_type = map&amp;lt;int,string&amp;gt;;\n\n这样，在代码里用data_type，而不是直接的map类型，以后可以随时改变data_type的定义，比如换成：\n\nusing data_type = unordered_map&amp;lt;int,string&amp;gt;;\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624710153,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":285956,"user_name":"Miroticwillbeforever","can_delete":false,"product_type":"c1","uid":2488913,"ip_address":"","ucode":"1DDD8AECD93EA8","user_header":"https://static001.geekbang.org/account/avatar/00/25/fa/51/5da91010.jpg","comment_is_top":false,"comment_ctime":1617086713,"is_pvip":false,"replies":[{"id":"103843","content":"那可能是我的知识有点老了，没有认真核对过。<br><br>我在gcc7.5上测试了一下，当超过capacity的时候，vector会增大为两倍，比如10=&gt;20。<br><br>这个其实是容器内部的实现细节，我们不用特别关注，只要知道会有扩容的动作就行了。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1617105205,"ip_address":"","comment_id":285956,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5912054009","product_id":100051801,"comment_content":"老师，我自己曾经测试过 ,C++primerd书中也提到过，有关vector容器的扩容问题，每次扩展为原来的1.5倍。这个两倍我还没有遇到过","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517831,"discussion_content":"那可能是我的知识有点老了，没有认真核对过。\n\n我在gcc7.5上测试了一下，当超过capacity的时候，vector会增大为两倍，比如10=&amp;gt;20。\n\n这个其实是容器内部的实现细节，我们不用特别关注，只要知道会有扩容的动作就行了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617105205,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":280264,"user_name":"Geek_659bde","can_delete":false,"product_type":"c1","uid":2417132,"ip_address":"","ucode":"9FA64AADD1AEDF","user_header":"","comment_is_top":false,"comment_ctime":1614146207,"is_pvip":false,"replies":[{"id":"101798","content":"因为容器其实也是对象，所以它会有析构函数，于是就可以在析构的时候执行特殊操作，逐个调用容器内部元素的析构函数，这样就是自动销毁了。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1614215855,"ip_address":"","comment_id":280264,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5909113503","product_id":100051801,"comment_content":"老师，请问下 容器自动销毁元素 这个怎么理解，多谢","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516040,"discussion_content":"因为容器其实也是对象，所以它会有析构函数，于是就可以在析构的时候执行特殊操作，逐个调用容器内部元素的析构函数，这样就是自动销毁了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614215855,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":278020,"user_name":"Stephen","can_delete":false,"product_type":"c1","uid":1165201,"ip_address":"","ucode":"0D49223E6CB7B1","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ7mAt63VrbLZPHpeZxSc4IlBYswQSnaAB5wGePaGFDehgiaNfIxI1SJ5yIHIlmVk8hsw0RaoaSCPA/132","comment_is_top":false,"comment_ctime":1612705532,"is_pvip":false,"replies":[{"id":"100918","content":"总结的非常好，看来是C++老司机了，笑。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1612739291,"ip_address":"","comment_id":278020,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5907672828","product_id":100051801,"comment_content":"<br>第一个问题:<br>顺序容器:<br> 连续存储:<br>  array:优点--随机访问(一步直接得到数据的首地址的访问方式)方便,开销低,速度快.缺点--容量在定义时就确定了,不能够改变,中间删除和插入比较麻烦(需要后面的元素都移动)<br>  vector:优点--随机访问方便,可以自动扩容.缺点--中间插入或者删除数据比较麻烦;扩容往往增加为原来长度的2倍,可能造成空间浪费;只能后面追加元素<br>  deque:优点--可以前后两端进行进行插入和弹出操作.缺点--中间插入和删除操作比较麻烦;按照固定步长分配内存,如果短时间内频繁分配内存,效果不如vector一次分配的好.<br> 链式存储:<br>  list:优点--有前后两个指针,插入和删除比较方便;缺点--不能随机访问,需要遍历才能访问到.<br>  forward_list:优点--只有一个指针,指向后面的元素,占内存较小;对于插入和删除操作,效率要高于list(这些都是C++引入它的原因). 缺点--只能从头到尾的遍历,不能反向,查找效率低.<br>    <br>关联容器:<br> 有序(set&#47;multiset, map&#47;multimap): 采用红黑树结构,元素需要定义比较大小函数,即排序准则. 优点--二分查找效率高;缺点:插入元素有排序成本(这个一直没有注意过)<br> 无序(unordered_set&#47;unordered_multiset, unordered_mapunordered_multimap): 散列表结构,元素需要定义散列函数和相等比较函数. 优点--插入元素不需要排序,效率高;查找成本低 缺点--没有顺序.<br>  <br>第二个问题:<br>最喜欢的是vector,因为最早用的它,比较顺手.","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515252,"discussion_content":"总结的非常好，看来是C++老司机了，笑。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612739291,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1165201,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ7mAt63VrbLZPHpeZxSc4IlBYswQSnaAB5wGePaGFDehgiaNfIxI1SJ5yIHIlmVk8hsw0RaoaSCPA/132","nickname":"Stephen","note":"","ucode":"0D49223E6CB7B1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348813,"discussion_content":"谢谢老师。关联容器里的查找指的是查找到键，进而找到对应的值，顺序容器的查找是直接找到值吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612743704,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":259732,"user_name":"风清扬","can_delete":false,"product_type":"c1","uid":1047043,"ip_address":"","ucode":"651F1390B64953","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fa/03/619e3e48.jpg","comment_is_top":false,"comment_ctime":1604821860,"is_pvip":true,"replies":[{"id":"94386","content":"一般重载比较操作符的时候，都是用的类外面的全局函数，好像很少有用成员函数的。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1604832412,"ip_address":"","comment_id":259732,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5899789156","product_id":100051801,"comment_content":"bool operator&lt;(const Point&amp; a, const Point&amp; b)  重载&lt;的话，不是只用一个参数吗？然后里面时a.x 和this-&gt;x比较?","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509012,"discussion_content":"一般重载比较操作符的时候，都是用的类外面的全局函数，好像很少有用成员函数的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604832412,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":322865,"discussion_content":"对，比较操作很多都是friend函数，可以参考一下boost.operators库，最好不要自己写，而是用现成的库。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604833048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1047043,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fa/03/619e3e48.jpg","nickname":"风清扬","note":"","ucode":"651F1390B64953","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":322860,"discussion_content":"但是一般数据都是private的，这么写还得写成友元吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604832515,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":255451,"user_name":"纳兰容若","can_delete":false,"product_type":"c1","uid":1605876,"ip_address":"","ucode":"2E1EA2CDFDA1A9","user_header":"https://static001.geekbang.org/account/avatar/00/18/80/f4/564209ea.jpg","comment_is_top":false,"comment_ctime":1603348032,"is_pvip":true,"replies":[{"id":"93059","content":"可以上cppreference网站，搜一下，应该很快就能出结果。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1603356085,"ip_address":"","comment_id":255451,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5898315328","product_id":100051801,"comment_content":"有个问题想请教老师，如何迅速查找函数所需要的头文件，比如inserter","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507719,"discussion_content":"可以上cppreference网站，搜一下，应该很快就能出结果。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603356085,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":254900,"user_name":"小政哥","can_delete":false,"product_type":"c1","uid":1604464,"ip_address":"","ucode":"E043BF904B6B7C","user_header":"https://static001.geekbang.org/account/avatar/00/18/7b/70/bdf11801.jpg","comment_is_top":false,"comment_ctime":1603208858,"is_pvip":true,"replies":[{"id":"92942","content":"总结的很好，不过有一点写错了，unordered_map &#47; unordered_set 的key也是不能重复的，只要是关联容器key就不能重复，重复的话要用multi容器。<br><br>unordered内部的哈希表是hash value允许冲突，但原始的值是不允许的。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1603242500,"ip_address":"","comment_id":254900,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5898176154","product_id":100051801,"comment_content":"这些容器的优点、缺点和区别：<br>array 静态数组  查询效率高 O(1)  但不能动态开辟内存，无法扩容，适合存放静态数据<br>vector 动态数组  查询效率高 O(1)  可以动态开辟内存  尾插效率也是O(1),  适合查询多，插入删除少的场景<br>deque  双端队列， 两端都可以插入删除  也是适合查询多，插入删除少的场景 <br>list  forward_list   查询效率低， 插入删除0(1)， 适合插入删除多，查找少的场景<br>map &#47; set  有序的键值对，键不能重复，值可以重复 查询效率和插入删除效率都高   O(log n)<br>unordered_map &#47; unordered_set  也是键值对， 键可以重复，值不能重复， 查询效率的高低取决于哈希值，哈希冲突会导致插入删除效率都比较低， 如果采用链地址法，查询也会受影响，因为哈希桶里面放的是链表，查询的效率是O(n)，但是有库中的hash函数，我想哈希冲突也是可以很好解决，  查询效率和插入删除效率应该也很高。<br>我最喜欢、最常用的容器：<br>vector  存储值，动态数组，好用， 查询效率高   <br>list       插入删除多的场景<br>map  键值对的数据，有序， 插入删除，查找效率都比较高， 而且大部分场景有序数据处理起来比较容易，容易迭代<br>","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507551,"discussion_content":"总结的很好，不过有一点写错了，unordered_map / unordered_set 的key也是不能重复的，只要是关联容器key就不能重复，重复的话要用multi容器。\n\nunordered内部的哈希表是hash value允许冲突，但原始的值是不允许的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603242500,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1309911,"avatar":"https://static001.geekbang.org/account/avatar/00/13/fc/d7/b102034a.jpg","nickname":"do it","note":"","ucode":"E0753912E8F2AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":367064,"discussion_content":"vector的查询效率O(1)表述不对，应该是随机访问的复杂度是O(1)，如果是无序数据查找复杂度应该为O(n)","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1618242140,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":245432,"user_name":"宇天飞","can_delete":false,"product_type":"c1","uid":1126444,"ip_address":"","ucode":"3FB37D1E2DAA61","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/2c/06375913.jpg","comment_is_top":false,"comment_ctime":1598943536,"is_pvip":true,"replies":[{"id":"90266","content":"nice","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1598944488,"ip_address":"","comment_id":245432,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5893910832","product_id":100051801,"comment_content":"试着用自己的语言说一下这些容器的优点、缺点和区别。<br>1、array list，属于线性结果，先存入的先显示；数组按索引查找效率高，list交换效率高<br>2、map，set很明确<br>3、无序容器，一般效率高<br><br><br>你最喜欢、最常用的是哪种容器？为什么？<br>1、array，简单，各种操作都可以使用，没有明显的性能缺陷<br>2、map，这个结构非常适合一些key:value场景","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504878,"discussion_content":"nice","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598944488,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232068,"user_name":"sugar","can_delete":false,"product_type":"c1","uid":1167046,"ip_address":"","ucode":"454538FF253B5F","user_header":"https://static001.geekbang.org/account/avatar/00/11/ce/c6/958212b5.jpg","comment_is_top":false,"comment_ctime":1593848559,"is_pvip":false,"replies":[{"id":"85624","content":"感觉这种说法不是很全面，lambda表达式可以匿名，也可以有名字，而且它能够捕获外部变量，这是普通函数没有的功能。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1593849934,"ip_address":"","comment_id":232068,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5888815855","product_id":100051801,"comment_content":"老师 我想问一个有关c++ lamda表达式的问题，如果说lamda就是匿名函数的话 这种理解有什么偏差吗？","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500497,"discussion_content":"感觉这种说法不是很全面，lambda表达式可以匿名，也可以有名字，而且它能够捕获外部变量，这是普通函数没有的功能。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593849934,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":227438,"user_name":"章大蒜📍","can_delete":false,"product_type":"c1","uid":1527051,"ip_address":"","ucode":"B109218608DAFB","user_header":"https://static001.geekbang.org/account/avatar/00/17/4d/0b/ac1f7fec.jpg","comment_is_top":false,"comment_ctime":1592380095,"is_pvip":false,"replies":[{"id":"83820","content":"deque比较灵活，双端队列插入删除方便，不过我用的比较少，可能是没有合适的应用场合。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1592387502,"ip_address":"","comment_id":227438,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5887347391","product_id":100051801,"comment_content":"最喜欢的是deque，双向插入和删除都很方便，既可以用来作为stack，也作为queue","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498640,"discussion_content":"deque比较灵活，双端队列插入删除方便，不过我用的比较少，可能是没有合适的应用场合。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592387502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":223555,"user_name":"有学识的兔子","can_delete":false,"product_type":"c1","uid":1628867,"ip_address":"","ucode":"D1D654B1562FC9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIicr82CnrdEjibibAvyeKRQHszSzIAqoCWxN0kqC442XcjEae6S9j6NDtKLpg4Da4CUQQeUFUicWqiaDw/132","comment_is_top":false,"comment_ctime":1591113446,"is_pvip":false,"replies":[{"id":"82375","content":"把容器和数据结构知识结合起来，就能够用好容器了。<br><br>不过C++的容器也为标准数据结构增加了一些额外的特性，比如emplace、迭代器等等，需要再看接口文档。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1591152912,"ip_address":"","comment_id":223555,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5886080742","product_id":100051801,"comment_content":"结合课程内容和debug test cases，对容器有了比较好的理解，也对顺序&#47;有序&#47;无序容器使用了面向对象的抽象和封装，提供了可供调用的类接口以及隐藏了数组 链表 集合 散列 树等一系列数据结构的实现细节，更加便利的驾驭较为复杂的数据结构。","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497164,"discussion_content":"把容器和数据结构知识结合起来，就能够用好容器了。\n\n不过C++的容器也为标准数据结构增加了一些额外的特性，比如emplace、迭代器等等，需要再看接口文档。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591152912,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":223487,"user_name":"大豆","can_delete":false,"product_type":"c1","uid":1350130,"ip_address":"","ucode":"BC78EF2336DBD0","user_header":"https://static001.geekbang.org/account/avatar/00/14/99/f2/c74d24d7.jpg","comment_is_top":false,"comment_ctime":1591100732,"is_pvip":false,"replies":[{"id":"82378","content":"是的，可以再看一些经典的数据结构书籍或者教材。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1591153063,"ip_address":"","comment_id":223487,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5886068028","product_id":100051801,"comment_content":"老师，可不可以这样理解。哈希表其实就是一个数组，是通过对hash值做一些计算来得出元素的下标，然后再取出元素。<br>如果hash冲突则下标顺延或者在当前下标处加一个链表。","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497144,"discussion_content":"是的，可以再看一些经典的数据结构书籍或者教材。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591153063,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":223315,"user_name":"范闲","can_delete":false,"product_type":"c1","uid":1073125,"ip_address":"","ucode":"F21FD7DF6BA53C","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","comment_is_top":false,"comment_ctime":1591061006,"is_pvip":false,"replies":[{"id":"82272","content":"后面的算法会简单讲一下迭代器，它的概念和用法要难理解一些，我的建议是尽量不要直接使用迭代器，用range-for、算法等把它隐藏起来。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1591065785,"ip_address":"","comment_id":223315,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5886028302","product_id":100051801,"comment_content":"容器里还有个重要的概念是迭代器。迭代器会失效，这点需要注意的.<br>Array是cpp11以后才有的容器。","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497096,"discussion_content":"后面的算法会简单讲一下迭代器，它的概念和用法要难理解一些，我的建议是尽量不要直接使用迭代器，用range-for、算法等把它隐藏起来。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591065785,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":223277,"user_name":"木瓜777","can_delete":false,"product_type":"c1","uid":1512537,"ip_address":"","ucode":"FC52A499AF6374","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/aFAYPyw7ywC1xE9h1qibnTBwtWn2ClJqlicy5cMomhZVaruMyqSq76wMkS279mUaGhrLGwWo9ZnW0WCWfmMovlXw/132","comment_is_top":false,"comment_ctime":1591054809,"is_pvip":false,"replies":[{"id":"82260","content":"在大量数据的时候最好用测试数据来说话，通常来说是无序容器效率高，标准库的hash函数适用性还是比较好的，当然也可以在模板参数里自己换。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1591059547,"ip_address":"","comment_id":223277,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5886022105","product_id":100051801,"comment_content":"您好！ 有时候经常会混用 map和unorder_map，这两者在存储大量数据的时候？谁效率更高？ 我看过几篇文章说，如果设计不好哈希值，unorder_map的查找效率会很低","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497085,"discussion_content":"在大量数据的时候最好用测试数据来说话，通常来说是无序容器效率高，标准库的hash函数适用性还是比较好的，当然也可以在模板参数里自己换。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591059547,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359946,"user_name":"Loca..","can_delete":false,"product_type":"c1","uid":3198947,"ip_address":"北京","ucode":"CCC2E48916F0F7","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/BUJPBATdJ5PiaPbSPJjzfgwCvSu6QOmQSC1GY7At4spmhzO5xaxwTuVAkKrVxom0NkJclnULUqMdPlhdfpiaxEXw/132","comment_is_top":false,"comment_ctime":1666086101,"is_pvip":false,"replies":[{"id":"130933","content":"assert在前面好像说过，就是一种类似文档的语句，说明程序执行的前提和后果，不写当然也可以，写了会让人看得更清楚。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1666096087,"ip_address":"北京","comment_id":359946,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1666086101","product_id":100051801,"comment_content":"罗老师好，我在您的代码中看到了很多assert，好像哪哪都能用，可以介绍下为什么这样用吗，谢谢您","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590834,"discussion_content":"assert在前面好像说过，就是一种类似文档的语句，说明程序执行的前提和后果，不写当然也可以，写了会让人看得更清楚。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666096087,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":353164,"user_name":"猪小擎","can_delete":false,"product_type":"c1","uid":1370959,"ip_address":"北京","ucode":"D9552746AE3327","user_header":"https://static001.geekbang.org/account/avatar/00/14/eb/4f/6a97b1cd.jpg","comment_is_top":false,"comment_ctime":1659213814,"is_pvip":true,"replies":[{"id":"128429","content":"失误了，感谢指正。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1659335800,"ip_address":"北京","comment_id":353164,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1659213814","product_id":100051801,"comment_content":"容器适配写错了，stack和queue 只能是deque或者list的适配器，默认deque，而且deque一般比list性能好得多。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582241,"discussion_content":"失误了，感谢指正。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659335801,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":347717,"user_name":"liy","can_delete":false,"product_type":"c1","uid":1322151,"ip_address":"","ucode":"ACE2C473DBA19F","user_header":"https://static001.geekbang.org/account/avatar/00/14/2c/a7/7f702c49.jpg","comment_is_top":false,"comment_ctime":1654342136,"is_pvip":true,"replies":[{"id":"126770","content":"可以制定学习计划，慢慢来，贪多嚼不烂。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1654414563,"ip_address":"","comment_id":347717,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1654342136","product_id":100051801,"comment_content":"干货满满，一天看4章就觉得脑子要塞不下了","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574868,"discussion_content":"可以制定学习计划，慢慢来，贪多嚼不烂。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654414563,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342378,"user_name":"Papageno","can_delete":false,"product_type":"c1","uid":1902312,"ip_address":"","ucode":"2AA6C247EF7351","user_header":"https://static001.geekbang.org/account/avatar/00/1d/06/e8/7ae63b22.jpg","comment_is_top":false,"comment_ctime":1650225252,"is_pvip":true,"replies":[{"id":"125204","content":"boost库有个ptr_container组件，它可以管理原始指针，可以参考一下。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1650423880,"ip_address":"","comment_id":342378,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1650225252","product_id":100051801,"comment_content":"老师，我想请问下，说容器中存放指针相当于放弃了容器的自动销毁功能，但在设计模式中很频繁得需要往容器中塞入基础类型的指针，这种有什么更好的解决方案吗？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565269,"discussion_content":"boost库有个ptr_container组件，它可以管理原始指针，可以参考一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650423880,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332922,"user_name":"水月","can_delete":false,"product_type":"c1","uid":2344034,"ip_address":"","ucode":"78FC68615016DB","user_header":"https://static001.geekbang.org/account/avatar/00/23/c4/62/269aae3f.jpg","comment_is_top":false,"comment_ctime":1643817271,"is_pvip":false,"replies":[{"id":"121675","content":"能徒手写出这些数据结构的都是高手。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1643864986,"ip_address":"","comment_id":332922,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1643817271","product_id":100051801,"comment_content":"一直对跳表和堆情有独钟，对红黑树只有敬畏，徒手写不来","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549336,"discussion_content":"能徒手写出这些数据结构的都是高手。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643864987,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332756,"user_name":"对方正在输入...","can_delete":false,"product_type":"c1","uid":2428357,"ip_address":"","ucode":"BBD9D27FF98D19","user_header":"https://static001.geekbang.org/account/avatar/00/25/0d/c5/29749f8a.jpg","comment_is_top":false,"comment_ctime":1643551887,"is_pvip":false,"replies":[{"id":"121656","content":"看构造函数声明，10是容器里元素的数量。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1643788798,"ip_address":"","comment_id":332756,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1643551887","product_id":100051801,"comment_content":"老师您好，我想请教一下unordered_set&lt;Point, decltype(hasher)&gt; s(10, hasher);中数字10代表的意义是什么呀？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549261,"discussion_content":"看构造函数声明，10是容器里元素的数量。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643788798,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":279367,"user_name":"Stephen","can_delete":false,"product_type":"c1","uid":1165201,"ip_address":"","ucode":"0D49223E6CB7B1","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ7mAt63VrbLZPHpeZxSc4IlBYswQSnaAB5wGePaGFDehgiaNfIxI1SJ5yIHIlmVk8hsw0RaoaSCPA/132","comment_is_top":false,"comment_ctime":1613731875,"is_pvip":false,"replies":[{"id":"101519","content":"这里其实是我构造的一个特例，表示的是原始字符“\\”和“$”，而不是转义。因为这两个字符在正则里都有特殊含义，所以就都要分别再加上转义的“\\”，就成了“\\\\\\\\\\$”。<br><br>而“\\\\$”，表示的实际上是“$”。<br><br>这里可能有点绕，所以还是用raw string好，没有歧义。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1613783314,"ip_address":"","comment_id":279367,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1613731875","product_id":100051801,"comment_content":" 在正则里表示“\\$”，需要写成&quot;\\\\\\$&quot;，而在 C++ 里需要对“\\”再次转义，就是“\\\\\\\\\\\\$”.老师,这里我有疑问:正则表达式中&quot;\\$&quot;在字符串中写成&quot;\\\\$&quot;不就可以了吗? 只需要保证&quot;\\\\&quot;转义后变成&quot;\\&quot;,而&quot;$&quot;不需要改变.比如 Qt中的QRegExp rx(&quot;^\\\\d\\\\d?$&quot;);     &#47;&#47; match integers 0 to 99 这里的&quot;\\d&quot;也只是写成了&quot;\\\\d&quot;.","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515712,"discussion_content":"这里其实是我构造的一个特例，表示的是原始字符“\\”和“$”，而不是转义。因为这两个字符在正则里都有特殊含义，所以就都要分别再加上转义的“\\”，就成了“\\\\\\\\\\$”。\n\n而“\\\\$”，表示的实际上是“$”。\n\n这里可能有点绕，所以还是用raw string好，没有歧义。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613783314,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1165201,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ7mAt63VrbLZPHpeZxSc4IlBYswQSnaAB5wGePaGFDehgiaNfIxI1SJ5yIHIlmVk8hsw0RaoaSCPA/132","nickname":"Stephen","note":"","ucode":"0D49223E6CB7B1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350249,"discussion_content":"是的，好的谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613786098,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":238144,"user_name":"sp0917","can_delete":false,"product_type":"c1","uid":1347338,"ip_address":"","ucode":"18D341FF4D43AF","user_header":"https://static001.geekbang.org/account/avatar/00/14/8f/0a/22863f93.jpg","comment_is_top":false,"comment_ctime":1596079959,"is_pvip":false,"replies":[{"id":"88000","content":"对，emplace_back是给出参数，在容器末尾添加元素，省去了临时对象的构造成本。<br><br>如果要把现有的对象push进容器，最好是实现转移构造函数。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1596089626,"ip_address":"","comment_id":238144,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1596079959","product_id":100051801,"comment_content":"push_back()和emplace_back()区别；<br>v.push_back(1);   【1】<br>v.emplace_back(2);【2】<br>v.push_back(Point(3));【3】<br>v.emplace_back(Point(4));【4】<br>只有【1】【2】的情况下，emplace_back()才体现优势，但实际上我们开发中【3】【4】情况居多。<br>罗老师，不知道我说的对不对","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502657,"discussion_content":"对，emplace_back是给出参数，在容器末尾添加元素，省去了临时对象的构造成本。\n\n如果要把现有的对象push进容器，最好是实现转移构造函数。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596089626,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":236223,"user_name":"风","can_delete":false,"product_type":"c1","uid":1444483,"ip_address":"","ucode":"E1CE0825AAF805","user_header":"https://static001.geekbang.org/account/avatar/00/16/0a/83/f916f903.jpg","comment_is_top":false,"comment_ctime":1595350609,"is_pvip":false,"replies":[{"id":"87297","content":"C++编译相关的太多，仅从这个代码片段看不出来，不好帮你。<br><br>我简单地用“不允许使用类型名”这个错误消息搜了一下，可能是类型名用作变量名或者函数名了。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1595379427,"ip_address":"","comment_id":236223,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1595350609","product_id":100051801,"comment_content":"罗老师，请教一个问题，下面的代码，报的错是：不允许使用类型名。哪里错了呢？<br><br>set&lt;State *&gt; calc_epsilon_closure(set&lt;State *&gt; set) {<br>\tset&lt;State *&gt; ret;  &#47;&#47; 这里报错，在State下面标红，静态检查提示：不允许使用类型名<br>\tret.insert(set.begin(), set.end());<br>\tfor (auto ele : set) {<br>\t\tauto tmp = calc_epsilon_closure(ele);<br>\t\tret.insert(tmp.begin(), tmp.end());<br>\t}<br><br>\treturn ret;<br>}","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501992,"discussion_content":"C++编译相关的太多，仅从这个代码片段看不出来，不好帮你。\n\n我简单地用“不允许使用类型名”这个错误消息搜了一下，可能是类型名用作变量名或者函数名了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595379427,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1444483,"avatar":"https://static001.geekbang.org/account/avatar/00/16/0a/83/f916f903.jpg","nickname":"风","note":"","ucode":"E1CE0825AAF805","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293067,"discussion_content":"好的，谢谢～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595425333,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232751,"user_name":"出卖灵魂的教练Kerry","can_delete":false,"product_type":"c1","uid":1807943,"ip_address":"","ucode":"8C64517DA556FE","user_header":"https://static001.geekbang.org/account/avatar/00/1b/96/47/93838ff7.jpg","comment_is_top":false,"comment_ctime":1594109230,"is_pvip":true,"replies":[{"id":"85949","content":"从理论上分析，应该是整体操作的效率比逐个操作的效率要高，这是因为整体赋值已知了操作的前提和后果，会有一些优化，比如预先分配空间，可以看源码。<br><br>单纯来说，可能都是调用了std::copy去逐个复制元素，这一点上效率是没有差异的。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1594170174,"ip_address":"","comment_id":232751,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1594109230","product_id":100051801,"comment_content":"老师，两个容器（比如vector）赋值(v1=v2)和每个元素分别赋值，哪种效率更好呢？底层原理是什么？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500760,"discussion_content":"从理论上分析，应该是整体操作的效率比逐个操作的效率要高，这是因为整体赋值已知了操作的前提和后果，会有一些优化，比如预先分配空间，可以看源码。\n\n单纯来说，可能都是调用了std::copy去逐个复制元素，这一点上效率是没有差异的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594170174,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}