{"id":86710,"title":"51 | 案例篇：动态追踪怎么用？（下）","content":"<p>你好，我是倪朋飞。</p><p>上一节，我带你一起学习了常见的动态追踪方法。所谓动态追踪，就是在系统或者应用程序正常运行的时候，通过内核中提供的探针，来动态追踪它们的行为，从而辅助排查出性能问题的瓶颈。</p><p>使用动态追踪，可以在不修改代码、不重启服务的情况下，动态了解应用程序或者内核的行为，这对排查线上问题、特别是不容易重现的问题尤其有效。</p><p>在 Linux 系统中，常见的动态追踪方法包括 ftrace、perf、eBPF 以及 SystemTap 等。上节课，我们具体学习了 ftrace 的使用方法。今天，我们再来一起看看其他几种方法。</p><h2>perf</h2><p>perf 已经是我们的老朋友了。在前面的案例中，我们多次用到它，来查找应用程序或者内核中的热点函数，从而定位性能瓶颈。而在内核线程 CPU 高的案例中，我们还使用火焰图动态展示 perf 的事件记录，从而更直观地发现了问题。</p><p>不过，我们前面使用 perf record/top时，都是先对事件进行采样，然后再根据采样数，评估各个函数的调用频率。实际上，perf 的功能远不止于此。比如，</p><ul>\n<li>\n<p>perf 可以用来分析 CPU cache、CPU 迁移、分支预测、指令周期等各种硬件事件；</p>\n</li>\n<li>\n<p>perf 也可以只对感兴趣的事件进行动态追踪。</p>\n</li>\n</ul><!-- [[[read_end]]] --><p>接下来，我们还是以内核函数 do_sys_open，以及用户空间函数 readline 为例，看一看 perf 动态追踪的使用方法。</p><p>同 ftrace 一样，你也可以通过 perf list ，查询所有支持的事件：</p><pre><code>$ perf list\n</code></pre><p>然后，在 perf 的各个子命令中添加 --event 选项，设置追踪感兴趣的事件。如果这些预定义的事件不满足实际需要，你还可以使用 perf probe 来动态添加。而且，除了追踪内核事件外，perf 还可以用来跟踪用户空间的函数。</p><p><strong>我们先来看第一个 perf 示例，内核函数 do_sys_open 的例子</strong>。你可以执行 perf probe 命令，添加 do_sys_open 探针：</p><pre><code>$ perf probe --add do_sys_open\nAdded new event:\n  probe:do_sys_open    (on do_sys_open)\nYou can now use it in all perf tools, such as:\n    perf record -e probe:do_sys_open -aR sleep 1\n</code></pre><p>探针添加成功后，就可以在所有的 perf 子命令中使用。比如，上述输出就是一个 perf record 的示例，执行它就可以对 10s 内的 do_sys_open 进行采样：</p><pre><code>$ perf record -e probe:do_sys_open -aR sleep 10\n[ perf record: Woken up 1 times to write data ]\n[ perf record: Captured and wrote 0.148 MB perf.data (19 samples) ]\n</code></pre><p>而采样成功后，就可以执行 perf script ，来查看采样结果了：</p><pre><code>$ perf script\n            perf 12886 [000] 89565.879875: probe:do_sys_open: (ffffffffa807b290)\n           sleep 12889 [000] 89565.880362: probe:do_sys_open: (ffffffffa807b290)\n           sleep 12889 [000] 89565.880382: probe:do_sys_open: (ffffffffa807b290)\n           sleep 12889 [000] 89565.880635: probe:do_sys_open: (ffffffffa807b290)\n           sleep 12889 [000] 89565.880669: probe:do_sys_open: (ffffffffa807b290)\n</code></pre><p>输出中，同样也列出了调用 do_sys_open 的任务名称、进程 PID 以及运行的 CPU 等信息。不过，对于 open 系统调用来说，只知道它被调用了并不够，我们需要知道的是，进程到底在打开哪些文件。所以，实际应用中，我们还希望追踪时能显示这些函数的参数。</p><p>对于内核函数来说，你当然可以去查看内核源码，找出它的所有参数。不过还有更简单的方法，那就是直接从调试符号表中查询。执行下面的命令，你就可以知道 do_sys_open 的所有参数：</p><pre><code>$ perf probe -V do_sys_open\nAvailable variables at do_sys_open\n        @&lt;do_sys_open+0&gt;\n                char*   filename\n                int     dfd\n                int     flags\n                struct open_flags       op\n                umode_t mode\n</code></pre><p>从这儿可以看出，我们关心的文件路径，就是第一个字符指针参数（也就是字符串），参数名称为 filename。如果这个命令执行失败，就说明调试符号表还没有安装。那么，你可以执行下面的命令，安装调试信息后重试：</p><pre><code># Ubuntu\n$ apt-get install linux-image-`uname -r`-dbgsym\n# CentOS\n$ yum --enablerepo=base-debuginfo install -y kernel-debuginfo-$(uname -r)\n\n</code></pre><p>找出参数名称和类型后，就可以把参数加到探针中了。不过由于我们已经添加过同名探针，所以在这次添加前，需要先把旧探针给删掉：</p><pre><code># 先删除旧的探针\nperf probe --del probe:do_sys_open\n\n# 添加带参数的探针\n$ perf probe --add 'do_sys_open filename:string'\nAdded new event:\n  probe:do_sys_open    (on do_sys_open with filename:string)\nYou can now use it in all perf tools, such as:\n    perf record -e probe:do_sys_open -aR sleep 1\n</code></pre><p>新的探针添加后，重新执行 record 和 script 子命令，采样并查看记录：</p><pre><code># 重新采样记录\n$ perf record -e probe:do_sys_open -aR ls\n\n# 查看结果\n$ perf script\n            perf 13593 [000] 91846.053622: probe:do_sys_open: (ffffffffa807b290) filename_string=&quot;/proc/13596/status&quot;\n              ls 13596 [000] 91846.053995: probe:do_sys_open: (ffffffffa807b290) filename_string=&quot;/etc/ld.so.cache&quot;\n              ls 13596 [000] 91846.054011: probe:do_sys_open: (ffffffffa807b290) filename_string=&quot;/lib/x86_64-linux-gnu/libselinux.so.1&quot;\n              ls 13596 [000] 91846.054066: probe:do_sys_open: (ffffffffa807b290) filename_string=&quot;/lib/x86_64-linux-gnu/libc.so.6”\n              ...\n# 使用完成后不要忘记删除探针\n$ perf probe --del probe:do_sys_open\n</code></pre><p>现在，你就可以看到每次调用 open 时打开的文件了。不过，这个结果是不是看着很熟悉呢？</p><p>其实，在我们使用 strace 跟踪进程的系统调用时，也经常会看到这些动态库的影子。比如，使用 strace 跟踪 ls 时，你可以得到下面的结果：</p><pre><code>$ strace ls\n...\naccess(&quot;/etc/ld.so.nohwcap&quot;, F_OK)      = -1 ENOENT (No such file or directory)\naccess(&quot;/etc/ld.so.preload&quot;, R_OK)      = -1 ENOENT (No such file or directory)\nopenat(AT_FDCWD, &quot;/etc/ld.so.cache&quot;, O_RDONLY|O_CLOEXEC) = 3\n...\naccess(&quot;/etc/ld.so.nohwcap&quot;, F_OK)      = -1 ENOENT (No such file or directory)\nopenat(AT_FDCWD, &quot;/lib/x86_64-linux-gnu/libselinux.so.1&quot;, O_RDONLY|O_CLOEXEC) = 3\n...\n</code></pre><p>你估计在想，既然strace 也能得到类似结果，本身又容易操作，为什么我们还要用perf 呢？</p><p>实际上，很多人只看到了 strace 简单易用的好处，却忽略了它对进程性能带来的影响。从原理上来说，<strong>strace 基于系统调用 ptrace 实现</strong>，这就带来了两个问题。</p><ul>\n<li>\n<p>由于ptrace 是系统调用，就需要在内核态和用户态切换。当事件数量比较多时，繁忙的切换必然会影响原有服务的性能；</p>\n</li>\n<li>\n<p>ptrace 需要借助 SIGSTOP 信号挂起目标进程。这种信号控制和进程挂起，会影响目标进程的行为。</p>\n</li>\n</ul><p>所以，在性能敏感的应用（比如数据库）中，我并不推荐你用 strace （或者其他基于 ptrace 的性能工具）去排查和调试。</p><p>在 strace 的启发下，结合内核中的 utrace 机制， perf 也提供了一个 trace 子命令，是取代 strace 的首选工具。相对于 ptrace 机制来说，perf trace 基于内核事件，自然要比进程跟踪的性能好很多。</p><p>perf trace 的使用方法如下所示，跟 strace 其实很像：</p><pre><code>$ perf trace ls\n         ? (         ): ls/14234  ... [continued]: execve()) = 0\n     0.177 ( 0.013 ms): ls/14234 brk(                                                                  ) = 0x555d96be7000\n     0.224 ( 0.014 ms): ls/14234 access(filename: 0xad98082                                            ) = -1 ENOENT No such file or directory\n     0.248 ( 0.009 ms): ls/14234 access(filename: 0xad9add0, mode: R                                   ) = -1 ENOENT No such file or directory\n     0.267 ( 0.012 ms): ls/14234 openat(dfd: CWD, filename: 0xad98428, flags: CLOEXEC                  ) = 3\n     0.288 ( 0.009 ms): ls/14234 fstat(fd: 3&lt;/usr/lib/locale/C.UTF-8/LC_NAME&gt;, statbuf: 0x7ffd2015f230 ) = 0\n     0.305 ( 0.011 ms): ls/14234 mmap(len: 45560, prot: READ, flags: PRIVATE, fd: 3                    ) = 0x7efe0af92000\n     0.324 Dockerfile  test.sh\n( 0.008 ms): ls/14234 close(fd: 3&lt;/usr/lib/locale/C.UTF-8/LC_NAME&gt;                          ) = 0\n     ...\n</code></pre><p>不过，perf trace 还可以进行系统级的系统调用跟踪（即跟踪所有进程），而 strace 只能跟踪特定的进程。</p><p><strong>第二个 perf 的例子是用户空间的库函数</strong>。以 bash 调用的库函数 readline 为例，使用类似的方法，可以跟踪库函数的调用（基于 uprobes）。</p><p>readline 的作用，是从终端中读取用户输入，并把这些数据返回调用方。所以，跟 open 系统调用不同的是，我们更关注 readline 的调用结果。</p><p>我们执行下面的命令，通过 -x 指定 bash 二进制文件的路径，就可以动态跟踪库函数。这其实就是跟踪了所有用户在 bash 中执行的命令：</p><pre><code># 为/bin/bash添加readline探针\n$ perf probe -x /bin/bash 'readline%return +0($retval):string’\n\n# 采样记录\n$ perf record -e probe_bash:readline__return -aR sleep 5\n\n# 查看结果\n$ perf script\n    bash 13348 [000] 93939.142576: probe_bash:readline__return: (5626ffac1610 &lt;- 5626ffa46739) arg1=&quot;ls&quot;\n\n# 跟踪完成后删除探针\n$ perf probe --del probe_bash:readline__return\n</code></pre><p>当然，如果你不确定探针格式，也可以通过下面的命令，查询所有支持的函数和函数参数：</p><pre><code># 查询所有的函数\n$ perf probe -x /bin/bash —funcs\n\n# 查询函数的参数\n$ perf probe -x /bin/bash -V readline\nAvailable variables at readline\n        @&lt;readline+0&gt;\n                char*   prompt\n</code></pre><p>跟内核函数类似，如果你想要查看普通应用的函数名称和参数，那么在应用程序的二进制文件中，同样需要包含调试信息。</p><h2>eBPF 和 BCC</h2><p>ftrace 和 perf 的功能已经比较丰富了，不过，它们有一个共同的缺陷，那就是不够灵活，没法像 DTrace 那样通过脚本自由扩展。</p><p>而 eBPF 就是 Linux 版的 DTrace，可以通过C 语言自由扩展（这些扩展通过 LLVM 转换为 BPF 字节码后，加载到内核中执行）。下面这张图，就表示了 eBPF 追踪的工作原理：</p><p><img src=\"https://static001.geekbang.org/resource/image/a3/e9/a3547f2ac1d4d75b850a02a2735560e9.png?wh=580*325\" alt=\"\"></p><p>（图片来自 <a href=\"https://thenewstack.io/long-last-linux-gets-dynamic-tracing/\">THE NEW STACK</a>）</p><p>从图中你可以看到，eBPF 的执行需要三步：</p><ul>\n<li>\n<p>从用户跟踪程序生成 BPF 字节码；</p>\n</li>\n<li>\n<p>加载到内核中运行；</p>\n</li>\n<li>\n<p>向用户空间输出结果。</p>\n</li>\n</ul><p>所以，从使用上来说，eBPF 要比我们前面看到的 ftrace 和 perf ，都更加繁杂。</p><p>实际上，在 eBPF 执行过程中，编译、加载还有 maps 等操作，对所有的跟踪程序来说都是通用的。把这些过程通过 Python 抽象起来，也就诞生了 BCC（BPF Compiler Collection）。</p><p>BCC 把 eBPF 中的各种事件源（比如 kprobe、uprobe、tracepoint 等）和数据操作（称为 Maps），也都转换成了 Python 接口（也支持 lua）。这样，使用 BCC 进行动态追踪时，编写简单的脚本就可以了。</p><p>不过要注意，因为需要跟内核中的数据结构交互，真正核心的事件处理逻辑，还是需要我们用 C 语言来编写。</p><p>至于 BCC 的安装方法，在内存模块的<a href=\"https://time.geekbang.org/column/article/0?cid=140\">缓存案例</a>中，我就已经介绍过了。如果你还没有安装过，可以执行下面的命令来安装（其他系统的安装请参考<a href=\"https://github.com/iovisor/bcc/blob/master/INSTALL.md\">这里</a>）：</p><pre><code># Ubuntu\nsudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 4052245BD4284CDD\necho &quot;deb https://repo.iovisor.org/apt/$(lsb_release -cs) $(lsb_release -cs) main&quot; | sudo tee /etc/apt/sources.list.d/iovisor.list\nsudo apt-get update\nsudo apt-get install bcc-tools libbcc-examples linux-headers-$(uname -r)\n\n# REHL 7.6\nyum install bcc-tools\n</code></pre><p>安装后，BCC 会把所有示例（包括 Python 和 lua），放到 /usr/share/bcc/examples 目录中：</p><pre><code>$ ls /usr/share/bcc/examples\nhello_world.py  lua  networking  tracing\n</code></pre><p>接下来，还是以 do_sys_open 为例，我们一起来看看，如何用 eBPF 和 BCC 实现同样的动态跟踪。</p><p>通常，我们可以把 BCC 应用，拆分为下面这四个步骤。</p><p>第一，跟所有的 Python 模块使用方法一样，在使用之前，先导入要用到的模块：</p><pre><code>from bcc import BPF\n</code></pre><p>第二，需要定义事件以及处理事件的函数。这个函数需要用 C 语言来编写，作用是初始化刚才导入的 BPF 对象。这些用 C 语言编写的处理函数，要以字符串的形式送到 BPF 模块中处理：</p><pre><code># define BPF program (&quot;&quot;&quot; is used for multi-line string).\n# '#' indicates comments for python, while '//' indicates comments for C.\nprog = &quot;&quot;&quot;\n#include &lt;uapi/linux/ptrace.h&gt;\n#include &lt;uapi/linux/limits.h&gt;\n#include &lt;linux/sched.h&gt;\n// define output data structure in C\nstruct data_t {\n    u32 pid;\n    u64 ts;\n    char comm[TASK_COMM_LEN];\n    char fname[NAME_MAX];\n};\nBPF_PERF_OUTPUT(events);\n\n// define the handler for do_sys_open.\n// ctx is required, while other params depends on traced function.\nint hello(struct pt_regs *ctx, int dfd, const char __user *filename, int flags){\n    struct data_t data = {};\n    data.pid = bpf_get_current_pid_tgid();\n    data.ts = bpf_ktime_get_ns();\n    if (bpf_get_current_comm(&amp;data.comm, sizeof(data.comm)) == 0) {\n        bpf_probe_read(&amp;data.fname, sizeof(data.fname), (void *)filename);\n    }\n    events.perf_submit(ctx, &amp;data, sizeof(data));\n    return 0;\n}\n&quot;&quot;&quot;\n# load BPF program\nb = BPF(text=prog)\n# attach the kprobe for do_sys_open, and set handler to hello\nb.attach_kprobe(event=&quot;do_sys_open&quot;, fn_name=&quot;hello&quot;)\n</code></pre><p>第三步，是定义一个输出函数，并把输出函数跟 BPF 事件绑定：</p><pre><code># process event\nstart = 0\ndef print_event(cpu, data, size):\n    global start\n    # event’s type is data_t\n    event = b[&quot;events&quot;].event(data)\n    if start == 0:\n            start = event.ts\n    time_s = (float(event.ts - start)) / 1000000000\n    print(&quot;%-18.9f %-16s %-6d %-16s&quot; % (time_s, event.comm, event.pid, event.fname))\n\n# loop with callback to print_event\nb[&quot;events&quot;].open_perf_buffer(print_event)\n</code></pre><p>最后一步，就是执行事件循环，开始追踪 do_sys_open 的调用：</p><pre><code># print header\nprint(&quot;%-18s %-16s %-6s %-16s&quot; % (&quot;TIME(s)&quot;, &quot;COMM&quot;, &quot;PID&quot;, &quot;FILE”))\n# start the event polling loop\nwhile 1:\n    try:\n        b.perf_buffer_poll()\n    except KeyboardInterrupt:\n        exit()\n</code></pre><p>我们把上面几个步骤的代码，保存到文件 trace-open.py 中，然后就可以用 Python 来运行了。如果一切正常，你可以看到如下输出：</p><pre><code>$ python trace-open.py\nTIME(s)            COMM             PID    FILE\n0.000000000        irqbalance       1073   /proc/interrupts\n0.000175401        irqbalance       1073   /proc/stat\n0.000258802        irqbalance       1073   /proc/irq/9/smp_affinity\n0.000290102        irqbalance       1073   /proc/irq/0/smp_affinity\n</code></pre><p>从输出中，你可以看到 irqbalance 进程（你的环境中可能还会有其他进程）正在打开很多文件，而 irqbalance 依赖这些文件中读取的内容，来执行中断负载均衡。</p><p>通过这个简单的示例，你也可以发现，eBPF 和 BCC 的使用，其实比 ftrace 和 perf 有更高的门槛。想用 BCC 开发自己的动态跟踪程序，至少要熟悉 C 语言、Python 语言、被跟踪事件或函数的特征（比如内核函数的参数和返回格式）以及 eBPF 提供的各种数据操作方法。</p><p>不过，因为强大的灵活性，虽然 eBPF 在使用上有一定的门槛，却也无法阻止它成为目前最热门、最受关注的动态追踪技术。</p><p>当然，BCC 软件包也内置了很多已经开发好的实用工具，默认安装到 /usr/share/bcc/tools/ 目录中，它们的使用场景如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/fc/21/fc5f387a982db98c49c7cefb77342c21.png?wh=1500*1050\" alt=\"\"></p><p>（图片来自 <a href=\"http://www.brendangregg.com/ebpf.html#bcc\">Linux Extended BPF (eBPF) Tracing Tools</a>）</p><p>这些工具，一般都可以直接拿来用。而在编写其他的动态追踪脚本时，它们也是最好的参考资料。不过，有一点需要你特别注意，很多 eBPF 的新特性，都需要比较新的<a href=\"https://github.com/iovisor/bcc/blob/master/docs/kernel-versions.md\">内核版本</a>（如下图所示）。如果某些工具无法运行，很可能就是因为使用了当前内核不支持的特性。</p><p><img src=\"https://static001.geekbang.org/resource/image/61/e8/61abce1affc770a15dae7d489e50a8e8.png?wh=1500*1050\" alt=\"\"></p><p>（图片来自 <a href=\"http://www.brendangregg.com/ebpf.html#bcc\">Linux Extended BPF (eBPF) Tracing Tools</a>）</p><h2>SystemTap 和 sysdig</h2><p>除了前面提到的 ftrace、perf、eBPF 和 BCC 外，SystemTap 和 sysdig 也是常用的动态追踪工具。</p><p><strong>SystemTap</strong> 也是一种可以通过脚本进行自由扩展的动态追踪技术。在 eBPF 出现之前，SystemTap 是Linux 系统中，功能最接近 DTrace 的动态追踪机制。不过要注意，SystemTap 在很长时间以来都游离于内核之外（而 eBPF 自诞生以来，一直根植在内核中）。</p><p>所以，从稳定性上来说，SystemTap 只在 RHEL 系统中好用，在其他系统中则容易出现各种异常问题。当然，反过来说，支持 3.x 等旧版本的内核，也是 SystemTap 相对于 eBPF 的一个巨大优势。</p><p><strong>sysdig</strong> 则是随着容器技术的普及而诞生的，主要用于容器的动态追踪。sysdig 汇集了一些列性能工具的优势，可以说是集百家之所长。我习惯用这个公式来表示sysdig的特点： sysdig = strace + tcpdump + htop + iftop + lsof + docker inspect。</p><p>而在最新的版本中（内核版本 &gt;= 4.14），sysdig 还可以通过 eBPF 来进行扩展，所以，也可以用来追踪内核中的各种函数和事件。</p><h2>如何选择追踪工具</h2><p>到这里，你可能又觉得头大了，这么多动态追踪工具，在实际场景中到底该怎么选择呢？还是那句话，具体性能工具的选择，就要从具体的工作原理来入手。</p><p>这两节课，我们已经把常见工具的原理和特点都介绍过了，你可以先自己思考区分一下，不同场景的工具选择问题。比如：</p><ul>\n<li>\n<p>在不需要很高灵活性的场景中，使用 perf 对性能事件进行采样，然后再配合火焰图辅助分析，就是最常用的一种方法；</p>\n</li>\n<li>\n<p>而需要对事件或函数调用进行统计分析（比如观察不同大小的 I/O 分布）时，就要用 SystemTap 或者 eBPF，通过一些自定义的脚本来进行数据处理。</p>\n</li>\n</ul><p>在这里，我也总结了几个常见的动态追踪使用场景，并且分别推荐了适合的工具。你可以保存这个表格，方便自己查找并使用。</p><p><img src=\"https://static001.geekbang.org/resource/image/5a/25/5a2b2550547d5eaee850bfb806f76625.png?wh=1659*872\" alt=\"\"></p><h2>小结</h2><p>今天，我主要带你学习了 perf、eBPF 和 BCC 等动态追踪方法，并总结了不同场景中如何选择动态追踪方法。</p><p>在 Linux 系统中，常见的动态追踪方法，包括 ftrace、perf、eBPF 以及 SystemTap 等。在大多数性能问题中，使用 perf 配合火焰图是一个不错的方法。如果这满足不了你的要求，那么：</p><ul>\n<li>\n<p>在新版的内核中，eBPF 和 BCC 是最灵活的动态追踪方法；</p>\n</li>\n<li>\n<p>而在旧版本内核中，特别是在 RHEL 系统中，由于 eBPF 支持受限，SystemTap 往往是更好的选择。</p>\n</li>\n</ul><p>此外，在使用动态追踪技术时，为了得到分析目标的详细信息，一般需要内核以及应用程序的调试符号表。动态追踪实际上也是在这些符号（包括函数和事件）上进行的，所以易读易理解的符号，有助于加快动态追踪的过程。</p><h2>思考</h2><p>最后，我想邀请你一起来聊聊，你所理解的动态追踪技术。你有没有在实际环境中用过动态追踪呢？这么多的动态追踪方法，你一般会怎么选择呢？你可以结合今天的内容，和你自己的操作记录，来总结思路。</p><p>欢迎在留言区和我讨论，也欢迎把这篇文章分享给你的同事、朋友。我们一起在实战中演练，在交流中进步。</p><p></p>","comments":[{"had_liked":false,"id":78875,"user_name":"我来也","can_delete":false,"product_type":"c1","uid":1205253,"ip_address":"","ucode":"773D6104F56767","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","comment_is_top":false,"comment_ctime":1553266094,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"48797906350","product_id":100020901,"comment_content":"[D51打卡]<br>长见识了。<br>还是先把perf 和 火焰图用起来吧。<br>知道还有更好的工具在内核收集信息就行了。有需要了再来针对性的 看吧。🤦‍♂️","like_count":12},{"had_liked":false,"id":79859,"user_name":"xfan","can_delete":false,"product_type":"c1","uid":1315147,"ip_address":"","ucode":"48ED8D498D7F56","user_header":"https://static001.geekbang.org/account/avatar/00/14/11/4b/fa64f061.jpg","comment_is_top":false,"comment_ctime":1553564730,"is_pvip":false,"replies":[{"id":"29334","content":"可以看到这个文档：https:&#47;&#47;docs.cilium.io&#47;en&#47;stable&#47;bpf&#47;","user_name":"作者回复","comment_id":79859,"uid":"1001282","ip_address":"","utype":1,"ctime":1553697859,"user_name_real":"倪朋飞"}],"discussion_count":1,"race_medal":0,"score":"31618335802","product_id":100020901,"comment_content":"我想知道ebpf程序编写有什么好点的学习资源吗，有种心有余而力不足的感觉","like_count":8,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444656,"discussion_content":"可以看到这个文档：https://docs.cilium.io/en/stable/bpf/","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553697859,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":112566,"user_name":"lyonger","can_delete":false,"product_type":"c1","uid":1313840,"ip_address":"","ucode":"E89A75DADEA2A1","user_header":"https://static001.geekbang.org/account/avatar/00/14/0c/30/bb4bfe9d.jpg","comment_is_top":false,"comment_ctime":1562760907,"is_pvip":false,"replies":[{"id":"41995","content":"1. 可以先试试火焰图，然后跟着火焰图调用堆栈去查询内核源码。<br>2. 探针的话，工具里面都提供了探针查询的命令，比如 perf list","user_name":"作者回复","comment_id":112566,"uid":"1001282","ip_address":"","utype":1,"ctime":1563458707,"user_name_real":"倪朋飞"}],"discussion_count":1,"race_medal":0,"score":"14447662795","product_id":100020901,"comment_content":"老师，最近kvm虚拟机器，xfs文件系统下使用devmapper的驱动，每次使用docker跑任务ci build的时候，用iotop查看发现runner机器的[loop1]、[loop2]、[kworker&#47;u32:2]的io 99%，任务中止了以后就没有发现异常了。我用perf定位到了热点函数是xfsaild、xfs_inode_item_push。用ftrace和trace-cmd要先知道运行的命令。那么2个疑问：<br>1、有办法直接查看某个热点函数里的执行逻辑吗？在不知道执行什么命令的情况下，我只知道某个热点函数名称<br>2、可以使用的探针有哪些，是怎么查看呢？<br><br>期待您的回复，多谢。","like_count":4,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457797,"discussion_content":"1. 可以先试试火焰图，然后跟着火焰图调用堆栈去查询内核源码。\n2. 探针的话，工具里面都提供了探针查询的命令，比如 perf list","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563458707,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":85753,"user_name":"Geek_007","can_delete":false,"product_type":"c1","uid":1467182,"ip_address":"","ucode":"C80107538EAA7F","user_header":"https://static001.geekbang.org/account/avatar/00/16/63/2e/e49116d1.jpg","comment_is_top":false,"comment_ctime":1555222517,"is_pvip":false,"replies":[{"id":"31293","content":"应该是 perf trace -e fs:do_sys_open","user_name":"作者回复","comment_id":85753,"uid":"1001282","ip_address":"","utype":1,"ctime":1555501842,"user_name_real":"倪朋飞"}],"discussion_count":1,"race_medal":1,"score":"10145157109","product_id":100020901,"comment_content":"老师你好，我在使用 perf trace 命令时发现，perf trace 追踪时，不能打印出打开文件的文件名，尽管我已经使用 perf probe 将filename 加入，但是依然无法打印出文件名。另外我使用 perf trace -e probe:do_sys_open ,依然还是记录所有的事件，请问老师，是我使用的有问题？还是其他问题？","like_count":2,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446793,"discussion_content":"应该是 perf trace -e fs:do_sys_open","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555501842,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101294,"user_name":"manatee","can_delete":false,"product_type":"c1","uid":1041112,"ip_address":"","ucode":"708D90E7A265BD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e2/d8/f0562ede.jpg","comment_is_top":false,"comment_ctime":1559779430,"is_pvip":false,"replies":[{"id":"37103","content":"最主要的是调试信息问题，容器进程和依赖环境跟主机在不同namespace中，很多工具可能无法正确找出相应的符号表","user_name":"作者回复","comment_id":101294,"uid":"1001282","ip_address":"","utype":1,"ctime":1560261047,"user_name_real":"倪朋飞"}],"discussion_count":1,"race_medal":0,"score":"5854746726","product_id":100020901,"comment_content":"想请教下老师，在容器环境下使用以上动态追踪技术有哪些注意点和坑呢","like_count":1,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452895,"discussion_content":"最主要的是调试信息问题，容器进程和依赖环境跟主机在不同namespace中，很多工具可能无法正确找出相应的符号表","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560261047,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":78659,"user_name":"ninuxer","can_delete":false,"product_type":"c1","uid":1243135,"ip_address":"","ucode":"5394ADAF2667D6","user_header":"https://wx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEKQMM4m7NHuicr55aRiblTSEWIYe0QqbpyHweaoAbG7j2v7UUElqqeP3Ihrm3UfDPDRb1Hv8LvPwXqA/132","comment_is_top":false,"comment_ctime":1553213528,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5848180824","product_id":100020901,"comment_content":"打卡day54<br>整个动态追踪都比较懵逼，常用的也就是trace和perf很简单的用法，等啃完内核的书再回过头来看文章，估计容易消化点～","like_count":1},{"had_liked":false,"id":336255,"user_name":"AceslupK","can_delete":false,"product_type":"c1","uid":1284474,"ip_address":"","ucode":"048F84D019CBBB","user_header":"https://static001.geekbang.org/account/avatar/00/13/99/7a/558666a5.jpg","comment_is_top":false,"comment_ctime":1646039093,"is_pvip":false,"replies":[{"id":"122896","content":"可以继续看一下eBPF专栏😊","user_name":"作者回复","comment_id":336255,"uid":"1001282","ip_address":"","utype":1,"ctime":1646046139,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1646039093","product_id":100020901,"comment_content":"动态追踪好难","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553737,"discussion_content":"可以继续看一下eBPF专栏😊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646046139,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298294,"user_name":"Geek_b85295","can_delete":false,"product_type":"c1","uid":1487998,"ip_address":"","ucode":"51CBB577C255EA","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqtXSgThiaEiaEqqic5YIJ7v469nCM3VXiccOJ4SxbYjW91ciczuYYEzcTVtYWaWXaokZqShuLdKsXjnFA/132","comment_is_top":false,"comment_ctime":1624004861,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624004861","product_id":100020901,"comment_content":"apt-get install linux-image-`uname -r`-dbgsym  <br>这句话执行特别慢怎么办，安装包非常大，有国内的源替代源吗，把下面两个替换掉<br>deb http:&#47;&#47;ddebs.ubuntu.com&#47; bionic main<br>deb http:&#47;&#47;ddebs.ubuntu.com&#47; bionic-updates main<br>","like_count":0},{"had_liked":false,"id":298293,"user_name":"Geek_b85295","can_delete":false,"product_type":"c1","uid":1487998,"ip_address":"","ucode":"51CBB577C255EA","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqtXSgThiaEiaEqqic5YIJ7v469nCM3VXiccOJ4SxbYjW91ciczuYYEzcTVtYWaWXaokZqShuLdKsXjnFA/132","comment_is_top":false,"comment_ctime":1624004763,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624004763","product_id":100020901,"comment_content":"apt-get install linux-image-`uname -r`-dbgsym  ","like_count":0},{"had_liked":false,"id":292023,"user_name":"bruceyk","can_delete":false,"product_type":"c1","uid":1033556,"ip_address":"","ucode":"DD1E8AFEDFD69B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c5/54/a9b1d9f1.jpg","comment_is_top":false,"comment_ctime":1620647310,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620647310","product_id":100020901,"comment_content":"问下老师，应用程序安装符号表，是需要开启–g选项编译吗，会不会本身影响程序的性能？","like_count":0},{"had_liked":false,"id":235473,"user_name":"Michael","can_delete":false,"product_type":"c1","uid":1118976,"ip_address":"","ucode":"35F4FFAC4A4B15","user_header":"https://static001.geekbang.org/account/avatar/00/11/13/00/a4a2065f.jpg","comment_is_top":false,"comment_ctime":1595052329,"is_pvip":false,"replies":[{"id":"87266","content":"是Ubuntu系统吗？如果是的话，可以参考它的官方文档 https:&#47;&#47;wiki.ubuntu.com&#47;Debug%20Symbol%20Packages","user_name":"作者回复","comment_id":235473,"uid":"1001282","ip_address":"","utype":1,"ctime":1595343784,"user_name_real":"倪朋飞"}],"discussion_count":1,"race_medal":0,"score":"1595052329","product_id":100020901,"comment_content":"调试符号表安装不了<br><br>root@iZ94lcu45k0Z:~# apt-get install linux-image-`uname -r`-dbgsym<br>Reading package lists... Done<br>Building dependency tree<br>Reading state information... Done<br>E: Unable to locate package linux-image-4.15.0-72-generic-dbgsym<br>E: Couldn&#39;t find any package by glob &#39;linux-image-4.15.0-72-generic-dbgsym&#39;<br>E: Couldn&#39;t find any package by regex &#39;linux-image-4.15.0-72-generic-dbgsym&#39;","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501737,"discussion_content":"是Ubuntu系统吗？如果是的话，可以参考它的官方文档 https://wiki.ubuntu.com/Debug%20Symbol%20Packages","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595343784,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":223064,"user_name":"付钱","can_delete":false,"product_type":"c1","uid":1050694,"ip_address":"","ucode":"DE8384795EE69D","user_header":"https://static001.geekbang.org/account/avatar/00/10/08/46/7103cbdc.jpg","comment_is_top":false,"comment_ctime":1590992919,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1590992919","product_id":100020901,"comment_content":"$ apt-get install linux-image-`uname -r`-dbgsym<br>这个命令也运行失败了，提示找不到package","like_count":0,"discussions":[{"author":{"id":1487998,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqtXSgThiaEiaEqqic5YIJ7v469nCM3VXiccOJ4SxbYjW91ciczuYYEzcTVtYWaWXaokZqShuLdKsXjnFA/132","nickname":"Geek_b85295","note":"","ucode":"51CBB577C255EA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379620,"discussion_content":"要把源加进去，再update","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624016821,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":204977,"user_name":"凳子","can_delete":false,"product_type":"c1","uid":1274869,"ip_address":"","ucode":"2A19894DF4E1F4","user_header":"https://static001.geekbang.org/account/avatar/00/13/73/f5/29138f17.jpg","comment_is_top":false,"comment_ctime":1586503300,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586503300","product_id":100020901,"comment_content":"老师，想问下，在k8s上，如果在一个容器内使用eBPF追踪syscall，是不是会影响宿主机上的所有容器？","like_count":0},{"had_liked":false,"id":202204,"user_name":"linker","can_delete":false,"product_type":"c1","uid":1803259,"ip_address":"","ucode":"6C5799F2FC2C82","user_header":"https://static001.geekbang.org/account/avatar/00/1b/83/fb/621adceb.jpg","comment_is_top":false,"comment_ctime":1585923470,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585923470","product_id":100020901,"comment_content":"之前使用ftrace与trace-cmd定位多调度延迟的问题，打印出的报告比较多，还得手动写脚本分析那个函数延迟大","like_count":0},{"had_liked":false,"id":191740,"user_name":"201200986","can_delete":false,"product_type":"c1","uid":1900861,"ip_address":"","ucode":"6042C42D1C904E","user_header":"","comment_is_top":false,"comment_ctime":1584793596,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584793596","product_id":100020901,"comment_content":"ebpf相关的内容有没有更多材料推荐呢？","like_count":0},{"had_liked":false,"id":191292,"user_name":"董皋","can_delete":false,"product_type":"c1","uid":1902756,"ip_address":"","ucode":"2F05C3DDBC18F7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJGMphabeneYRlxs1biaO9oKic6Dwgbe312561lE56V93uUHgXXAsGmK1pH18mvpElygoJh8SUtQPUA/132","comment_is_top":false,"comment_ctime":1584761215,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584761215","product_id":100020901,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":146649,"user_name":"Cloudfull","can_delete":false,"product_type":"c1","uid":1034811,"ip_address":"","ucode":"464E7B2F8DDC10","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ca/3b/6dd2b1e2.jpg","comment_is_top":false,"comment_ctime":1572592993,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572592993","product_id":100020901,"comment_content":"老师 perf probe -a 添加自定义探针时  如何查看里面的 struct 类型的变量？","like_count":0},{"had_liked":false,"id":112678,"user_name":"lyonger","can_delete":false,"product_type":"c1","uid":1313840,"ip_address":"","ucode":"E89A75DADEA2A1","user_header":"https://static001.geekbang.org/account/avatar/00/14/0c/30/bb4bfe9d.jpg","comment_is_top":false,"comment_ctime":1562805866,"is_pvip":false,"replies":[{"id":"41994","content":"👍","user_name":"作者回复","comment_id":112678,"uid":"1001282","ip_address":"","utype":1,"ctime":1563458533,"user_name_real":"倪朋飞"}],"discussion_count":1,"race_medal":0,"score":"1562805866","product_id":100020901,"comment_content":"我昨天查到了问题根源，发现docker对于使用存储驱动有选择推荐的说明，那个问题是存储驱动问题导致，通过热点函数和调试发现改成overlay2后loop内核线程的io几乎没有了。业务也正常了。但是那2个问题，期待老师有空后给予解答，多谢。","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457852,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563458533,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":93512,"user_name":"cuikt","can_delete":false,"product_type":"c1","uid":1242702,"ip_address":"","ucode":"9A1DB426CEFEEA","user_header":"https://static001.geekbang.org/account/avatar/00/12/f6/4e/0066303c.jpg","comment_is_top":false,"comment_ctime":1557483874,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557483874","product_id":100020901,"comment_content":"高大上，内容干货多多。","like_count":0},{"had_liked":false,"id":87596,"user_name":"如果","can_delete":false,"product_type":"c1","uid":1320638,"ip_address":"","ucode":"138A3EEEE50850","user_header":"","comment_is_top":false,"comment_ctime":1555639320,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555639320","product_id":100020901,"comment_content":"DAY51，打卡","like_count":0},{"had_liked":false,"id":80843,"user_name":"york","can_delete":false,"product_type":"c1","uid":1318852,"ip_address":"","ucode":"EE938B81A7FC04","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epGMibYc0m7cDHMsNRBUur2NPVnlBZFXoNjWomibfjnHeAO3XRt27VaH3WNtdUX11d3uIT1ZHWCxLeg/132","comment_is_top":false,"comment_ctime":1553741194,"is_pvip":false,"replies":[{"id":"29589","content":"要安装debuginfo的，先网络搜索查查","user_name":"作者回复","user_name_real":"倪朋飞","uid":"1001282","ctime":1554003607,"ip_address":"","comment_id":80843,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1553741194","product_id":100020901,"comment_content":"# perf probe -x &#47;bin&#47;bash -V readline<br>The &#47;bin&#47;bash file has no debug information.<br>Rebuild with -g, or install an appropriate debuginfo package.<br>  Error: Failed to show vars.<br><br>这个问题怎么解？","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444997,"discussion_content":"要安装debuginfo的，先网络搜索查查","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554003607,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":80153,"user_name":"夜空中最亮的星","can_delete":false,"product_type":"c1","uid":1267566,"ip_address":"","ucode":"ADC3E7B6789955","user_header":"https://static001.geekbang.org/account/avatar/00/13/57/6e/b6795c44.jpg","comment_is_top":false,"comment_ctime":1553610111,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553610111","product_id":100020901,"comment_content":"报道","like_count":0},{"had_liked":false,"id":79206,"user_name":"cliff(亮剑)","can_delete":false,"product_type":"c1","uid":1314866,"ip_address":"","ucode":"A8D1A92331AE20","user_header":"https://static001.geekbang.org/account/avatar/00/14/10/32/e37aacfe.jpg","comment_is_top":false,"comment_ctime":1553400892,"is_pvip":false,"replies":[{"id":"29056","content":"sorry，没有。这些更多的用在调试程序错误而不是性能优化中","user_name":"作者回复","user_name_real":"倪朋飞","uid":"1001282","ctime":1553526849,"ip_address":"","comment_id":79206,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1553400892","product_id":100020901,"comment_content":"有没有讲Linux汇编和GDB的一期？","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444397,"discussion_content":"sorry，没有。这些更多的用在调试程序错误而不是性能优化中","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553526849,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":78908,"user_name":"ichen","can_delete":false,"product_type":"c1","uid":1156973,"ip_address":"","ucode":"2A931EBE9098D0","user_header":"https://static001.geekbang.org/account/avatar/00/11/a7/6d/19bff1f9.jpg","comment_is_top":false,"comment_ctime":1553287279,"is_pvip":false,"replies":[{"id":"28737","content":"升级版本试试？","user_name":"作者回复","user_name_real":"倪朋飞","uid":"1001282","ctime":1553315804,"ip_address":"","comment_id":78908,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1553287279","product_id":100020901,"comment_content":"# perf probe<br>perf: &#39;probe&#39; is not a perf-command. See &#39;perf --help&#39;.","like_count":1,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444282,"discussion_content":"升级版本试试？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553315804,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}