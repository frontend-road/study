{"id":85465,"title":"15 | 行为的定义和实现","content":"<h1>课件及源代码地址</h1><p><a href=\"https://gitee.com/geektime-geekbang/go_learning\">https://gitee.com/geektime-geekbang/go_learning</a></p><h2>书目推荐</h2><p><a href=\"time://mall?url=https%3A%2F%2Fh5.youzan.com%2Fv2%2Fgoods%2F1ycmk3uob0ryw\">《计算机程序的构造和解释》</a></p>","comments":[{"had_liked":false,"id":75844,"user_name":"蔡超","can_delete":false,"product_type":"c3","uid":1008262,"ip_address":"","ucode":"4C281BBF511238","user_header":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","comment_is_top":true,"comment_ctime":1552480590,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"@ be humble\n我是作者，刚才给你的回复有些错字。\n\n你把String方法定义在结构上就可以了。\n\n这样结构变量和指向结构的指针变量都可以用。如果你定义在指针上则只有输出指向结构的变量时起作用。","like_count":6},{"had_liked":false,"id":75635,"user_name":"面朝大海春暖花开","can_delete":false,"product_type":"c3","uid":1118924,"ip_address":"","ucode":"F9F9F53D05304B","user_header":"https://static001.geekbang.org/account/avatar/00/11/12/cc/6a08cf26.jpg","comment_is_top":false,"comment_ctime":1552442052,"is_pvip":false,"replies":[{"id":27591,"content":"谢谢你的鼓励！视频会一直持续更新的。","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1552452672,"ip_address":"","comment_id":75635,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"每天最期待的一件事就是：老师视频有没有更新！言简意赅，重点突出，对想学go 的java程序员而言简直是是量身定制的，太喜欢了。","like_count":11,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442968,"discussion_content":"谢谢你的鼓励！视频会一直持续更新的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552452672,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135253,"user_name":"虢國技醬","can_delete":false,"product_type":"c3","uid":1056807,"ip_address":"","ucode":"5A192262AA037E","user_header":"https://static001.geekbang.org/account/avatar/00/10/20/27/a6932fbe.jpg","comment_is_top":false,"comment_ctime":1569087972,"is_pvip":false,"replies":[{"id":51896,"content":"👍","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1569121108,"ip_address":"","comment_id":135253,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"通过这节课纠正了自己对值接受者和指针接受者一个误区：\n\n以前：\n两者区别：1.值接受者声明的方法，调用时使用这个值的副本，指针接受者声明的方法，调用时共享这个值；2. 指针值可以调用值接受者声明方法，值不能调用指针接受者声明方法\n现在：\n两者区别：值接受者声明的方法，调用时使用这个值的副本，指针接受者声明的方法，调用时共享这个值\n\n仔细验证发现不知道自己以前是在那里学到的第二点错误的知识，哎","like_count":9,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468113,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569121108,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1067570,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4a/32/23db38ab.jpg","nickname":"Sunny","note":"","ucode":"FE57B69A9CF91D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":627542,"discussion_content":"2. 指针值可以调用值接受者声明方法，值不能调用指针接受者声明方法. 我记得这个区别，好多书上都是这么说的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1694255224,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":75474,"user_name":"蓝士钦","can_delete":false,"product_type":"c3","uid":1229516,"ip_address":"","ucode":"726EB5C8EF1249","user_header":"https://static001.geekbang.org/account/avatar/00/12/c2/cc/ca22bb7c.jpg","comment_is_top":false,"comment_ctime":1552402661,"is_pvip":false,"replies":[{"id":27566,"content":"我是视频中推荐的是采用指针的方式。第一种和和第二种视频中有说混，在视频最后我说明了一下，采用没有数据复制的写法。","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1552435307,"ip_address":"","comment_id":75474,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"为结构体添加行为，建议采用非指针的方式，但是这种方式每次都会复制一份新的结构体，这样会有内存开销吧？感觉这种方式有点不科学。","like_count":7,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442906,"discussion_content":"我是视频中推荐的是采用指针的方式。第一种和和第二种视频中有说混，在视频最后我说明了一下，采用没有数据复制的写法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552435307,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":103579,"user_name":"田佳伟","can_delete":false,"product_type":"c3","uid":1034087,"ip_address":"","ucode":"D31C9799F383D2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c7/67/0077314b.jpg","comment_is_top":false,"comment_ctime":1560474741,"is_pvip":false,"replies":[{"id":37522,"content":"看你传递的是不是指针，是指针就会。","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1560500812,"ip_address":"","comment_id":103579,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"老师，如果使用引用的方式调用struct，假如修改了结构体里边的元素值，会污染到其他线程或者协程吗？是线程安全的吗？","like_count":6,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453929,"discussion_content":"看你传递的是不是指针，是指针就会。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560500812,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":160425,"user_name":"lupguo","can_delete":false,"product_type":"c3","uid":1009098,"ip_address":"","ucode":"1B55A01DF78647","user_header":"https://static001.geekbang.org/account/avatar/00/0f/65/ca/38dcd55a.jpg","comment_is_top":false,"comment_ctime":1575948748,"is_pvip":false,"replies":[{"id":62470,"content":"这个是Go语言中比较令人困惑的部分，\n1. 如果嵌入类型是结构，则从外部类型可以访问定义在结构及结构引用上的方法\n2. 如果嵌入类型是结构的引用，则从外部类型仅可以访问定义在结构引用上的方法","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1577021222,"ip_address":"","comment_id":160425,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"这里有个问题咨询下老师，为什么下面代码的C结构体类型会有两处注释地方会有panic，而B结构体不会，这块嵌套有点混乱，希望老师指导下\n\n&#47;&#47; A\ntype A struct{}\nfunc (a A) show() {\n\tfmt.Println(&quot;A call by show()&quot;)\n}\nfunc (a *A) ptShow() {\n\tfmt.Println(&quot;*A call by ptShow()&quot;)\n}\n&#47;&#47; B\ntype B struct {\n\tA\n}\n&#47;&#47; C\ntype C struct {\n\t*A\n}\n\n\nfunc main() {\n\tfmt.Println(&quot;test a, pa show:&quot;)\n\ta, pa := A{}, new(A)\n\ta.show()\n\ta.ptShow()\n\tpa.show()\n\tpa.ptShow()\n\tfmt.Printf(&quot;type of a(%T), pa(%T)\\n&quot;, a, pa)\n\n\t&#47;&#47;type B struct {\n\t&#47;&#47;\tA\n\t&#47;&#47;}\n\tfmt.Println(&quot;\\ntest b, pb show:&quot;)\n\tb, pb := B{}, new(B)\n\tb.show()\n\tb.ptShow()\n\tpb.show()\n\tpb.ptShow()\n\n\t&#47;&#47;type C struct {\n\t&#47;&#47;\t*A\n\t&#47;&#47;}\n\tfmt.Println(&quot;\\ntest c, pc show:&quot;)\n\tc, pc := C{}, new(C)\n\t&#47;&#47;c.show()\t&#47;&#47;panic c为C类型\n\tc.ptShow()\n\t&#47;&#47;pc.show()\t&#47;&#47;panic pc为*C类型，\n\tpc.ptShow()\n\tfmt.Printf(&quot;type of c.A(%T), pc.A(%T)\\n&quot;, c.A, pc.A)\n}\n","like_count":4,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477370,"discussion_content":"这个是Go语言中比较令人困惑的部分，\n1. 如果嵌入类型是结构，则从外部类型可以访问定义在结构及结构引用上的方法\n2. 如果嵌入类型是结构的引用，则从外部类型仅可以访问定义在结构引用上的方法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577021222,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":78998,"user_name":"Dream.","can_delete":false,"product_type":"c3","uid":1187286,"ip_address":"","ucode":"49B94CE5BA0D21","user_header":"https://static001.geekbang.org/account/avatar/00/12/1d/d6/76fe5259.jpg","comment_is_top":false,"comment_ctime":1553315778,"is_pvip":false,"replies":[{"id":28835,"content":"原因是因为你是通过new创建的temp，所以temp其实是一个指针值，current复制了temp的指针（只是用了一个新的地址来保存这个指针值）所以他们同时指向的同一个ListNode 的实例。你改成 temp=ListNode{}试试","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1553349566,"ip_address":"","comment_id":78998,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"幸苦老师帮忙解答一下。\n\n为什么我定义一个链表temp:=new(ListNode)，再定义了一个current:=temp\n\ncurrent:=temp这样定义current的是值传递，current与temp本身的地址不是同一个地址，为什么他们的Next却是同一个地址呢？\n\n============代码分割线=================\npackage main\n\nimport &quot;fmt&quot;\n\n&#47;&#47;ListNode 定义一个链表结构\ntype ListNode struct {\n    Val int\n    Next *ListNode\n}\n\nfunc main() {\n\n    Linked()\n\n}\n\n&#47;&#47;Linked 链表节点添加\nfunc Linked() *ListNode {\n\n    temp := new(ListNode)\n    fmt.Printf(&quot;temp address is %x\\n&quot;, &amp;temp)\n\n\t&#47;&#47;为什么是值传递，Next的地址却是同一个地址？\n    current := temp\n    fmt.Printf(&quot;current address is %x\\n&quot;, &amp;current)\n\n    current.Next = &amp;ListNode{Val: 10, Next: nil}\n\n    fmt.Printf(&quot;current.Next address is %x and Val is %d\\n&quot;, &amp;current.Next, current.Next.Val)\n\n    fmt.Printf(&quot;temp.Next address is %x and Val is %d\\n&quot;, &amp;temp.Next, temp.Next.Val)\n\n    temp.Next = new(ListNode)\n\n    fmt.Printf(&quot;current.Next address is %x and Val is %d\\n&quot;, &amp;current.Next, current.Next.Val)\n\n    fmt.Printf(&quot;temp.Next address is %x and Val is %d\\n&quot;, &amp;temp.Next, temp.Next.Val)\n\n    return temp.Next\n}\n","like_count":4,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444316,"discussion_content":"原因是因为你是通过new创建的temp，所以temp其实是一个指针值，current复制了temp的指针（只是用了一个新的地址来保存这个指针值）所以他们同时指向的同一个ListNode 的实例。你改成 temp=ListNode{}试试","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553349566,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":75617,"user_name":"蓝士钦","can_delete":false,"product_type":"c3","uid":1229516,"ip_address":"","ucode":"726EB5C8EF1249","user_header":"https://static001.geekbang.org/account/avatar/00/12/c2/cc/ca22bb7c.jpg","comment_is_top":false,"comment_ctime":1552440150,"is_pvip":false,"replies":[{"id":27593,"content":"非指针传递会生成一个新的结构对象，其中每个成员会复制。指针传递，只是传递指针，且该指针指向原有结构。","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1552452898,"ip_address":"","comment_id":75617,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"重新整理一下思路，非指针传递新的结构体（值复制），指针传递结构体地址（值为改结构体对象中的值），无论采用哪种方式都会觉得是值复制：其实非指针传递才是值复制，指针传递只是地址：\n\ntype OperatingSystem struct {\n\tName string\n}\n\nfunc (os OperatingSystem) LinuxFun(){\n\tfmt.Printf(&quot;Address is %x\\n&quot;, unsafe.Pointer(&amp;os.Name))\n\tos.Name = &quot;Linux&quot;\t&#47;&#47; 非指针修改对象值，修改的是新的对象区域，不影响外部对象\n\tfmt.Printf(&quot;Name:%s\\n&quot;,os.Name)\n}\n\nfunc (os *OperatingSystem) WindowsFun(){\n\tfmt.Printf(&quot;Address is %x\\n&quot;, unsafe.Pointer(&amp;os.Name))\n\tos.Name = &quot;Windows&quot;\t&#47;&#47; 指针修改对象值，修改的就是传进来的对象，影响外部对象\n\tfmt.Printf(&quot;Name:%s\\n&quot;,os.Name)\n}\n\nfunc TestStudent(t *testing.T) {\n\tos := OperatingSystem{Name:&quot;MacOS&quot;}\n\tfmt.Printf(&quot;Address is %x\\n&quot;, unsafe.Pointer(&amp;os.Name))\n\tfmt.Printf(&quot;Name:%s\\n&quot;,os.Name)\t\t&#47;&#47; Name:MacOS\n\tos.LinuxFun()\t&#47;&#47; 不使用指针地址不同, Name:Linux\n\tfmt.Printf(&quot;Name:%s\\n&quot;,os.Name)\t\t&#47;&#47; Name:MacOS\n\tos.WindowsFun()\t&#47;&#47; 使用指针地址相同, Name:Windows\n\tfmt.Printf(&quot;Name:%s\\n&quot;,os.Name)\t\t&#47;&#47; Name:Windows\n}","like_count":2,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442960,"discussion_content":"非指针传递会生成一个新的结构对象，其中每个成员会复制。指针传递，只是传递指针，且该指针指向原有结构。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552452898,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1105161,"avatar":"https://static001.geekbang.org/account/avatar/00/10/dd/09/feca820a.jpg","nickname":"helloworld","note":"","ucode":"1EECCA0F43E278","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":47233,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573300174,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":257702,"user_name":"聪","can_delete":false,"product_type":"c3","uid":2058233,"ip_address":"","ucode":"BB979E798CC247","user_header":"https://static001.geekbang.org/account/avatar/00/1f/67/f9/b81705cf.jpg","comment_is_top":false,"comment_ctime":1604067284,"is_pvip":false,"replies":[{"id":94375,"content":"请粘贴一下以上结果执行的代码。","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1604816715,"ip_address":"","comment_id":257702,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"为什么使用课件的code执行的结果，和老师视频演示的输出结构不一样的？是go版本的问题吗？希望老师能给个解答\n=== RUN   TestCreateEmployeeObj\n    encap_test.go:18: {0 Bob 20}\n    encap_test.go:19: { Mike 30}\n    encap_test.go:20: \n    encap_test.go:21: &amp;{2 Rose 22}\n    encap_test.go:22: e is encap.Employee\n    encap_test.go:23: e2 is *encap.Employee\n--- PASS: TestCreateEmployeeObj (0.00s)\nPASS\n\nProcess finished with exit code 0","like_count":0,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508423,"discussion_content":"请粘贴一下以上结果执行的代码。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604816715,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":257255,"user_name":"李圣悦","can_delete":false,"product_type":"c3","uid":1638427,"ip_address":"","ucode":"C1786C98824E50","user_header":"https://static001.geekbang.org/account/avatar/00/19/00/1b/eee13196.jpg","comment_is_top":false,"comment_ctime":1603896170,"is_pvip":false,"replies":[{"id":94376,"content":"看一下下面这个例子，你就会发现不要去使用defer来改变函数的返回。\npackage test_defer\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;testing&quot;\n)\n\nfunc EndByDefer() int {\n\tdefer func() int {\n\t\tfmt.Println(&quot;defer is executed.&quot;)\n\t\treturn 1\n\t}()\n\tfmt.Println(&quot;running&quot;)\n\treturn 2\n}\n\nfunc TestReturnWithDefer(t *testing.T) {\n\tfmt.Println(&quot;The return is &quot;, EndByDefer())\n}\n\n运行结果是：\nrunning\ndefer is executed.\nThe return is  2","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1604817054,"ip_address":"","comment_id":257255,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"package functest\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;math&#47;rand&quot;\n\t&quot;reflect&quot;\n\t&quot;testing&quot;\n\t&quot;time&quot;\n)\n\nfunc returnMultiValues() (int, int) {\n\treturn rand.Intn(10), rand.Intn(20)\n}\n\nfunc timeSpent(inner func(op int) int) func(op int) int {\n\treturn func(n int) int {\n\t\tstart := time.Now()\n\t\tret := inner(n)\n\t\tfmt.Println(&quot;time spent: &quot;, time.Since(start))\n\t\treturn ret\n\t}\n}\n\nfunc slowFun(op int) int {\n\ttime.Sleep(time.Second * time.Duration(op&#47;10))\n\treturn op\n}\n\nfunc TestMultiFunc(t *testing.T) {\n\ta, _ := returnMultiValues()\n\tt.Log(a)\n\tt.Log(timeSpent(slowFun)(10))\n\tt.Log(reflect.TypeOf(time.Second).String())\n}\n\nfunc Sum(ops ...int) int {\n\tret := 0\n\tfor _, op := range ops {\n\t\tret += op\n\t}\n\n\treturn ret\n}\n\nfunc TestVarParam(t *testing.T) {\n\tt.Log(Sum(1, 2, 3, 4))\n\tt.Log(Sum(1, 2, 3, 4, 5))\n}\n\nfunc TestDefer(t *testing.T) {\n\tdefer func(op int) int {\n\t\tt.Log(&quot;clean resources&quot;, op)\n\t\treturn 0\n\t}(5)\n\n\tt.Log(&quot;Started&quot;)\n\tpanic(&quot;panic&quot;)\n\t&#47;&#47;os.Exit(0)\n}\n\n实测了一下，发现defer函数还可以有返回值，这个返回值能利用吗","like_count":0,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508273,"discussion_content":"看一下下面这个例子，你就会发现不要去使用defer来改变函数的返回。\npackage test_defer\n\nimport (\n\t&amp;quot;fmt&amp;quot;\n\t&amp;quot;testing&amp;quot;\n)\n\nfunc EndByDefer() int {\n\tdefer func() int {\n\t\tfmt.Println(&amp;quot;defer is executed.&amp;quot;)\n\t\treturn 1\n\t}()\n\tfmt.Println(&amp;quot;running&amp;quot;)\n\treturn 2\n}\n\nfunc TestReturnWithDefer(t *testing.T) {\n\tfmt.Println(&amp;quot;The return is &amp;quot;, EndByDefer())\n}\n\n运行结果是：\nrunning\ndefer is executed.\nThe return is  2","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604817054,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1134694,"avatar":"https://static001.geekbang.org/account/avatar/00/11/50/66/047ee060.jpg","nickname":"Return12321","note":"","ucode":"F7A3C5ED02E1D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553379,"discussion_content":"/*\ndefer函数可以有返回值\n*/\npackage AQCodeTest\n\nimport (\n\t&#34;fmt&#34;\n\t&#34;testing&#34;\n)\n\nfunc EndByDefer() int {\n\tdefer func() int {\n\t\tfmt.Println(&#34;defer is executed.&#34;)\n\t\treturn 1\n\t}()\n\tfmt.Println(&#34;running&#34;)\n\treturn 2\n}\n\nfunc TestReturnWithDefer(t *testing.T) {\n\tfmt.Println(&#34;The return is &#34;, EndByDefer())\n}\n\n/*\nrunning\ndefer is executed.\nThe return is  2\n*/\n\nfunc EndByDefer2() (t int) {\n\tdefer func() (t int) {\n\t\tfmt.Println(&#34;defer is executed.&#34;)\n\t\treturn 1\n\t}()\n\tfmt.Println(&#34;running&#34;)\n\treturn 2\n}\n\nfunc TestReturnWithDefer2(t *testing.T) {\n\tfmt.Println(&#34;The return is &#34;, EndByDefer2())\n}\n\n/*\nrunning\ndefer is executed.\nThe return is  2\n*/\n\nfunc EndByDefer3() (t int) {\n\tdefer func() int {\n\t\tfmt.Println(&#34;defer is executed.&#34;)\n\t\tt = 1\n\t\treturn t\n\t}()\n\tfmt.Println(&#34;running&#34;)\n\treturn 2\n}\n\nfunc TestReturnWithDefer3(t *testing.T) {\n\tfmt.Println(&#34;The return is &#34;, EndByDefer3())\n}\n\n/*\nrunning\ndefer is executed.\nThe return is  1\n*/\n\nfunc EndByDefer4() (t int) {\n\tdefer func() (t int) {\n\t\tfmt.Println(&#34;defer is executed.&#34;)\n\t\tt = 1\n\t\treturn t\n\t}()\n\tfmt.Println(&#34;running&#34;)\n\treturn 2\n}\n\nfunc TestReturnWithDefer4(t *testing.T) {\n\tfmt.Println(&#34;The return is &#34;, EndByDefer4())\n}\n/*\nrunning\ndefer is executed.\nThe return is  2\n*/","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645868775,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243299,"user_name":"程龙","can_delete":false,"product_type":"c3","uid":1131918,"ip_address":"","ucode":"645516BFF8A96F","user_header":"https://static001.geekbang.org/account/avatar/00/11/45/8e/83bac3bb.jpg","comment_is_top":false,"comment_ctime":1598028147,"is_pvip":false,"replies":[{"id":90111,"content":"这个取决于你的String()\n是怎么定义的，你可以分别测试以下两种：\nfunc (e * People) String()\nfunc (e People) String()","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1598785378,"ip_address":"","comment_id":243299,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100024001,"comment_content":"老师, 我想咨询一下, 还是上面视频里面的方法, 但是我打印 对象的地址.\n发现对象的地址都是不同的,我取得都是指针, 我的理解应该都是相同的吧?\nfunc TestStructMethod(t *testing.T) {\n\n\t&#47;&#47;实例化实例\n\tp := &amp;People{&quot;张三&quot;, 1, true}\n\n\n\t&#47;&#47;fmt.Printf(&quot;The address is %x\\n&quot;, unsafe.Pointer(&amp;p.Name))\n\tfmt.Printf(&quot;The address is %x\\n&quot;, unsafe.Pointer(&amp;p))\n\ts := p.String()\n\n\tpointer := p.StringPointer()\n\tt.Log(s)\n\tt.Log(pointer)\n}\n输出:\nThe address is c0000c0028\nThe address is c00008e500\nThe address is c0000c0030","like_count":0,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504251,"discussion_content":"这个取决于你的String()\n是怎么定义的，你可以分别测试以下两种：\nfunc (e * People) String()\nfunc (e People) String()","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598785378,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157002,"user_name":"york","can_delete":false,"product_type":"c3","uid":1312024,"ip_address":"","ucode":"C6519CBD0EC9A4","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKnp5snhMVf9pa6WKtU0J2C6jxtI3NaO4WqlkvuUPLvU3pDmtgeEvlk0icMj4TGeGWfUENWvVn0ic5w/132","comment_is_top":false,"comment_ctime":1575011438,"is_pvip":false,"replies":[{"id":60260,"content":"这是因为map是个结构，其中包含了指向数据的指针，当复制之后旧map中的指针值也被复制了，新map中的指针指向了同一个数据空间","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1575018517,"ip_address":"","comment_id":157002,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100024001,"comment_content":"package main\nimport &quot;fmt&quot;\ntype bean struct {\n\tid string\n}\nfunc main()  {\n\tmap1 := map[string]string{&quot;key&quot;:&quot;value&quot;}\n\tbean1 := bean{&quot;hello world&quot;}\n\ttest1(map1, bean1 )\n\tfmt.Println(map1[&quot;key&quot;])\n\tfmt.Println(bean1.id)\n}\nfunc test1(map1 map[string]string,bean1 bean)  {\n\tmap1[&quot;key&quot;] = &quot;newValue&quot;\n\tbean1.id = &quot;hello id&quot;\n}\n输出结果：\nnewValue\nhello world\n请问老师：为什么结构体bean进行了对象复制，而test1函数却仍然操作的是main函数中map对象。","like_count":0,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476299,"discussion_content":"这是因为map是个结构，其中包含了指向数据的指针，当复制之后旧map中的指针值也被复制了，新map中的指针指向了同一个数据空间","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575018517,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1312024,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKnp5snhMVf9pa6WKtU0J2C6jxtI3NaO4WqlkvuUPLvU3pDmtgeEvlk0icMj4TGeGWfUENWvVn0ic5w/132","nickname":"york","note":"","ucode":"C6519CBD0EC9A4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65677,"discussion_content":"好的，谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575020339,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":150458,"user_name":"疯琴","can_delete":false,"product_type":"c3","uid":1099379,"ip_address":"","ucode":"82ACAA4A27753D","user_header":"https://static001.geekbang.org/account/avatar/00/10/c6/73/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1573540302,"is_pvip":false,"replies":[{"id":57920,"content":"不好意思，没有特别看懂你的问题。能否粘贴你的完整代码。","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1573566492,"ip_address":"","comment_id":150458,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100024001,"comment_content":"老师，如果我定义String方法，会打印两个Inner Address和一个Outer Address，其中第一个Inner Address和其他两个Address不同。如果改成String1方法，就和您的演示一样了。此外如果定义String方法的时候传值，会打印4个不同的Address。请问这是为什么？跟Duck Type有关么？\n&#47;&#47; 封装行为\nfunc (e *Employee) String() string {\n\tfmt.Printf(&quot;Inner Address is %x\\n&quot;, unsafe.Pointer(&amp;e.Name))\n\treturn fmt.Sprintf(&quot;ID:%s-Name:%s-Age:%d&quot;, e.Id, e.Name, e.Age)\n}\n&#47;&#47;调用测试\nfmt.Printf(&quot;Outer Address is %x\\n&quot;, unsafe.Pointer(&amp;e1.Name))\nt.Log(e1.String())","like_count":0,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474166,"discussion_content":"不好意思，没有特别看懂你的问题。能否粘贴你的完整代码。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573566492,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100908,"user_name":"Eden","can_delete":false,"product_type":"c3","uid":1197733,"ip_address":"","ucode":"BE0AD731E5EF5E","user_header":"https://static001.geekbang.org/account/avatar/00/12/46/a5/51449de6.jpg","comment_is_top":false,"comment_ctime":1559686288,"is_pvip":false,"replies":[{"id":36376,"content":"赞","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1559690408,"ip_address":"","comment_id":100908,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100024001,"comment_content":"初学语言，使用中文解释了一遍，有助于理解\n```\n\ntype Employee struct {\n\tId   string\n\tName string\n\tAge  int\n}\n\nfunc TestCreateEmployeeObj(t *testing.T) {\n\te := Employee{&quot;001&quot;, &quot;Tom&quot;, 17}\n\te1 := Employee{Name: &quot;Tom&quot;, Id: &quot;001&quot;, Age: 17}\n\te2 := new(Employee) &#47;&#47;这里是实例化一个 Employee 结构，但是返回的是 引用|指针 =&gt; e:= &amp;Employee{}\n\te2.Age = 17\n\te2.Id = &quot;007&quot;\n\te2.Name = &quot;Tom&quot;\n\tt.Log(e, e1, e2)\n}\n\n&#47;&#47; 1.这个方法调用实例时,这个实例会复制一份出来用于调用,就浪费内存了\nfunc (e Employee) SomrFunc1() string {\n\tfmt.Printf(&quot;⚠️：SomrFunc1注意，使用非指针方式调用实例时,指针位置是不一样的, 说明数据被拷贝了一份&quot;)\n\tfmt.Printf(&quot;\\n非指针方式--- SomrFunc1 获取e.Name的地址 %x\\n&quot;, unsafe.Pointer(&amp;e.Name)) &#47;&#47; 获取\n\treturn fmt.Sprintf(&quot;\\n ID:%s\\n Name:%s\\n Age:%d&quot;, e.Id, e.Name, e.Age)\n}\n\n&#47;&#47; 2.这个方法用实例时，我们直接使用指针来读取数据，就避免来内存浪费\nfunc (e *Employee) SomrFunc2() string {\n\tfmt.Printf(&quot;⚠️：SomrFunc2注意，使用非指针方式调用实例时,指针位置是一样的, 使用指针访问的话，可以避免拷贝带来的内存开销&quot;)\n\tfmt.Printf(&quot;\\n指针方式--- SomrFunc2 获取e.Name的地址 %x\\n&quot;, unsafe.Pointer(&amp;e.Name)) &#47;&#47; 获取\n\treturn fmt.Sprintf(&quot;\\n ID:%s\\n Name:%s\\n Age:%d&quot;, e.Id, e.Name, e.Age)\n}\n\nfunc TestStructOperations(t *testing.T) {\n\te := Employee{&quot;0&quot;, &quot;Tom&quot;, 17}\n\tfmt.Printf(&quot;\\n非指针方式--- SomrFunc1 获取e.Name的地址 %x\\n&quot;, unsafe.Pointer(&amp;e.Name)) &#47;&#47; 获取\n\tt.Log(&quot;\\nSomrFunc1  Employee调用&quot;, e.SomrFunc1())\n\n\tfmt.Printf(&quot;\\n指针方式--- SomrFunc2 获取e.Name的地址 %x\\n&quot;, unsafe.Pointer(&amp;e.Name)) &#47;&#47; 获取\n\tt.Log(&quot;\\nSomrFunc2 *Employee调用&quot;, e.SomrFunc2())\n\n}\n=== RUN   TestStructOperations\n\n非指针方式--- SomrFunc1 获取e.Name的地址 c000076370\n⚠️：SomrFunc1注意，使用非指针方式调用实例时,指针位置是不一样的, 说明数据被拷贝了一份\n非指针方式--- SomrFunc1 获取e.Name的地址 c0000c4010\n\n指针方式--- SomrFunc2 获取e.Name的地址 c000076370\n⚠️：SomrFunc2注意，使用非指针方式调用实例时,指针位置是一样的, 使用指针访问的话，可以避免拷贝带来的内存开销\n指针方式--- SomrFunc2 获取e.Name的地址 c000076370\n\nPASS\n```","like_count":0,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452732,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559690408,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1105161,"avatar":"https://static001.geekbang.org/account/avatar/00/10/dd/09/feca820a.jpg","nickname":"helloworld","note":"","ucode":"1EECCA0F43E278","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":47232,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573299967,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":75820,"user_name":"辉仔lovers","can_delete":false,"product_type":"c3","uid":1210219,"ip_address":"","ucode":"3DC5B0CD0B8E71","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLVhJRVwJ0eVlC7zjNfWP6PP7VmUkF1X2m6qfh7Wic3NhAOz2fSGibF6LXLcJ59zOz7nBpCcByvtFjw/132","comment_is_top":false,"comment_ctime":1552475699,"is_pvip":false,"replies":[{"id":27649,"content":"没有太明白你的意思。是否可以贴一下代码？","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1552481036,"ip_address":"","comment_id":75820,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100024001,"comment_content":"老师：您好，我大概测试了一下，只要方法的接收者是指针类型的，那么在调用该方法的时候，结构体可以不用&amp;取地址，也是能够传递过去结构体的地址值的。是不是编译器默认在编译的时候默认加上了取址符呢？","like_count":0,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443044,"discussion_content":"没有太明白你的意思。是否可以贴一下代码？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552481036,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":75796,"user_name":"刘楠","can_delete":false,"product_type":"c3","uid":1120773,"ip_address":"","ucode":"9F19D44CBEE039","user_header":"https://static001.geekbang.org/account/avatar/00/11/1a/05/f154d134.jpg","comment_is_top":false,"comment_ctime":1552469789,"is_pvip":false,"replies":[{"id":27644,"content":"是的，这个取决于你的方法是绑定在结构还是指向结构的指针上。但是为了避免值复制，我们提倡你绑定在指针上，并传递指针。","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1552480251,"ip_address":"","comment_id":75796,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100024001,"comment_content":"package inter_test\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;math&quot;\n\t&quot;testing&quot;\n)\n\ntype geometry interface {\n\tarea() float64\n\tperim() float64\n}\n\ntype rect struct {\n\twidth, height float64\n}\ntype circle struct {\n\tradius float64\n}\n\nfunc (r *rect) area() float64 {\n\treturn r.width * r.height\n}\nfunc (r *rect) perim() float64 {\n\treturn 2*r.width + 2*r.height\n}\n\nfunc (c *circle) area() float64 {\n\treturn math.Pi * c.radius * c.radius\n}\nfunc (c *circle) perim() float64 {\n\treturn 2 * math.Pi * c.radius\n}\nfunc measure(g geometry) {\n\tfmt.Println(g)\n\tfmt.Println(g.area())\n\tfmt.Println(g.perim())\n}\n\nfunc TestMersure(t *testing.T) {\n\n\tre := rect{3, 2}\n\tci := circle{5}\n\t&#47;&#47;这里不能直接传对象  如果方法上不带指针就可以 re  rect does not implement geometry (area method has pointer receiver)\n\tmeasure(&amp;re)\n\t&#47;&#47;measure(re)\n\t&#47;&#47;这里不能直接传对象 如果方法上不带指针就可以  ci circle does not implement geometry (area method has pointer receiver)\n\tmeasure(&amp;ci)\n\t&#47;&#47;measure(ci)\n}\n","like_count":0,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443038,"discussion_content":"是的，这个取决于你的方法是绑定在结构还是指向结构的指针上。但是为了避免值复制，我们提倡你绑定在指针上，并传递指针。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552480251,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":75789,"user_name":"Aliliin","can_delete":false,"product_type":"c3","uid":1025239,"ip_address":"","ucode":"61F9A09BB6650F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a4/d7/5d2bfaa7.jpg","comment_is_top":false,"comment_ctime":1552469294,"is_pvip":false,"replies":[{"id":27642,"content":"是的","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1552479899,"ip_address":"","comment_id":75789,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100024001,"comment_content":"func (e *Employee) String() string {\n    fmt.Printf(&quot;输出自己的e的地址 %x\\n&quot;, unsafe.Pointer(&amp;e.Name)) &#47;&#47; c00000a0e8\n    return fmt.Sprintf(&quot;ID :%d&#47;Name:%s&#47;Age:%d&quot;, e.Id, e.Name, e.Age)\n}\n推荐使用这种方式对吧.\n打印出来的值的结果是一样的.","like_count":0,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443033,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552479899,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":76369,"user_name":"Flygar","can_delete":false,"product_type":"c3","uid":1202817,"ip_address":"","ucode":"9C3A47125FBDEE","user_header":"https://static001.geekbang.org/account/avatar/00/12/5a/81/8cb542f2.jpg","comment_is_top":false,"comment_ctime":1552579126,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100024001,"comment_content":"new返回指针(所以对于值类型: 数组,结构体;可以用new(T)来分配类型 T 的零值并返回其地址，也就是指向类型 T 的指针);仅分配空间;\n\nmake(T) 返回类型 T (传入的T如果是引用类型，那么返回的也是引用类型) (所以对于引用类型(指针): Slice,Map,Channel;可以用make(T)来返回类型 T 并初始化);在堆上分配内存空间并初始化;\n\n&amp;struct1{a, b, c} 是一种简写，底层仍然会调用 new () 表达式 new(Type) 和 &amp;Type{} 是等价的。&amp;Type底层仍会调用new()\n\n带指针(或值)参数的函数必须接受一个指针(或值);\n而以指针(或值)为接收者的方法被调用时，接收者既能为值又能为指针;\n任何类型都可以有方法;","like_count":11},{"had_liked":false,"id":125371,"user_name":"牛海朋","can_delete":false,"product_type":"c3","uid":1079830,"ip_address":"","ucode":"CF05032237A5E5","user_header":"https://static001.geekbang.org/account/avatar/00/10/7a/16/d47412f1.jpg","comment_is_top":false,"comment_ctime":1566175538,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":3,"product_id":100024001,"comment_content":"既然指针方式没有内存复制，为啥还保留实例方式呢，有哪些场景需要用实例的方式","like_count":4,"discussions":[{"author":{"id":1995515,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/72/fb/e918f97f.jpg","nickname":"coder67","note":"","ucode":"21EB2FAD7952D6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577496,"discussion_content":"我也疑问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656145989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101586,"user_name":"杨宇铎(duo)","can_delete":false,"product_type":"c3","uid":1309873,"ip_address":"","ucode":"7694E8163AFF78","user_header":"https://static001.geekbang.org/account/avatar/00/13/fc/b1/e381bc33.jpg","comment_is_top":false,"comment_ctime":1559876162,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100024001,"comment_content":"老师，建议你不要使用关键词做函数名","like_count":2},{"had_liked":false,"id":82172,"user_name":"哇哈哈","can_delete":false,"product_type":"c3","uid":1175537,"ip_address":"","ucode":"47453D1C96A1DD","user_header":"https://static001.geekbang.org/account/avatar/00/11/ef/f1/8b06801a.jpg","comment_is_top":false,"comment_ctime":1554134183,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100024001,"comment_content":"说传值传引用这个问题，其实go就没有引用一说，var a A是一个类型为A的值，&amp;a所得的指针是一个类型为A*的值，传递的时候复制的内容是什么取决于参数的参数类型(当然也是调用函数时传入的参数类型)，参数类型为A则复制A类型的内容，参数类型为A*则复制的是A*类型的内容(即一个内存地址)","like_count":2},{"had_liked":false,"id":236485,"user_name":"写给三月","can_delete":false,"product_type":"c3","uid":1214026,"ip_address":"","ucode":"F9DCF7C9B76AC5","user_header":"https://static001.geekbang.org/account/avatar/00/12/86/4a/0370f832.jpg","comment_is_top":false,"comment_ctime":1595426573,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100024001,"comment_content":"一个介于C和半java，长的像js的一门性能优秀的语言","like_count":1},{"had_liked":false,"id":353513,"user_name":"right-chen","can_delete":false,"product_type":"c3","uid":1435172,"ip_address":"北京","ucode":"E0E940E80E7A2D","user_header":"https://static001.geekbang.org/account/avatar/00/15/e6/24/30806a88.jpg","comment_is_top":false,"comment_ctime":1659513239,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100024001,"comment_content":"总结：真的需要手动跟着老师的例子时间一番。光看视频不行","like_count":0},{"had_liked":false,"id":350603,"user_name":"Kram","can_delete":false,"product_type":"c3","uid":1493996,"ip_address":"","ucode":"580E5EB657E0DD","user_header":"https://static001.geekbang.org/account/avatar/00/16/cb/ec/9ba42f73.jpg","comment_is_top":false,"comment_ctime":1657033427,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100024001,"comment_content":"老师，前面的课程在聊到slice的时候说go都是传的值【复制一份】，非指针。但这里聊却又有传指针的说法，能否解答下两者区别？","like_count":0},{"had_liked":false,"id":348122,"user_name":"Geek_9dde75","can_delete":false,"product_type":"c3","uid":2707767,"ip_address":"","ucode":"337E0342B8818F","user_header":"","comment_is_top":false,"comment_ctime":1654761448,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100024001,"comment_content":"指针主要用于修改，对于需要修改的方法必须使用指针引用","like_count":0},{"had_liked":false,"id":346383,"user_name":"新欣如梦","can_delete":false,"product_type":"c3","uid":1707373,"ip_address":"","ucode":"9A3704BD558E11","user_header":"https://static001.geekbang.org/account/avatar/00/1a/0d/6d/c758cc16.jpg","comment_is_top":false,"comment_ctime":1653097241,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100024001,"comment_content":"我看到String方法内又使用SPrintf方法，会导致无限递归吧，这样内存直接溢出吧","like_count":0},{"had_liked":false,"id":345004,"user_name":"颜海航","can_delete":false,"product_type":"c3","uid":1308159,"ip_address":"","ucode":"5644F6328BF901","user_header":"https://static001.geekbang.org/account/avatar/00/13/f5/ff/523fb378.jpg","comment_is_top":false,"comment_ctime":1651927883,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100024001,"comment_content":"老师 在按您的demo练习的时候：\n&#47;&#47; 传指针的时候 \nfmt.Printf(&quot; Address of e is %x\\n&quot;,unsafe.Pointer(&amp;e))\n输出 e地址是不同：\n Address of e is c00006a390\n Address of e is c00000e038\n\n但是 &amp;e.name的地址是相同的 \nfmt.Printf(&quot; Address of e is %x\\n&quot;,unsafe.Pointer(&amp;e.name))\n输出：\n Address of e is c00006e490\n Address of e is c00006e490\n\n为什么结构体提filed的内存地址相同，但是整个结构体的内存地址不同呢？","like_count":0},{"had_liked":false,"id":286698,"user_name":"escray","can_delete":false,"product_type":"c3","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1617509152,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100024001,"comment_content":"这一节感觉还是有点难度的，老师讲的内容相对比较容易理解，但是看留言里面的一些代码把我又绕进去了。\n\n值接受者声明的方法，调用时使用这个值的副本，\n指针接受者声明的方法，调用时共享这个值。\n\n这里的值接受者和指针接受者，其实就是在说，函数的参数类型是值或者指针的意思吧。\n\n看了一遍 @Eden 的代码，确实比老师讲的还要清晰，@蓝士钦 最后整理的那段代码也很能说明问题。\n\n感觉老师比较辛苦，回复留言的话，要看好多代码。","like_count":0},{"had_liked":false,"id":220692,"user_name":"YanZu","can_delete":false,"product_type":"c3","uid":1223076,"ip_address":"","ucode":"B3954130EF8AD3","user_header":"https://static001.geekbang.org/account/avatar/00/12/a9/a4/9e0834a8.jpg","comment_is_top":false,"comment_ctime":1590308850,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100024001,"comment_content":"值接受者声明的方法，调用时使用这个值的副本，指针接受者声明的方法，调用时共享这个值。\n为结构体添加行为，建议采用指针的方式，没有数据复制","like_count":0},{"had_liked":false,"id":153665,"user_name":"木头发芽","can_delete":false,"product_type":"c3","uid":1419723,"ip_address":"","ucode":"657B381C5DA963","user_header":"https://static001.geekbang.org/account/avatar/00/15/a9/cb/a431bde5.jpg","comment_is_top":false,"comment_ctime":1574295102,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100024001,"comment_content":"@说不要用关键字做函数名的同学，你是否是指函数名String(),这个其实是实现接口，duck type。类似于time.Time里的实现的String()打印时间","like_count":0},{"had_liked":false,"id":123121,"user_name":"Geek_338030","can_delete":false,"product_type":"c3","uid":1614014,"ip_address":"","ucode":"6F2ACB3C528BAA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/1ZcgbSZ1Q0eARic4sFq9PRO0rT55MAYUAcBVNK3dE6ficOQViblBlzUTnMJyK2bZbU3IsewnDxKD5Wtrq01DeHnWQ/132","comment_is_top":false,"comment_ctime":1565610472,"is_pvip":false,"replies":null,"discussion_count":2,"race_medal":0,"score":5,"product_id":100024001,"comment_content":"方法与函数有什么区别？","like_count":0,"discussions":[{"author":{"id":2300180,"avatar":"https://static001.geekbang.org/account/avatar/00/23/19/14/4fe2f992.jpg","nickname":"吴笛","note":"","ucode":"5C1262FCC3814B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358757,"discussion_content":"函数是孤立的, 方法是有主体的. 单独的一个sum(a,b) 是一个函数, 给一个数据类mystruct加一个sum函数,这个sum就是方法, 可以通过mystruct.sum()来调用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616045364,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1531123,"avatar":"https://static001.geekbang.org/account/avatar/00/17/5c/f3/32778e6e.jpg","nickname":"Bug Factory","note":"","ucode":"57C5AD1C343B2B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7644,"discussion_content":"面向过程中一般叫函数  ， 面向对象中叫 方法 ， 其实是一样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567597639,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119324,"user_name":"XxxxxxxMr","can_delete":false,"product_type":"c3","uid":1418862,"ip_address":"","ucode":"F28FAFF2FEDD1A","user_header":"https://static001.geekbang.org/account/avatar/00/15/a6/6e/0ffa1ff6.jpg","comment_is_top":false,"comment_ctime":1564561650,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":5,"product_id":100024001,"comment_content":"老师能够通俗易懂的 讲解一下 Golang 中的行为吗 ？有点不懂，\n拿老师的案例来说，\n定义行为有两种方式：一种传递的是值 ，涉及到 内存的复制；一种是指针 不涉及到内存的复制。\n我自己在测试的时候 把函数和行为这两者搞混淆了 。多多指教","like_count":0,"discussions":[{"author":{"id":1128426,"avatar":"https://static001.geekbang.org/account/avatar/00/11/37/ea/9c1a4aeb.jpg","nickname":"张仁杰","note":"","ucode":"656F88A636A2D4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300644,"discussion_content":"你说错了，非指针是完进行内容的复制拷贝的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598200218,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":84303,"user_name":"我爱北京天安门","can_delete":false,"product_type":"c3","uid":1201215,"ip_address":"","ucode":"1B36604F96EF89","user_header":"https://static001.geekbang.org/account/avatar/00/12/54/3f/46c3060a.jpg","comment_is_top":false,"comment_ctime":1554822991,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100024001,"comment_content":"课程买下好久了  终于有空来学习了  刚开始有点不适应，现在觉得特别好，言简意赅突出重点。适合编程基础的人。。。","like_count":0},{"had_liked":false,"id":82653,"user_name":"芝士老爹","can_delete":false,"product_type":"c3","uid":1071316,"ip_address":"","ucode":"5F2935967574D0","user_header":"https://static001.geekbang.org/account/avatar/00/10/58/d4/c52f9f6d.jpg","comment_is_top":false,"comment_ctime":1554270357,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100024001,"comment_content":"用不用指针这2种方式，还发现一个不同点:\n不用指针的时候，t.Log(e)的输出也会改变，变成String()里面定义的格式，而用指针的时候就不会这样。\n测试函数代码：\nfunc TestStructOpration(t *testing.T) {\n\te := Employee{&quot;1&quot;, &quot;kaozhengli&quot;, 32}\n\tt.Log(e)\n\tfmt.Printf(&quot;Address is %x\\n&quot;, unsafe.Pointer(&amp;e.Name))\n\tt.Log(e.String())\n}\n## 需要注意一下地址输出的次数和t.Log输出的格式区别。\n方法一输出：\n=== RUN   TestStructOpration\nAddress is c00007c100\nAddress is c00007c0a0\nAddress is c00009c2e0\n--- PASS: TestStructOpration (0.00s)\n    &#47;src&#47;ch11&#47;encapsulation&#47;encap_test.go:48: ID:1-Name:kaozhengli-Age:32\n    &#47;src&#47;ch11&#47;encapsulation&#47;encap_test.go:50: ID:1-Name:kaozhengli-Age:32\n方法二输出：\n=== RUN   TestStructOpration\nAddress is c0000a02e0\nAddress is c0000a02e0\n--- PASS: TestStructOpration (0.00s)\n    &#47;src&#47;ch11&#47;encapsulation&#47;encap_test.go:48: {1 kaozhengli 32}\n    &#47;src&#47;ch11&#47;encapsulation&#47;encap_test.go:50: ID:1=Name:kaozhengli=Age:32","like_count":0},{"had_liked":false,"id":80170,"user_name":"manatee","can_delete":false,"product_type":"c3","uid":1041112,"ip_address":"","ucode":"708D90E7A265BD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e2/d8/f0562ede.jpg","comment_is_top":false,"comment_ctime":1553612702,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100024001,"comment_content":"老师讲的浅显易懂，就连我这个门外汉也能听清楚。非常感谢。不知道老师是否有微信读者群可以让我加一下一起讨论呢？","like_count":0},{"had_liked":false,"id":76105,"user_name":"游子","can_delete":false,"product_type":"c3","uid":1449109,"ip_address":"","ucode":"61E889178E7DF7","user_header":"https://static001.geekbang.org/account/avatar/00/16/1c/95/d25d96d7.jpg","comment_is_top":false,"comment_ctime":1552531851,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100024001,"comment_content":"type Student struct {\n\tname string\n\tid   int\n\tnum  string\n}\n\nfunc (stu Student) String() string {\n\treturn fmt.Sprintf(&quot;String function called %s&quot;, stu.name)\n}\n\nfunc (stu *Student) String1() string {\n\treturn fmt.Sprintf(&quot;String1 function called %s&quot;, stu.name)\n}\n\nfunc TestFunc(t *testing.T) {\n\tstu := Student{name: &quot;zhang&quot;, id: 11}\n\tstu1 := Student{name: &quot;John&quot;, id: 14}\n\n\tt.Log(stu.String1())\n\tt.Log(stu1)\n}\n\n结果输出：\nString1 function called zhang\nString function called John\n\n试了一下，函数名为String的时候，t.Log(stu1)会调用String","like_count":0},{"had_liked":false,"id":76010,"user_name":"柠檬汁Code(binbin0325)","can_delete":false,"product_type":"c3","uid":1174424,"ip_address":"","ucode":"478FA7A0781858","user_header":"https://static001.geekbang.org/account/avatar/00/11/eb/98/1d6daf3f.jpg","comment_is_top":false,"comment_ctime":1552523686,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100024001,"comment_content":"每天早上第一件事 就是看视频有没有更新，这套教程很不错。老师更新的频率是怎样的。","like_count":0},{"had_liked":false,"id":75724,"user_name":"be humble","can_delete":false,"product_type":"c3","uid":1154439,"ip_address":"","ucode":"A55C8247D0D15E","user_header":"https://static001.geekbang.org/account/avatar/00/11/9d/87/ff8d0dbd.jpg","comment_is_top":false,"comment_ctime":1552457657,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":5,"product_id":100024001,"comment_content":"老师，请问为什么我定义了方法String，在函数TestStructOperations里并没有调用String，而是直接输出结构，可输出的结果却是Sting里的结果。","like_count":0,"discussions":[{"author":{"id":1228191,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJB6kaR6vXGP95RvKy6GnmT33EEAkoPJrUCENE0ankWfKicm6QMbfw6yiadNJlIPZEIlPYgIm8mYEwg/132","nickname":"龙猫","note":"","ucode":"F0FC59632BC6F6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":659,"discussion_content":"String() 你实现了  接口fmt包里的Stringer 这个inerface了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561892623,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}