{"id":423131,"title":"09 | RDD常用算子（三）：数据的准备、重分布与持久化","content":"<p>你好，我是吴磊。</p><p>在RDD常用算子的前两讲中，我们分别介绍了用于RDD内部转换与聚合的诸多算子，今天这一讲，我们继续来介绍表格中剩余部分的算子。</p><p>按照惯例，表格中的算子我们不会全都介绍，而是只挑选其中最常用、最具代表性的进行讲解。今天要讲的算子，我用加粗字体进行了高亮显示，你不妨先扫一眼，做到心中有数。</p><p><img src=\"https://static001.geekbang.org/resource/image/4e/d3/4ebaf6b9762b2d7ba64d21d8664080d3.jpg?wh=1920x1506\" alt=\"图片\" title=\"RDD算子分类表\"></p><p>你可能会觉得，这些高亮显示的算子乍一看也没什么关联啊？但如果我们从数据生命周期的角度入手，给它们归归类，很容易就会发现这些算子分别隶属于生命周期的某个阶段。</p><p><img src=\"https://static001.geekbang.org/resource/image/8f/cb/8fc62a1795606466f1fe391d098731cb.jpg?wh=1920x737\" alt=\"图片\" title=\"数据生命周期\"></p><p>结合上图，我们分别来看看每个算子所在的生命周期和它们实现的功能。</p><p>首先，在数据准备阶段，union与sample用于对不同来源的数据进行合并与拆分。</p><p>我们从左往右接着看，接下来是数据预处理环节。较为均衡的数据分布，对后面数据处理阶段提升CPU利用率更有帮助，可以整体提升执行效率。那这种均衡要怎么实现呢？没错，这时就要coalesce与repartition登场了，它们的作用就是重新调整RDD数据分布。</p><p>在数据处理完毕、计算完成之后，我们自然要对计算结果进行收集。Spark提供了两类结果收集算子，一类是像take、first、collect这样，把结果直接收集到Driver端；另一类则是直接将计算结果持久化到（分布式）文件系统，比如咱们这一讲会提到的saveAsTextFile。</p><!-- [[[read_end]]] --><p>好啦，清楚了我们今天要讲哪些算子，以及它们大致的定位与功用之后，接下来，我们就正式来讲讲这些算子的具体用法。</p><h2>数据准备</h2><p>首先，我们先来说说数据准备阶段的union和sample。</p><h3>union</h3><p>在我们日常的开发中，union非常常见，它常常用于把两个类型一致、但来源不同的RDD进行合并，从而构成一个统一的、更大的分布式数据集。例如，在某个数据分析场景中，一份数据源来自远端数据库，而另一份数据源来自本地文件系统，要将两份数据进行合并，我们就需要用到union这个操作。</p><p>具体怎么使用呢？我来举个例子。给定两个RDD：rdd1和rdd2，调用rdd1.union(rdd2)或是rdd1 union rdd2，其结果都是两个RDD的并集，具体代码如下：</p><pre><code class=\"language-scala\">// T：数据类型\nval rdd1: RDD[T] = _\nval rdd2: RDD[T] = _\nval rdd = rdd1.union(rdd2)\n// 或者rdd1 union rdd2\n</code></pre><p>需要特别强调的是，union操作能够成立的前提，就是<strong>参与合并的两个RDD的类型必须完全一致</strong>。也就是说，RDD[String]只能与RDD[String]合并到一起，却无法与除RDD[String]以外的任何RDD类型（如RDD[Int]、甚至是RDD[UserDefinedClass]）做合并。</p><p>对于多个类型一致的RDD，我们可以通过连续调用union把所有数据集合并在一起。例如，给定类型一致的3个RDD：rdd1、rdd2和rdd3，我们可以使用如下代码把它们合并在一起。</p><pre><code class=\"language-scala\">// T：数据类型\nval rdd1: RDD[T] = _\nval rdd2: RDD[T] = _\nval rdd3: RDD[T] = _\n&nbsp;\nval rdd = (rdd1.union(rdd2)).union(rdd3)\n// 或者 val rdd = rdd1 union rdd2 union rdd3\n</code></pre><p>不难发现，union的典型使用场景，是把多份“小数据”，合并为一份“大数据”，从而充分利用Spark分布式引擎的并行计算优势。</p><p>与之相反，在一般的数据探索场景中，我们往往只需要对一份数据的子集有基本的了解即可。例如，对于一份体量在TB级别的数据集，我们只想随机提取其部分数据，然后计算这部分子集的统计值（均值、方差等）。</p><p>那么，面对这类把“大数据”变成 “小数据”的计算需求，Spark又如何进行支持呢？这就要说到RDD的sample算子了。</p><h3>sample</h3><p>RDD的sample算子用于对RDD做随机采样，从而把一个较大的数据集变为一份“小数据”。相较其他算子，sample的参数比较多，分别是withReplacement、fraction和seed。因此，要在RDD之上完成数据采样，你需要使用如下的方式来调用sample算子：sample(withReplacement, fraction, seed)。</p><p>其中，withReplacement的类型是Boolean，它的含义是“采样是否有放回”，如果这个参数的值是true，那么采样结果中可能会包含重复的数据记录，相反，如果该值为false，那么采样结果不存在重复记录。</p><p>fraction参数最好理解，它的类型是Double，值域为0到1，其含义是采样比例，也就是结果集与原数据集的尺寸比例。seed参数是可选的，它的类型是Long，也就是长整型，用于控制每次采样的结果是否一致。光说不练假把式，我们还是结合一些示例，这样才能更好地理解sample算子的用法。</p><pre><code class=\"language-scala\">// 生成0到99的整型数组\nval arr = (0 until 100).toArray\n// 使用parallelize生成RDD\nval rdd = sc.parallelize(arr)\n&nbsp;\n// 不带seed，每次采样结果都不同\nrdd.sample(false, 0.1).collect\n// 结果集：Array(11, 13, 14, 39, 43, 63, 73, 78, 83, 88, 89, 90)\nrdd.sample(false, 0.1).collect\n// 结果集：Array(6, 9, 10, 11, 17, 36, 44, 53, 73, 74, 79, 97, 99)\n&nbsp;\n// 带seed，每次采样结果都一样\nrdd.sample(false, 0.1, 123).collect\n// 结果集：Array(3, 11, 26, 59, 82, 89, 96, 99)\nrdd.sample(false, 0.1, 123).collect\n// 结果集：Array(3, 11, 26, 59, 82, 89, 96, 99)\n&nbsp;\n// 有放回采样，采样结果可能包含重复值\nrdd.sample(true, 0.1, 456).collect\n// 结果集：Array(7, 11, 11, 23, 26, 26, 33, 41, 57, 74, 96)\nrdd.sample(true, 0.1, 456).collect\n// 结果集：Array(7, 11, 11, 23, 26, 26, 33, 41, 57, 74, 96)\n</code></pre><p>我们的实验分为3组，前两组用来对比添加seed参数与否的差异，最后一组用于说明withReplacement参数的作用。</p><p>不难发现，在不带seed参数的情况下，每次调用sample之后的返回结果都不一样。而当我们使用同样的seed调用算子时，不论我们调用sample多少次，每次的返回结果都是一致的。另外，仔细观察第3组实验，你会发现结果集中有重复的数据记录，这是因为withReplacement被置为true，采样的过程是“有放回的”。</p><p>好啦，到目前为止，数据准备阶段常用的两个算子我们就讲完了。有了union和sample，你就可以随意地调整分布式数据集的尺寸，真正做到收放自如。</p><h2>数据预处理</h2><p>接下来，在数据预处理阶段，我们再来说说负责数据重分布的两个算子：repartition和coalesce。</p><p>在了解这两个算子之前，你需要先理解并行度这个概念。所谓并行度，它实际上就是RDD的数据分区数量。还记得吗？RDD的partitions属性，记录正是RDD的所有数据分区。因此，RDD的并行度与其partitions属性相一致。</p><p>开发者可以使用repartition算子随意调整（提升或降低）RDD的并行度，而coalesce算子则只能用于降低RDD并行度。显然，在数据分布的调整方面，repartition灵活度更高、应用场景更多，我们先对它进行介绍，之后再去看看coalesce有什么用武之地。</p><h3>repartition</h3><p>一旦给定了RDD，我们就可以通过调用repartition(n)来随意调整RDD并行度。其中参数n的类型是Int，也就是整型，因此，我们可以把任意整数传递给repartition。按照惯例，咱们还是结合示例熟悉一下repartition的用法。</p><pre><code class=\"language-scala\">// 生成0到99的整型数组\nval arr = (0 until 100).toArray\n// 使用parallelize生成RDD\nval rdd = sc.parallelize(arr)\n&nbsp;\nrdd.partitions.length\n// 4\n&nbsp;\nval rdd1 = rdd.repartition(2)\nrdd1.partitions.length\n// 2\n&nbsp;\nval rdd2 = rdd.repartition(8)\nrdd2.partitions.length\n// 8\n</code></pre><p>首先，我们通过数组创建用于实验的RDD，从这段代码里可以看到，该RDD的默认并行度是4。在我们分别用2和8来调整RDD的并行度之后，通过计算RDD partitions属性的长度，我们发现新RDD的并行度分别被相应地调整为2和8。</p><p>看到这里，你可能还有疑问：“我们为什么需要调整RDD的并行度呢？2和8看上去也没什么实质性的区别呀”。</p><p>在RDD那一讲（<a href=\"https://time.geekbang.org/column/article/417164\">第2讲</a>），我们介绍过，每个RDD的数据分区，都对应着一个分布式Task，而每个Task都需要一个CPU线程去执行。</p><p>因此，RDD的并行度，很大程度上决定了分布式系统中CPU的使用效率，进而还会影响分布式系统并行计算的执行效率。并行度过高或是过低，都会降低CPU利用率，从而白白浪费掉宝贵的分布式计算资源，因此，合理有效地设置RDD并行度，至关重要。</p><p>这时你可能会追问：“既然如此，那么我该如何合理地设置RDD的并行度呢？”坦白地说，这个问题并没有固定的答案，它取决于系统可用资源、分布式数据集大小，甚至还与执行内存有关。</p><p>不过，结合经验来说，<strong>把并行度设置为可用CPU的2到3倍，往往是个不错的开始</strong>。例如，可分配给Spark作业的Executors个数为N，每个Executors配置的CPU个数为C，那么推荐设置的并行度坐落在N<em>C</em>2到N<em>C</em>3这个范围之间。</p><p>尽管repartition非常灵活，你可以用它随意地调整RDD并行度，但是你也需要注意，这个算子有个致命的弊端，那就是它会引入Shuffle。</p><p>我们知道（<a href=\"https://time.geekbang.org/column/article/420399\">第6讲</a>详细讲过），由于Shuffle在计算的过程中，会消耗所有类型的硬件资源，尤其是其中的磁盘I/O与网络I/O，因此Shuffle往往是作业执行效率的瓶颈。正是出于这个原因，在做应用开发的时候，我们应当极力避免Shuffle的引入。</p><p>但你可能会说：“如果数据重分布是刚需，而repartition又必定会引入Shuffle，我该怎么办呢？”如果你想增加并行度，那我们还真的只能仰仗repartition，Shuffle的问题自然也就无法避免。但假设你的需求是降低并行度，这个时候，我们就可以把目光投向repartition的孪生兄弟：coalesce。</p><h3>coalesce</h3><p>在用法上，coalesce与repartition一样，它也是通过指定一个Int类型的形参，完成对RDD并行度的调整，即coalesce (n)。那两者的用法到底有什么差别呢？我们不妨结合刚刚的代码示例，来对比coalesce与repartition。</p><pre><code class=\"language-scala\">// 生成0到99的整型数组\nval arr = (0 until 100).toArray\n// 使用parallelize生成RDD\nval rdd = sc.parallelize(arr)\n&nbsp;\nrdd.partitions.length\n// 4\n&nbsp;\nval rdd1 = rdd.repartition(2)\nrdd1.partitions.length\n// 2\n&nbsp;\nval rdd2 = rdd.coalesce(2)\nrdd2.partitions.length\n// 2\n</code></pre><p>可以看到，在用法上，coalesce与repartition可以互换，二者的效果是完全一致的。不过，如果我们去观察二者的DAG，会发现同样的计算逻辑，却有着迥然不同的执行计划。</p><p><img src=\"https://static001.geekbang.org/resource/image/36/2d/36bc7990bcbc9e17b2af1193f9db022d.png?wh=1194x472\" alt=\"图片\" title=\"coalesce与repartition有着不同的执行计划\"></p><p>在RDD之上调用toDebugString，Spark可以帮我们打印出当前RDD的DAG。尽管图中的打印文本看上去有些凌乱，但你只要抓住其中的一个关键要点就可以了。</p><p>这个关键要点就是，在toDebugString的输出文本中，每一个带数字的小括号，比如rdd1当中的“(2)”和“(4)”，都代表着一个执行阶段，也就是DAG中的Stage。而且，不同的Stage之间，会通过制表符（Tab）缩进进行区分，比如图中的“(4)”显然要比“(2)”缩进了一段距离。</p><p>对于toDebugString的解读，你只需要掌握到这里就足够了。学习过调度系统之后，我们已经知道，在同一个DAG内，不同Stages之间的边界是Shuffle。因此，观察上面的打印文本，我们能够清楚地看到，repartition会引入Shuffle，而coalesce不会。</p><p>那么问题来了，同样是重分布的操作，为什么repartition会引入Shuffle，而coalesce不会呢？原因在于，二者的工作原理有着本质的不同。</p><p>给定RDD，如果用repartition来调整其并行度，不论增加还是降低，对于RDD中的每一条数据记录，repartition对它们的影响都是无差别的数据分发。</p><p>具体来说，给定任意一条数据记录，repartition的计算过程都是先哈希、再取模，得到的结果便是该条数据的目标分区索引。对于绝大多数的数据记录，目标分区往往坐落在另一个Executor、甚至是另一个节点之上，因此Shuffle自然也就不可避免。</p><p>coalesce则不然，在降低并行度的计算中，它采取的思路是把同一个Executor内的不同数据分区进行合并，如此一来，数据并不需要跨Executors、跨节点进行分发，因而自然不会引入Shuffle。</p><p>这里我还特意准备了一张示意图，更直观地为你展示repartition与coalesce的计算过程，图片文字双管齐下，相信你一定能够更加深入地理解repartition与coalesce之间的区别与联系。</p><p><img src=\"https://static001.geekbang.org/resource/image/e7/90/e776b77d36725728f44905d4dfe7f390.jpg?wh=1920x602\" alt=\"图片\" title=\"repartition与coalesce计算原理示意图\"></p><p>好啦，到此为止，在数据预处理阶段，用于对RDD做重分布的两个算子我们就讲完了。掌握了repartition和coalesce这两个算子，结合数据集大小与集群可用资源，你就可以随意地对RDD的并行度进行调整，进而提升CPU利用率与作业的执行性能。</p><h2>结果收集</h2><p>预处理完成之后，数据生命周期的下一个阶段是数据处理，在这个环节，你可以使用RDD常用算子（二）<a href=\"https://time.geekbang.org/column/article/421566\">那一讲</a>介绍的各类算子，去对数据进行各式各样的处理，比如数据转换、数据过滤、数据聚合，等等。完成处理之后，我们自然要收集计算结果。</p><p>在结果收集方面，Spark也为我们准备了丰富的算子。按照收集路径区分，这些算子主要分为两类：第一类是把计算结果从各个Executors收集到Driver端，第二个类是把计算结果通过Executors直接持久化到文件系统。在大数据处理领域，文件系统往往指的是像HDFS或是S3这样的分布式文件系统。</p><h3>first、take和collect</h3><p>我们今天要介绍的第一类算子有first、take和collect，它们的用法非常简单，按照老规矩，我们还是使用代码示例进行讲解。这里我们结合第1讲的Word Count，分别使用first、take和collect这三个算子对不同阶段的RDD进行数据探索。</p><pre><code class=\"language-scala\">import org.apache.spark.rdd.RDD\nval rootPath: String = _\nval file: String = s\"${rootPath}/wikiOfSpark.txt\"\n// 读取文件内容\nval lineRDD: RDD[String] = spark.sparkContext.textFile(file)\n&nbsp;\nlineRDD.first\n// res1: String = Apache Spark\n&nbsp;\n// 以行为单位做分词\nval wordRDD: RDD[String] = lineRDD.flatMap(line =&gt; line.split(\" \"))\nval cleanWordRDD: RDD[String] = wordRDD.filter(word =&gt; !word.equals(\"\"))\n&nbsp;\ncleanWordRDD.take(3)\n// res2: Array[String] = Array(Apache, Spark, From)\n// 把RDD元素转换为（Key，Value）的形式\nval kvRDD: RDD[(String, Int)] = cleanWordRDD.map(word =&gt; (word, 1))\n// 按照单词做分组计数\nval wordCounts: RDD[(String, Int)] = kvRDD.reduceByKey((x, y) =&gt; x + y)\n&nbsp;\nwordCounts.collect\n// res3: Array[(String, Int)] = Array((Because,1), (Open,1), (impl...\n</code></pre><p>其中，first用于收集RDD数据集中的任意一条数据记录，而take(n: Int)则用于收集多条记录，记录的数量由Int类型的参数n来指定。</p><p>不难发现，first与take的主要作用，在于数据探索。对于RDD的每一步转换，比如Word Count中从文本行到单词、从单词到KV转换，我们都可以用first或是take来获取几条计算结果，从而确保转换逻辑与预期一致。</p><p>相比之下，collect拿到的不是部分结果，而是全量数据，也就是把RDD的计算结果全量地收集到Driver端。在上面Word Count的例子中，我们可以看到，由于全量结果较大，屏幕打印只好做截断处理。</p><p>为了让你更深入地理解collect算子的工作原理，我把它的计算过程画在了后面的示意图中。</p><p><img src=\"https://static001.geekbang.org/resource/image/61/65/61684b05fbefcc777e995f644c9cfe65.jpg?wh=1920x653\" alt=\"图片\" title=\"collect算子工作原理\"></p><p>结合示意图，不难发现，collect算子有两处性能隐患，<strong>一个是拉取数据过程中引入的网络开销，另一个Driver的OOM（内存溢出，Out of Memory）</strong>。</p><p>网络开销很好理解，既然数据的拉取和搬运是跨进程、跨节点的，那么和Shuffle类似，这个过程必然会引入网络开销。</p><p>再者，通常来说，Driver端的预设内存往往在GB量级，而RDD的体量一般都在数十GB、甚至上百GB，因此，OOM的隐患不言而喻。collect算子尝试把RDD全量结果拉取到Driver，当结果集尺寸超过Driver预设的内存大小时，Spark自然会报OOM的异常（Exception）。</p><p>正是出于这些原因，我们在使用collect算子之前，务必要慎重。不过，你可能会问：“如果业务逻辑就是需要收集全量结果，而collect算子又不好用，那我该怎么办呢？”别着急，我们接着往下看。</p><h3>saveAsTextFile</h3><p>对于全量的结果集，我们还可以使用第二类算子把它们直接持久化到磁盘。在这类算子中，最具代表性的非saveAsTextFile莫属，它的用法非常简单，给定RDD，我们直接调用saveAsTextFile(path: String)即可。其中path代表的是目标文件系统目录，它可以是本地文件系统，也可以是HDFS、Amazon S3等分布式文件系统。</p><p>为了让你加深对于第二类算子的理解，我把它们的工作原理也整理到了下面的示意图中。可以看到，以saveAsTextFile为代表的算子，直接通过Executors将RDD数据分区物化到文件系统，这个过程并不涉及与Driver端的任何交互。</p><p><img src=\"https://static001.geekbang.org/resource/image/28/e0/2892b89238d64006be177fd7fde531e0.jpg?wh=1920x684\" alt=\"图片\" title=\"saveAsTextFile工作原理\"></p><p>由于数据的持久化与Driver无关，因此这类算子天然地避开了collect算子带来的两个性能隐患。</p><p>好啦，到此为止，用于结果收集的算子我们就介绍完了，掌握了first、take、collect和saveAsTextFile等算子之后，你可以先用first、take等算子验证计算逻辑的正确性，然后再使用saveAsTextFile算子把全量结果持久化到磁盘，以备之后使用。</p><h2>重点回顾</h2><p>今天这一讲，我们介绍并讲解了很多RDD算子，这些算子可以分别归类到数据生命周期的不同阶段，算子与阶段的对应关系如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/8f/cb/8fc62a1795606466f1fe391d098731cb.jpg?wh=1920x737\" alt=\"图片\" title=\"数据生命周期\"></p><p>在数据准备阶段，你可以使用union和sample来扩张或是缩小分布式数据集，需要特别注意的是，<strong>参与union的多个RDD在类型上必须保持一致</strong>。</p><p>在数据预处理阶段，你可以利用repartition和coalesce来调整RDD的并行度。RDD并行度对于CPU利用率至关重要，它在很大程度上决定着并行计算的执行效率。一般来说，给定Executors个数N，以及CPU/Executor配置个数C，那么我会<strong>推荐你把RDD的并行度设置在N<em>C</em>2到N<em>C</em>3之间</strong>。</p><p>最后，在结果收集阶段，你可以使用first、take、collect等算子来探索数据，这些算子可以用来验证计算过程中的转换逻辑是否与预期一致。当你确认计算逻辑准确无误之后，就可以使用saveAsTextFile等算子将全量结果集持久化到（分布式）文件系统。</p><p>到今天为止，我们用三讲的篇幅，学习了RDD开发API中的大部分算子。灵活地运用这些算子，你就能轻松应对日常开发中大部分的业务需求。为了方便你随时回顾、查阅，我把我们一起学过的这些算子整理到了后面的表格中，希望对你有所帮助。</p><p><img src=\"https://static001.geekbang.org/resource/image/71/bc/71742561e52b2b3edeedee5d3d6913bc.jpg?wh=1920x1695\" alt=\"图片\" title=\"RDD常用算子一览\"></p><h2>每课一练</h2><p>1.给定3个RDD，除了使用rdd1 union rdd2 union rdd3把它们合并在一起之外，你认为还有其他更加优雅的写法吗？（提示：reduce）</p><p>2.相比repartition，coalesce有哪些可能的潜在隐患？（提示：数据分布）</p><p>欢迎你在留言区跟我交流互动，也推荐你把这一讲分享给更多的同事、朋友，帮他理清RDD的常用算子。</p>","neighbors":{"left":{"article_title":"08 | 内存管理：Spark如何使用内存？","id":422400},"right":{"article_title":"10 | 广播变量 & 累加器：共享变量是用来做什么的？","id":423878}},"comments":[{"had_liked":false,"id":314206,"user_name":"GAC·DU","can_delete":false,"product_type":"c1","uid":1385403,"ip_address":"","ucode":"7847FBE1C13740","user_header":"https://static001.geekbang.org/account/avatar/00/15/23/bb/a1a61f7c.jpg","comment_is_top":true,"comment_ctime":1632898208,"is_pvip":true,"replies":[{"id":"113804","content":"优秀！👍👍👍 满分💯，置顶🔝","user_name":"作者回复","user_name_real":"吴磊","uid":"1043100","ctime":1632911785,"ip_address":"","comment_id":314206,"utype":1}],"discussion_count":1,"race_medal":0,"score":"9.2233720857323008e+18","product_id":100090001,"comment_content":"#合并RDD<br>测试了三种方法，分别是union、reduce、++，并且通过调用toDebugString方法查看，显示结果是一致的，下面的代码是在spark-shell上测试的<br>```scala<br>scala&gt; val rdd1 = spark.sparkContext.parallelize(1 to 10)<br><br>scala&gt; val rdd2 = spark.sparkContext.parallelize(20 to 30)<br>scala&gt; val unionRDD = rdd1 union rdd2<br><br>scala&gt; unionRDD.collect<br>res3: Array[Int] = Array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30)<br>scala&gt; unionRDD.toDebugString<br>res4: String =<br>(16) UnionRDD[2] at union at &lt;console&gt;:27 []<br> |   ParallelCollectionRDD[0] at parallelize at &lt;console&gt;:23 []<br> |   ParallelCollectionRDD[1] at parallelize at &lt;console&gt;:23 []<br><br>scala&gt; val data = Seq(rdd1, rdd2)<br>scala&gt; data.foreach(println)<br>ParallelCollectionRDD[0] at parallelize at &lt;console&gt;:23<br>ParallelCollectionRDD[1] at parallelize at &lt;console&gt;:23<br>scala&gt; val reduceRDD = data.reduce(_ union _)<br>scala&gt; reduceRDD.collect<br>res6: Array[Int] = Array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30)<br>scala&gt; reduceRDD.toDebugString<br>res7: String =<br>(16) UnionRDD[3] at union at &lt;console&gt;:25 []<br> |   ParallelCollectionRDD[0] at parallelize at &lt;console&gt;:23 []<br> |   ParallelCollectionRDD[1] at parallelize at &lt;console&gt;:23 []<br><br>scala&gt; val addRDD = rdd1 ++ rdd2<br>scala&gt; addRDD.collect<br>res15: Array[Int] = Array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30)<br>scala&gt; addRDD.toDebugString<br>res16: String =<br>(16) UnionRDD[7] at $plus$plus at &lt;console&gt;:27 []<br> |   ParallelCollectionRDD[0] at parallelize at &lt;console&gt;:23 []<br> |   ParallelCollectionRDD[1] at parallelize at &lt;console&gt;:23 []<br>```<br># coalesce 潜在隐患<br>repartition和coalesce相比较，repartition由于引入了shuffle机制，对数据进行打散，混洗，重新平均分配，所以repartition操作较重，但是数据分配均匀。而coalesce只是粗力度移动数据，没有平均分配的过程，会导致数据分布不均匀，在计算时出现数据倾斜。<br>","like_count":12,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527613,"discussion_content":"优秀！👍👍👍 满分💯，置顶🔝","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632911785,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":315232,"user_name":"火炎焱燚","can_delete":false,"product_type":"c1","uid":2767491,"ip_address":"","ucode":"DB11784DD94059","user_header":"https://static001.geekbang.org/account/avatar/00/2a/3a/83/74e3fabd.jpg","comment_is_top":false,"comment_ctime":1633760241,"is_pvip":false,"replies":[{"id":"114418","content":"好问题，你说的没错，Spark的采样，确实不会精确地控制个数。这跟他的采样原理有关，Spark采用伯努利或是泊松分布来做采样，对于每一个数据元素的采样，都是独立的。比如这里的0.1，也就是10%的采样率，Spark会对RDD每个元素抛个骰子，骰子值小于10%，才会把这个元素采集出去。因此，10%这个比例只是在统计上的一种近似，而不会精确地保证每次采样的个数，一定是原数据的10%。一个tips是，采样率越高，精确率越高，这个还是那句话，跟刚才的采样原理有关~<br><br>如果想精确采样的话，可以这么做：<br>rdd.takeSample(false, 1000)<br>这样得到的结果，一定是采集1000个数值。但是请注意，这里的返回结果，不再是RDD，而是array。takeSample的实现，实际上也是调用sample算子，只不过在最后，加入了元素个数上的检查，所以可以保证采样结果，一定是这里指定的1000。最后，要强调的是，takeSample会把结果收集到Driver端，所以要注意它对于Driver端内存的消耗~","user_name":"作者回复","user_name_real":"吴磊","uid":"1043100","ctime":1633963756,"ip_address":"","comment_id":315232,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40288465905","product_id":100090001,"comment_content":"老师，我这儿遇到了一个问题，不太明白，一共有100个数字，每次sample（False，0.1）理论上应该会获取10个数字，但运行几次得到的数字个数都不同，有的是8个，有的11个，这是为啥？spark中sample的原理不会精确控制个数吗？<br>运行代码：<br>&gt;&gt;&gt; rdd.sample(False,0.1).collect()<br>[1, 18, 23, 25, 31, 52, 59, 73, 95, 96, 97]<br>&gt;&gt;&gt; rdd.sample(False,0.1).collect()<br>[11, 12, 13, 36, 40, 50, 51, 77, 90]<br>&gt;&gt;&gt; rdd.sample(False,0.1).collect()<br>[2, 13, 21, 33, 51, 59, 73, 80, 84, 88]<br>&gt;&gt;&gt; rdd.sample(False,0.1).collect()<br>[3, 18, 41, 44, 67, 87, 89, 91]<br>&gt;&gt;&gt; rdd.sample(False,0.1).collect()<br>[35, 41, 69, 75, 87, 92, 99]<br>","like_count":10,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527910,"discussion_content":"好问题，你说的没错，Spark的采样，确实不会精确地控制个数。这跟他的采样原理有关，Spark采用伯努利或是泊松分布来做采样，对于每一个数据元素的采样，都是独立的。比如这里的0.1，也就是10%的采样率，Spark会对RDD每个元素抛个骰子，骰子值小于10%，才会把这个元素采集出去。因此，10%这个比例只是在统计上的一种近似，而不会精确地保证每次采样的个数，一定是原数据的10%。一个tips是，采样率越高，精确率越高，这个还是那句话，跟刚才的采样原理有关~\n\n如果想精确采样的话，可以这么做：\nrdd.takeSample(false, 1000)\n这样得到的结果，一定是采集1000个数值。但是请注意，这里的返回结果，不再是RDD，而是array。takeSample的实现，实际上也是调用sample算子，只不过在最后，加入了元素个数上的检查，所以可以保证采样结果，一定是这里指定的1000。最后，要强调的是，takeSample会把结果收集到Driver端，所以要注意它对于Driver端内存的消耗~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633963756,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314346,"user_name":"Geek_2dfa9a","can_delete":false,"product_type":"c1","uid":1435535,"ip_address":"","ucode":"B5FE7971F5E773","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epGTSTvn7r4ibk1PuaUrSvvLdviaLcne50jbvvfiaxKkM5SLibeP6jibA2bCCQBqETibvIvcsOhAZlwS8kQ/132","comment_is_top":false,"comment_ctime":1632982370,"is_pvip":false,"replies":[{"id":"113941","content":"正解，满分💯 👍","user_name":"作者回复","user_name_real":"吴磊","uid":"1043100","ctime":1633167390,"ip_address":"","comment_id":314346,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23107818850","product_id":100090001,"comment_content":"第一题<br>没明白考点是啥，考的是scala的语法么？<br>val rdd1 = sc.textFile(&quot;&quot;)<br>val rdd2 = sc.textFile(&quot;&quot;)<br>val rdd3 = sc.textFile(&quot;&quot;)<br>val unionRdd = rdd1.union(rdd2).union(rdd3)<br>val unionRdd2 = Seq(rdd1, rdd2, rdd3).reduce(_.union(_))<br><br>第二题<br>repartition也是通过colesce实现的，只不过repartition默认是要shuffle的，也就是说，repartition肯定是会通过哈希重分区的，<br>不管分区前数据分布是否均匀，分区后数据分布会比较均匀，但是colesce就未必了，colesce默认是不shuffle的，会尽量在local合并分区，<br>  如果colesce之前数据是分布不均匀的，那colesce之后数据分布还是不均匀的，这种情况下指定方法入参shuffle=true就解决了。<br>","like_count":6,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527654,"discussion_content":"正解，满分💯 👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633167390,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1096652,"avatar":"https://static001.geekbang.org/account/avatar/00/10/bb/cc/fac12364.jpg","nickname":"xxx","note":"","ucode":"E79CEA70430449","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544860,"discussion_content":"我承认，你是秀儿👆","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641737939,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314230,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1632907353,"is_pvip":true,"replies":[{"id":"113802","content":"非常好的问题，我们来细说说~ 取决于你如何调用coalesce(1, shuffle = false&#47;true)，分两种情况。<br><br>1. shuffle = false，这个时候，coalesce不会引入Shuffle，但是，所有操作，从一开始，并行度都是1，都在一个executor计算，显然，这个时候，整个作业非常慢，奇慢无比<br><br>2. shuffle = true，这个时候，coalesce就会引入shuffle，切割stage。coalesce之前，用源数据DataFrame的并行度，这个时候是多个Executors真正的并行计算；coalesce之后，也就是shuffle之后，并行度下降为1，所有父RDD的分区，全部shuffle到一个executor，交给一个task去计算。<br><br>显然，相比前一种，这种实现在执行效率上，更好一些。因此，如果业务应用必须要这么做，推荐这一种实现方法。回答你最初的问题，没错，coalesce(1)必然会把数据都放入同一个Executor里","user_name":"作者回复","user_name_real":"吴磊","uid":"1043100","ctime":1632911611,"ip_address":"","comment_id":314230,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23107743833","product_id":100090001,"comment_content":"从文中的描述来看，coalesce似乎并不能避免shuffle？极端的例子，coalesce(1)必然会把数据都放入同一个Executor里？","like_count":6,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527618,"discussion_content":"非常好的问题，我们来细说说~ 取决于你如何调用coalesce(1, shuffle = false/true)，分两种情况。\n\n1. shuffle = false，这个时候，coalesce不会引入Shuffle，但是，所有操作，从一开始，并行度都是1，都在一个executor计算，显然，这个时候，整个作业非常慢，奇慢无比\n\n2. shuffle = true，这个时候，coalesce就会引入shuffle，切割stage。coalesce之前，用源数据DataFrame的并行度，这个时候是多个Executors真正的并行计算；coalesce之后，也就是shuffle之后，并行度下降为1，所有父RDD的分区，全部shuffle到一个executor，交给一个task去计算。\n\n显然，相比前一种，这种实现在执行效率上，更好一些。因此，如果业务应用必须要这么做，推荐这一种实现方法。回答你最初的问题，没错，coalesce(1)必然会把数据都放入同一个Executor里","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632911611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314189,"user_name":"Geek_038655","can_delete":false,"product_type":"c1","uid":1657319,"ip_address":"","ucode":"495F542A729F1F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIjUDIRQ0gRictgQpjWia38qjN3pYicfzahAwbntWq93CorhjiaIOVh7j2Fj6a9WxUW85icMxF3r2Ymblg/132","comment_is_top":false,"comment_ctime":1632891893,"is_pvip":false,"replies":[{"id":"113798","content":"并无优劣之分~<br><br>foreachPartition更多地用来写DB和Kafka；而saveAsTextFile用来写文件系统。数据写入标的不同而已，没有优劣上的差别。<br><br>当然，也可以用foreachPartition来写文件系统，但是这个时候，就不如直接调用saveAsTextFile这类算子方便。","user_name":"作者回复","user_name_real":"吴磊","uid":"1043100","ctime":1632909427,"ip_address":"","comment_id":314189,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14517793781","product_id":100090001,"comment_content":"collect对于大数据分析结果过大导致的OOM问题，用saveAsTextFile解决是不是过于迁就？<br>为什么不用foreashPartition?","like_count":3,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527604,"discussion_content":"并无优劣之分~\n\nforeachPartition更多地用来写DB和Kafka；而saveAsTextFile用来写文件系统。数据写入标的不同而已，没有优劣上的差别。\n\n当然，也可以用foreachPartition来写文件系统，但是这个时候，就不如直接调用saveAsTextFile这类算子方便。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632909427,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314176,"user_name":"爱吃猫的鱼","can_delete":false,"product_type":"c1","uid":1515374,"ip_address":"","ucode":"494EA47546CF02","user_header":"https://static001.geekbang.org/account/avatar/00/17/1f/6e/7a6788f3.jpg","comment_is_top":false,"comment_ctime":1632886256,"is_pvip":false,"replies":[{"id":"113805","content":"想必老弟对coalesce(1, shuffle = false&#47;true)的用法和区别，已经了如指掌，不再赘述。<br><br>遗憾的是，驴和熊猫不可兼得，想要高性能的同时做到保序，确实不容易。shuffle = false&#47;true，前者保序，后者高性能，确实两者很难兼得。<br><br>实在对不住，对于两者都需要的场景，我暂时还真想不到特别好的办法，除了你说的“先shuffle -&gt; coalesce(1, shuffle = true) -&gt; 再排序 -&gt; 再收集”之外，我现在还真想不到更好的办法，抱歉","user_name":"作者回复","user_name_real":"吴磊","uid":"1043100","ctime":1632912166,"ip_address":"","comment_id":314176,"utype":1}],"discussion_count":3,"race_medal":0,"score":"10222820848","product_id":100090001,"comment_content":"coalesce 会降低同一个 stage 计算的并行度，导致 cpu 利用率不高，任务执行时间变长。我们目前有一个实现是需要将最终的结果写成单个 avro 文件，前面的转换过程可能是各种各样的，我们在最后阶段加上 repartition(1).write().format(&#39;avro&#39;).mode(&#39;overwrite&#39;).save(&#39;path&#39;)。最近发现有时前面的转换过程中有排序时，使用 repartition(1) 有时写得单文件顺序不对，使用 coalesce(1) 顺序是对的，但 coalesce(1) 有性能问题。目前想到可以 collect 到 driver 自己写 avro 文件，但可能存在以上提到的内存问题，不知道有没有更好的方案？ ","like_count":2,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527601,"discussion_content":"想必老弟对coalesce(1, shuffle = false/true)的用法和区别，已经了如指掌，不再赘述。\n\n遗憾的是，驴和熊猫不可兼得，想要高性能的同时做到保序，确实不容易。shuffle = false/true，前者保序，后者高性能，确实两者很难兼得。\n\n实在对不住，对于两者都需要的场景，我暂时还真想不到特别好的办法，除了你说的“先shuffle -&amp;gt; coalesce(1, shuffle = true) -&amp;gt; 再排序 -&amp;gt; 再收集”之外，我现在还真想不到更好的办法，抱歉","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1632912166,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1076487,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIKoEicqUZTJly55qoUXRmK4wia7YbnibsMncJaO6tKgKAQNJRfpMsibvfeiaukIibsCsuaic8QjQ3gOoTGA/132","nickname":"张可夫斯基","note":"","ucode":"3B8DF6D98583F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556031,"discussion_content":"可以换一下思路，先采样获取数据的分布范围，比如0~10、11~20，尽量保持范围内数据量的均衡，每个范围生成一个排好序的文件，然后从小到大串联这些文件。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647170815,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1515374,"avatar":"https://static001.geekbang.org/account/avatar/00/17/1f/6e/7a6788f3.jpg","nickname":"爱吃猫的鱼","note":"","ucode":"494EA47546CF02","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":399620,"discussion_content":"谢谢老师！有个结论也是好的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633007101,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314704,"user_name":"Unknown element","can_delete":false,"product_type":"c1","uid":2028277,"ip_address":"","ucode":"34A129800D0238","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f2/f5/b82f410d.jpg","comment_is_top":false,"comment_ctime":1633337957,"is_pvip":false,"replies":[{"id":"114054","content":"好问题~ <br><br>coalesce(1，shuffle = false)，首先，shuffle = false，通常是为了保序，否则没必要。然后，coalesce(1，shuffle = false)，它的目标，是把分区数降低为1。要做到没有Shuffle，那只有从源头上就开始限制，也就是说，源头上的并行度，就是1。只有这样，才能做到最后在没有Shuffle的情况下，把并行度降低为1。<br><br>需要说明的是，这种“骚操作”会拖累整个作业的执行性能，如非必要，绝不推荐这么做~","user_name":"作者回复","user_name_real":"吴磊","uid":"1043100","ctime":1633613801,"ip_address":"","comment_id":314704,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5928305253","product_id":100090001,"comment_content":"老师我看了评论区那个关于coalesce(1，shuffle = false)的问题，您说这个时候coalesce不会引入Shuffle，但是所有操作并行度都是1，都在一个executor计算；这里我不太明白，既然数据是分布在多个节点上，又不能用shuffle，那数据是怎么被汇集到一个节点的？","like_count":1,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527767,"discussion_content":"好问题~ \n\ncoalesce(1，shuffle = false)，首先，shuffle = false，通常是为了保序，否则没必要。然后，coalesce(1，shuffle = false)，它的目标，是把分区数降低为1。要做到没有Shuffle，那只有从源头上就开始限制，也就是说，源头上的并行度，就是1。只有这样，才能做到最后在没有Shuffle的情况下，把并行度降低为1。\n\n需要说明的是，这种“骚操作”会拖累整个作业的执行性能，如非必要，绝不推荐这么做~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633613801,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1950765,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/qmdZbyxrRD5qQLKjWkmdp3PCVhwmWTcp0cs04s39pic2RcNw0nNKTDgKqedSQ54bAGWjAVSc9p4vWP8RJRKB6nA/132","nickname":"冯杰","note":"","ucode":"61C92D62D49A66","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":403545,"discussion_content":"在源头的并行度控制成1，假设源头是hdfs文件，要合并成1也只能把数据拉到一个节点上运行了，这不也涉及到了数据的传输吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634105811,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2851750,"avatar":"","nickname":"Geek_a7acc4","note":"","ucode":"791C7A828F0B5D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1950765,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/qmdZbyxrRD5qQLKjWkmdp3PCVhwmWTcp0cs04s39pic2RcNw0nNKTDgKqedSQ54bAGWjAVSc9p4vWP8RJRKB6nA/132","nickname":"冯杰","note":"","ucode":"61C92D62D49A66","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532721,"discussion_content":"这点我也很困惑，我目前的理解是数据传输不等同于shuffle，不知道是否正确，希望知道的同学能说明下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637673771,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":403545,"ip_address":""},"score":532721,"extra":"{\"user_type\":1}"}]}]},{"had_liked":false,"id":357044,"user_name":"无隅","can_delete":false,"product_type":"c1","uid":1058801,"ip_address":"广东","ucode":"756E8D6E915FF0","user_header":"https://static001.geekbang.org/account/avatar/00/10/27/f1/e4fc57a3.jpg","comment_is_top":false,"comment_ctime":1662883539,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1662883539","product_id":100090001,"comment_content":"老师说的太棒了","like_count":0},{"had_liked":false,"id":323794,"user_name":"实数","can_delete":false,"product_type":"c1","uid":2637725,"ip_address":"","ucode":"697BEAFCE929D2","user_header":"https://static001.geekbang.org/account/avatar/00/28/3f/9d/c59c12ad.jpg","comment_is_top":false,"comment_ctime":1638164940,"is_pvip":false,"replies":[{"id":"117607","content":"第一个问题，在第6讲的问题里面回复了哈~ 第6讲：06 | Shuffle管理，其实就是在介绍Sort-based shuffle的工作原理，只不过作为入门课，我们没有特别点明。bypass mergesort，实际上就是当reduce分区数小于一定阈值、且计算中不存在Aggregate操作，Spark就把Sort-based shuffle退化为Hash-based shuffle，因此，bypass mergesort实际的应用场景非常有限，因为一般来说，数据分析都少不了数据聚合，也就少不了Aggregate操作。<br><br>unsafe shuffle，其实底子还是Sort-based shuffle，但是利用了Tungsten的数据结构来做优化，Tungsten相关内存，老弟可以参考：14 | 台前幕后：DataFrame与Spark SQL的由来","user_name":"作者回复","user_name_real":"编辑","uid":"1043100","ctime":1638285247,"ip_address":"","comment_id":323794,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1638164940","product_id":100090001,"comment_content":"sortshuufle是不是能保证全局有序呢  第一代的hashshuffle好像是不是废弃了 ，老师有空能不能讲下bypass mergesort、unsafe、sort shuffle ，这三个确实不懂","like_count":0,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534852,"discussion_content":"第一个问题，在第6讲的问题里面回复了哈~ 第6讲：06 | Shuffle管理，其实就是在介绍Sort-based shuffle的工作原理，只不过作为入门课，我们没有特别点明。bypass mergesort，实际上就是当reduce分区数小于一定阈值、且计算中不存在Aggregate操作，Spark就把Sort-based shuffle退化为Hash-based shuffle，因此，bypass mergesort实际的应用场景非常有限，因为一般来说，数据分析都少不了数据聚合，也就少不了Aggregate操作。\n\nunsafe shuffle，其实底子还是Sort-based shuffle，但是利用了Tungsten的数据结构来做优化，Tungsten相关内存，老弟可以参考：14 | 台前幕后：DataFrame与Spark SQL的由来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638285247,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321412,"user_name":"Andy","can_delete":false,"product_type":"c1","uid":1119133,"ip_address":"","ucode":"4BCA899B8E4E85","user_header":"https://static001.geekbang.org/account/avatar/00/11/13/9d/0ff43179.jpg","comment_is_top":false,"comment_ctime":1636859585,"is_pvip":false,"replies":[{"id":"116846","content":"确实，第一题跟scala语法比较相关，可以参考Geek_2dfa9a同学给出的答案哈：val unionRdd2 = Seq(rdd1, rdd2, rdd3).reduce(_.union(_))。<br><br>第二题满分💯~","user_name":"作者回复","user_name_real":"吴磊","uid":"1043100","ctime":1637059036,"ip_address":"","comment_id":321412,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1636859585","product_id":100090001,"comment_content":"如前一章内存，我看过一些博客文章也没看明白，老师一讲我就理解了。本章老师和同学的评论，进一步加强了对coalesce解释(shuffle和非shuffle的区别)，如coalesce(1) shuffle是多个executer输出数据到一个executer不保证数据顺序，但运行速度快。本章第一题没达出来，看官网文档和百度也没达上来。应该是我对scala语法不熟。第二题我的答案是可能会导致分区数据不均，严重的会导致数据倾斜计算慢或内存溢出。","like_count":0,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530360,"discussion_content":"确实，第一题跟scala语法比较相关，可以参考Geek_2dfa9a同学给出的答案哈：val unionRdd2 = Seq(rdd1, rdd2, rdd3).reduce(_.union(_))。\n\n第二题满分💯~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637059036,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316008,"user_name":"冯杰","can_delete":false,"product_type":"c1","uid":1950765,"ip_address":"","ucode":"61C92D62D49A66","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/qmdZbyxrRD5qQLKjWkmdp3PCVhwmWTcp0cs04s39pic2RcNw0nNKTDgKqedSQ54bAGWjAVSc9p4vWP8RJRKB6nA/132","comment_is_top":false,"comment_ctime":1634105726,"is_pvip":false,"replies":[{"id":"114513","content":"最主要的区别，其实不是看coalesce本身，而是看结果集需不需要排序，如果有保序需求的话，就需要把Shuffle选项置为false，原因其实很简单，coalesce的时候引入Shuffle，必然不能保序。<br><br>相反，如果没有保序的刚需，那其实推荐把Shuffle选项置为true，这样Spark在运行时会尊重原来的并行度，不影响并行计算效率。<br><br>当然，上面说的这些，都是coalesce(1)的情况，或是n比较小的情况（也就是并行度比较小），n如果比较大的话，肯定还是不Shuffle的好，毕竟，这个是coalesce相比repartition的优势所在嘛！","user_name":"作者回复","user_name_real":"吴磊","uid":"1043100","ctime":1634135831,"ip_address":"","comment_id":316008,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1634105726","product_id":100090001,"comment_content":"关于coalesce，有个疑问。 按照老师的说法，coalesce会引入两种操作，一种在stage开头将数据集放在一个executor运算；一种是按数据集的存储位置参与运算，并在最后将exectuor内的分区合并。  具体选用哪种方式，好像也只能根据coalesce的参数n来判断了，但具体的逻辑是什么呢？","like_count":0,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528234,"discussion_content":"最主要的区别，其实不是看coalesce本身，而是看结果集需不需要排序，如果有保序需求的话，就需要把Shuffle选项置为false，原因其实很简单，coalesce的时候引入Shuffle，必然不能保序。\n\n相反，如果没有保序的刚需，那其实推荐把Shuffle选项置为true，这样Spark在运行时会尊重原来的并行度，不影响并行计算效率。\n\n当然，上面说的这些，都是coalesce(1)的情况，或是n比较小的情况（也就是并行度比较小），n如果比较大的话，肯定还是不Shuffle的好，毕竟，这个是coalesce相比repartition的优势所在嘛！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634135831,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314564,"user_name":"钱鹏 Allen","can_delete":false,"product_type":"c1","uid":2518863,"ip_address":"","ucode":"7E95E82C0717DA","user_header":"https://static001.geekbang.org/account/avatar/00/26/6f/4f/3cf1e9c4.jpg","comment_is_top":false,"comment_ctime":1633230059,"is_pvip":true,"replies":[{"id":"114049","content":"正解，满分💯~","user_name":"作者回复","user_name_real":"吴磊","uid":"1043100","ctime":1633602060,"ip_address":"","comment_id":314564,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1633230059","product_id":100090001,"comment_content":"1. 方法一：Seq(rdd1,rdd2).reduce(_ union _) 方法二： rdd1  ++  rdd2   (高赞精简版本)<br>2.大数据量的情况下，相比 repartition，coalesce没有shuffle，可能会导致数据倾斜，即一个分区上有着大量的数据，而另外一个可能没有多少数据。","like_count":1,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527720,"discussion_content":"正解，满分💯~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633602060,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2518863,"avatar":"https://static001.geekbang.org/account/avatar/00/26/6f/4f/3cf1e9c4.jpg","nickname":"钱鹏 Allen","note":"","ucode":"7E95E82C0717DA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":401243,"discussion_content":"谢谢吴老师Spark集团的分享，生动好记","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633611050,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}