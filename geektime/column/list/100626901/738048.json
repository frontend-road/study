{"id":738048,"title":"27｜Rust Bevy游戏开发：用300行代码做一个贪吃蛇游戏","content":"<p>你好，我是Mike。今天我们一起来学习Rust游戏编程技术。这节课我们会基于Bevy游戏框架来开发一个入门版的贪吃蛇游戏。</p><p>Rust生态内目前已经有不少很不错的游戏开发框架，而Bevy是其中最热门的那一个，目前（2023年12月）最新版本是 0.12，还处在积极开发的过程中。Bevy框架和Axum Web框架、Slint框架给人的感觉有点儿像，都很简单、优美、灵活。用Bevy框架写游戏非常惬意，已经有不少人在尝试使用Bevy开发自己的独立游戏，目前有三款（Molecoole、Tiny Glade、Roids）已经上架或即将上架 Steam。</p><p>用Bevy开发的游戏能够运行在Windows、macOS、Linux, Web浏览器等平台。</p><h2>Bevy框架</h2><p>Bevy 框架是一个数据驱动的游戏开发框架（引擎），其核心是一个ECS。</p><h3>ECS</h3><p>ECS是 Entity Component System 的缩写，意思是实体-组件-系统。它是一种编程范式，这种范式非常有趣，也非常有潜力，现在的主流游戏引擎都开始支持这种编程范式了。这种范式是与传统的OOP（面向对象编程）范式相对的，跟Rust的 trait 的设计理念有一些相似之处。</p><p>我们用一个例子来说明ECS是怎样对问题进行建模的。假如现在有这样一幅画面：一个下午，在温暖的家里面，爸爸D正在边吃甜点边看书，妈妈M在边吃甜点边玩手机，儿子S在和狗狗B玩。你想一想，这个场景如果用OOP方式，应该如何建模呢？而用ECS范式可以这样建立模型：</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/8b/b6/8b2071ac10d130561aff84ccaaf600b6.jpg?wh=1710x528\" alt=\"图片\"></p><p>Systems:</p><pre><code class=\"language-plain\">system1: dad_task(query: Query&lt;&gt;)\nsystem2: mom_task(query: Query&lt;&gt;)\nsystem3: son_task(query: Query&lt;&gt;)\nsystem4: dog_task(query: Query&lt;&gt;)\n</code></pre><p>这样这个模型就建立好了。</p><p>我们用类似数据库table或者Excel的datasheet的形式来描述 Entity 与 Component 之间的关系。Entity 就用简单的数字来表示，只要能区分不同的实体就可以。然后我们定义了Role、Name、Snack、Book、Phone、Playmat 6种Component。</p><p>这些Components就像数据库table的列。但是与数据库不同的是，在ECS范式中，这个table的列是可以随着程序的运行而动态增加、减少的。另外一个重要的不同是，并不是所有的Entity都强制拥有所有的Component（列），每个Entity其实只关心自己需要的Components就行了。因此，这里的table表示在数据上的话，更像一个稀疏矩阵或集合。</p><p>这其实体现了一种设计哲学：<strong>将所有的信息铺平，用组合的方式来建模</strong>。是不是与Rust的trait设计哲学有相似性？</p><p>你可以把组件 Component 看作一组属性的集合，将属性按Component拆开来放置有利于复用。在这个例子里，4个实体都复用 Role 组件和 Name组件，Dad和Mommy复用Snack组件，Son和Dog复用Playmate组件。</p><p>而System就是行为或逻辑，用来处理上面建好的表格数据。一个System对应在Bevy中，就是普通的Rust函数。当然，这个函数首先要有办法拿到上述表格（世界状态）的操作权力才行，操作的方法就是Query检索。</p><p>关于ECS与OOP的对比，你可以参考<a href=\"https://bevy-cheatbook.github.io/programming/intro-data.html#comparison-with-object-oriented-programming\">这里</a>。</p><h3>资源（Resource）</h3><p>对于在整个系统中，只会存在一份的，可以把它定义为 Resource。比如外部的图片素材、模型文件、音频素材等。另外还包含定时器实例、设备抽象等。你可以将资源想象成编程范式中的 Singleton （单例）。</p><h3>事件（Event）</h3><p>游戏世界中，有无处不在的并行任务，比如 10 辆坦克同时寻路前进，任务之间的通信，最好是通过事件来沟通。这是一种用于解耦逻辑的编程范式。</p><h3>世界状态</h3><p>基于ECS的设计，那张大表table其实就是一个世界状态。基于ECS的游戏引擎，就需要在内部维护这样一个世界状态。这个世界状态的维护非常关键，需要用高效的数据结构和算法实现。在Bevy中具体用什么数据结构来维护的，你可以参考<a href=\"https://bevy-cheatbook.github.io/patterns/component-storage.html\">这里</a>。</p><h3>固定帧率</h3><p>游戏一般会以固定帧率运行，比如每秒60帧。游戏引擎通常会封装好这个，将你从帧率刷新的任务中释放出来，专注于游戏逻辑的设计。你只需要知道，你写的游戏逻辑会每秒执行60次，也就是60个滴答 tick。</p><h3>坐标系统</h3><p>Bevy的2D默认的坐标系统是原点在窗口正中间的一个正坐标系，像下面这样：</p><p><img src=\"https://static001.geekbang.org/resource/image/yy/78/yyf79d21925f6787ab176cab1f853078.jpg?wh=1412x1102\" alt=\"\"></p><h3>摄相机（Camera）</h3><p>游戏引擎中都会有Camera的概念，3D游戏的画面渲染严重依赖于Camera。2D游戏不太关心Camera，但使用Camera也会有放大缩小的效果，默认Bevy的Camera在坐标系的Z轴上，也就是当前你眼睛所处的位置。</p><h3>性能</h3><p>借助于ECS范式，加上Rust强大的无畏并发能力，Bevy能够让你的systems尽可能地运行在多个CPU核上，也就是并行运算。所以Bevy的基础性能是非常棒的，关于benchmarks的讨论，你可以看<a href=\"https://github.com/bevyengine/bevy/discussions/655\">这里</a>。</p><p>有了这些基础知识的铺垫，我们下面进入实战环节吧。</p><h2>实战贪吃蛇</h2><p>这里我先给出完整代码的<a href=\"https://github.com/miketang84/jikeshijian/tree/master/27-bevy_snake\">链接</a>，你最好下载下来边运行边对照下面的内容学习。</p><h3>第1步：引入Bevy库</h3><p>很简单，引入Bevy库，创建一个App实例。</p><pre><code class=\"language-plain\">use bevy::prelude::*;\n\nfn main() {\n&nbsp; &nbsp; App::new().run();\n}\n</code></pre><p>这个程序运行后马上就结束了，没有任何输出，也没有窗口打开。</p><h3>第2步：创建窗口</h3><p>加入默认Plugin集合，里面有个主事件循环，还有个创建窗口的功能。然后我们需要设置2D的Camera。</p><pre><code class=\"language-plain\">use bevy::prelude::*;\n\nfn main() {\n&nbsp; &nbsp; App::new()\n&nbsp; &nbsp; &nbsp; &nbsp; .add_plugins(DefaultPlugins)\n&nbsp; &nbsp; &nbsp; &nbsp; .add_systems(Startup, setup_camera)\n&nbsp; &nbsp; &nbsp; &nbsp; .run();\n}\n\nfn setup_camera(mut commands: Commands) {\n&nbsp; &nbsp; commands.spawn(Camera2dBundle::default());\n}\n</code></pre><p>由于引擎本身是一个托管系统（带主循环的Runtime），我们要在这个引擎所维护的世界状态里添加（或删除）新的东西，必须使用 Commands 这种任务指令形式。你可以把它想象成总线或消息队列编程模型。</p><p>这一步运行后，弹出一个窗口，并且渲染默认背景色。</p><p><img src=\"https://static001.geekbang.org/resource/image/40/2d/4071478ceeea97857b4ce155d5d5dc2d.png?wh=2711x1633\" alt=\"\"></p><h3>第3步：画出蛇的头</h3><p>这一步我们添加一个新函数，创建蛇的头，然后用 add_systems 添加到bevy runtime 中。你可以看一下代码发生的变化。</p><pre><code class=\"language-plain\">const SNAKE_HEAD_COLOR: Color = Color::rgb(0.7, 0.7, 0.7);\n\n#[derive(Component)]\nstruct SnakeHead;\n\n  // \n  .add_systems(Startup, (setup_camera, spawn_snake))\n  //\n  \nfn spawn_snake(mut commands: Commands) {\n&nbsp; &nbsp; commands\n&nbsp; &nbsp; &nbsp; &nbsp; .spawn(SpriteBundle {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sprite: Sprite {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; color: SNAKE_HEAD_COLOR,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ..default()\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; transform: Transform {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; scale: Vec3::new(10.0, 10.0, 10.0),\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ..default()\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ..default()\n&nbsp; &nbsp; &nbsp; &nbsp; })\n&nbsp; &nbsp; &nbsp; &nbsp; .insert(SnakeHead);\n}\n</code></pre><p>我们用 struct 定义了 SnakeHead Component，它没有任何字段。没关系，目前一个类型名字符号就能表达我们的意思，当一个tag用。你继续往后面看。</p><p>你可以看到，一个system就是一个普通的Rust函数。SpriteBundle 是一个Component Bundle，也就是组件包，可以把一组 components 组合在一起，SpriteBundle 里面就有 Sprite、Transform 等 components。Sprite 就是图片精灵的意思，是游戏里面表达角色的基本方法。Transform 抽象的是角色的运动，有位移、旋转和拉伸变换三种形式。</p><p><code>spawn_snake() system</code> 目的就是创建这个蛇的头，它作为一个entity被插入到世界状态中。<code>.insert(SnakeHead)</code> 把 SnakeHead 这个 Component 添加到这个刚创建好的 entity 上面。</p><p><code>add_systems()</code> 中的第一个参数 Startup，用来表示这是游戏启动的时候执行的 systems。它们只执行一次，多个systems写在元组里面，更简洁。</p><p>你可以看一下这一步的运行效果，窗口中间出现了一个小方块，那就是蛇的头。</p><p><img src=\"https://static001.geekbang.org/resource/image/53/1e/5378d9ae31aa7b4db568dbf4983c621e.png?wh=2711x1633\" alt=\"img(6)\"></p><h3>第4步：让这条蛇动起来</h3><p>这里我给出这一步添加的代码，我们边看边解读。</p><pre><code class=\"language-plain\">.add_systems(Update, snake_movement)\n\nfn snake_movement(mut head_positions: Query&lt;(&amp;SnakeHead, &amp;mut Transform)&gt;) {\n&nbsp; &nbsp; for (_head, mut transform) in head_positions.iter_mut() {\n&nbsp; &nbsp; &nbsp; &nbsp; transform.translation.y += 2.;\n&nbsp; &nbsp; }\n}\n</code></pre><p>这个 <code>snake_movement()</code> 就是处理蛇运动的system，请注意参数</p><p>是 <code>Query&lt;(&amp;SnakeHead, &amp;mut Transform)&gt;</code> 类型，它的意思是从世界状态中去查找同时拥有 SnakeHead、Transform 两种 Components 的entity，它定义了一个迭代器，并且 Transform 的实例还是可以修改的。遍历这个迭代器，其实目前只有一个entity，更新负责管理它运动的 transform 实例。<code>transform.translation.y += 2.</code> 就是纵向坐标向上移动 2 个像素。</p><p><code>add_systems()</code> 的第一个参数Update，表示这个system是运行在游戏运行过程中的，每一帧都需要更新一次（执行一次这个system），也就是这个函数1秒会执行60次。</p><p>运行后你会发现这个小方块在自动向上移动，效果如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/01/4d/010cdb4abb3239ced41f6750ebd1954d.png?wh=2667x1633\" alt=\"\"></p><h3>第5步：控制这条蛇的方向</h3><p>下面我们需要控制蛇的方向，上下左右四个方向。这一步就是给 <code>snake_movement system</code> 填充内容。</p><pre><code class=\"language-plain\">fn snake_movement(\n&nbsp; &nbsp; keyboard_input: Res&lt;Input&lt;KeyCode&gt;&gt;,\n&nbsp; &nbsp; mut head_positions: Query&lt;&amp;mut Transform, With&lt;SnakeHead&gt;&gt;,\n) {\n&nbsp; &nbsp; for mut transform in head_positions.iter_mut() {\n&nbsp; &nbsp; &nbsp; &nbsp; if keyboard_input.pressed(KeyCode::Left) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; transform.translation.x -= 2.;\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; if keyboard_input.pressed(KeyCode::Right) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; transform.translation.x += 2.;\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; if keyboard_input.pressed(KeyCode::Down) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; transform.translation.y -= 2.;\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; if keyboard_input.pressed(KeyCode::Up) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; transform.translation.y += 2.;\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; }\n}\n</code></pre><p><code>Input&lt;KeyCode&gt;</code> 是Bevy系统级的资源，用于表示输入设备，这里是键盘设备。要访问资源就在system里用 <code>Res&lt;T&gt;</code> 这种参数类型。<code>keyboard_input.pressed()</code> 用于判断是否键盘按下了。</p><p>运行后，你就可以用方向键控制这个小方块的运动方向了。</p><h3>第6步：将窗口网格化</h3><p>默认Bevy的窗口坐标粒度是以屏幕的逻辑像素为单位的。而像贪吃蛇这种游戏，会将整个画布分成一个个正方形的小方格。具体怎么做，你可以看一下这一步变化的代码。</p><pre><code class=\"language-plain\">const ARENA_WIDTH: u32 = 10;\nconst ARENA_HEIGHT: u32 = 10;\n\n#[derive(Component, Clone, Copy, PartialEq, Eq)]\nstruct Position {\n&nbsp; &nbsp; x: i32,\n&nbsp; &nbsp; y: i32,\n}\n\n#[derive(Component)]\nstruct Size {\n&nbsp; &nbsp; width: f32,\n&nbsp; &nbsp; height: f32,\n}\n\nimpl Size {\n&nbsp; &nbsp; pub fn square(x: f32) -&gt; Self {\n&nbsp; &nbsp; &nbsp; &nbsp; Self {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; width: x,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; height: x,\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; }\n}\n\n        //\n        .add_systems(Update, (snake_movement, size_scaling, position_translation))\n        \n        //\n        .insert(Position { x: 3, y: 3 })\n        .insert(Size::square(0.8));\n        //\n\n// 计算方块元素的大小\nfn size_scaling(primary_query: Query&lt;&amp;Window, With&lt;bevy::window::PrimaryWindow&gt;&gt;, mut q: Query&lt;(&amp;Size, &amp;mut Transform)&gt;) {\n&nbsp; &nbsp; let window = primary_query.get_single().unwrap();\n&nbsp; &nbsp; for (sprite_size, mut transform) in q.iter_mut() {\n&nbsp; &nbsp; &nbsp; &nbsp; transform.scale = Vec3::new(\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sprite_size.width / ARENA_WIDTH as f32 * window.width() as f32,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sprite_size.height / ARENA_HEIGHT as f32 * window.height() as f32,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1.0,\n&nbsp; &nbsp; &nbsp; &nbsp; );\n&nbsp; &nbsp; }\n}\n\n// 计算位移\nfn position_translation(primary_query: Query&lt;&amp;Window, With&lt;bevy::window::PrimaryWindow&gt;&gt;, mut q: Query&lt;(&amp;Position, &amp;mut Transform)&gt;) {\n&nbsp; &nbsp; fn convert(pos: f32, bound_window: f32, bound_game: f32) -&gt; f32 {\n&nbsp; &nbsp; &nbsp; &nbsp; let tile_size = bound_window / bound_game;\n&nbsp; &nbsp; &nbsp; &nbsp; pos / bound_game * bound_window - (bound_window / 2.) + (tile_size / 2.)\n&nbsp; &nbsp; }\n&nbsp; &nbsp; \n&nbsp; &nbsp; let window = primary_query.get_single().unwrap();\n&nbsp; &nbsp; for (pos, mut transform) in q.iter_mut() {\n&nbsp; &nbsp; &nbsp; &nbsp; transform.translation = Vec3::new(\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; convert(pos.x as f32, window.width() as f32, ARENA_WIDTH as f32),\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; convert(pos.y as f32, window.height() as f32, ARENA_HEIGHT as f32),\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0.0,\n&nbsp; &nbsp; &nbsp; &nbsp; );\n&nbsp; &nbsp; }\n}\n</code></pre><p>这一步，我们添加了 Position 和 Size 两种Components。用来控制蛇头的逻辑位置和显示大小。新增了 <code>size_scaling</code> 和 <code>position_translation</code> 两个system，用来在每一帧计算蛇头的尺寸和位置。</p><p>具体的算法理解上要注意的就是，坐标的原点是在窗口正中央，转换后的网格grid的坐标原点在窗口左下角。</p><p>你可以看一下这一步运行后的效果。</p><p><img src=\"https://static001.geekbang.org/resource/image/38/e7/38e680225d339594bf280af4830564e7.png?wh=2711x1597\" alt=\"\"></p><p>你可以看到，蛇的头的大小（为一个网格大小的0.8）和位置已经变化了。这里的位置在 (3, 3)，网格总大小为 (10, 10)，左下角为 (0, 0)。</p><h3>第7步：让蛇按网格移动</h3><p>下面要让蛇的运动适配网格。你看一下这一步改动的代码。</p><pre><code class=\"language-plain\">fn snake_movement(\n&nbsp; &nbsp; keyboard_input: Res&lt;Input&lt;KeyCode&gt;&gt;,\n&nbsp; &nbsp; mut head_positions: Query&lt;&amp;mut Position, With&lt;SnakeHead&gt;&gt;,\n) {\n&nbsp; &nbsp; for mut pos in head_positions.iter_mut() {\n&nbsp; &nbsp; &nbsp; &nbsp; if keyboard_input.pressed(KeyCode::Left) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pos.x -= 1;\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; if keyboard_input.pressed(KeyCode::Right) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pos.x += 1;\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; if keyboard_input.pressed(KeyCode::Down) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pos.y -= 1;\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; if keyboard_input.pressed(KeyCode::Up) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pos.y += 1;\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; }\n}\n</code></pre><p>这一步我们要更新蛇头的逻辑坐标，也就是上一步定义那个Position component的实例。现在你可以通过方向键将这个小矩形块移动到其他位置。</p><p><img src=\"https://static001.geekbang.org/resource/image/ee/97/eea91bfc1a4a308deea67f06fe4a0c97.png?wh=2711x1603\" alt=\"\"></p><h3>第8步：配置窗口比例和尺寸</h3><p>默认打开的窗口是长方形的，我们要给它配置成方形。你可以看一下这一步的变化代码。</p><pre><code class=\"language-plain\">const ARENA_WIDTH: u32 = 25;\nconst ARENA_HEIGHT: u32 = 25;\n        \n        //\n        .add_plugins(DefaultPlugins.set(WindowPlugin {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; primary_window: Some( Window {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; title: \"Snake!\".to_string(),\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; resolution: bevy::window::WindowResolution::new( 500.0, 500.0 ),\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ..default()\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }),\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ..default()\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; })\n&nbsp; &nbsp; &nbsp; &nbsp; )\n&nbsp; &nbsp; &nbsp; &nbsp; .insert_resource(ClearColor(Color::rgb(0.04, 0.04, 0.04)))\n        //\n</code></pre><p>这一步我们做了4件事情。</p><ol>\n<li>设置窗口尺寸为500px x 500px。</li>\n<li>设置窗口标题为 Snake!。</li>\n<li>设置窗口填充背景颜色为 Color::rgb(0.04, 0.04, 0.04)。</li>\n<li>分割窗口grid为更大一点的数字，比如25x25。</li>\n</ol><p>你看一下这一步的效果。</p><p><img src=\"https://static001.geekbang.org/resource/image/6b/9e/6b5d9639cc9dfeff05f3724fb39d369e.png?wh=1151x1193\" alt=\"\"></p><p>离我们期望的样子越来越近了。</p><h3>第9步：随机产生食物</h3><p>下面要开始产生食物。食物我们也用另一种小方块来表示。你看一下这一步变化的代码。</p><pre><code class=\"language-plain\">const FOOD_COLOR: Color = Color::rgb(1.0, 0.0, 1.0);\n\n#[derive(Component)]\nstruct Food;\n\n&nbsp; &nbsp; &nbsp; &nbsp; .add_systems(Update, food_spawner)\n\nfn food_spawner(mut commands: Commands) {\n&nbsp; &nbsp; commands\n&nbsp; &nbsp; &nbsp; &nbsp; .spawn(SpriteBundle {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sprite: Sprite {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; color: FOOD_COLOR,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ..default()\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ..default()\n&nbsp; &nbsp; &nbsp; &nbsp; })\n&nbsp; &nbsp; &nbsp; &nbsp; .insert(Food)\n&nbsp; &nbsp; &nbsp; &nbsp; .insert(Position {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; x: (random::&lt;f32&gt;() * ARENA_WIDTH as f32) as i32,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; y: (random::&lt;f32&gt;() * ARENA_HEIGHT as f32) as i32,\n&nbsp; &nbsp; &nbsp; &nbsp; })\n&nbsp; &nbsp; &nbsp; &nbsp; .insert(Size::square(0.8));\n}\n</code></pre><p>食物随机产生，所以需要用到random函数。同样，我们定义了 Food 这个 Compoment，然后定义了 food_spawner system，并添加到runtime中去。创建的食物entity上带有 Sprite、Food、Position、Size 等 components。</p><p>可以想象，这个创建食物的system1秒会执行60次，也就是1秒钟会创建60个食物，速度太快了。</p><p><img src=\"https://static001.geekbang.org/resource/image/7b/57/7bd5b3534a7b1a647380c76612b0cd57.png?wh=1151x1193\" alt=\"\"></p><h3>第10步：使用定时器产生食物</h3><p>下面我们要控制食物的产生速度，比如2秒产生一颗食物。我们来看这一步变化的代码。</p><pre><code class=\"language-plain\">#[derive(Resource)]\nstruct FoodSpawnTimer(Timer);\n\n&nbsp; &nbsp; &nbsp; &nbsp; .insert_resource(FoodSpawnTimer(Timer::from_seconds(\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1.0,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; TimerMode::Repeating,\n&nbsp; &nbsp; &nbsp; &nbsp; )))\n\nfn food_spawner(\n&nbsp; &nbsp; mut commands: Commands,\n&nbsp; &nbsp; time: Res&lt;Time&gt;,\n&nbsp; &nbsp; mut timer: ResMut&lt;FoodSpawnTimer&gt;,\n&nbsp; &nbsp; ) {\n&nbsp; &nbsp; // 如果时间未到 2s 就立即返回\n&nbsp; &nbsp; if !timer.0.tick(time.delta()).finished() {\n&nbsp; &nbsp; &nbsp; &nbsp; return;\n&nbsp; &nbsp; }\n&nbsp; &nbsp; commands\n&nbsp; &nbsp; &nbsp; &nbsp; .spawn(SpriteBundle {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sprite: Sprite {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; color: FOOD_COLOR,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ..default()\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ..default()\n&nbsp; &nbsp; &nbsp; &nbsp; })\n&nbsp; &nbsp; &nbsp; &nbsp; .insert(Food)\n&nbsp; &nbsp; &nbsp; &nbsp; .insert(Position {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; x: (random::&lt;f32&gt;() * ARENA_WIDTH as f32) as i32,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; y: (random::&lt;f32&gt;() * ARENA_HEIGHT as f32) as i32,\n&nbsp; &nbsp; &nbsp; &nbsp; })\n&nbsp; &nbsp; &nbsp; &nbsp; .insert(Size::square(0.8));\n}\n</code></pre><p>Timer 类型是Bevy提供的定时器类型，我们用newtype模式定义一个自己的定时器，它是一种资源（全局唯一）。我们使用 <code>insert_resource()</code> 将这个资源初始化并插入到托管系统中去。</p><p>然后在 <code>food_spawner system</code> 中使用 <code>ResMut&lt;FoodSpawnTimer&gt;</code> 这种形式来使用资源。同时用 <code>Res&lt;Time&gt;</code> 这种形式来获取游戏中的时间，这个也是Bevy引擎提供的。细心的你可能发现了，Bevy采用的也是声明式参数实现，和前面课程讲到的Axum风格一样。这些参数顺序是可以变的！在这里你可以体会到Rust强大的表达能力。</p><p>我们再来看一句。</p><pre><code class=\"language-plain\">&nbsp; &nbsp; if !timer.0.tick(time.delta()).finished() {\n&nbsp; &nbsp; &nbsp; &nbsp; return;\n&nbsp; &nbsp; }\n</code></pre><p>这一句表示每次执行这个 <code>food_spawner system</code>（1秒执行60次）时，先判断当前流逝了多少时间，如果定时器的一次间隔还没到，就直接返回，不执行这个函数后面的部分，也就不产生一个食物了。这样就实现了控制食物产生速率的目的。</p><p>你可以看一下运行效果。</p><p><img src=\"https://static001.geekbang.org/resource/image/9e/42/9ef4345a3ca89a281ca25b264ebdc942.png?wh=1151x1193\" alt=\"\"></p><p>现在2秒产生一颗食物，速度比刚才慢多了。</p><h3>第11步：让蛇自动前进</h3><p>下面我们要让蛇自己动起来，而且也要控制它的运动速率。同样的我们会用定时器方法。</p><p>你来看这一步改动的代码。</p><pre><code class=\"language-plain\">#[derive(Resource)]\nstruct BTimer(Timer);\n\n#[derive(Component)]\nstruct SnakeHead {\n&nbsp; &nbsp; direction: Direction,\n}\n\n#[derive(PartialEq, Copy, Clone)]\nenum Direction {\n&nbsp; &nbsp; Left,\n&nbsp; &nbsp; Up,\n&nbsp; &nbsp; Right,\n&nbsp; &nbsp; Down,\n}\n\nimpl Direction {\n&nbsp; &nbsp; fn opposite(self) -&gt; Self {\n&nbsp; &nbsp; &nbsp; &nbsp; match self {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Self::Left =&gt; Self::Right,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Self::Right =&gt; Self::Left,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Self::Up =&gt; Self::Down,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Self::Down =&gt; Self::Up,\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; }\n}\n        // 插入定时器资源\n        .insert_resource(BTimer(Timer::from_seconds(\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0.20,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; TimerMode::Repeating,\n&nbsp; &nbsp; &nbsp; &nbsp; )))\n        // 更新Update模式下的system集\n        .add_systems(Update, (\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; snake_movement_input.before(snake_movement), \n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; snake_movement, \n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; size_scaling, \n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; position_translation))\n\n// 根据用户键盘行为，预处理蛇的前进方向\nfn snake_movement_input(\n&nbsp; &nbsp; keyboard_input: Res&lt;Input&lt;KeyCode&gt;&gt;, \n&nbsp; &nbsp; mut heads: Query&lt;&amp;mut SnakeHead&gt;) {\n&nbsp; &nbsp; if let Some(mut head) = heads.iter_mut().next() {\n&nbsp; &nbsp; &nbsp; &nbsp; let dir: Direction = if keyboard_input.just_pressed(KeyCode::Left) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Direction::Left\n&nbsp; &nbsp; &nbsp; &nbsp; } else if keyboard_input.just_pressed(KeyCode::Down) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Direction::Down\n&nbsp; &nbsp; &nbsp; &nbsp; } else if keyboard_input.just_pressed(KeyCode::Up) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Direction::Up\n&nbsp; &nbsp; &nbsp; &nbsp; } else if keyboard_input.just_pressed(KeyCode::Right) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Direction::Right\n&nbsp; &nbsp; &nbsp; &nbsp; } else {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; head.direction\n&nbsp; &nbsp; &nbsp; &nbsp; };\n&nbsp; &nbsp; &nbsp; &nbsp; if dir != head.direction.opposite() {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; head.direction = dir;\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; }\n}\n\n// 蛇的运动system\nfn snake_movement(\n&nbsp; &nbsp; mut heads: Query&lt;(&amp;mut Position, &amp;SnakeHead)&gt;,\n&nbsp; &nbsp; time: Res&lt;Time&gt;,\n&nbsp; &nbsp; mut timer: ResMut&lt;BTimer&gt;,\n) {\n    // 如果时间未到 0.2s 就立即返回\n&nbsp; &nbsp; if !timer.0.tick(time.delta()).finished() {\n&nbsp; &nbsp; &nbsp; &nbsp; return;\n&nbsp; &nbsp; }\n\n&nbsp; &nbsp; if let Some((mut head_pos, head)) = heads.iter_mut().next() {\n&nbsp; &nbsp; &nbsp; &nbsp; match &amp;head.direction {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Direction::Left =&gt; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; head_pos.x -= 1;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Direction::Right =&gt; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; head_pos.x += 1;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Direction::Up =&gt; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; head_pos.y += 1;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Direction::Down =&gt; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; head_pos.y -= 1;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; };\n&nbsp; &nbsp; }\n}\n</code></pre><p>类似地，我们定义了BTimer来控制蛇的自动行走，0.2秒走一格。同时，我们现在可以给蛇指定行走的方向了，因此新定义了 Direction 枚举，并在 SnakeHead Component里添加了 direction 字段。</p><p>代码中的 <code>snake_movement_input.before(snake_movement)</code> 表示明确指定 <code>snake_movement_input</code> 在 <code>snake_movement system</code> 之前处理。因为bevy默认会尽可能并行化，所以这样指定能够明确system的执行顺序，不然可能是乱序执行的。</p><h3>第12步：定义蛇身</h3><p>下面是定义蛇的身子，这是整个模型相对困难的一步。但其实把结构定义好了就会很简单。</p><p>你可以看一下这步变化的代码。</p><pre><code class=\"language-plain\">#[derive(Component)]\nstruct SnakeSegment;\n\n#[derive(Resource, Default, Deref, DerefMut)]\nstruct SnakeSegments(Vec&lt;Entity&gt;);\n\n    // 插入蛇的结构，定义为资源\n    .insert_resource(SnakeSegments::default())\n\n// 创建蛇，用SnakeSegments来维护蛇的结构    \nfn spawn_snake(mut commands: Commands, mut segments: ResMut&lt;SnakeSegments&gt;) {\n&nbsp; &nbsp; *segments = SnakeSegments(vec![\n&nbsp; &nbsp; &nbsp; &nbsp; commands\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .spawn(SpriteBundle {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sprite: Sprite {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; color: SNAKE_HEAD_COLOR,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ..default()\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ..default()\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; })\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .insert(SnakeHead {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; direction: Direction::Up,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; })\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .insert(SnakeSegment)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .insert(Position { x: 3, y: 3 })\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .insert(Size::square(0.8))\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .id(),\n&nbsp; &nbsp; &nbsp; &nbsp; spawn_segment(commands, Position { x: 3, y: 2 }),\n&nbsp; &nbsp; ]);\n}\n\n// 创建蛇的一个segment，也就是一个小方块\nfn spawn_segment(mut commands: Commands, position: Position) -&gt; Entity {\n&nbsp; &nbsp; commands\n&nbsp; &nbsp; &nbsp; &nbsp; .spawn(SpriteBundle {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sprite: Sprite {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; color: SNAKE_SEGMENT_COLOR,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ..default()\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ..default()\n&nbsp; &nbsp; &nbsp; &nbsp; })\n&nbsp; &nbsp; &nbsp; &nbsp; .insert(SnakeSegment)\n&nbsp; &nbsp; &nbsp; &nbsp; .insert(position)\n&nbsp; &nbsp; &nbsp; &nbsp; .insert(Size::square(0.65))\n&nbsp; &nbsp; &nbsp; &nbsp; .id()\n}\n</code></pre><p>这里，最关键的是定义了 SnakeSegment Component 和 <code>SnakeSegments(Vec&lt;Entity&gt;)</code> 这个 Resource。我们把蛇的头和每一节身子小方块都视为一个 SnakeSegment，整条蛇由多个 SnakeSegment 组成，因此用 <code>SnakeSegments(Vec&lt;Entity&gt;)</code> 这个资源来维护这条蛇的结构。<code>SnakeSegments(Vec&lt;Entity&gt;)</code> 里面需要存下每个 SnakeSegment 的 Entity id。</p><p>默认开始的时候，蛇有一节身子，位置在 (3, 2)。蛇的运动方向是向上的。蛇身小方块是 0.65 个网格单元大小。</p><p>你可以看一下这一步运行后的效果。</p><p><img src=\"https://static001.geekbang.org/resource/image/d9/b1/d9c2ee5655cf634f05905964101d04b1.png?wh=1151x1143\" alt=\"\"></p><p>可以看到，这一节蛇身没有跟着头一起动。</p><h3>第13步：让蛇身跟着蛇的头一起运动</h3><p>让蛇身跟着蛇头一起动，模型上其实就是让蛇身的每一节跟着蛇头的移动一起变换坐标就行了。我们看一下这一步的代码变化。</p><pre><code class=\"language-plain\">fn snake_movement(\n&nbsp; &nbsp; time: Res&lt;Time&gt;,\n&nbsp; &nbsp; mut timer: ResMut&lt;BTimer&gt;,\n&nbsp; &nbsp; segments: ResMut&lt;SnakeSegments&gt;,\n&nbsp; &nbsp; mut heads: Query&lt;(Entity, &amp;SnakeHead)&gt;,\n&nbsp; &nbsp; mut positions: Query&lt;&amp;mut Position&gt;,\n) {\n    // 不到0.2s立即返回\n&nbsp; &nbsp; if !timer.0.tick(time.delta()).finished() {\n&nbsp; &nbsp; &nbsp; &nbsp; return;\n&nbsp; &nbsp; }\n\n&nbsp; &nbsp; if let Some((head_entity, head)) = heads.iter_mut().next() {\n&nbsp; &nbsp; &nbsp; &nbsp; let segment_positions = segments\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .iter()\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .map(|e| *positions.get_mut(*e).unwrap())\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .collect::&lt;Vec&lt;Position&gt;&gt;();\n&nbsp; &nbsp; &nbsp; &nbsp; // 处理蛇的头的位移\n        let mut head_pos = positions.get_mut(head_entity).unwrap();\n&nbsp; &nbsp; &nbsp; &nbsp; match &amp;head.direction {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Direction::Left =&gt; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; head_pos.x -= 1;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Direction::Right =&gt; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; head_pos.x += 1;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Direction::Up =&gt; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; head_pos.y += 1;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Direction::Down =&gt; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; head_pos.y -= 1;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; };\n        // 处理蛇身每一段的位置变化\n&nbsp; &nbsp; &nbsp; &nbsp; segment_positions\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .iter()\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .zip(segments.iter().skip(1))\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .for_each(|(pos, segment)| {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; *positions.get_mut(*segment).unwrap() = *pos;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; });\n&nbsp; &nbsp; }\n}\n</code></pre><p>这个算法的精华在这一句：</p><pre><code class=\"language-plain\">&nbsp; &nbsp; &nbsp; &nbsp; segment_positions\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .iter()\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .zip(segments.iter().skip(1))\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .for_each(|(pos, segment)| {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; *positions.get_mut(*segment).unwrap() = *pos;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; });\n</code></pre><p>意思就是，当蛇动一步的时候，第一节蛇身的坐标值填充蛇头的坐标值，第二节蛇身的坐标值填充第一节蛇身的坐标值，以此类推，直到遍历完整个蛇身。</p><p>可以看到，Rust可以把问题表达得相当精练。</p><p>你看一下这一步运行后的效果。</p><p><img src=\"https://static001.geekbang.org/resource/image/48/65/48df50e0837a2080002b8bc343411865.png?wh=1151x1193\" alt=\"\"></p><h3>第14步：边吃边长大</h3><p>下面就该处理吃食物并长大的效果了。吃食物的原理就是当蛇头占据了那个食物的位置时，就在系统中注销掉那个食物，然后在蛇身的尾巴位置处添加一个小方块。</p><p>你看一下这一步变化的代码。</p><pre><code class=\"language-plain\">#[derive(Event)]\nstruct GrowthEvent;\n\n#[derive(Default, Resource)]\nstruct LastTailPosition(Option&lt;Position&gt;);\n\n        // 更新Update system集合\n        .add_systems(Update, (\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; snake_movement_input.before(snake_movement), \n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; snake_movement,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; snake_eating,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; snake_growth,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; size_scaling, \n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; position_translation))\n\n    *last_tail_position = LastTailPosition(Some(*segment_positions.last().unwrap()));\n \n// 处理蛇吃食物的system   \nfn snake_eating(\n&nbsp; &nbsp; mut commands: Commands,\n&nbsp; &nbsp; mut growth_writer: EventWriter&lt;GrowthEvent&gt;,\n&nbsp; &nbsp; food_positions: Query&lt;(Entity, &amp;Position), With&lt;Food&gt;&gt;,\n&nbsp; &nbsp; head_positions: Query&lt;&amp;Position, With&lt;SnakeHead&gt;&gt;,\n) {\n&nbsp; &nbsp; for head_pos in head_positions.iter() {\n&nbsp; &nbsp; &nbsp; &nbsp; for (ent, food_pos) in food_positions.iter() {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // 通过遍历来判断有没有吃到一个食物\n            if food_pos == head_pos {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; commands.entity(ent).despawn();\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; growth_writer.send(GrowthEvent);\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; }\n}\n\n// 处理蛇长大的system\nfn snake_growth(\n&nbsp; &nbsp; commands: Commands,\n&nbsp; &nbsp; last_tail_position: Res&lt;LastTailPosition&gt;,\n&nbsp; &nbsp; mut segments: ResMut&lt;SnakeSegments&gt;,\n&nbsp; &nbsp; mut growth_reader: EventReader&lt;GrowthEvent&gt;,\n) {\n    // 通过事件机制来解耦蛇长大的逻辑\n&nbsp; &nbsp; if growth_reader.read().next().is_some() {\n&nbsp; &nbsp; &nbsp; &nbsp; segments.push(spawn_segment(commands, last_tail_position.0.unwrap()));\n&nbsp; &nbsp; }\n}\n</code></pre><p>我们添加了 <code>LastTailPosition(Option&lt;Position&gt;)</code> 这个蛇尾的位置坐标作为资源来实时更新，好知道蛇长长的时候，应该在哪个位置添加segment。然后新增了 <code>snake_eating</code> 和 <code>snake_growth</code> 两个 system。</p><p>我们新定义了 GrowthEvent 长大的事件。</p><p><code>snake_eating system</code> 处理吃食物的业务，就是当蛇头的位置与食物位置重合时，就调用 <code>commands.entity(ent).despawn()</code> 将食物给注销掉。然后用<code>growth_writer.send(GrowthEvent)</code> 向系统总线发送一个“长大”的事件。</p><p><code>snake_growth system</code> 处理蛇长大的业务，通过 <code>EventReader&lt;GrowthEvent&gt;</code> 定义的 growth_reader，读取系统中的长大事件，使用 <code>spawn_segment()</code> 和 <code>segments.push()</code> 把尾巴添加到蛇的全局维护资源中去。</p><p><code>snake_eating</code> 和 <code>snake_growth</code> 在每一帧更新时都会执行。</p><p>可以看到，通过这样的事件总线，Bevy系统把业务解耦得相当漂亮。每个system就专注于处理一件“小”事情就行了。这样对于构建复杂的游戏系统来说，大大减轻了我们的心智负担。</p><p>你可以看一下这一步执行后的效果。</p><p><img src=\"https://static001.geekbang.org/resource/image/a4/52/a4384058d0dfc46c3386c827bd7af652.png?wh=1151x1193\" alt=\"\"></p><h3>第15步：撞墙和自身Game Over</h3><p>好了，我们的贪吃蛇的主体功能基本实现好了，下面需要加入撞墙和撞自身死的判断。你看一下这一步变化的代码。</p><pre><code class=\"language-plain\">#[derive(Event)]\nstruct GameOverEvent;\n        // 注册事件到world中\n        .add_event::&lt;GameOverEvent&gt;()\n        .add_systems(Update, (\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; snake_movement_input.before(snake_movement), \n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; snake_movement,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; game_over.after(snake_movement),\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; snake_eating,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; snake_growth,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; size_scaling, \n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; position_translation))\n\n        // 判断撞墙的逻辑\n&nbsp; &nbsp; &nbsp; &nbsp; if head_pos.x &lt; 0\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; || head_pos.y &lt; 0\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; || head_pos.x as u32 &gt;= ARENA_WIDTH\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; || head_pos.y as u32 &gt;= ARENA_HEIGHT\n&nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; game_over_writer.send(GameOverEvent);\n&nbsp; &nbsp; &nbsp; &nbsp; }\n        // 判断撞自己身子的逻辑\n&nbsp; &nbsp; &nbsp; &nbsp; if segment_positions.contains(&amp;head_pos) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; game_over_writer.send(GameOverEvent);\n&nbsp; &nbsp; &nbsp; &nbsp; }\n        //\n\n// game over 子system\nfn game_over(\n&nbsp; &nbsp; mut commands: Commands,\n&nbsp; &nbsp; mut reader: EventReader&lt;GameOverEvent&gt;,\n&nbsp; &nbsp; segments_res: ResMut&lt;SnakeSegments&gt;,\n&nbsp; &nbsp; food: Query&lt;Entity, With&lt;Food&gt;&gt;,\n&nbsp; &nbsp; segments: Query&lt;Entity, With&lt;SnakeSegment&gt;&gt;,\n) {\n&nbsp; &nbsp; if reader.read().next().is_some() {\n&nbsp; &nbsp; &nbsp; &nbsp; for ent in food.iter().chain(segments.iter()) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; commands.entity(ent).despawn();\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; spawn_snake(commands, segments_res);\n&nbsp; &nbsp; }\n}\n</code></pre><p>撞墙这个只需要判断有没有超出grid边界就可以了。撞自身判断用 <code>segment_positions.contains(&amp;head_pos)</code> 看所有蛇身的 segment 的position Vec里有没有包含蛇头的位置。</p><p>我们添加了 <code>GameOverEvent</code> 事件和 <code>game_over system</code>，也是用的异步事件的方式。当收到 <code>GameOverEvent</code> 的时候，把所有的蛇的entity和食物的entity全部清理（despawn）掉。注意这里用了两个迭代器的 <code>.chain()</code> 方法，让清理工作表达得更紧凑，你可以体会一下。</p><p>清理完后，再重新创建蛇，游戏重新开始。到这一步，游戏已经基本能玩了，还写什么代码，先玩几把吧。</p><p><img src=\"https://static001.geekbang.org/resource/image/7f/67/7f1b8ca4a2fd813a880363fcc78b6667.png?wh=1151x1193\" alt=\"\"></p><p>目前为止，整个代码不过330行左右。</p><h2>小结</h2><p>这节课我们通过自己动手编写一个贪吃蛇小游戏，学习了Rust游戏开发引擎Bevy的基本使用方式。Bevy游戏引擎充分利用Rust语言的无忧并发和强大的表达能力，让开发游戏变得跟游戏一样好玩。整个过程下来，心情愉快、舒畅。你可以跟着我一步一步敲代码，体会这种感觉。</p><p>Bevy的核心是一套ECS系统，ECS本质上来说是一套编程范式，不仅限于在游戏中使用，它也可以在其他的业务系统中使用。你有必要多花点时间查阅相关资料去理解它。后面有机会我也会继续出相关的研究内容。</p><p>写Bevy代码的时候，我们要理解Bevy是一种Runtime，我们写的代码实际会被这个Runtime托管运行。我们要做的就是按照ECS规范定义Component、Resource、Event等，实现 system 添加到这个 Runtime 中。底层那些脏活累活Bevy全帮我们做了，我们只需要专心抽象模型、定义结构、处理业务。</p><p>然后，通过这节课的内容我们可以体会到，写小游戏其实也是一种相当好的建模能力的训练，我们可以通过这种有趣的方法提升自己在这方面的能力。</p><p><img src=\"https://static001.geekbang.org/resource/image/5c/yy/5cfe1952919841131d5c1a1b8deddayy.jpg?wh=2942x4497\" alt=\"\"></p><p>本讲源代码：<a href=\"https://github.com/miketang84/jikeshijian/tree/master/27-bevy_snake\">https://github.com/miketang84/jikeshijian/tree/master/27-bevy_snake</a></p><p>必读的两个Bevy资料：</p><ul>\n<li><a href=\"https://bevyengine.org/learn/book/introduction/\">https://bevyengine.org/learn/book/introduction/</a></li>\n<li><a href=\"https://bevy-cheatbook.github.io/introduction.html\">https://bevy-cheatbook.github.io/introduction.html</a></li>\n</ul><h2>思考题</h2><p>这节课的代码还有个问题，就是食物有可能在已经产生过的地方产生，也有可能在蛇身上产生，请问如何处理这个Bug？欢迎你把你的处理思路和实现代码分享出来，我们一起探讨，如果你觉得这节课对你有帮助的话，也欢迎你把这节课的内容分享给其他朋友，我们下节课再见！</p>","comments":[{"had_liked":false,"id":387136,"user_name":"NiceBlueChai","can_delete":false,"product_type":"c1","uid":2038718,"ip_address":"山东","ucode":"2043333890C448","user_header":"https://static001.geekbang.org/account/avatar/00/1f/1b/be/525e05ae.jpg","comment_is_top":false,"comment_ctime":1706541746,"is_pvip":true,"replies":[{"id":141111,"content":"哈哈，真的是。🤔👍👍","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1706586532,"ip_address":"重庆","comment_id":387136,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"还有个bug，向上走的过程中快速按左下（或者右下），蛇直接原地向相反方向走了","like_count":1,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":636616,"discussion_content":"哈哈，真的是。🤔👍👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1706586532,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":386883,"user_name":"seven9t","can_delete":false,"product_type":"c1","uid":1979955,"ip_address":"广东","ucode":"B7CA7D62C56938","user_header":"https://static001.geekbang.org/account/avatar/00/1e/36/33/3411df0d.jpg","comment_is_top":false,"comment_ctime":1705804204,"is_pvip":false,"replies":[{"id":141075,"content":"非常强的动手能力👍👍","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1705970760,"ip_address":"重庆","comment_id":386883,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"补充了个最起码的长按加速功能，没找到timer的就地调频接口，只能另开了个timer做切换。各位有啥更好办法么。","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":636340,"discussion_content":"非常强的动手能力👍👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1705970760,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":386059,"user_name":"unistart","can_delete":false,"product_type":"c1","uid":1524770,"ip_address":"湖南","ucode":"C51E5D242530D2","user_header":"https://static001.geekbang.org/account/avatar/00/17/44/22/403a340a.jpg","comment_is_top":false,"comment_ctime":1703942257,"is_pvip":false,"replies":[{"id":140731,"content":"非常棒的思考 👍. 要判断食物位置是否重合的话, 需要用一个结构来维护食物的 Positions, 将其设定为 Resource. 在最新一篇总结更新中会讲到这个问题.","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1704171143,"ip_address":"重庆","comment_id":386059,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"BUG: 食物可能在蛇身上产生\n处理:  在生成食物的时候，判断一下随机生成的Position值是否和当前蛇的某一个部分位置是重合的，如果是就直接return，不生成食物。\n\n&#47;&#47; 修改food_spawner\nfn food_spawner(\n    mut commands: Commands, \n    time: Res&lt;Time&gt;,\n    mut timer: ResMut&lt;FoodSpawnTimer&gt;,\n    segment_pos_set: Query&lt;&amp;Position, With&lt;SnakeSegment&gt;&gt;\n)\n{\n    &#47;&#47; ...\n\n    let rand_x: i32 = (random::&lt;f32&gt;() * ARENA_WIDTH as f32) as i32;\n    let rand_y: i32 = (random::&lt;f32&gt;() * ARENA_HEIGHT as f32) as i32;\n        \n    for pos in segment_pos_set.iter() {\n        if pos.x == rand_x &amp;&amp; pos.y == rand_y {\n            return;\n        }\n    }\n\n    &#47;&#47; ...\n    .insert(Position {\n        x: rand_x,\n        y: rand_y,\n    })\n    &#47;&#47; ...\n}\n\nBUG: 食物有可能在已经产生过的地方产生\n个人感觉这个不太算bug吧，分两种情况看，一种是食物A之前被吃过，又在相同的位置生成了新的食物，这个应该是没问题的；另一种就是食物A之前没有被吃过，同时新生成的食物B的位置和食物A重合，这样确实貌似有问题。\n但是我不知道Bevy是如何处理的，按我的理解来说食物B应该会盖掉食物A，即某一位置只会有一个最新的食物实体。还是说bevy中出现这种情况，同一位置会有多个实体。如果是同一位置有多个实体的话，那么再Query一下已经生成的Food的Position，然后和新生成的食物坐标比较一下是否有出现的重合就行了吧。","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634880,"discussion_content":"非常棒的思考 👍. 要判断食物位置是否重合的话, 需要用一个结构来维护食物的 Positions, 将其设定为 Resource. 在最新一篇总结更新中会讲到这个问题.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1704171143,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1979955,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/36/33/3411df0d.jpg","nickname":"seven9t","note":"","ucode":"B7CA7D62C56938","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":636117,"discussion_content":"目前是偷懒的做法，重合的一起被吃掉了，因为snake_eating里的food loop没有break","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1705637539,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":385934,"user_name":"大白菜🥬","can_delete":false,"product_type":"c1","uid":1812108,"ip_address":"重庆","ucode":"A5D7350C80C001","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a6/8c/344f03dd.jpg","comment_is_top":false,"comment_ctime":1703686552,"is_pvip":false,"replies":[{"id":140656,"content":"对的对的","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1703770599,"ip_address":"重庆","comment_id":385934,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"14步那里需要添加LastTailPosition资源， App需要添加 .insert_resource(LastTailPosition::default())","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634656,"discussion_content":"对的对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1703770600,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":385863,"user_name":"十八哥","can_delete":false,"product_type":"c1","uid":1027167,"ip_address":"天津","ucode":"C0130252F97814","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ac/5f/894761f8.jpg","comment_is_top":false,"comment_ctime":1703555569,"is_pvip":false,"replies":[{"id":140631,"content":"不错的思路。","user_name":"作者回复","user_name_real":"编辑","uid":2186062,"ctime":1703577740,"ip_address":"重庆","comment_id":385863,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100626901,"comment_content":"当年用vb.net用了1千行实现的。思路是按钮数组，一个二维数组。","like_count":0,"discussions":[{"author":{"id":2186062,"avatar":"https://static001.geekbang.org/account/avatar/00/21/5b/4e/8e1f699e.jpg","nickname":"Mike Tang","note":"","ucode":"55775BCEDB5937","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634497,"discussion_content":"不错的思路。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1703577740,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]}]}