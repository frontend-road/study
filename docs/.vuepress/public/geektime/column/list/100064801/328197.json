{"id":328197,"title":"17 | 加密密钥是怎么来的？","content":"<p>你好，我是范学雷。</p><p>到目前为止，你已经跟我一起走了很长的路了。不知道这一路上，你有了哪些心得和体会？对密码学是不是多了很多新的认知和想法？这一讲，我们继续上路，踏足密码学的世界。</p><p>前几讲，我们花了很长时间讨论了对称密钥的算法，以及使用对称密钥算法要注意哪些陷阱。但是，不知道你有没有注意到，一直有一个悬而未决的问题。</p><p>我们要使用对称密钥算法，总得有对称密钥吧。那么，对称密钥是从哪儿来的？这是我们这一次要讨论的问题。</p><h1>合格的对称密钥什么样？</h1><p>对称密钥从哪里来的？在讨论这个问题之前，我们先要弄清楚另外一个问题。一个合格的对称密钥，应该满足什么样的条件呢？只有知道了需求，我们才能有解决的方案。</p><h2>对称密钥的长度</h2><p>还记得我们之前提到过的AES-128和AES-256算法吗？</p><p>其中的128和256，指的是密钥的长度。也就是说，AES-128需要128位的密钥，AES-256需要256位的密钥。一般来说，一个对称密钥算法的密钥长度是固定的。这就是对称密钥的第一个要求：<strong>对称密钥的长度是由对称密钥算法确定的。</strong></p><p>当然，这并不意味着一个对称密钥只能用于一个加密算法。一个对称密钥，一般可以用于任意一个对称密钥算法，只要这个对称密钥满足算法要求的密钥长度。比如一个256位的对称密钥，既可以用于AES-256，也可以用于ChaCha20。</p><!-- [[[read_end]]] --><p>可是，一个对称密钥用于两个不同算法，这不是我们推荐的用法。因为，我们要考虑算法破解的风险。如果一个算法被破解了，那么它使用的对称密钥可能也就被破解了。我们不希望一个算法的失败连累另一个算法要保护的数据。</p><p>所以，大部分的应用程序接口，都不会限制一个对称密钥只能用于一个算法。但是，我们要有意识地避免这种情况。比如说，如果一个对称密钥已经用于AES-256的加密计算了，就不要再把它用于ChaCha20或者其他的加密算法了。</p><h2>对称密钥的强度</h2><p>说完了对称密钥的长度，我们来看对称密钥的强度。</p><p>有印象的话，你应该记得AES-128算法的安全强度是128位，AES-256算法的安全强度是256位。可是，如果没有高质量的对称密钥，这样的安全强度就没有意义。</p><p>举个例子，如果密钥只能是阿拉伯数字，那么128位的密钥就只有10^16种可能性。也就是，如果使用蛮力攻击的话，最多需要10^16次尝试，加密密钥就能够找到，加密数据就能够被破解。</p><p>如果我们把10^16转换成按位表示的安全强度，也不过就是53位的安全强度，这离128位的安全强度可相差太远了。所以，<strong>对称密钥的强度一定要和加密算法的强度匹配。</strong>比如说吧，AES-128算法需要128位的密钥，这个密钥就要有128位的强度。</p><p>对于任意给定的密钥，我们并不一定能够判断它的强度是不是足够。比如说，我们并不能判断“123456”是不是比“135246”强度更大。所以，当我们说密钥强度的时候，其实我们关注的还有产生密钥的机制。</p><p><strong>首先，产生密钥的机制要有匹配的强度。</strong>如果产生密钥的机制只有128位的安全强度，它就不能提供256位安全强度的密钥。简单地说，攻击产生密钥的机制就可以了。</p><p><strong>其次，密钥在它的长度上要均匀分布。也就是说，这个密钥的每一位是0还是1的概率都是50%。如果不能做到均匀分布，就会降低密钥的安全性。</strong>比如说，我们前面提到的阿拉伯数字的密钥，就是密钥没有做到均匀分布，导致安全强度降低的例子。</p><p>还有，<strong>密钥生成机制产生的密钥要随机</strong>。也就是说，下一个密钥要均匀分布，而且不可预测。如果下一个密钥不是随机的，那么下一个密钥的安全性就没有保障。如果上一个密钥是“123456”，下一个密钥是“123457”，只是简单地递增，那么这两个密钥都是不合格的密钥。</p><p>总结起来就是，<strong>一个合格的对称密钥，它的长度和强度要与对称密钥算法相匹配。</strong></p><h2>对称密钥的秘密</h2><p>在<a href=\"https://time.geekbang.org/column/article/316802\">第6讲</a>，我们提到，密钥的保密性和算法的安全性是对称密钥算法安全的两个关键因素。</p><p>既然密钥需要保密，那当然也就意味着密钥有秘可保。没有秘密的密钥当然谈不上保密，不能保密的密钥也没法保护数据的机密性。总之，对称密钥要有秘密。</p><p>不过，需要注意的是，秘密也是有安全强度的。比如说，很多地方的民俗，有“猜有无”的酒令。猜的人猜测对方握紧的手里有没有东西。</p><p>对于出酒令的人来说，手里有没有东西，当然是一个秘密。但是这个秘密被猜中的几率是50%。如果换算成密码学的指标，也就是只有1位的安全强度。1位的安全强度，当然简单好玩，适合于饮酒助兴。可是只有1位的安全性，并不适合在计算机系统中保护我们的机密数据。</p><p><strong>一个合格的对称密钥，要有足够的秘密，并且它的长度和强度要与对称密钥算法相匹配。</strong></p><p>这三个需求看起来简单、直观，但是用起来很容易就掉进强度错配、无秘可保的坑里。好了，有了这三个需求，对称密钥从哪里来这个问题，我们就可以来一起讨论它了。</p><h1>对称密钥从哪里来？</h1><p>那么，对称密钥是从哪里来的呢？你可能觉得这个问题有点怪怪的，其实这个问题，换个说法，就是我们去哪里才能够找到长度和强度都符合要求的秘密？</p><p>先看秘密的来源，来源主要有两类：</p><ul>\n<li>一类是计算机用户持有的秘密；</li>\n<li>另一类是计算机持有的秘密。</li>\n</ul><p>对应地，也就是对称密钥的两种来源。</p><h2>用户持有的秘密</h2><p>计算机用户持有的秘密，主要表现为只有该用户知道的秘密和只有该用户拥有的秘密两种。比如，我们能够记住的用户口令，是只有我们知道的秘密；我们的指纹，是只有我们拥有的信息。</p><p>遗憾的是，我们能够记住的密码很短，一般来说，满足不了对称密钥强度的需求；我们拥有的指纹、面容、虹膜信息，都可以复制，保守这样的秘密是一个极具挑战的任务。陌生的场合，我们摸一摸杯子，睁一睁眼睛，露一下面颊，这些所谓的秘密就都不再是秘密了。</p><p>我们拥有的生物特征不可靠，我们能够记住的又太少，那为什么指纹识别和用户密码还这么流行呢？主要原因是还是没有更好的、更简单的办法。</p><p>从我接触密码学开始，就已经有人喊口令要消亡了。二十多年了，口令依然活得有模有样，指纹/面部识别也越来越流行，尤其是需要身份认证的时候。</p><h2>使用口令生成对称密钥</h2><p>既然口令的强度不够，那如果一段加密数据，只有用户参与才能解密，那该怎么办呢？<strong>解决的办法就是分级：使用弱的口令来保护强的密钥，然后使用强的密钥来保护私密数据。</strong></p><p>如果加密数据泄漏了，由于保护它的对称密钥有足够的强度，我们不用担心破解的问题。</p><p>而口令，主要用于身份认证和衍生密钥。身份认证和密钥衍生，都不是高频次的运算。 从口令推导出来的对称密钥也不保存、不长留。这些措施，都降低了口令破解带来的数据泄漏风险。</p><p><img src=\"https://static001.geekbang.org/resource/image/2d/b3/2d9ff1f0dc3c3cedb0186c129ccb6fb3.jpeg?wh=2284*1285\" alt=\"\"></p><p>使用口令生成对称密钥的办法，通常成为“基于口令的密钥推导”。现在常用的基于口令的密钥推导算法是PBKDF2。我不在这里讲这个算法的细节了，你可以自己去找一找相关的规范。</p><p>不过，我们需要注意的是，由于口令的安全强度不够，很容易被破解，我们需要经常地变换口令，有些公司是强制性要求。如果口令变换了，从它衍生出来的对称密钥当然也就随着变换了。</p><p>如果我们直接使用衍生出来的对称密钥加密数据，每次的口令变化，都需要把已经加密的数据重新加密一遍。这可不是好事情！</p><p><img src=\"https://static001.geekbang.org/resource/image/8e/99/8e2yyc1d93e05379e3b83b4yy43a8699.jpeg?wh=2284*1285\" alt=\"\"></p><p>所以，通常地，我们也不推荐使用口令推导出来的密钥直接加密需要留存的数据。有什么办法克服这个障碍呢？解决这个问题，我们还要再添加一个环节。也就是使用推导出的密钥保护一个使用时间更长的密钥；而使用时间更长的密钥用来保护私密数据。</p><p><img src=\"https://static001.geekbang.org/resource/image/f6/19/f6dee390ea9e5971e31857b18768ef19.jpeg?wh=2284*1285\" alt=\"\"></p><p>多了一个环节以后，如果口令发生变更，我们只需要重新加密留存的对称密钥就行了，而不需要改动已经加密了的数据。那么，这个使用时间更长的密钥是怎么来的呢？</p><p>这就需要我们讨论下一个秘密的来源了：计算机持有的秘密。</p><h2>使用随机数生成对称密钥</h2><p>计算机持有的秘密，主要用的是我们上一节所讨论的随机数。</p><p>由于随机数是不可预测的，我们只要把随机数当做秘密信息来保护，就没有其他的人或者其他的计算机能够知道这个秘密。这样看起来，随机数能够完美地契合对称密钥的需求，无论是长度强度，还是保密要求。</p><p>需要一个对称密钥的时候，如果我们知道需要的长度、强度，找对强度匹配的随机数发生器，生成一个对应长度的随机数，就可以获得一个对称密钥了。这是一个看起来很简单、直观的办法。</p><p>但是，计算机持有的秘密也有一个缺陷，就是没法转换成我们人脑能够记住的东西。我们没有办法记住随机数，更没有办法记住从随机数衍生出来的对称密钥。既然我们没有办法，解密还需要对称密钥，那就需要计算机替我们记住它。</p><p>计算机该怎么管理对称密钥，怎么保守密钥秘密？这些问题也就一下子都冒出来了。</p><p>正像我们讨论过的一样，使用口令推导出的密钥可以保护使用时间更长的密钥，当然也包括使用随机数生成的密钥。不过这种保护方式，也有很大的局限性。这种局限性又在哪里呢？还有没有其他的方式？这些问题，我们下一次再讨论。</p><h1>Take Away（今日收获）</h1><p>今天，我们讨论了一个合格的对称密钥应该满足什么条件，以及对称密钥的两个主要来源。</p><p>通过今天的讨论，我们要：</p><ul>\n<li>了解对称密钥要满足的三个条件：长度、强度和秘密。</li>\n<li>了解产生对称密钥的两个主要办法：使用随机数，或者是基于口令的密钥推导。</li>\n<li>知道使用基于口令的密钥推导来保护数据的常用办法。</li>\n</ul><h1>思考题</h1><p>好的，又到了留思考题的时候了。</p><p>今天的思考题，我们稍微加大一点难度。不过也不用紧张，我相信只要你去反复撕扯这个问题，不管结论是什么，你都会有收获的。</p><p>我们反复强调过，我们能够记住的东西很少，我们能够记住的口令的安全强度也远远不够。那为什么从口令推导出来的密钥就能够更安全呢？ 如果口令只有6位数字，猜中口令的可能性是10^6。</p><p>转换成按位表示的安全强度，也不过就是20位的强度。这样的安全强度我们应该担心吗？如果这样的担忧是合理的，我们应该怎么提高口令的安全性？如果使用从口令推导出来的密钥，需要注意哪些问题？</p><p>欢迎在留言区留言，分享你的经验。参与讨论的人越多，我们互相学习、互相启发，能够得到的就越多。</p><p>好的，今天就这样，我们下次再聊。</p><p>元旦快乐！</p>","neighbors":{"left":{"article_title":"16 | 为什么说随机数都是骗人的？","id":327095},"right":{"article_title":"18 | 如何管理对称密钥？","id":328828}},"comments":[{"had_liked":false,"id":319328,"user_name":"纳兰容若","can_delete":false,"product_type":"c1","uid":1605876,"ip_address":"","ucode":"2E1EA2CDFDA1A9","user_header":"https://static001.geekbang.org/account/avatar/00/18/80/f4/564209ea.jpg","comment_is_top":false,"comment_ctime":1635746925,"is_pvip":true,"replies":[{"id":"115856","content":"是这样的。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1635921834,"ip_address":"","comment_id":319328,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5930714221","product_id":100064801,"comment_content":"老师您好<br>文中讲到“解决这个问题，我们还要再添加一个环节。也就是使用推导出的密钥保护一个使用时间更长的密钥；而使用时间更长的密钥用来保护私密数据。”<br>其中的“使用时间更长的密钥”是指的是紧接着图中的“加密密钥”么，老师的意思是图中的“对称密钥”改变但“加密密钥”不变么<br>这里有些困惑，期待老师的解答","like_count":1,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529593,"discussion_content":"是这样的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635921834,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1435675,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLiaricJYuUtNPXnicbELx1bAa83DvD9kG9ibXkBKGPxnXUibaLaV2YXCrt6GaldY0FN22iaAkFC2oHciarQ/132","nickname":"Chris","note":"","ucode":"594C921A8D62DD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556326,"discussion_content":"这里不解，为何对称密钥变化了，加密密钥没有变化，按照图中来看，加密密钥是通过对称密钥通过加密算法产生的啊？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647314469,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":271280,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1609508752,"is_pvip":true,"replies":[{"id":"98363","content":"如果生成1个需要1分钟，估计会影响用户体验。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1609562051,"ip_address":"","comment_id":271280,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5904476048","product_id":100064801,"comment_content":"提升生成密钥所需要的时间？如果生成1个口令对应的密钥需要1秒钟，生成10^6个口令对应的密钥就需要11天；如果生成1个需要1分钟，则生成10^6个需要两年","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512886,"discussion_content":"如果生成1个需要1分钟，估计会影响用户体验。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609562051,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":348095,"user_name":"马马虎虎","can_delete":false,"product_type":"c1","uid":1051266,"ip_address":"","ucode":"266A3631121F69","user_header":"https://static001.geekbang.org/account/avatar/00/10/0a/82/a64eac35.jpg","comment_is_top":false,"comment_ctime":1654738929,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654738929","product_id":100064801,"comment_content":"口语化太多，不够技术范","like_count":0},{"had_liked":false,"id":282886,"user_name":"董鹏","can_delete":false,"product_type":"c1","uid":1003243,"ip_address":"","ucode":"FF555AD5A6FF91","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/eb/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1615452251,"is_pvip":false,"replies":[{"id":"102692","content":"PBKDF2的消耗应该不算大，看看是不是算法实现的问题。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1615513410,"ip_address":"","comment_id":282886,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1615452251","product_id":100064801,"comment_content":"老师，咨询下生成密钥的算法除了常用的 PBKDF2 还有哪些呢？ 目前测试了下 采用PBKDF2 生成密钥对CPU和内存消耗比较大，有没有其他的可以推荐的","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516867,"discussion_content":"PBKDF2的消耗应该不算大，看看是不是算法实现的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615513410,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":280319,"user_name":"Daiver","can_delete":false,"product_type":"c1","uid":1466447,"ip_address":"","ucode":"9B1A03AFBC79BC","user_header":"https://static001.geekbang.org/account/avatar/00/16/60/4f/db0e62b3.jpg","comment_is_top":false,"comment_ctime":1614159057,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614159057","product_id":100064801,"comment_content":"如果说是纯6位，数字的口令，推导出来的密钥也是不安全的，可以把口令长度加长，混合上熟悉的单词，配合salt","like_count":0},{"had_liked":false,"id":275700,"user_name":"LXX","can_delete":false,"product_type":"c1","uid":2349160,"ip_address":"","ucode":"6BBE9967406E0F","user_header":"https://static001.geekbang.org/account/avatar/00/23/d8/68/89770b8b.jpg","comment_is_top":false,"comment_ctime":1611649376,"is_pvip":false,"replies":[{"id":"100087","content":"是一个办法，但是也难记。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1611684873,"ip_address":"","comment_id":275700,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1611649376","product_id":100064801,"comment_content":"老师好，关于思考题，使用数字 字母 以及下划线特殊字符来生成的口令，提高口令安全强度，是否可以。","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514445,"discussion_content":"是一个办法，但是也难记。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611684873,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":271640,"user_name":"可怜大灰狼","can_delete":false,"product_type":"c1","uid":1928373,"ip_address":"","ucode":"6CA9D6D460B967","user_header":"https://static001.geekbang.org/account/avatar/00/1d/6c/b5/32374f93.jpg","comment_is_top":false,"comment_ctime":1609745203,"is_pvip":true,"replies":[{"id":"98548","content":"限制是一个常用的方案。你设想一个具体的、有细节的场景，看看能不能根据场景构造出来一个每个人都一样，不同人的不同的的salt.","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1609786707,"ip_address":"","comment_id":271640,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1609745203","product_id":100064801,"comment_content":"我们可以对验证加次数限制，ip限制，不可以输入生日等弱口令等。PBKDF要求的salt，如何保证多次是一样的salt的？","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512983,"discussion_content":"限制是一个常用的方案。你设想一个具体的、有细节的场景，看看能不能根据场景构造出来一个每个人都一样，不同人的不同的的salt.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609786707,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":271283,"user_name":"Geek_9c3134","can_delete":false,"product_type":"c1","uid":1141689,"ip_address":"","ucode":"479BC6B4CF22FA","user_header":"https://static001.geekbang.org/account/avatar/00/11/6b/b9/9b0630b1.jpg","comment_is_top":false,"comment_ctime":1609511150,"is_pvip":false,"replies":[{"id":"98362","content":"19个字符的ID? 你不是已经发现了雪花算法了吗？你可以把雪花算法延长到你想要的位数，然后想办法把8位的字符映射到ID许可的字符就行了（参考BASE64的思路）。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1609561883,"ip_address":"","comment_id":271283,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1609511150","product_id":100064801,"comment_content":"老师  我想用雪花算法生成的19位ID  算成一个字母加数字的邀请码  有什么好的办法","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512888,"discussion_content":"19个字符的ID? 你不是已经发现了雪花算法了吗？你可以把雪花算法延长到你想要的位数，然后想办法把8位的字符映射到ID许可的字符就行了（参考BASE64的思路）。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609561883,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}