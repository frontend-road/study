{"id":546957,"title":"05｜指令架构：RISC-V在CPU设计上到底有哪些优势？","content":"<p>你好，我是LMOS。</p><p>上节课，我们学习了设计一个CPU所需要的相关基础知识，并带你认识了一些后面将会用到的EDA软件工具。看完课程的讲解，还有上手运行的Demo，你是否对接下来要设计CPU已经蠢蠢欲动了？</p><p>哈哈，先别着急，我们在设计CPU之前，还有一些很关键的知识需要补充学习。没错，就是CPU的指令集架构。</p><p>指令集可以说是一个CPU的基石，要实现CPU的计算和控制功能，就必须要定义好一系列与硬件电路相匹配的指令系统。所以，在设计CPU之初，工程师就应该清楚CPU应该具有怎样的指令架构。</p><h2>什么是指令集？</h2><p>在第一节课我们讲历史的时候，曾经提到过，CPU既是程序指令的执行者，又被程序中相关的指令所驱动。不过，我并没有具体说明什么是指令。其实指令就是我们交代CPU要执行的操作。</p><p>那到底什么是指令集呢？</p><p>我给你打个比方：假如你有一条狗，经过一段时间的训练，它能“听懂”了你对它说一些话。当你对它说“坐下”，它就乖乖地坐在地上；当你对它说“汪汪叫”；它就汪汪汪地叫起来，当你对它说“躺下”，它马上就会躺下来……这里你说的“坐下”、“汪汪叫”、“躺下”这些命令，就相当于计算机世界里的指令。</p><p>当然，你还可以继续训练狗，让它识别更多指令，我们把所有的这些指令汇总在一起，就是一个指令集。如果指令集里面没有“上厕所”这个命令，那么即使你对狗下这个命令，它也不会去执行。CPU也一样，必须要有特定的指令集才能工作。</p><!-- [[[read_end]]] --><p>不同的CPU有不同的指令集，根据它们的繁简程度可以分为两种：复杂指令集CISC和精简指令集RISC。</p><p>指令集架构（英文叫 Instruction Set Architecture，缩写为ISA）是软件和硬件的接口，不同的应用需求，会有不同的指令架构。我们要想设计一款CPU，指令集体系就是设计的出发点。</p><h2>RISC-V指令集架构</h2><p>在开始设计一款处理器之前，我们需要选定它的指令集架构。学过前面的课程，我们知道RISC-V指令集具有明显的优势：一是RISC-V完全开放，二是RISC-V指令简单，三是RISC-V实行模块化设计，易于扩展。</p><p>我给你列了一个表，用于给你展示一下RISC-V基础指令集和扩展指令集，如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/a8/9d/a85e679d3b2a4810b6300df6f4c9ab9d.jpg?wh=3913x3401\" alt=\"\"></p><p>要满足现代操作系统和应用程序的基本运行，RV32G指令集或者RV64G指令集就够了（G是通用的意思 ，而I只是整数指令集，G包含I），注意RV32G指令集或者RV64G指令集，只有寄存器位宽和寻址空间大小不同，这些指令按照功能可以分为如下几类。</p><p>1.整数运算指令：实现算术、逻辑、比较等运算操作。<br>\n2.分支转移指令：实现条件转移、无条件转移等操作。<br>\n3.加载存储指令：实现字节、半字、字、双字（RV64I）的加载、存储操作，采用的都是寄存器相对寻址方式。<br>\n4.控制与状态寄存器访问指令：实现对系统控制与系统状态寄存器的原子读-写、原子读-修改、原子读-清零等操作。<br>\n5.系统调用指令：实现系统调用功能。<br>\n6.原子指令：用于现在你能看到的各种同步锁。<br>\n7.单双浮点指令：用于实现浮点运算操作。</p><p>从上表我们也可以看到，RISC-V指令集具有模块化特点。这就允许我们根据自己的应用需求，选择一个基础指令集，加上若干个扩展指令集灵活搭配，就可以得到我们想要的指令集架构，进而根据这样的指令架构，设计出贴合我们应用需求的CPU。</p><p>作为一个初学者，我们先从RISC-V的核心开始。它最核心的部分是一个基础整数指令集，叫做RV32I。RV32I就表示32位的RISC-V。指令集的命名方式我在<a href=\"https://time.geekbang.org/column/article/541776\">第二节课</a>给你提到过，如果你印象不深了，可以去回顾一下。仅仅依靠RV32I，我们就可以运行一个完整的软件栈。</p><p>RV32I包含的指令是固定的，永远不会改变。这为编译器设计人员，操作系统开发人员和汇编语言程序员提供了稳定的基础知识框架。</p><p>接下来我们看一张图，这是 RV32I 基础指令集的名称表示。</p><p><img src=\"https://static001.geekbang.org/resource/image/e3/08/e3055b9ebb8e1459b1a9e007fde2b008.jpg?wh=2782x3171\" alt=\"\"></p><p>这些名称，你乍一看是不是有点眼花缭乱？先别慌，我讲一下命名规则，你就能明白了。</p><p>从图中我们可以看到，有些字母带有下划线。我们把带有下划线的字母从左到右连接起来，就可以组成一个 RV32I 的指令。对于每一个指令名称，集合标志{}内列举了指令的所有变体，变体用加下划线的字母或下划线字符_表示。如果大括号内只有下划线字符_，则表示对于此指令变体不需用字母表示。</p><p>我们再结合例子加深一下理解。下图表示了这四个 RV32I 指令：bge，blt，bgeu，bltu。</p><p><img src=\"https://static001.geekbang.org/resource/image/40/af/4063e22fc0ea23955c75e411e6585caf.jpg?wh=2900x777\" alt=\"\"></p><p>通过前面<a href=\"https://time.geekbang.org/column/article/543867\">第三节课</a>硬件描述语言基础的学习，我们知道了CPU的硬件逻辑里只有“0”和“1”，那么问题来了，怎么用“0”和“1”来表示出上述的指令呢？</p><p>要想回答这个问题，我们需要依次去了解指令格式，指令中要用到的寄存器以及指令集中各种功能的指令。</p><h2>指令格式</h2><p>我们先从RV32I的指令格式说起。从下图可以看到，RISCV总共也就只有6种指令格式。<br>\n<img src=\"https://static001.geekbang.org/resource/image/7b/c8/7b035797137a9e42cc1f6544d6d4dac8.jpg?wh=4005x2200\" alt=\"\"></p><p>六种指令各司其职，我把它们的作用整理成了表格，这样你看起来一目了然。</p><p><img src=\"https://static001.geekbang.org/resource/image/d8/0f/d8d87cc1093252d02a854fc9836c3d0f.jpg?wh=1920x675\" alt=\"图片\"></p><p>不要小看这些指令，我们来分析一下它们到底有哪些优势。这些指令格式规整有序，结构简单。因为指令只有六种格式，并且所有的指令都是 32 位长度的，所以这些指令解码起来就比较简单，可以简化解码电路，提高CPU的性能功耗比。</p><p>上图中的opcode代表指令操作码，imm代表立即数，funct3和funct7代表指令对应的功能，rs1、rs2和rd则分别代表源寄存器1、源寄存器2以及目标寄存器。RISC-V的一个指令中可以提供三个寄存器操作数，而不是像 x86一样，让源操作数和目的操作数共享一个字段，因此相比x86指令，RISC-V 减少了软件的程序操作。</p><p>而且，源寄存器（rs1和rs2）和目标寄存器（rd），都设计固定在所有RISC-V指令同样的位置上，指令译码相对简单。所以，指令在CPU流水线中执行时，可以先开始访问寄存器，然后再完成指令解码。</p><p>此外，这些指令格式的所有立即数的符号位总是在指令的最高位。这个设计有什么好处呢？它意味着，有可能成为关键路径的立即数符号扩展，可以在指令解码前进行。这样可以加速符号扩展电路，有利于CPU流水线的时序优化。</p><h2>RV32I 寄存器</h2><p>之前讲指令格式时，我们说到了源寄存器rs1、rs2和目标寄存器rd，那你知道指令中的寄存器都有哪些吗？</p><p>在RISC-V的规范里定义了32个通用寄存器。其中，有 31 个是常规寄存器，1 个恒为 0 值的 x0 寄存器。0值寄存器的设置，是为了满足汇编语言程序员和编译器编写者的使用需要，他们可以使用x0寄存器作为操作数，来完成功能相同的操作。</p><p>比如说，我们如果需要插入一个空操作，就可以使用汇编语句 “addi&nbsp; x0 , x0, 0 ”（相当于0+0=0）来代替其他指令集中的nop空指令。</p><p>由于访问寄存器中的数据要比访问存储器的速度快得多，一般每条 RISC-V 指令最多用一个时钟周期执行（忽略缓存未命中的情况），而ARM-32 或者x86-32 则需要多个时钟周期执行的指令。因为ARM-32只有16个寄存器，而X86-32仅仅只有8个寄存器。</p><p>因此，寄存器越多，编译器和汇编程序员的工作就会越轻松。</p><p>之前<a href=\"https://time.geekbang.org/column/article/541776\">第二节课</a>，我给你列过RV32I的32个通用寄存器，这里我再带你复习一下，温故知新。表中的ABI全称为Application Binary Interface，即应用程序二进制接口，也就是寄存器的别名，在汇编程序设计时会用到。</p><p><img src=\"https://static001.geekbang.org/resource/image/29/6b/29b1fcdeeaecffb0b86499066c3d9b6b.jpg?wh=1920x1097\" alt=\"图片\"></p><p>寄存器的内容我们就先讲这些，后面实现CPU的时候具体用到了，我再详细解释。</p><h2>RV32I的各类指令解读</h2><p>接下来我们研究一下RV32I的各种指令。如果你写过汇编程序应该知道，一般用得较多的就是算术和逻辑处理语句了，我们先从这类指令说起。</p><h3>算术与逻辑指令</h3><p>在RV32I的指令中，包括算术指令（add, sub）、数值比较指令（slt）、逻辑指令（and, or, xor）以及移位指令 （sll, srl, sra）这几种指令。</p><p>这些指令和其他指令集差不多，它们从寄存器读取两个 32 位的值，并将 32 位的运算结果再写回到目标寄存器。RV32I 还提供了这些指令的立即数版本，就是如下图所示的I型指令：</p><p><img src=\"https://static001.geekbang.org/resource/image/54/8a/54b02a5c4bbfb27d5893253b39c8808a.jpg?wh=1920x1173\" alt=\"图片\"></p><p>同样的，RV32I也提供了寄存器和寄存器操作的指令，包括加减运算、数值比较、逻辑操作和移位操作。这些指令的功能和前面的立即数指令相似，不同的是，这里把指令中的立即数对应位置替换成了源寄存器 rs2。</p><p>寄存器和寄存器操作的指令如下表所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/b9/d6/b93b1e301cefa6a2c2fa5cc469a21dd6.jpg?wh=1920x1216\" alt=\"图片\"></p><p>需要指出的是，在寄存器和寄存器操作的算术指令中，必须要有减法指令，这和立即数操作指令有所不同。</p><h3>RV32I 的Load和Store</h3><p>与CISC指令集具有众多的寻址方式不同，RV32I 省略了像 x86-32 指令集那样的复杂寻址模式。在 RISC-V 指令集中，对内存的读写只能通过 LOAD 指令和 STORE 指令实现。而其他的指令，都只能以寄存器为操作对象。</p><p>你可以看看后面的这张图，里面列出了Load 指令和Store指令格式：</p><p><img src=\"https://static001.geekbang.org/resource/image/fd/14/fdfa6ce0100bcb824c61314aaa1dea14.jpg?wh=1920x1261\" alt=\"图片\"></p><p>如上图所示，加载和存储的寻址模式只能是符号扩展12位的立即数，加上基地址寄存器得到访问的存储器地址。因为没有了复杂的内存寻址方式，这让CPU流水线可以对数据冲突提前做出判断，并通过流水线各级之间的转送加以处理，而不需要插入空操作（NOP），极大提高了代码的执行效率。</p><h3>分支跳转指令</h3><p>学习了前面的第二节课，相信你对RISC-V指令架构特点已经有所了解，RISC-V遵循的是大道至简的原则。它的指令数目非常简洁，基本指令只有40多条，其中只有6条有条件跳转指令，减少了跳转指令的条数，这样硬件设计上更为简单。</p><p>下面，我们分别来看看RV32I条件跳转指令和无条件跳转指令的运行原理。这些原理只要你耐心听我讲完就能理解，而且之后也会应用在我们的在MiniCPU实现中。</p><h4>有条件分支跳转</h4><p>RV32I 中的条件跳转指令是通过比较两个寄存器的值，并根据比较结果进行分支跳转。比较可以是：相等（beq），不相等 （bne），大于等于（bge），或小于（blt）。</p><p>如下图所示，大于等于（bge），和小于（blt）则跳转指令为有符号数比较，RV32I 也提供了相应的无符号数的比较指令，分别为bgeu和 bltu。剩下的两个比较关系（大于和小于等于），可以通过简单地交换两个操作数位置，来完成相同的比较。例如， x &lt; y 可以表示为y &gt; x ，同样的， x ≤ y也表示为 y ≥ x。<br>\n<img src=\"https://static001.geekbang.org/resource/image/70/37/70c2682fbbd1f9f3f4d14d7f5d5cd337.jpg?wh=3960x1710\" alt=\"\"></p><h4>无条件分支跳转</h4><p>除了有条件分支跳转，RV32I还提供了无条件跳转指令，无条件跳转指令还可以细分为直接跳转和间接跳转这两种指令。</p><p>直接跳转指令JAL如下图所示。RISC-V 为 JAL 指令专门定义了 J-TYPE 格式。</p><p><img src=\"https://static001.geekbang.org/resource/image/10/c4/1027ff24d1dc411c05670099e27fa8c4.jpg?wh=3905x710\" alt=\"\"><br>\nJAL指令的执行过程是这样的。首先，它会把 20 位立即数做符号位扩展，并左移一位，产生一个 32 位的符号数。然后，将该 32 位符号数和 PC 相加来产生目标地址（这样，JAL 可以作为短跳转指令，跳转至 PC±1 MB 的地址范围内）。</p><p>同时，JAL 也会把紧随其后的那条指令的地址，存入目标寄存器中。这样，如果目标寄存器是零，则 JAL 就等同于 GOTO 指令；如果目标寄存器不为零，JAL 可以实现函数调用的功能。</p><p><img src=\"https://static001.geekbang.org/resource/image/51/89/51733a156b421868f5765yy376caa089.jpg?wh=1920x325\" alt=\"图片\"></p><p>间接跳转指令JALR 如上图所示。JALR 指令会把 12 位立即数和源寄存器相加，并把相加的结果末位清零，作为新的跳转地址。同时，和 JAL 指令一样，JALR 也会把紧随其后的那条指令的地址，存入到目标寄存器中。</p><h2>RV32I的其他指令</h2><p>除了内存地址空间和通用寄存器地址空间外，RISC-V 中还定义了一个独立的控制与状态寄存器（Control Status Register，CSR）地址空间。</p><p>每个处理器实现的CSR会因设计目标不同而有差异，但这些CSR的访问方式却是一致的，访问这些 CSR 的指令定义在了用户指令集中（Zicsr 指令集扩展）。</p><p><img src=\"https://static001.geekbang.org/resource/image/77/8a/777a0494580fca3b981b1cb32b19068a.jpg?wh=1920x1118\" alt=\"图片\"></p><p>有了上图这些CSR指令，能够让我们轻松访问一些程序性能计数器。这些计数器包括系统时间、时间周期以及执行的指令数目。</p><p>在 RISC-V 指令集中，还有其他的一些指令，例如用于系统调用的ecall指令，在调试时用于将控制转移到调试环境的ebreak 指令等。对于这些扩展的指令，这里就不展开讲了。</p><p>好，到这里，我们就把RISC-V的基础整数指令集——RV32I大体梳理了一遍。你可能感慨，比起训练一条狗，训练“CPU”要复杂得多。不过，通过RV32I这个最核心的指令集，我们也看到了 RISC-V的很多设计优势。</p><p>相比CISC，RISCV确实更容易学习和使用。学习了这些基本指令的功能，我们就可以设计出简单的CPU了。</p><h2>重点回顾</h2><p>好了，今天的课程就到这里，让我们来回顾一下今天学到的内容。</p><p>首先，我们知道了什么是CPU的指令集，并选择 <strong>RISC-V最核心的基础整数指令集RV32I</strong> 重点学习。RV32I包含的指令是固定的，永远不会改变。我们学好RV32I，不但能为学习RISC-V的扩展指令集打下基础，也能为编译器设计、操作系统开发和汇编程序设计搭建好前置的基础知识框架。</p><p>RISC-V到底在CPU设计上有哪些优势？我们从指令格式、寄存器以及指令解读这几个方面入手，做了不少讨论。</p><p>RISC-V仅有6种指令格式，它们分别是：<strong>R类型指令、 I 型指令、 S 型指令、B 类型指令、 U 型指令和 J 型指令</strong>。这些指令格式规整有序，结构简单，所以指令解码起来比较简单，有利于简化解码电路，提高了CPU的性能功耗比。</p><p>此外，在RISC-V的规范里，<strong>定义了32个通用寄存器</strong>。其中有 31 个常规寄存器，一个恒 0 值的 x0 寄存器。由于<strong> RISC-V的寄存器有数量上的优势</strong>，使得基于RISC-V设计CPU不用那么频繁地去访问存储器，指令执行起来更快，也让编译器和汇编程序员的工作更加轻松。</p><p>之后我们了解到，RV32I的指令包括算术指令、数值比较指令、逻辑指令以及移位指令，这些指令和其他指令集差不多。但是，<strong> RISC-V与CISC指令集具有众多的寻址方式不同</strong>，RV32I 省略了如 x86-32 指令集的复杂寻址模式。在 RISC-V 指令集中，对内存的读写只能通过 LOAD 指令和 STORE 指令实现。</p><p>RISC-V遵循的是大道至简的原则，它的指令数目非常简洁，基本指令只有40多条，而<strong>分支跳转指令只有8条</strong>，其中6条是带条件跳转指令，2条是无条件跳转指令。这些指令条数的减少，使硬件设计更简单。</p><p>除了上面提到的指令，RISC-V还有其他的一些指令，比如，还定义了一个独立的控制与状态寄存器地址空间，其地址宽度是 12 位的。根据每个设计的目标不同，每个处理器实际实现的 CSR 可能会有所不同。对于剩余没有介绍的一些指令，如果你感兴趣的话，可以自己查阅相关资料（比如RISC-V的官方手册）来学习。</p><p>最后我为你梳理了这节课的知识导图，供你参考。</p><p><img src=\"https://static001.geekbang.org/resource/image/a4/05/a4a2649c9df2799a7ddf3be7c18ef305.jpg?wh=1920x1404\" alt=\"图片\"></p><h2>思考题</h2><p>今天我们讲到了RISC-V 中的分支跳转指令 JAL。想想看，为什么要通过调整立即数的某些位，从 U-TYPE指令得到J-TYPE指令格式呢？这样调整以后有什么好处？</p><p>期待你记录自己这节课学完的收获或者疑问，我在留言区等你。如果这节课对你有启发，也推荐你分享给更多朋友。下节课我们就要着手设计迷你CPU了，敬请期待。</p>","neighbors":{"left":{"article_title":"04｜硬件语言筑基（二）: 代码是怎么生成具体电路的？","id":543888},"right":{"article_title":"06｜手写CPU（一）：迷你CPU架构设计与取指令实现","id":547921}},"comments":[{"had_liked":false,"id":354982,"user_name":"3.141516","can_delete":false,"product_type":"c1","uid":1013309,"ip_address":"湖北","ucode":"34AF71B02692F3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/76/3d/8120438b.jpg","comment_is_top":false,"comment_ctime":1660946225,"is_pvip":true,"replies":[{"id":129160,"content":"正确 的 ","user_name":"作者回复","user_name_real":"编辑","uid":1345199,"ctime":1661051043,"ip_address":"湖北","comment_id":354982,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100117801,"comment_content":"Java 虚拟机的指令集也是大同小异，不同于 CPU 基于寄存器的架构，JVM 是基于栈的。从寄存器、内存的操作，转变为局部变量表、操作数栈的操作。","like_count":4,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584676,"discussion_content":"正确 的 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661051043,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖北","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":355457,"user_name":"your problem？","can_delete":false,"product_type":"c1","uid":1457464,"ip_address":"湖北","ucode":"6E096E7958CFD7","user_header":"https://static001.geekbang.org/account/avatar/00/16/3d/38/6f02a4b9.jpg","comment_is_top":false,"comment_ctime":1661400678,"is_pvip":false,"replies":[{"id":129444,"content":"先过一遍\n","user_name":"作者回复","user_name_real":"编辑","uid":1345199,"ctime":1661677790,"ip_address":"湖北","comment_id":355457,"utype":1}],"discussion_count":6,"race_medal":0,"score":2,"product_id":100117801,"comment_content":"不知道有没有同学跟我是一样的问题，其实原理认认真真看也大概能明白，但是有很多的名词和细节都需要去查，我个人不是学计算机出身的，底层的东西都是自己后面自学的，之前看过极客上另一位讲计算机原理的老师，他的课程没有详细的讲到CPU指令的部分，像我这种情况老师是建议继续先跟着学习吗，还是先去补充相关知识呢","like_count":2,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585564,"discussion_content":"先过一遍\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661677790,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖北","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1457464,"avatar":"https://static001.geekbang.org/account/avatar/00/16/3d/38/6f02a4b9.jpg","nickname":"your problem？","note":"","ucode":"6E096E7958CFD7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585772,"discussion_content":"好的，感谢老师和同学","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661819585,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":3135351,"avatar":"https://static001.geekbang.org/account/avatar/00/2f/d7/77/0bbdc9af.jpg","nickname":"VMNode","note":"","ucode":"4A095F69DBAFD0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1457464,"avatar":"https://static001.geekbang.org/account/avatar/00/16/3d/38/6f02a4b9.jpg","nickname":"your problem？","note":"","ucode":"6E096E7958CFD7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":598509,"discussion_content":"现在怎么样呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1672885921,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":585772,"ip_address":"广东","group_id":0},"score":598509,"extra":""},{"author":{"id":1457464,"avatar":"https://static001.geekbang.org/account/avatar/00/16/3d/38/6f02a4b9.jpg","nickname":"your problem？","note":"","ucode":"6E096E7958CFD7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":3135351,"avatar":"https://static001.geekbang.org/account/avatar/00/2f/d7/77/0bbdc9af.jpg","nickname":"VMNode","note":"","ucode":"4A095F69DBAFD0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":605118,"discussion_content":"9月份加班加的人崩了，现在要继续学了😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676616011,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":598509,"ip_address":"湖北","group_id":0},"score":605118,"extra":""}]},{"author":{"id":2619436,"avatar":"https://static001.geekbang.org/account/avatar/00/27/f8/2c/92969c48.jpg","nickname":"青玉白露","note":"","ucode":"96FE2D4D2B94A0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585289,"discussion_content":"我的建议是一边学一边扩充自己的知识，我是搞软件的，这门课学起来也挺有趣，你可以做笔记：https://zhuanlan.zhihu.com/p/550710744","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661443573,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1457464,"avatar":"https://static001.geekbang.org/account/avatar/00/16/3d/38/6f02a4b9.jpg","nickname":"your problem？","note":"","ucode":"6E096E7958CFD7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2619436,"avatar":"https://static001.geekbang.org/account/avatar/00/27/f8/2c/92969c48.jpg","nickname":"青玉白露","note":"","ucode":"96FE2D4D2B94A0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":605115,"discussion_content":"感谢老哥","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676615941,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":585289,"ip_address":"湖北","group_id":0},"score":605115,"extra":""}]}]},{"had_liked":false,"id":354533,"user_name":"Abcd","can_delete":false,"product_type":"c1","uid":1796908,"ip_address":"湖北","ucode":"274C7487FDDC21","user_header":"https://static001.geekbang.org/account/avatar/00/1b/6b/2c/b27eefc5.jpg","comment_is_top":false,"comment_ctime":1660491995,"is_pvip":false,"replies":[{"id":129462,"content":"U型指令是和I型指令相对应的J型指令和B型相对应，都是为了更多的bit对齐","user_name":"作者回复","user_name_real":"编辑","uid":1345199,"ctime":1661734384,"ip_address":"湖北","comment_id":354533,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100117801,"comment_content":"所以思考题的答案是什么？评论区的回答不在电子上啊，老师问的是有了U指令，为什么还需要J指令，两者除了高20位的立即数的表达方式不同外，指令格式完全相同。难道是想表达 U是高20bit的意思，J是低20bit的意思？那也没有必要调整立即数的比特顺序啊。还是说这个是为了尽量和其他指令格式保持一致？节省RTL工程师的工作量？","like_count":1,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585616,"discussion_content":"U型指令是和I型指令相对应的J型指令和B型相对应，都是为了更多的bit对齐","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661734384,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖北","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":353645,"user_name":"skyline","can_delete":false,"product_type":"c1","uid":3077871,"ip_address":"湖北","ucode":"C4D9A2A2FA99AC","user_header":"https://static001.geekbang.org/account/avatar/00/2e/f6/ef/9d19893f.jpg","comment_is_top":false,"comment_ctime":1659645674,"is_pvip":false,"replies":[{"id":128669,"content":"2字节对齐","user_name":"作者回复","user_name_real":"编辑","uid":1345199,"ctime":1659922576,"ip_address":"湖北","comment_id":353645,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100117801,"comment_content":"“JAL 指令的执行过程是这样的。首先，它会把 20 位立即数做符号位扩展，并左移一位，产生一个 32 位的符号数”\n请问为啥要左移一位呢？","like_count":1,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583094,"discussion_content":"2字节对齐","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1659922576,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖北","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1890614,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/d9/36/4d722947.jpg","nickname":"GeekMeow","note":"","ucode":"2AB3191DD99E9B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582812,"discussion_content":"risc-v spec 中提到“The jump and link (JAL) instruction uses the J-type format, where the J-immediate encodes a signed offset in multiples of 2 bytes”，我猜 imm[20] 是符号位，左移一位就是乘2，最大值0x7FFFF乘2就是+1MB了。本文中 JAL 的格式好像写错了，最高位是 imm[20] 不是 imm[12]。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659686874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":366014,"user_name":"王彬","can_delete":false,"product_type":"c1","uid":1337269,"ip_address":"北京","ucode":"4B00E6B2075643","user_header":"https://static001.geekbang.org/account/avatar/00/14/67/b5/8ad13885.jpg","comment_is_top":false,"comment_ctime":1673327303,"is_pvip":true,"replies":[{"id":133342,"content":"收到，已经和老师确认过了，这里文字没有问题哦。G 是通用的意思 ，而I 只是整数指令集，G包含I。","user_name":"编辑回复","user_name_real":"编辑","uid":1501385,"ctime":1673335310,"ip_address":"北京","comment_id":366014,"utype":2}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100117801,"comment_content":"&quot;要满足现代操作系统和应用程序的基本运行，RV32G 指令集或者 RV64G 指令集就够了，注意 RV32G 指令集或者 RV64G 指令集，只有寄存器位宽和寻址空间大小不同，这些指令按照功能可以分为如下几类。&quot; 应该是RV32I和RV64I，一个字母的错误会给小白很大的困扰","like_count":0,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":599098,"discussion_content":"收到，已经和老师确认过了，这里文字没有问题哦。G 是通用的意思 ，而I 只是整数指令集，G包含I。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1673335310,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":8}","child_discussion_number":2,"child_discussions":[{"author":{"id":1337269,"avatar":"https://static001.geekbang.org/account/avatar/00/14/67/b5/8ad13885.jpg","nickname":"王彬","note":"","ucode":"4B00E6B2075643","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"discussion":{"id":599197,"discussion_content":"我觉得老师应该在文章里说明一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1673399688,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":599098,"ip_address":"北京","group_id":0},"score":599197,"extra":""},{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":1337269,"avatar":"https://static001.geekbang.org/account/avatar/00/14/67/b5/8ad13885.jpg","nickname":"王彬","note":"","ucode":"4B00E6B2075643","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":599911,"discussion_content":"谢谢建议，加在课程里了～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1673862995,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":599197,"ip_address":"北京","group_id":0},"score":599911,"extra":""}]}]},{"had_liked":false,"id":362433,"user_name":"小傅","can_delete":false,"product_type":"c1","uid":2616255,"ip_address":"湖北","ucode":"56B75C45A6C761","user_header":"https://static001.geekbang.org/account/avatar/00/27/eb/bf/8acfeaa6.jpg","comment_is_top":false,"comment_ctime":1668513501,"is_pvip":false,"replies":[{"id":131943,"content":"一个立即数只有20位 用它的第19位 填充20~31位 然后把这个32位数据（0~31位）左移一位 ","user_name":"作者回复","user_name_real":"编辑","uid":1345199,"ctime":1668992921,"ip_address":"湖北","comment_id":362433,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100117801,"comment_content":"“它会把 20 位立即数做符号位扩展，并左移一位，产生一个 32 位的符号数” 这句话怎么理解？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":594327,"discussion_content":"一个立即数只有20位 用它的第19位 填充20~31位 然后把这个32位数据（0~31位）左移一位 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668992921,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖北","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357875,"user_name":"秋天","can_delete":false,"product_type":"c1","uid":1057056,"ip_address":"湖北","ucode":"A7E1D953EF7E17","user_header":"https://static001.geekbang.org/account/avatar/00/10/21/20/1299e137.jpg","comment_is_top":false,"comment_ctime":1663727425,"is_pvip":false,"replies":[{"id":130342,"content":"寄存器是临时储存数据的 用于计算的","user_name":"作者回复","user_name_real":"编辑","uid":1345199,"ctime":1664011530,"ip_address":"湖北","comment_id":357875,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100117801,"comment_content":"老师 请教一下，寄存器的作用时什么 用来执行指令对吧？  那操作数和操作码又怎么理解呢？操作码可以理解为指令吗？这块有点晕","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588708,"discussion_content":"寄存器是临时储存数据的 用于计算的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664011530,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖北","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356946,"user_name":"郝海波","can_delete":false,"product_type":"c1","uid":1252797,"ip_address":"湖北","ucode":"C120F0AC39C4E3","user_header":"https://static001.geekbang.org/account/avatar/00/13/1d/bd/6076df28.jpg","comment_is_top":false,"comment_ctime":1662714848,"is_pvip":false,"replies":[{"id":129924,"content":"1 &lt;&lt; 21 等于 多少  你不懂这个MB是什么  0x100000 字节 你知道吗 ","user_name":"作者回复","user_name_real":"编辑","uid":1345199,"ctime":1662884619,"ip_address":"湖北","comment_id":356946,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100117801,"comment_content":"JAL 指令的执行过程是这样的。首先，它会把 20 位立即数做符号位扩展，并左移一位，产生一个 32 位的符号数。然后，将该 32 位符号数和 PC 相加来产生目标地址（这样，JAL 可以作为短跳转指令，跳转至 PC±1 MB 的地址范围内）\n这里不太懂\n20位左移1位不是21位吗\n还有最后的PC +1MB 这个！MB怎么来的\n\n","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587206,"discussion_content":"1 &lt;&lt; 21 等于 多少  你不懂这个MB是什么  0x100000 字节 你知道吗 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662884619,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖北","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1252797,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1d/bd/6076df28.jpg","nickname":"郝海波","note":"","ucode":"C120F0AC39C4E3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588481,"discussion_content":"老师还是不太懂，符号位扩展是什么意思？扩展完是20位前面都补了F的32bit的数吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663780335,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":355326,"user_name":"vampire","can_delete":false,"product_type":"c1","uid":2763881,"ip_address":"湖北","ucode":"303925AC7263C6","user_header":"https://static001.geekbang.org/account/avatar/00/2a/2c/69/6d1a0c98.jpg","comment_is_top":false,"comment_ctime":1661297220,"is_pvip":false,"replies":[{"id":129443,"content":"算是一个点","user_name":"作者回复","user_name_real":"编辑","uid":1345199,"ctime":1661677690,"ip_address":"湖北","comment_id":355326,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100117801,"comment_content":"简化译码电路","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585563,"discussion_content":"算是一个点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661677691,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖北","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":355154,"user_name":"让我们看云去","can_delete":false,"product_type":"c1","uid":1767666,"ip_address":"湖北","ucode":"3748E2C87072F0","user_header":"https://static001.geekbang.org/account/avatar/00/1a/f8/f2/eafca9cd.jpg","comment_is_top":false,"comment_ctime":1661143385,"is_pvip":false,"replies":[{"id":129450,"content":"指令编码 和  指令 译码器要求  ","user_name":"作者回复","user_name_real":"编辑","uid":1345199,"ctime":1661678278,"ip_address":"湖北","comment_id":355154,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100117801,"comment_content":"老师，请教个问题：imm不是按照寄存器的bit从右往左连续分配，这样做的原因是啥？麻烦举个例子说明下帮助理解","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585570,"discussion_content":"指令编码 和  指令 译码器要求  ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661678278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖北","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":354509,"user_name":"青玉白露","can_delete":false,"product_type":"c1","uid":2619436,"ip_address":"湖北","ucode":"96FE2D4D2B94A0","user_header":"https://static001.geekbang.org/account/avatar/00/27/f8/2c/92969c48.jpg","comment_is_top":false,"comment_ctime":1660477183,"is_pvip":false,"replies":[{"id":128944,"content":"是的","user_name":"作者回复","user_name_real":"编辑","uid":1345199,"ctime":1660523153,"ip_address":"湖北","comment_id":354509,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100117801,"comment_content":"直接在寄存器内部调整指令，减少了指令读取事件，大大加快了指令执行的整体效率。","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583944,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660523153,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖北","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2631849,"avatar":"https://static001.geekbang.org/account/avatar/00/28/28/a9/4cf153a3.jpg","nickname":"雨巷","note":"","ucode":"DE25C003B3D407","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":594776,"discussion_content":"还是没看懂什么意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1669368271,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":353680,"user_name":"Jump","can_delete":false,"product_type":"c1","uid":1139482,"ip_address":"湖北","ucode":"6C229DD3AE29A8","user_header":"https://static001.geekbang.org/account/avatar/00/11/63/1a/367ebeac.jpg","comment_is_top":false,"comment_ctime":1659673645,"is_pvip":false,"replies":[{"id":128666,"content":"因为goto不需要返回值的 rd 为 0 就是丢弃返回值","user_name":"作者回复","user_name_real":"编辑","uid":1345199,"ctime":1659922486,"ip_address":"湖北","comment_id":353680,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100117801,"comment_content":"JAL指令的目标寄存器rd是怎么用的，为啥为0就是goto， 不为0就是函数调用呢？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583091,"discussion_content":"因为goto不需要返回值的 rd 为 0 就是丢弃返回值","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659922486,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖北","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":353661,"user_name":"苏流郁宓","can_delete":false,"product_type":"c1","uid":2729645,"ip_address":"湖北","ucode":"AD07BD9CE03047","user_header":"https://static001.geekbang.org/account/avatar/00/29/a6/ad/e65aec4c.jpg","comment_is_top":false,"comment_ctime":1659665909,"is_pvip":false,"replies":[{"id":128668,"content":"嗯嗯","user_name":"作者回复","user_name_real":"编辑","uid":1345199,"ctime":1659922515,"ip_address":"湖北","comment_id":353661,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100117801,"comment_content":"调整立即数形成新指令格式，就不用和内存交换指令信息（省时间），提高cpu的执行效率！","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583093,"discussion_content":"嗯嗯","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659922515,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖北","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1474356,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI3F4IdQuDZrhN8ThibP85eCiaSWTYpTrcC6QB9EoAkw3IIj6otMibb1CgrS1uzITAnJmGLXQ2tgIkAQ/132","nickname":"cugphoenix","note":"","ucode":"80101AF04C00D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583851,"discussion_content":"还是没懂，跟内存交换指令信息是啥意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660445414,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":384763,"user_name":"浩仔是程序员","can_delete":false,"product_type":"c1","uid":1104601,"ip_address":"广东","ucode":"A7E5CF9E1571A2","user_header":"https://static001.geekbang.org/account/avatar/00/10/da/d9/f051962f.jpg","comment_is_top":false,"comment_ctime":1701484695,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100117801,"comment_content":"老师你好，为什么没有硬件访问，IO端口映射的指令呢？是直接映射到内存访问的吗？","like_count":0},{"had_liked":false,"id":382940,"user_name":"相逢是缘","can_delete":false,"product_type":"c1","uid":1060730,"ip_address":"安徽","ucode":"CB299F53A95654","user_header":"https://static001.geekbang.org/account/avatar/00/10/2f/7a/ab6c811c.jpg","comment_is_top":false,"comment_ctime":1698217975,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100117801,"comment_content":"“由于访问寄存器中的数据要比访问存储器的速度快得多，一般每条 RISC-V 指令最多用一个时钟周期执行（忽略缓存未命中的情况），而 ARM-32 或者 x86-32 则需要多个时钟周期执行的指令。因为 ARM-32 只有 16 个寄存器，而 X86-32 仅仅只有 8 个寄存器。”   这句话简单理解是：寄存器越多越好？那为什么arm和x86用这么少的寄存器呢？","like_count":0},{"had_liked":false,"id":378970,"user_name":"Geek_8852cc","can_delete":false,"product_type":"c1","uid":3682849,"ip_address":"江苏","ucode":"C3D7B2B17B6A8C","user_header":"","comment_is_top":false,"comment_ctime":1691057781,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100117801,"comment_content":"请问下，JAL指令的立即数为什么要设置成分成四部分排列呢，而不是按顺序排在指令中呢","like_count":0}]}