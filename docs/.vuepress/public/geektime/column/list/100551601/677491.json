{"id":677491,"title":"17｜分库分表分页查询：为什么你的分页查询又慢又耗费内存？","content":"<p>你好，我是大明。今天我们来聊一聊分库分表分页查询。</p><p>在实践中，分页是分库分表之后肯定要解决的问题，如果解决方案没选好，那么很容易出现性能问题。分页的解决方案很多，不过能够在面试中系统地将所有的方案都说出来的候选人可以说是少之又少。所以你只需要记住这节课的内容记住，就足以拉开和其他候选人的差距。</p><p>让我们从分库分表的一般做法开始学起。</p><h2>分库分表的一般做法</h2><p>分库分表我们一般会使用三种算法。</p><ol>\n<li><strong>哈希分库分表</strong>：根据分库分表键算出一个哈希值，然后根据这个哈希值选择一个数据库。最常见的就是使用数字类型的字段作为分库分表键，然后取余。比如说在订单表里面，按照买家的 ID 除以 8 的余数进行分表。</li>\n<li><strong>范围分库分表</strong>：将某个数据按照范围大小进行分段。比如说根据 ID，[0, 1000) 在一张表，[1000, 2000) 在另外一张表上。最常见的应该是按照日期进行分库分表，比如说按照月分表，每个月一张表。</li>\n<li><strong>中间表</strong>：引入一个中间表来记录数据所在的目标表。一般是记录主键到目标表的映射关系。</li>\n</ol><p><img src=\"https://static001.geekbang.org/resource/image/59/2d/5974f6a54d7f15eb0e88e0e576a2a32d.png?wh=1920x765\" alt=\"图片\"></p><p>这三者并不是互斥的，也就是说你可以考虑使用哈希分库分表，同时引入一个中间表。也可以先进行范围分库分表，再引入一个中间表。</p><h2>分库分表中间件的形态</h2><p>分库分表中间件的形态有三种。</p><!-- [[[read_end]]] --><ol>\n<li><strong>SDK 形态：</strong>SDK 形态就是我们最熟悉的，它通过依赖的形式引入到你的代码里面。比如说 ShardingSphere 的 Java 依赖。</li>\n<li><strong>Proxy 形态：</strong>独立部署的分库分表中间件，它对于所有的业务方来说，就像一个普通的数据库，业务方的查询发送过去之后，它就会执行分库分表，发起实际查询，然后把查询结果返回给业务方。ShardingSphere 也支持这种形态。</li>\n</ol><p><img src=\"https://static001.geekbang.org/resource/image/3f/4a/3fa01d67f0721d26cb3af82c0ffdb74a.png?wh=1920x722\" alt=\"图片\"></p><ol start=\"3\">\n<li><strong>Sidecar 形态</strong>：简单来说就是一个提供了分库分表的 Sidecar。这是一个理论上的形态，现在并没有非常成熟的产品。</li>\n</ol><p><img src=\"https://static001.geekbang.org/resource/image/76/dc/76a04b36eeb86de740033cb7991aeddc.png?wh=1920x1036\" alt=\"图片\"></p><p>这三种形态里面，SDK 形态性能最好，但是和语言强耦合。比如说 Java 研发的 ShardingSphere jar 包是没办法给 Go 语言使用的。</p><p>Proxy 形态性能最差，因为所有的数据库查询都发给了它，很容易成为性能瓶颈。尤其是单机部署 Proxy 的话，还面临着单节点故障的问题。它的优点就是跟编程语言没有关系，所以部署一个 Proxy 之后可以给使用不同编程语言的业务使用。同时，Proxy 将自己伪装成一个普通的数据库之后，业务方可以轻易地从单库单表切换到分库分表，整个过程对于业务方来说就是换了一个数据源。</p><p><img src=\"https://static001.geekbang.org/resource/image/aa/2c/aa87001029ce37e9fc48733e22b19f2c.png?wh=1920x966\" alt=\"图片\"></p><p>Sidecar 目前还没有成熟的产品，但是从架构上来说它的性能应该介于 SDK 和 Proxy 之间，并且也没有单体故障、集群管理等烦恼。</p><h2>面试准备</h2><p>在准备分库分表分页查询面试的时候，你还需要弄清楚几个问题。</p><ul>\n<li>你们公司是如何解决分库分表中的分页问题的？</li>\n<li>有没有因为排序或者分页而引起的性能问题？如果有，最终是怎么解决的？</li>\n</ul><p>你还要去看看公司的监控数据，看看分页查询的响应时间。并且在业务高峰期或者频繁执行分页的时候，看看内存和 CPU 的使用率。这些数据你可以作为分页查询比较容易引起性能问题的证据。</p><p>从面试策略上来说，最好是把分页查询优化作为你性能优化的一个举措，你可以进一步和前面几节课里面讲到的查询优化、数据库参数优化相结合，这样你的方案会更加完善，对应地你的能力也会更加全面。</p><p>如果面试官问到了数据库性能优化和数据库分页查询，你都可以尝试把话题引导到分页查询上。</p><h2>基本思路</h2><p>在面试的时候，你可以尝试介绍一下你是如何优化数据库性能的，比如 SQL 本身优化，数据库优化等。然后罗列出你准备的 SQL 案例，说明你在 SQL 优化方面做过哪些事情，比如你说你优化过分库分表的查询，其中最典型的就是优化分页查询。</p><p>我们假设之前是全局查询，现在我们采用禁用跨页查询的方案来优化。</p><blockquote>\n<p>最开始我在公司监控慢查询的时候，发现有一个分页查询非常慢。这个分页查询是按照更新时间降序来排序的。后来我发现那个分页查询用的是全局查询法，因为这个接口原本是提供给 Web 端用的，而 Web 端要支持跨页查询，所以只能使用全局查询法。当查询的页数靠后的时候，响应时间就非常长。<br>\n&nbsp;<br>\n后来我们公司搞出 App 之后，类似的场景直接复用了这个接口。但是事实上在 App 上是没有跨页需求的。所以我就直接写了一个新接口，这个接口要求分页的时候带上上一页的最后一条数据的更新时间。也就是我用这个更新时间构造了一个查询条件，只查询早于这个时间的数据。那么分页查询的时候 OFFSET 就永远被我控制在 0 了，查询的时间就非常稳定了。</p>\n</blockquote><p>最后你可以加一个总结。</p><blockquote>\n<p>分页查询在分库分表里面是一个很难处理的问题，要么查询可能有性能问题，比如说这里使用的全局查询法，要么就是要求业务折中，比如说我优化后禁用了跨页，以及要求数据平均分布的平均分页法，当然还有各方面都不错，但是实现比较复杂的二次查询法、中间表法。</p>\n</blockquote><p>当面试官追问你其中细节的时候，你就可以这样来引导。</p><h3>全局查询</h3><p>从理论上来说，我们的分页查询要在全局有序的情况下进行。但是在分库分表之后，要想做到“全局有序”就非常难了。假如说我们的数据库 order_tab 是以 buyer_id 除以2的余数（%2） 来进行分表的，如果你要执行一个语句。</p><pre><code class=\"language-sql\">SELECT * FROM order_tab ORDER BY id LIMIT 4 OFFSET 2\n</code></pre><p>那么实际执行查询的时候，就要考虑各种数据的分布情况。</p><ul>\n<li>符合条件的数据全部在某个表里面。在这里就是两种情况，order_tab_0 上有全部数据，或者 order_tab_1 上有全部数据。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/16/4c/16a549f16b023c7991c292d71e65524c.png?wh=1920x998\" alt=\"图片\"></p><ul>\n<li>偏移量中前面两条全部在一张表，但是符合条件的数据在另外一张表。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/4e/88/4e9e5b80d67a6e624c098decfc12c288.png?wh=1920x1028\" alt=\"图片\"></p><ul>\n<li>偏移量和数据在两张表都有。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/64/11/6421d53d83947d347a2bb3b040605a11.png?wh=1920x1028\" alt=\"图片\"></p><p>所以在分库分表里面，这样一个 SELECT 语句生成的目标语句是这样的：</p><pre><code class=\"language-sql\">SELECT * FROM order_tab ORDER BY id LIMIT 6 OFFSET 0\nSELECT * FROM order_tab ORDER BY id LIMIT 6 OFFSET 0\n</code></pre><p>注意看 LIMIT 部分，被修改成了 0、6。用更加通用的形式来描述，就是如果一个分页语句是 LIMIT x OFFSET y 的形式，那么最终生成的目标语句就是 LIMIT x + y OFFSET 0。</p><pre><code class=\"language-sql\">LIMIT x OFFSET y =&gt; LIMIT x+y OFFSET 0\n</code></pre><p>当分库分表中间件拿到这两个语句的查询结果之后，就要<strong>在内存中进行排序</strong>，再找出全局的 LIMIT 4 OFFSET 2。</p><p>那么你可以先回答这种全局排序的基本思路，抓住关键词<strong>LIMIT x+y OFFSET 0</strong>。</p><blockquote>\n<p>分库分表中间件一般采用的都是全局排序法。假如说现在我们要查询的是 LIMIT x OFFSET y。那么分库分表中间件会把查询改写为 LIMIT x+y OFFSET 0，然后把查询请求发送给所有的目标表。在拿到所有的返回值之后，在内存中排序，并且根据排序结果找出全局符合条件的目标数据。</p>\n</blockquote><p>接下来你可以先从性能问题上刷一个亮点，抓住受影响的三个方面：<strong>网络、内存、CPU</strong>。</p><blockquote>\n<p>这个解决方案最大的问题是性能不太好。首先是网络传输瓶颈，比如说在 LIMIT 10 OFFSET 1000 这种场景下，如果没有分库分表，那么只需要传输 10 条数据。而在分库分表的情况下，如果命中了 N 个表，那么需要传输的就是$（1000 + 10）\\times N$ 条数据。而实际上最终我们只会用其中的 10 条数据，存在巨大的浪费。<br>\n&nbsp;<br>\n其次是内存瓶颈。收到那么多数据之后，中间件需要维持在内存中排序。CPU 也会成为瓶颈，因为排序本身是一个 CPU 密集的操作。所以在 Proxy 形态的分库分表中间件里面，分页查询一多，就容易把中间件的内存耗尽，引发 OOM，又或者 CPU 100%。不过可以通过归并排序来缓解这些问题。</p>\n</blockquote><p>我在这里还留了一个归并排序的引导点，但是面试官如果不擅长分库分表的话，他可能注意不到这个地方，那么你也可以直接回答。关键点就是在拿到数据之后，使用<strong>归并排序</strong>的算法。</p><blockquote>\n<p>在分库分表里面，可以使用归并排序算法来给返回的结果排序。也就是说在改写为 LIMIT x+y OFFSET 0 之后，每一个目标表返回的结果都是有序的，自然可以使用归并排序。在归并排序的过程中，我们可以逐条从返回结果中读取，这意味着没必要将所有的结果一次性放到内存中再排序。在分页的场景下，取够了数据就可以直接返回，剩下的数据就可以丢弃了。</p>\n</blockquote><p><img src=\"https://static001.geekbang.org/resource/image/42/68/42273c6cd1d0db2b49b83410bc2bab68.png?wh=1920x650\" alt=\"图片\"></p><p>不过既然我们前面说了全局查询这个方案的性能很差，那么有没有其他方案呢？的确有，比如平均分页、禁用跨页查询、换用其他中间件等。不过任何方案都不是十全十美的，这些方案也存在一些难点，有的是需要业务折中，有的处理过程非常复杂。</p><p>我们先来看第一个需要业务折中的平均分页方案。</p><h2>平均分页</h2><p>如果你不了解分库分表，那么看到分页查询的第一个念头应该就是：我能不能在不同的表上平均分页查询数据，得到的结果合并在一起就是分页的结果。</p><p>例如，查询中的语句是这样的：</p><pre><code class=\"language-sql\">SELECT * FROM order_tab ORDER BY id LIMIT 4 OFFSET 2\n</code></pre><p>因为本身只有两张表，那么我可以改写成这样：</p><pre><code class=\"language-sql\">SELECT * FROM order_tab_0 ORDER BY id LIMIT 2 OFFSET 1\nSELECT * FROM order_tab_1 ORDER BY id LIMIT 2 OFFSET 1\n</code></pre><p>也就是说，我在每一张表都查询从偏移量 1 开始的 2 条数据，那么合并在一起就可以认为是从全局的偏移量 2 开始的 4 条数据。</p><p><img src=\"https://static001.geekbang.org/resource/image/87/0d/87540e1959550b2dc72088572965c20d.png?wh=1920x1026\" alt=\"图片\"></p><p>你可以看一下我给出的平均分页图，从图里我们能够看出来，按照道理全局的 LIMIT 4 OFFSET 2 拿到的应该是 3、4、5、6 四条数据。但是这里我们拿到的数据却是 2、4、5、9。这也就是这个方案的缺陷：它存在<strong>精度</strong>问题。也就是说，它返回的数据并不一定是全局最精确的数据。</p><p>那么这个方案是不是就不能用了呢？并不是的，在一些对顺序、精度要求不严格的场景下，还是可以用的。例如浏览页面，你只需要返回足够多的数据行，但是这些数据具体来自哪些表，用户并不关心。</p><p>你在回答的时候，抓住关键词：<strong>平均分页</strong>。</p><blockquote>\n<p>在一些可以接受分页结果不精确的场景下，可以考虑平均分页的做法。举个例子来说，如果查询的是 LIMIT 4 OFFSET 2，并且命中了两张目标表，那么就可以考虑在每个表上都查询 LIMIT 2 OFFSET 1。这些结果合并在一起就是 LIMIT 4 OFFSET 2 的一个近似答案。这种做法对于数据分布均匀的分库分表效果很好，偏差也不大。</p>\n</blockquote><p>这个方案还有一个进阶版本，就是根据数据分布来决定如何取数据。假如说你预计你查询的数据有 70% 在 order_tab_0，有 30% 在 order_tab_1，然后你假设逻辑上的查询是：</p><pre><code class=\"language-sql\">SELECT * FROM order_tab ORDER BY id LIMIT 10 OFFSET 100\n</code></pre><p>那么你可以根据数据分布，从 order_tab_0 取 70% 的数据，然后在 order_tab_1 取 30% 数据，偏移量也是如此。</p><p>因此目标 SQL 就是：</p><pre><code class=\"language-sql\">SELECT * FROM order_tab_0 ORDER BY id LIMIT 7 OFFSET 70\nSELECT * FROM order_tab_1 ORDER BY id LIMIT 3 OFFSET 30\n</code></pre><p>这个进阶版本你可以在前面的基本回答之后进一步补充。</p><blockquote>\n<p>更加通用的做法是根据数据分布来决定分页在不同的表上各自取多少条数据。比如说一张表上面有 70% 的数据，但是另一张表上只有 30% 的数据，那么在 LIMIT 10 OFFSET 100 的场景下，可以在 70% 的表里取 LIMIT 7 OFFSET 70，在 30% 的表里取 LIMIT 3 OFFSET 30。所以，也可以把前面平均分配的方案看作是各取 50% 的特例。</p>\n</blockquote><p>那么面试官就可能进一步追问，你怎么知道一张表上有 70% 的数据，另外一张表上有 30%。这个倒是很简单，在开发的时候先用 SQL 在不同的表上执行一下，看看同样的 WHERE 条件下各自返回了多少数据，就可以推断出来了。</p><p>不过实际上，能够接受不精确的业务场景还是比较少的。所以我们还有一种业务折中的解决方案，它精确并且高效，也就是禁用跨页查询方案。</p><h3>禁用跨页查询</h3><p>禁用跨页查询，意思就是要求用户只能从第 0 页开始，逐页往后翻，不允许跨页。比如说从第 3 页跳到第 10 页，这种是不允许的。假如说业务上分页查询是 50 条数据一页。那么发起的查询依次是：</p><pre><code class=\"language-sql\">SELECT * FROM order_tab ORDER BY id LIMIT 50 OFFSET 0\nSELECT * FROM order_tab ORDER BY id LIMIT 50 OFFSET 50\nSELECT * FROM order_tab ORDER BY id LIMIT 50 OFFSET 100\n...\n</code></pre><p>所以你可以看到，这里不断增长的只有偏移量。那么有没有办法控制住这个偏移量呢？</p><p>答案就是根据 ORDER BY 的部分来增加一个查询条件。在上面的例子里，ORDER BY id 是按照 id 升序排序的，那么只需要在 WHERE 部分增加一个大于上次查询的最大 id 的条件就可以了。</p><pre><code class=\"language-sql\">SELECT * FROM order_tab WHERE `id` &gt; max_id ORDER BY id LIMIT 50 OFFSET 0\n</code></pre><p>max_id 就是你上一批次的最大 id。</p><p>反过来，如果 ORDER BY 是降序的，比如 ORDER BY id DESC，那么对应的 SQL 就变成这样：</p><pre><code class=\"language-sql\">SELECT * FROM order_tab WHERE `id` &lt; min_id ORDER BY id LIMIT 50 OFFSET 0\n</code></pre><p>min_id 就是上一批次里最小的 id。</p><p>即便 ORDER BY 里面使用了多个列，规则也是一样的。</p><p>总的来看，你的回答要分成两部分，第一部分介绍基本做法，关键词是<strong>拿到上一批次的极值</strong>。</p><blockquote>\n<p>目前比较好的分页做法是禁用跨页查询，然后在每一次查询条件里面加上上一次查询的极值，也就是最大值或者最小值。比如说第一次查询的时候 ORDER BY ID LIMIT 10 OFFSET 0，那么下一页，就可以改成 WHERE id &gt; max_id ORDER BY ID LIMIT 10 OFFSET 0。在现在的手机 App 里这个策略是非常好用的，因为手机 App 都是下拉刷新，天然就不存在跨页的问题。</p>\n</blockquote><p>第一部分你提到了极值，那么面试官就可能问你什么时候用最大值，什么时候用最小值。你就可以这样说：</p><blockquote>\n<p>至于用最大值还是用最小值，这个取决于 <strong>ORDER BY</strong>。总的原则就是升序用最大值，降序用最小值。如果 ORDER BY 里面包含了多个列，那么针对每一个列是升序还是降序，来确定使用最大值还是使用最小值。</p>\n</blockquote><p>这种方案在实践中使用得非常广泛。不过我们还有一个更加简单粗暴的方案，既然分库分表难以处理分页的问题，那么干嘛不直接换用其他中间件呢？</p><h3>换用其他中间件</h3><p>这个思路可以说是非常直接了，既然分库分表导致了分页很困难，那么我就换一个不需要分库分表的中间件不就好了吗？也可以，换中间件也有两种思路。</p><p>第一种思路是用 NoSQL 之类的来存储数据。比如说使用 Elasticsearch、ClickHouse。另外一种思路是使用分布式关系型数据库。这其实就相当于你把分页的难题抛给了这些数据库，性能如何就取决于你最终选择了哪个分布式关系型数据库。</p><p>上面这些方案不管是从实际，还是从理论上，都有各自的特色。下面我们再往前一步，看看还有哪些比较好用且有亮点的方案。</p><h2>亮点方案</h2><p>这里我提供两个亮点方案。第一个是二次查询。实际上它应该是一个常见的方案，但是因为过于复杂所以能够记住并且把原理讲清楚，本身就是一件不容易的事情。第二个是引入中间表。这个方案从复杂度上来说是不如二次查询的，但是它比较罕见，也就是说面经里面会提到这个方案的比较少。</p><h3>二次查询</h3><p>二次查询的基本理念是先尝试<strong>获得某个数据的全局偏移量，然后再根据这个偏移量来计算剩下数据的偏移量</strong>。这里我用一个例子来阐述它的基本原理，再抽象出一般步骤。</p><p>假设说我们的查询依旧是：</p><pre><code class=\"language-sql\">SELECT * FROM order_tab ORDER BY id LIMIT 4 OFFSET 4\n</code></pre><p>数据分布如图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/7a/9f/7aaf207eaea00b7b217f276534a6be9f.png?wh=1920x1026\" alt=\"图片\"></p><p>全局上的 LIMIT 4 OFFSET 4 是 5、6、7、8 四条数据。</p><h4>步骤一：首次查询</h4><p>我们把SQL语句改写成这样：</p><pre><code class=\"language-sql\">SELECT * FROM order_tab_0 ORDER BY id LIMIT 4 OFFSET 2\nSELECT * FROM order_tab_1 ORDER BY id LIMIT 4 OFFSET 2\n</code></pre><p>注意，这里我们只是把 OFFSET 平均分配了，但是 LIMIT 没变。<br>\n那么我们第一次查询到的数据是怎样的呢？你可以看一下图片。</p><p><img src=\"https://static001.geekbang.org/resource/image/e6/9b/e6662eb434cce0f4ca813aa7c3b4949b.png?wh=1920x1026\" alt=\"图片\"></p><p>order_tab_0 拿到了 4、6、10、12，而 order_tab_1 拿到了 7、8、9、11。</p><h4>步骤二：确认最小值</h4><p>很明显，上一步返回的查询数据里面，id 最小的是 4，来自 order_tab_0。</p><h4>步骤三：二次查询</h4><p>这一次查询需要利用上一步找出来的最小值以及各自分库的最大值来构造 BETWEEN 查询。改写得到的 SQL 是：</p><pre><code class=\"language-sql\">SELECT * FROM order_tab_0 WHERE id BETWEEN 4 AND 12\nSELECT * FROM order_tab_1 WHERE id BETWEEN 4 AND 11\n</code></pre><p>结果：</p><ul>\n<li>order_tab_0 返回 4、6、10、12。</li>\n<li>order_tab_1 返回 5、7、8、9、11，也就是多了 1 条数据，记住这一点。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/e5/93/e5c1e34b6147d40af7b908047324yy93.png?wh=1920x1026\" alt=\"图片\"></p><p>取过来的所有数据排序之后就是 4、5、6、7、8、9、10、11、12。</p><h4>步骤四：计算最小值的全局偏移量</h4><p>这是最难理解的一步，你抓住核心：<strong>根据 BETWEEN 中多出来的数据量来推断全局偏移量</strong>。现在我们知道 4 在 order_tab_0 中的偏移量是 2，也就是说比 4 小的数据有 2 条。在 BETWEEN 查询里面，order_tab_1 返回的结果是 5、7、8、9、11，7 在第一次查询里面的偏移量是 2，所以 5 的偏移量是 1。也就是说，5 的前面只有一条比 4 小的数据。</p><p>那么 4 在 order_tab 中的全局偏移量就是 3（2+1），换一句话来说，就是 4 前面有三条数据。</p><p><img src=\"https://static001.geekbang.org/resource/image/4b/26/4b69ed053aa4bf27d2b3d25b3978d426.png?wh=1920x1026\" alt=\"图片\"></p><p>那么加上 4 本身，刚好构成了 OFFSET 4，因此就是从 5 开始取，往后取 4 条数据。</p><h4>小结</h4><p>现在我抽象地说一下这个算法。假设你的分库分表总共有 N 个表，查询是 LIMIT X OFFSET Y，那么：</p><ol>\n<li>首先发送查询语句 LIMIT X OFFSET Y/N 到所有的表。</li>\n<li>找到所有返回结果中的最小值（升序），记为 min。</li>\n<li>执行第二次查询，关键是 BETWEEN min AND max。其中 max 是在第一次查询的数据中每个表各自的最大值。</li>\n<li>根据 min、第一次查询和第二次查询的值来确定 min 的全局偏移量。总的来说，min 在某个表里面的偏移量这样计算：如果第二次查询比第一次查询多了 K 条数据，那么偏移量就是 Y除以N 减去 K。然后把所有表的偏移量加在一起，得到的就是 min 的全局偏移量。</li>\n<li>根据 min 的全局偏移量，在第二次查询的结果里面向后补足到 Y，得到第一条数据的位置，再取 X 条。</li>\n</ol><p>上面的这些步骤太难记忆了，这里我给你一个简化版本。</p><ol>\n<li>首次查询，拿到最小值。</li>\n<li>二次查询，确认最小值的全局偏移量。</li>\n<li>在二次查询的结果里根据最小值取到符合偏移量的数据。</li>\n</ol><p>就像我说的，这个部分难以理解，所以你在面试回答的时候，可以尝试回答<strong>最简版本</strong>。如果面试官继续发问，你就可以通过前面的例子来进一步解释。</p><h3>引入中间表</h3><p>引入中间表的意思是额外存储一份数据，只用来排序。这个方案里面就是在中间表里<strong>加上排序相关的列</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/e7/66/e7dab6da49d87e9ec979a07e7366ba66.png?wh=1920x765\" alt=\"图片\"></p><blockquote>\n<p>排序是一个非常常见的需求，那么就可以考虑引入一个中间表来辅助排序。比如说在使用更新时间来排序的时候，在中间表里面加上更新时间。查询的时候先在中间表里面查到目标数据，然后再去目标表里面把全部数据都查询出来。</p>\n</blockquote><p>这个方案也是有缺点的，你可以进一步指出来。</p><blockquote>\n<p>这个方案有两个明显的缺陷，一个是 WHERE 也只能使用中间表上的列；另外一个是维护中间表也会引入数据一致性的问题。</p>\n</blockquote><p>对于第一个缺陷，面试官应该没什么好问的。但是第二个缺陷，也是一个鱼饵，不出意外面试官就会追问怎么解决这个数据一致性的问题。</p><p><img src=\"https://static001.geekbang.org/resource/image/a0/8c/a051a814364db389bff20e5825cacf8c.png?wh=1920x594\" alt=\"图片\"></p><blockquote>\n<p>比较简单的做法就是业务保持双写，也就是写入目标表也写入中间表。不过这里我更加建议使用 Canal 之类的框架来监听 binlog，异步更新中间表。这样做的好处是业务完全没有感知，没有什么改造成本。更新的时候可以考虑引入重试机制，进一步降低失败的几率。</p>\n</blockquote><p>这个回答可能会把话题引向我们前面学过的 binlog，你做好准备就可以。</p><p>这里你还需要注意，面试官可能进一步问你，如果更新中间表经过重试之后也失败了，怎么办？这时候并没有更好的办法，无非就是引入告警，然后人工介入处理。</p><p>最后你可以再总结一下这个方案。</p><blockquote>\n<p>这个方案是一个依赖最终一致性的方案，在强调强一致性的场景下并不是很合适。</p>\n</blockquote><h2>面试思路总结</h2><p>这一节课内容也有点多，我们再来捋一捋。基础知识的部分你需要掌握分库分表的一般做法：哈希分库分表、范围分库分表和中间表分库分表。还有分库分表中间件的形态：SDK、Proxy 和 Sidecar。</p><p>我们还重点讨论了分页的解决思路，分别是：</p><ol>\n<li>全局查询：注意它的性能问题，以及用归并排序缓解性能问题。</li>\n<li>平均分页：注意根据数据分布来分页的一般算法。</li>\n<li>禁用跨页查询：这在实践中非常常用，基本没什么缺点。</li>\n<li>换用其他中间件：需要你了解对应的中间件。</li>\n</ol><p>最后我还给出了两个亮点方案，一个是二次查询，这个方案很复杂，所以你需要多花一点精力，在面试前多模拟练习一下。另一个是引入中间表：这个方案并不复杂，只是因为罕见所以适合拿来面试。</p><p><img src=\"https://static001.geekbang.org/resource/image/69/b7/69fcac6cf43a362d5ba7bc11457b8bb7.jpg?wh=1882x1714\" alt=\"\"></p><h2>思考题</h2><p>学而不思则罔，最后我给你留两道思考题。</p><ul>\n<li>如果查询里面有 GROUP BY，其实会影响到分页的执行。你可以说说假如GROUP BY刚好是根据分库分表键来进行的，分页可以怎么执行呢？不然的话又该怎么执行呢？</li>\n<li>我在这里用的例子都是哈希分表的，那么在使用范围分库分表的情况下，分页查询执行又有一些不同，你能说一下范围查询的做法会有怎样的区别吗？我可以给你一些提示，要注意 ORDER BY 和分库分表键，还要注意 GROUP BY。</li>\n</ul><p>欢迎你把你思考后的答案分享到评论区，和我一起讨论，也欢迎你把这节课分享给需要的朋友，我们下节课再见！</p>","neighbors":{"left":{"article_title":"16｜分库分表主键生成：如何设计一个主键生成算法？","id":676793},"right":{"article_title":"18｜分布式事务：如何同时保证分库分表、ACID和高性能？","id":678287}},"comments":[{"had_liked":false,"id":378457,"user_name":"penbox","can_delete":false,"product_type":"c1","uid":1052938,"ip_address":"四川","ucode":"59C4F47ACCB7F2","user_header":"https://static001.geekbang.org/account/avatar/00/10/11/0a/59639f1f.jpg","comment_is_top":false,"comment_ctime":1690275561,"is_pvip":true,"replies":[{"id":137953,"content":"赞！！！很有天赋！！\n第二个问题，GROUP BY 如果是分库分表键，其实和你第一个问题的答案差不多。ORDER BY 倒是，计算各个表的 COUNT，然后计算起始 offset。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1690434545,"ip_address":"广东","comment_id":378457,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"感觉分库分表太烧脑了，试着回答下老师的两道问题：\n1. 如果查询里面有 GROUP BY，其实会影响到分页的执行。你可以说说假如 GROUP BY 刚好是根据分库分表键来进行的，分页可以怎么执行呢？不然的话又该怎么执行呢？\n  分组列如果是分库分表键，同一个分组列的值都在一张表里面，不需要改写聚合函数。  \n  分组列如果不是分库分表键，同一个分组列的值分布在不同表里面，可能需要先改写聚合函数，比如 AVG 需要改写为 SUM 和 COUNT，再在内存中合并结果并计算。  \n  后续分页相关的步骤应该就是上文里面的这些。  \n2. 这里的例子都是哈希分表，如果在使用范围分库分表的情况下，分页查询执行又有什么不同，你能说下范围查询的做法有怎样的区别吗？提示，注意 ORDER BY 和分库分表键，还要注意 GROUP BY。\n  在范围分库分表的情况下，如果 GROUP BY 的刚好是分库分表键，那么需要需要按分表顺序依次计算每张表的 COUNT，然后根据 OFFSET 判断返回结果起始位置在哪张表，根据 LIMIT 判断结果终止位置在哪张表，然后进行查询。  \n  如果 ORDER BY 的是其它列，那么处理方式和上文应该就没区别了。  \n  GROUP BY 的处理方式应该和上一题是一样的思路。","like_count":7,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":624321,"discussion_content":"赞！！！很有天赋！！\n第二个问题，GROUP BY 如果是分库分表键，其实和你第一个问题的答案差不多。ORDER BY 倒是，计算各个表的 COUNT，然后计算起始 offset。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1690434545,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":378375,"user_name":"进击的和和","can_delete":false,"product_type":"c1","uid":2986043,"ip_address":"四川","ucode":"8978AF077FA6AD","user_header":"https://static001.geekbang.org/account/avatar/00/2d/90/3b/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1690165066,"is_pvip":false,"replies":[{"id":137908,"content":"哈哈哈，应该说，跨页查询勉强算是解决了，主要是控制住了偏移量，那么网络通信和磁盘扫描都要少很多。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1690259480,"ip_address":"广东","comment_id":378375,"utype":1}],"discussion_count":10,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"禁用跨页查询并没有解决分表分页查询问题呀 数据库这里只有二次查询真正解决了问题,但是有点复杂了...","like_count":3,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":624154,"discussion_content":"哈哈哈，应该说，跨页查询勉强算是解决了，主要是控制住了偏移量，那么网络通信和磁盘扫描都要少很多。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1690259480,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2986043,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/90/3b/791d0f5e.jpg","nickname":"进击的和和","note":"","ucode":"8978AF077FA6AD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":624185,"discussion_content":"你好博主 你的意思是说分表了的话,跨页查询也要去查询多张表的哈?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1690280851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":624154,"ip_address":"四川","group_id":0},"score":624185,"extra":""}]},{"author":{"id":1131592,"avatar":"https://static001.geekbang.org/account/avatar/00/11/44/48/fae317c1.jpg","nickname":"子休","note":"","ucode":"EDB61FB012C195","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":624100,"discussion_content":"我说下我的看法，可能不一定对。\n禁用跨页查询的核心在于获得上一次查询的“极值”，比如文中提到的ID，有了这个极值ID就可以去每张表里面用where id &gt; 极值 limit 10 offset 0查出来符合条件的记录，然后合并起来，最后做一次合并排序才行，而不是单纯禁用跨页即可。\n如果可以确保，分表的策略是，这个ID是单表递增的话，那就不需要一张表一张表去查了，直接根据极值Id定位到表，直接查就行了。比如第一张表的ID是0到10000，第二张表是10001到20000，在知道ID的情况下，可以定位到具体查哪张表即可，这样大多数情况单表查询就搞定了，因为ID只能落在一张表里面，然后在这张表里查就行了，极端情况会出现跨表，比如要查9999到10008这10条记录，就出现跨表了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1690206147,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2986043,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/90/3b/791d0f5e.jpg","nickname":"进击的和和","note":"","ucode":"8978AF077FA6AD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1131592,"avatar":"https://static001.geekbang.org/account/avatar/00/11/44/48/fae317c1.jpg","nickname":"子休","note":"","ucode":"EDB61FB012C195","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":624125,"discussion_content":"大哥 如果不是单表递增,是多表查询的话,你这个看起来和二次查询很相似呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1690247633,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":624100,"ip_address":"四川","group_id":0},"score":624125,"extra":""}]},{"author":{"id":2004534,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/96/36/25938cd1.jpg","nickname":"Emmcd","note":"","ucode":"8B8BFDD26CB89A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":651916,"discussion_content":"二次查询似乎也没解决深翻页问题哇","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1727699995,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1054541,"avatar":"https://static001.geekbang.org/account/avatar/00/10/17/4d/7e13ec93.jpg","nickname":"彭俊","note":"","ucode":"FBEDBCCF22F1D0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":651278,"discussion_content":"对用户侧查询，一般只能差当前用户的记录。如果按照用户id做hash分表，只需要查询一张表就行了，分页和游标都是可以的。\n对crm和cli的查询，如果没有中间表，也只能查询多张表了。我司是用canal+es实现crm分页和筛选的。不过关键路径还是不信任es，所以有些场景还是得查询mysql多张表","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1726669557,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3601364,"avatar":"https://static001.geekbang.org/account/avatar/00/36/f3/d4/86a99ae0.jpg","nickname":"哆啦a喵","note":"","ucode":"AE5E51BB43753D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":643180,"discussion_content":"给我的感觉，这个小技巧不是针对分库分表的，其实我们查普通表分页也一样的，而且收益其实也是一样的，都是针对offset多扫的那些磁盘io和资源消耗，但并不能真正做到少读分表的数量？不知道理解的对不对。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1714110913,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1246375,"avatar":"https://static001.geekbang.org/account/avatar/00/13/04/a7/aefd3d27.jpg","nickname":"辉","note":"","ucode":"65CDFB63D12FC5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":3601364,"avatar":"https://static001.geekbang.org/account/avatar/00/36/f3/d4/86a99ae0.jpg","nickname":"哆啦a喵","note":"","ucode":"AE5E51BB43753D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":652414,"discussion_content":"我和你想的一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1728889719,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":643180,"ip_address":"北京","group_id":0},"score":652414,"extra":""}]},{"author":{"id":1366118,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJBVPzcO55PyLPeicoZ6zuaZNryYK7OnAkgz0jV6Tl9vOLIrkEGDgen8E9NwamAsTckS1D2Wl2prCQ/132","nickname":"夏文兵","note":"","ucode":"038FA2102DA4C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":624050,"discussion_content":"是的，同样疑惑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1690169006,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"陕西","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2986043,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/90/3b/791d0f5e.jpg","nickname":"进击的和和","note":"","ucode":"8978AF077FA6AD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1366118,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJBVPzcO55PyLPeicoZ6zuaZNryYK7OnAkgz0jV6Tl9vOLIrkEGDgen8E9NwamAsTckS1D2Wl2prCQ/132","nickname":"夏文兵","note":"","ucode":"038FA2102DA4C1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":624126,"discussion_content":"如果解决了疑惑,麻烦也给我说下哦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1690247679,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":624050,"ip_address":"四川","group_id":0},"score":624126,"extra":""}]}]},{"had_liked":false,"id":385975,"user_name":"Geek_51a0ed","can_delete":false,"product_type":"c1","uid":3579677,"ip_address":"北京","ucode":"A1B6B3077563EC","user_header":"","comment_is_top":false,"comment_ctime":1703751625,"is_pvip":false,"replies":[{"id":140744,"content":"早期没啥 ES 的时候用得多，后面就用得少了。\n不过分库分表中间件要支持分页查询，就只能这么搞。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1704188733,"ip_address":"广东","comment_id":385975,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"实际上真的会这么做吗 感觉复杂度有点高。 感觉还是通过binlog同步到es里查好一点","like_count":1,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634903,"discussion_content":"早期没啥 ES 的时候用得多，后面就用得少了。\n不过分库分表中间件要支持分页查询，就只能这么搞。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1704188733,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3601364,"avatar":"https://static001.geekbang.org/account/avatar/00/36/f3/d4/86a99ae0.jpg","nickname":"哆啦a喵","note":"","ucode":"AE5E51BB43753D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":643183,"discussion_content":"你好，想请教一下，这里同步es的意思，是把需要排序的字段直接丢到es里，查询的时候先查es再拿到分片键，再查分片库么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1714111017,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":389705,"user_name":"星期三。","can_delete":false,"product_type":"c1","uid":1203078,"ip_address":"浙江","ucode":"EF3C461AB5399D","user_header":"https://static001.geekbang.org/account/avatar/00/12/5b/86/dba8214e.jpg","comment_is_top":false,"comment_ctime":1713271470,"is_pvip":false,"replies":[{"id":141981,"content":"就是用一般的分库分表主键的解决方案就可以，没特别的要求。id 那个只是一个例子。你如果用的是 update_time 来排序。那么你带上的应该是 update_time","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1715230941,"ip_address":"广东","comment_id":389705,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"跨页的话那个id是不是得全局唯一且递增的呀，有什么好的方案吗","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":644401,"discussion_content":"就是用一般的分库分表主键的解决方案就可以，没特别的要求。id 那个只是一个例子。你如果用的是 update_time 来排序。那么你带上的应该是 update_time","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1715230941,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":385928,"user_name":"斯蒂芬.赵","can_delete":false,"product_type":"c1","uid":1200179,"ip_address":"山东","ucode":"AA0FF2DA654418","user_header":"https://static001.geekbang.org/account/avatar/00/12/50/33/9dcd30c4.jpg","comment_is_top":false,"comment_ctime":1703672719,"is_pvip":false,"replies":[{"id":140747,"content":"是的，难以避免。不仅仅是分库分表，但凡有 partition 概念的，差不多都有这个问题。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1704188832,"ip_address":"广东","comment_id":385928,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"跨页查询和全局查询发性能都很差的，当offset偏移量很大的情况下，扫描的行数增多了","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634906,"discussion_content":"是的，难以避免。不仅仅是分库分表，但凡有 partition 概念的，差不多都有这个问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1704188832,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":385239,"user_name":"大将军Leo。。","can_delete":false,"product_type":"c1","uid":1506549,"ip_address":"广东","ucode":"4A6A510BA454E1","user_header":"https://static001.geekbang.org/account/avatar/00/16/fc/f5/6b65f63a.jpg","comment_is_top":false,"comment_ctime":1702315887,"is_pvip":false,"replies":[{"id":140762,"content":"因为你本身是两张表，所以你可以说，订单表按照月，但是订单性情表按照周。核心目标是同一个订单的订单详情必然在同一个分区上就可以。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1704189596,"ip_address":"广东","comment_id":385239,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"老师我问下，如果是订单表和订单明细表。一个订单有多条明细。如果订单表按照月来分表，明细表按什么比较合适？ 如果是一个订单1k明细，如果明细也按月来分这个时候数据差距就会越来越大。","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634921,"discussion_content":"因为你本身是两张表，所以你可以说，订单表按照月，但是订单性情表按照周。核心目标是同一个订单的订单详情必然在同一个分区上就可以。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1704189596,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382008,"user_name":"木木夕","can_delete":false,"product_type":"c1","uid":1526471,"ip_address":"广东","ucode":"EA5D709D0DE50E","user_header":"https://static001.geekbang.org/account/avatar/00/17/4a/c7/0cff4a59.jpg","comment_is_top":false,"comment_ctime":1696503345,"is_pvip":false,"replies":[{"id":139225,"content":"你用 mycat 的话，就不会自己去写二次查询了吧？","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1696923052,"ip_address":"广东","comment_id":382008,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"有个问题，二次查询，比如我用的mycat，mycat屏蔽底层的查询，再返回来给客户端的，客户端怎么拿每个表的最大值，最小值？","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":629293,"discussion_content":"你用 mycat 的话，就不会自己去写二次查询了吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1696923052,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1526471,"avatar":"https://static001.geekbang.org/account/avatar/00/17/4a/c7/0cff4a59.jpg","nickname":"木木夕","note":"","ucode":"EA5D709D0DE50E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":629487,"discussion_content":"你的意思是，Mycat查询内部就是二次查询？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1697111177,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":629293,"ip_address":"广东","group_id":0},"score":629487,"extra":""}]}]},{"had_liked":false,"id":380125,"user_name":"码小呆","can_delete":false,"product_type":"c1","uid":2055809,"ip_address":"广东","ucode":"44532D6ABF9340","user_header":"https://static001.geekbang.org/account/avatar/00/1f/5e/81/82709d6e.jpg","comment_is_top":false,"comment_ctime":1693035298,"is_pvip":false,"replies":[{"id":138553,"content":"实践中当然都是多快好省，面试就是啥复杂啥牛逼就用啥。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1693489520,"ip_address":"广东","comment_id":380125,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"这个二次查询,我感觉,越来越复杂了,实际应该不会考虑使用了,直接用中间件来查询就好了","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":626935,"discussion_content":"实践中当然都是多快好省，面试就是啥复杂啥牛逼就用啥。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1693489521,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1035999,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ce/df/3e24aa5b.jpg","nickname":"吃到140","note":"","ucode":"1862A57AB4C173","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":630092,"discussion_content":"老师总是说大实话 哈哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698114972,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":626935,"ip_address":"北京","group_id":0},"score":630092,"extra":""}]},{"author":{"id":1526471,"avatar":"https://static001.geekbang.org/account/avatar/00/17/4a/c7/0cff4a59.jpg","nickname":"木木夕","note":"","ucode":"EA5D709D0DE50E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":626898,"discussion_content":"中间件有这样的实现？不都是从各个分片捞数据，在中间件再排一次，都是不准确，漏数据的。mycat ，shardingJDBC都没有这样的实现吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1693474245,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":378420,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"北京","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1690208383,"is_pvip":false,"replies":[{"id":137904,"content":"当然会，但是要比业务表表现好很多。正常的中间表列都很少，而且你大部分列上面你都是需要创建索引的。因此你在中间表上的查询差不多都是命中索引，甚至直接是覆盖索引。\n\n业务表因为列少，所以你单表能够放的中间表数据可以很多。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1690259128,"ip_address":"广东","comment_id":378420,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"中间表，如果数据量很大，比如一千万，查询也会很慢吗？","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":624150,"discussion_content":"当然会，但是要比业务表表现好很多。正常的中间表列都很少，而且你大部分列上面你都是需要创建索引的。因此你在中间表上的查询差不多都是命中索引，甚至直接是覆盖索引。\n\n业务表因为列少，所以你单表能够放的中间表数据可以很多。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1690259129,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":394880,"user_name":"kitten","can_delete":false,"product_type":"c1","uid":1027789,"ip_address":"菲律宾","ucode":"E451DE087CB7CE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ae/cd/3bffed26.jpg","comment_is_top":false,"comment_ctime":1728638491,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"看了解决方案只能说。存储mysql，查询聚合上es了","like_count":1},{"had_liked":false,"id":389945,"user_name":"miaoch","can_delete":false,"product_type":"c1","uid":1542081,"ip_address":"中国香港","ucode":"00CC7A3E21452D","user_header":"","comment_is_top":false,"comment_ctime":1713950748,"is_pvip":false,"replies":null,"discussion_count":2,"race_medal":0,"score":3,"product_id":100551601,"comment_content":"二次查询, 如果数据目标数据刚好只在一个表里怎么办（或者说limit N offset M&#47;k 无法取到目标数据）。比如limit 4 offset 4。而表A是[1,10]，表B是[11,20]\n那按照算法流程limit 4 offset 2 得到区间[3, 8], [13, 18]。 而9,10是我们的目标数据，按这种算法会取到11和12，不是有问题吗？","like_count":1,"discussions":[{"author":{"id":2986043,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/90/3b/791d0f5e.jpg","nickname":"进击的和和","note":"","ucode":"8978AF077FA6AD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":650719,"discussion_content":"回过头再看个人认为这个二次也是有一定问题的,这个二次查询要注意这个数据的分布,如果分布很不均匀,查询出来的数据是错误的,这篇文章很多感觉写的太勉强了... ","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1725507863,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3842684,"avatar":"https://static001.geekbang.org/account/avatar/00/3a/a2/7c/be30e54c.jpg","nickname":"不动","note":"","ucode":"3ED95F24881737","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":647394,"discussion_content":"表A取到3,4,5,6 表B取到13,14,15,16, 最小值是3, 表AB分别再取between3,6和between3,16, 最终分别拿到3,4,5,6和11,12,13,14,15,16,得出最小值3的全局偏移量是2,那全局偏4的数就是5, 最终得到5,6,7,8","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1719978635,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":396183,"user_name":"aabb","can_delete":false,"product_type":"c1","uid":1031000,"ip_address":"广东","ucode":"49D67235C80764","user_header":"","comment_is_top":false,"comment_ctime":1733455224,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100551601,"comment_content":"禁用跨页查询更像是深度分页的解决方案","like_count":0}]}