{"id":179675,"title":"27 | 巨人的肩膀：那些你不能忽视的开源工具","content":"<p>你好，我是石雪峰。</p><p>自研工具平台对公司来说是一件高成本和高投入的事情，对于技术人员的要求也非常高。很少有公司能够像BAT一样投入近百人的团队来开发内部系统工具，毕竟，如果没有这么大规模的团队，平台产生的收益也比较有限。</p><p>另外，也很少有公司像一些行业头部公司一样，会直接投入大量资金购买成熟的商业化工具或者通过乙方合作的方式联合共建。</p><p>这些方法的长期投入都比较大，不太适用于中小型企业。那么，有其他可以低成本、快速见效的解决方案吗？</p><p>实际上，现在的开源工具已经非常成熟了，只要稍加熟悉，就能快速地基于开源工具搭建一整套研发交付工具链平台。</p><p>几年前，我跟几个朋友利用业余时间就搭建了这样一套开源的端到端流水线解决方案。我依稀记得，这个解决方案架构图是在北京开往上海的高铁上完成的。目前，这个方案在行业内广为流传，成为了很多公司搭建自己内部工具链平台的参考资料。这个系统的架构图如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/54/65/540e6527c7e2d54d0e33abc591349a65.png?wh=1759*1080\" alt=\"\"></p><p>今天，我会基于这个解决方案，给你介绍一下研发代码提交阶段、集成测试阶段和部署发布阶段的工具使用技巧，工具选型以主流开源解决方案为主，商业工具为辅，涵盖了Jira、GitLab、Jenkins、SonarQube和Kubernetes等，希望可以手把手地帮助你快速搭建一套完整的持续交付平台。</p><!-- [[[read_end]]] --><p><strong>对于持续交付工具链体系来说，工具的连通性是核心要素</strong>，所以我不会花太多时间介绍工具应该如何搭建，毕竟这类资料有很多，或者，你参考一下官网的搭建文档就可以了。尤其是现在很多工具都提供了容器化的部署方式，进一步简化了自身工具的建设成本。</p><h2>需求管理 - Jira</h2><p>在Jira官网上的醒目位置，写着一句话：<strong>敏捷开发工具的第一选择</strong>。在我看来，Atlassian公司的确有这个底气，因为<strong>Jira确实足够优秀，跟Confluence的组合几乎已经成为了很多企业的标配</strong>。这也是为什么我没有选择开源工具Redmine或者其他诸如Teambition等的SaaS化服务。</p><p>当然，近些年来，各大厂商也在积极地对外输出研发工具能力，以腾讯的TAPD为代表的敏捷协同开发工具，就使用得非常广泛。但是，其实产品的思路都大同小异，搞定了Jira，其他工具基本也就不在话下了。</p><p>作为敏捷协同工具，Jira新建工程可以选择团队的研发模式是基于Scrum，还是看板方法，你可以按需选择。在专栏的<a href=\"https://time.geekbang.org/column/article/156884\">第8讲</a>和<a href=\"https://time.geekbang.org/column/article/158789\">第9讲</a>中，我给你介绍了精益看板，你完全可以在Jira中定制自己团队的可视化看板。</p><p>看板的配置过程并不复杂，我把它整理成了文档，你可以点击网盘<a href=\"https://pan.baidu.com/s/1SAmWYv7WeYgM6yZSRs5nag\">链接</a>获取，提取码是mrtd。需要提醒你的一点是：<strong>别忘了添加WIP在制品约束，别让你的精益看板变成了可视化看板</strong>。</p><p>需求作为一切开发工作的起点，是贯穿整个研发工作的重要抓手。<strong>对于Jira来说，重点是要实现跟版本控制系统和开发者工具的打通</strong>。接下来，我们分别来看下应该如何实现。</p><p>如果你也在使用特性分支开发模式，你应该知道，一个特性就对应到一个Jira中的任务。通过任务来创建特性分支，并且将所有分支上的提交绑定到具体任务上，从而建立清晰的特性代码关联。我给你推荐两种实现方式。</p><p>第一种方式是基于Jira提供的原生插件，比如 <a href=\"https://marketplace.atlassian.com/apps/4984/git-integration-for-jira\">Git Integration for Jira</a>。这个插件配置起来非常简单，你只需要添加版本控制系统的地址和认证方式即可。然后，你就可以在Jira上进行查看提交信息、对比差异、创建分支和MR等操作。但是这个插件属于收费版本，你可以免费使用30天，到期更新即可。</p><p><img src=\"https://static001.geekbang.org/resource/image/16/d9/1641afb86fdb0872d0b83e893a4803d9.png?wh=1404*687\" alt=\"\"></p><p>第二种方式，就是<strong>使用Jira和GitLab的Webhook进行打通</strong>。</p><p>首先，你要在GitLab项目的“设置 - 集成”中找到Jira选项，按下图添加相应配置即可。配置完成之后，你只需要在提交注释中添加一个Jira的任务ID，就可以实现Jira任务和代码提交的关联，这些关联体现在Jira任务的Issue links部分。</p><p>另外，你也可以实现Jira任务的状态自动流转操作，无需手动移动任务卡片。我给你提供一份  <a href=\"http://confluence.gjingao.com/pages/viewpage.action?pageId=6520911\">配置说明</a>  ，你可以参考一下。</p><p><img src=\"https://static001.geekbang.org/resource/image/55/48/55e7b81af5f2f96e124493e3d36d9648.png?wh=752*498\" alt=\"\"></p><p>不过，如果只是这样的话，还不能实现根据Jira任务来自动创建分支，所以接下来，还要进行Jira的Webhook配置。在Jira的系统管理界面中，你可以找到“高级设置 - Webhook”选项，添加Webhook后，可以绑定各种系统提供的事件，比如创建任务、更新任务等，这基本可以满足绝大多数场景的需求。</p><p>假设我们的系统在创建Jira任务的时候，要自动在GitLab中基于主线创建一条分支，那么你可以将GitLab提供的创建分支API写在Jira触发的Webhook地址中。参考样例如下：</p><blockquote>\n<p>https : //这里替换成你的GitLab服务地址/repository/branches?branch=${issue.key}&amp;ref=master&amp;private_token=[这里替换成你的账号Token]</p>\n</blockquote><p><img src=\"https://static001.geekbang.org/resource/image/50/f2/504a61becf60fe6a2ddcfca5f624b9f2.png?wh=728*559\" alt=\"\"></p><p>到这里，Jira和GitLab的打通就完成了。我们来总结下已经实现的功能：</p><ol>\n<li>GitLab每次代码变更状态都会同步到Jira任务中，并且实现了Jira任务和代码的自动关联（Issue links）；</li>\n<li>可以在MR中增加关键字 Fixes/Resolves/Closes Jira任务号，实现Jira的自动状态流转；</li>\n<li>每次在Jira中创建任务时，都会自动创建特性分支。</li>\n</ol><p>关于Jira和开发者工具的打通，我把操作步骤也分享给你。你可以点击<a href=\"https://pan.baidu.com/s/1ByoVZRTzG48yt8Nmgf2cJg\">网盘链接</a>获取，提取码是kf3t。现在很多工具平台的建设都是以服务开发者为导向的，所以距离开发者最近的IDE工具就成了新的效率提升阵地，包括云IDE、IDE插件等，都是为了方便开发者可以在IDE里面完成所有的日常任务，对于管理分支和Jira任务，自然也不在话下。</p><h2>代码管理 - GitLab</h2><p>这个示例项目中的开发流程是怎样的呢？我们一起来看下。</p><p>第1步：在需求管理平台创建任务，这个任务一般都是可以交付的特性。你还记得吗？通过前面的步骤，我们已经实现了自动创建特性分支。</p><p>第2步：开发者在特性分支上进行开发和本地自测，在开发完成后，再将代码推送到特性分支，并触发提交阶段的流水线。这条流水线主要用于<strong>快速验证提交代码的基本质量</strong>。</p><p>第3步：当提交阶段流水线通过之后，开发者创建合并请求（Merge Request），申请将特性分支合并到主干代码中。</p><p>第4步：代码评审者对合并请求进行Review，发现问题的话，就在合并请求中指出来，最终接受合并请求，并将特性代码合入主干。</p><p>第5步：代码合入主干后，立即触发集成阶段流水线。这个阶段的检查任务更加丰富，测试人员可以手动完成测试环境部署，并验证新功能。</p><p>第6步：特性经历了测试环境、预发布环境，并通过部署流水线最终部署到生产环境中。</p><p>在专栏的<a href=\"https://time.geekbang.org/column/article/161549\">第12讲</a>中，我提到过，持续集成的理念是通过尽早和及时的代码集成，从而建立代码质量的快速反馈环。所以，<strong>版本控制系统和持续集成系统也需要双向打通</strong>。</p><p>这里的双向打通是指版本控制系统可以触发持续集成系统，持续集成的结果也需要返回给版本控制系统。</p><p>接下来，我们看看具体怎么实现。</p><h3>代码提交触发持续集成</h3><p>首先，你需要在Jenkins中安装<a href=\"https://plugins.jenkins.io/gitlab-plugin\">GitLab插件</a>。这个插件提供了很多<a href=\"https://github.com/jenkinsci/gitlab-plugin#defined-variables\">GitLab环境变量</a>，用于获取GitLab的信息，比如，gitlabSourceBranch这个参数就非常有用，它可以提取本次触发的Webhook的分支信息。毕竟，这个信息只有GitLab知道。只有同步给Jenkins，才能拉取正确的分支代码执行持续集成过程。</p><p>当GitLab监听到代码变更的事件后，会自动调用这个插件提供的Webhook地址，并实现解析Webhook数据和触发Jenkins任务的功能。</p><p>其实，我们在自研流水线平台的时候，也可以参考这个思路：<strong>通过后台调用GitLab的API完成Webhook的自动注册，从而实现对代码变更事件的监听和任务的自动化执行</strong>。</p><p>当GitLab插件安装完成后，你可以在Jenkins任务的Build Triggers中发现一个新的选项，勾选这个选项，就可以激活GitLab自动触发配置。其中比较重要的两个信息，我在下面的图片中用红色方块圈出来了。</p><p><img src=\"https://static001.geekbang.org/resource/image/18/64/18400444f248087f0b3f33c34303ed64.png?wh=1378*806\" alt=\"\"></p><ul>\n<li>上面的链接就是Webhook地址，每个Jenkins任务都不相同；</li>\n<li>下面的是这个Webhook对应的认证Token。</li>\n</ul><p>你需要把这两个信息一起添加到GitLab的集成配置中。打开GitLab仓库的“设置-集成”选项，可以看到GitLab的Webhook配置页面，将Jenkins插件生成的地址和Token信息复制到配置选项中，并勾选对应的触发选项。</p><p>GitLab默认提供了多种触发选项，在下面的截图中，只勾选了Push事件，也就是只有监听到Git Push动作的时候,才会触发Webhook。当然，你可以配置监听的分支信息，只针对特性分支执行关联的Jenkins任务。在GitLab中配置完成后，可以看到新添加的Webhook信息，点击“测试”验证是否可以正常执行，如果一切正常，则会提示“200-OK”。</p><p><img src=\"https://static001.geekbang.org/resource/image/9b/8d/9b30070e1c038d301943c2d8adcc948d.png?wh=1004*527\" alt=\"\"></p><h3>持续集成更新代码状态</h3><p>打开Jenkins的系统管理页面，找到GitLab配置，添加GitLab服务器的地址和认证方式。注意，这里的Credentials要选择GitLab API Token类型，对应的Token可以在GitLab的“用户 - 设置 - Access Tokens”中生成。由于Token的特殊性，只有在生成的时候可见，以后就再也看不到了。所以，在生成Token以后，你需要妥善地保存这个信息。</p><p><img src=\"https://static001.geekbang.org/resource/image/e5/32/e533cac2cc18bb852f2e8ff200427232.png?wh=970*282\" alt=\"\"><br>\n<img src=\"https://static001.geekbang.org/resource/image/db/bf/db49222bd6fac25909294de44d0204bf.png?wh=681*360\" alt=\"\"></p><p>那么，配置完成后，要如何更新GitLab的提交状态呢？这就需要用到插件提供的<a href=\"https://github.com/jenkinsci/gitlab-plugin#build-status-configuration\">更新构建结果</a>命令了。</p><p>对于自由风格类型的Jenkins任务，你可以添加构建后处理步骤 - Publish build status to GitLab，它会自动将排队的任务更新为“Pending”，运行的任务更新为“Running”，完成的任务根据结果更新为“Success”或者是“Failed”。</p><p>对于使用流水线的任务来说，官方也提供了相应的<a href=\"https://github.com/jenkinsci/gitlab-plugin#declarative-pipeline-jobs\">示例代码</a>，你只需要对照着写在Jenkinsfile里面就可以了。</p><pre><code>updateGitlabCommitStatus name: 'build', state: 'success'\n</code></pre><p>这样一来，每次提交代码触发的流水线结果也会显示在GitLab的提交状态中，可以在查看合并请求时作为参考。有的公司更加直接：如果流水线的状态不是成功状态，那么就会自动关闭提交的合并请求。其实无论采用哪种方式，初衷都是<strong>希望开发者在第一时间修复持续集成的问题</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/ac/12/ac621c245c87edb3de95f7aac626c012.png?wh=1040*466\" alt=\"\"></p><p>我们再阶段性地总结一下已经实现的功能：</p><ol>\n<li>每次GitLab上的代码提交都可以通过Webhook触发对应的Jenkins任务。具体触发哪个任务，取决于你将哪个Jenkins任务的地址添加到了GitLab的Webhook配置中；</li>\n<li>每次Jenkins任务执行完毕后，会将执行结果写到GitLab的提交记录中。你可以查看执行状态，决定是否接受合并请求。</li>\n</ol><h2>代码质量 - SonarQube</h2><p>SonarQube作为一个常见的开源代码质量平台，可以用来实现静态代码扫描，发现代码中的缺陷和漏洞，还提供了比较基础的安全检查能力。除此之外，它还能收集单元测试的覆盖率、代码重复率等。</p><p>对于刚开始关注代码质量和技术债务的公司来说，是一个比较容易上手的选择。关于技术债务，在专栏的<a href=\"https://time.geekbang.org/column/article/165480\">第15讲</a>中有深入讲解，如果你不记得了，别忘记回去复习一下。</p><p>那么，代码质量检查这类频繁执行的例行工作，也比较适合自动化完成，<strong>最佳途径就是集成到流水线中，也就是需要跟Jenkins进行打通</strong>。我稍微介绍一下执行的逻辑，希望可以帮你更好地理解这个配置的过程。</p><p>SonarQube平台实际包含两个部分：</p><ul>\n<li>一个是平台端，用于收集和展示代码质量数据，这也是我们比较常用的功能。</li>\n<li>另外一个是客户端，也就是SonarQube的Scanner工具。这个工具是在客户端本地执行的，也就是跟代码在一个环境中，用于真正地执行分析、收集和上报数据。这个工具之所以不是特别引人注意，是因为在Jenkins中，后台配置了这个工具，如果发现节点上没有找到工具，它就会自动下载。你可以在Jenkins的全局工具配置中找到它。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/e9/2d/e919f073a1269135dcf45d04dadf8b2d.png?wh=788*271\" alt=\"\"></p><p>了解了代码质量扫描的执行逻辑之后，我们就可以知道，对于SonarQube和Jenkins的集成，只需要单向进行即可。这也就是说，只要保证Jenkins的Scanner工具采集到的数据可以正确地上报到SonarQube平台端即可。</p><p>这个配置也非常简单，你只需要在Jenkins的全局设置中添加SonarQube的平台地址就行了。注意勾选第一个选项，保证SonarQube服务器的配置信息可以自动注入流水线的环境变量中。</p><p><img src=\"https://static001.geekbang.org/resource/image/f2/38/f2907fecbee87af49cd1fffc9b6fb438.png?wh=1122*284\" alt=\"\"></p><p>在执行Jenkins任务的时候，同样可以针对自由风格的任务和流水线类型的任务，添加不同的上报方式。关于具体的内容，你可以参考SonarQube的<a href=\"https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-jenkins/\">官方网站</a>，这里就不赘述了。</p><p>到此为止，我们已经实现了GitLab、Jenkins和SonarQube的打通。我给你分享一幅系统关系示意图，希望可以帮助你更好地了解系统打通的含义和实现过程。</p><p><img src=\"https://static001.geekbang.org/resource/image/0e/53/0ecc003fb103eb633c5c02c291342d53.png?wh=1486*1138\" alt=\"\"></p><h2>环境管理 - Kubernetes</h2><p>最后，我们再来看看环境管理部分。作为云原生时代的操作系统，Kubernetes已经成为了云时代容器编排的事实标准。对于DevOps工程师来说，Kubernetes属于必学必会的技能，这个趋势已经非常明显了。</p><p>在示例项目中，我们同样用到了Kubernetes作为基础环境，所有Jenkins任务的环境都通过Kubernetes来动态初始化生成。</p><p>这样做的好处非常多。一方面，可以实现环境的标准化。所有环境配置都是以代码的形式写在Dockerfile中的，实现了环境的统一可控。另一方面，环境的资源利用率大大提升，不再依托于宿主机自身的环境配置和资源大小，你只需要告诉Kubernetes需要多少资源，它就会帮助你找到合适的物理节点运行容器。资源的调度和分配统一通过Kubernetes完成，这就进一步提升了资源的有效利用率。想要初始化一套完整的环境，对于中小系统来说，是分分钟就可以完成的事情。关于这一点，我会在讲“云原生时代应用的平台建设”时跟你探讨。</p><p>那么，<strong>想要实现动态初始化环境，需要打通Jenkins和Kubernetes</strong>。好在Jenkins已经提供了官方的<a href=\"https://plugins.jenkins.io/kubernetes\">Kubernetes插件</a>来完成这个功能。你可以在Jenkins系统配置中添加云 - Kubernetes，然后再参考下图进行配置。</p><p>需要注意的是，<strong>必须正确配置Jenkins的地址（系统配置 - Jenkins Location），否则会导致新建容器无法连接Jenkins。</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/b2/b0/b20afc90dc6736828c0f1bdab8fa9bb0.png?wh=1587*600\" alt=\"\"></p><p>生成动态节点时，需要使用到JNLP协议，我推荐你使用<strong>Jenkins官方提供的镜像</strong>。</p><p>JNLP协议的全称是Java Network Launch Protocol，是一种通用的远程连接Java应用的协议方式。典型的使用场景就是在构建节点（也就是习惯上的Slave节点）上发起向Master节点的连接请求，将构建节点主动挂载到Jenkins Master上，供Master调度使用。<strong>区别于使用SSH长连接的方式，这种动态连接的协议特别适合于Kubernetes这类的动态节点</strong>。镜像配置如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/30/f5/307b1ab57a92f0359a0de3de09dff9f5.png?wh=1383*734\" alt=\"\"></p><p>在配置动态节点的时候，有几个要点你需要特别关注下。</p><ol>\n<li><strong> 静态目录挂载</strong>。由于每次生成一个全新的容器环境，所以就需要将代码缓存（比如.git目录）、依赖缓存（.m2, .gradle, .npm）以及外部工具等静态数据通过volume的方式挂载到容器中，以免每次重新下载时影响执行时间。</li>\n<li>如果你的Jenkins也是在Kubernetes中运行的，注意<strong>配置Jenkins的JNLP端口号</strong>（使用环境变量：JENKINS_SLAVE_AGENT_PORT）。否则，在系统中配置的端口号是不会生效的。</li>\n<li>由于每次初始化容器有一定的时间损耗，所以你可以<strong>配置一个等待时长</strong>。这样一来，在任务运行结束后，环境还会保存一段时间。如果这个时候有新任务运行，就可以直接复用已有的容器环境，而无需重新生成。</li>\n<li><strong>如果网络条件不好，可以适当地加大创建容器的超时时间</strong>，默认是100秒。如果在这个时间内无法完成容器创建，那么Jenkins就会自动杀掉创建过程并重新尝试。</li>\n</ol><p>如果一切顺利，动态Kubernetes环境就也可以使用了。这时，我们就可以完整地运行一条流水线了。在设计流水线的时候，你需要注意的是<strong>流水线的分层</strong>。具体的流水线步骤，我已经写在了系统架构图中。比如，提交阶段流水线需要完成拉取代码、编译打包、单元测试和代码质量分析四个步骤，对应的代码如下：</p><pre><code>// pipeline 2.0 - Commit stage - front-end\npipeline {\n    agent {\n        // Kubernetes节点的标签\n        label 'pipeline-slave'\n\n\n    }\n    environment {\n        // 镜像仓库地址\n        HARBOR_HOST= '123.207.154.16'\n        IMAGE_NAME = &quot;front-end&quot;\n        REPO = 'front-end'\n        HOST_CODE_DIR = &quot;/home/jenkins-slave/workspace/${JOB_NAME}&quot;\n        GROUP = 'weaveworksdemos'\n        COMMIT = &quot;${currentBuild.id}&quot;\n        TAG = &quot;${currentBuild.id}&quot;\n        TEST_ENV_NAME = 'test'\n        STAGE_ENV_NAME = 'staging'\n        PROD_ENV_NAME = 'prod'\n        BUILD_USER = &quot;${BUILD_USER_ID}&quot;\n        // 需要挂载到容器中的静态数据\n        COMMON_VOLUME = ' -v /nfs/.m2:/root/.m2  -v /nfs/.sonar:/root/.sonar -v /nfs/.npm:/root/.npm '\n    }\n    stages {\n        stage('Checkout') {\n            steps {\n                git branch: 'xxx', credentialsId: '707ff66e-1bac-4918-9cb7-fb9c0c3a0946', url: 'http://1.1.1.1/shixuefeng/front-end.git'\n            }\n        }\n        stage('Prepare Test') {\n            steps {\n                sh '''\n                docker build -t ${IMAGE_NAME} -f test/Dockerfile .\n                docker run --rm -v ${HOST_CODE_DIR}:/usr/src/app ${IMAGE_NAME} /usr/local/bin/cnpm install\n                '''\n            }\n        }\n        stage('Code Quality') {\n            parallel {\n                stage('Unit Test') {\n                    steps {\n                        sh '''\n                        docker run --rm -v ${HOST_CODE_DIR}:/usr/src/app ${IMAGE_NAME} /usr/local/bin/cnpm test\n                        '''\n                    }\n                }\n                stage('Static Scan') {\n                    steps {\n                        sh 'echo &quot;sonar.exclusions=node_modules/**&quot; &gt;&gt; sonar-project.properties'\n                        script {\n                            def scannerHome = tool 'SonarQubeScanner';\n                            withSonarQubeEnv('DevOpsSonar') {\n                                sh &quot;${scannerHome}/bin/sonar-scanner&quot;\n                                updateGitlabCommitStatus name: 'build', state: 'success'\n                            }\n                        }\n                    }\n                }\n            }\n        }       \n    }\n}\n</code></pre><p>如果你按照刚刚我所介绍的步骤操作的话，你就会得到这样一张完整的流水线演示效果图：</p><p><img src=\"https://static001.geekbang.org/resource/image/0f/b3/0f36a2ac9cfc8d5878ac7cf68dcc05b3.png?wh=1845*255\" alt=\"\" title=\"系统截图\"></p><p>结合Jenkins自身的人工审批环节，可以实现多环境的自动和手动部署，构建一个真正的端到端持续交付流水线。</p><h2>总结</h2><p>在今天的课程中，我通过一个开源流水线的解决方案，给你介绍了如何建立一个开源工具为主的持续交付流水线平台。你应该也有感觉，对于DevOps来说，真正的难点不在于工具本身，而在于如何基于整个研发流程将工具串联打通，把它们结合在一起，发挥出最大的优势。这些理念对于自建平台来说也同样适用，你需要在实践中多加尝试，才能在应用过程中游刃有余。</p><h2>思考题</h2><p>关于这套开源流水线解决方案，你对整体的工具链、配置、设计思路还有什么疑问吗？在实施过程中，你遇到了哪些绕不过去的问题呢？</p><p>欢迎在留言区写下你的思考和答案，我们一起讨论，共同学习进步。如果你觉得这篇文章对你有所帮助，也欢迎你把文章分享给你的朋友。</p>","neighbors":{"left":{"article_title":"26 | 平台产品研发：三个月完成千人规模的产品要怎么做？","id":178830},"right":{"article_title":"28 | 迈向云端：云原生应用时代的平台思考","id":180496}},"comments":[{"had_liked":false,"id":224073,"user_name":"Fan","can_delete":false,"product_type":"c1","uid":1058920,"ip_address":"","ucode":"F00ADED91FC429","user_header":"https://static001.geekbang.org/account/avatar/00/10/28/68/774b1619.jpg","comment_is_top":false,"comment_ctime":1591266150,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"14476168038","product_id":100036601,"comment_content":"“使用 Jira 和 GitLab 的 Webhook 进行打通” 的配置链接失效了<br>http:&#47;&#47;confluence.gjingao.com&#47;pages&#47;viewpage.action?pageId=6520911","like_count":3,"discussions":[{"author":{"id":1105958,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e0/26/4942a09e.jpg","nickname":"猫头鹰爱拿铁","note":"","ucode":"24266B58968428","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588424,"discussion_content":"the same ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663753262,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1392306,"avatar":"https://static001.geekbang.org/account/avatar/00/15/3e/b2/b514d71a.jpg","nickname":"小皓","note":"","ucode":"61F6C6317689BA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":359819,"discussion_content":"请求恢复链接","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616295822,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1158436,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ad/24/c6b763b4.jpg","nickname":"桃子-夏勇杰","note":"","ucode":"5D5F38AABA980F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320781,"discussion_content":"请求恢复链接。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604477848,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1207076,"avatar":"https://static001.geekbang.org/account/avatar/00/12/6b/24/ab3fe3cd.jpg","nickname":"Lactoni","note":"","ucode":"539B78114A0A66","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289187,"discussion_content":"我也没法查看了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594020920,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163409,"user_name":"leslie","can_delete":false,"product_type":"c1","uid":1324255,"ip_address":"","ucode":"798E7C1CC98CC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg","comment_is_top":false,"comment_ctime":1576718119,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10166652711","product_id":100036601,"comment_content":"      今天的内容就是一个精简版的可以直接上手使用的DevOps：不过篇章划分感觉错了-应当是《案例总结&#47;分析》篇之类的，一个不错的经典小型实战类项目，正找案例呢；刚好后面可以拿来可以用。<br>       不知不觉就33讲了，好快啊；谢谢今天的分享，期待后续的内容。","like_count":3},{"had_liked":false,"id":163380,"user_name":"swordman","can_delete":false,"product_type":"c1","uid":1002980,"ip_address":"","ucode":"F6719BD5E20B37","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/e4/94b543c3.jpg","comment_is_top":false,"comment_ctime":1576715493,"is_pvip":false,"replies":[{"id":"67655","content":"你好，我非常赞同工具串联要场景化，也就是要解决实际的问题，我认为这里面包含两点：<br>1. 需求状态的自动同步：要解决的问题就是状态更新不及时，导致的数据度量失真，所以相比于任务完成时自动触发流水线，我认为任务完成的动作同样要做到自动化流转，比如我们就是跟提测平台打通实现的状态自动同步。<br>2. 需求和代码的关联打通：要实现的就是需求和代码的追溯，所以在Jira中要能查看到代码的变更，同样代码中也要关联Jira的任务编号，这对于后端测试环节非常重要。","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1579853809,"ip_address":"","comment_id":163380,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10166650085","product_id":100036601,"comment_content":"终于等来了工具串联环节，正是我想要的，写得非常清楚，值得收藏。还有一个问题，就是Jenkins和Jira连通的场景，能否能再分享一下。附上我们现在实现：（1）代码提交流水线失败，自动往Jira上添加一个故障，然后开发人员在开发IDE中选择这个故障，展开开发和提交工作（2）Jira任务变更为完成时，自动触发Jenkins流水线，流水线完成拉取分支代码，编译打包，自动化测试等工作，如果运行失败，则修改Jira任务状态为进行中。不知道还有哪些实用的串接场景？谢谢！","like_count":3,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478373,"discussion_content":"你好，我非常赞同工具串联要场景化，也就是要解决实际的问题，我认为这里面包含两点：\n1. 需求状态的自动同步：要解决的问题就是状态更新不及时，导致的数据度量失真，所以相比于任务完成时自动触发流水线，我认为任务完成的动作同样要做到自动化流转，比如我们就是跟提测平台打通实现的状态自动同步。\n2. 需求和代码的关联打通：要实现的就是需求和代码的追溯，所以在Jira中要能查看到代码的变更，同样代码中也要关联Jira的任务编号，这对于后端测试环节非常重要。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579853809,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165989,"user_name":"鲍建飞","can_delete":false,"product_type":"c1","uid":1231907,"ip_address":"","ucode":"5CC55E8B2CB4EF","user_header":"https://static001.geekbang.org/account/avatar/00/12/cc/23/4d622bea.jpg","comment_is_top":false,"comment_ctime":1577359202,"is_pvip":false,"replies":[{"id":"63824","content":"是的，基本上讲开源流水线都离不开这三个工具哈，可以在这个基础上进行向前和向后的延展，很多公司也是这样做的","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1577545400,"ip_address":"","comment_id":165989,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5872326498","product_id":100036601,"comment_content":"最早接触的devops就是Jenkins+sonar+gitlab","like_count":2,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479342,"discussion_content":"是的，基本上讲开源流水线都离不开这三个工具哈，可以在这个基础上进行向前和向后的延展，很多公司也是这样做的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577545400,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":315779,"user_name":"阿卡阿卡","can_delete":false,"product_type":"c1","uid":2727489,"ip_address":"","ucode":"A84748A3F1625C","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIMKarLmFgMUYYZ8zdN3FLKkt7iaLgheLic2HgwVsZBOUVzycClCt9CjfWJJzAMdel1oOMJ4Uialxatg/132","comment_is_top":false,"comment_ctime":1633998715,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633998715","product_id":100036601,"comment_content":"Jenkins 如何跟OpenShift 打通流程呢","like_count":0},{"had_liked":false,"id":273788,"user_name":"Geek_bc63a1","can_delete":false,"product_type":"c1","uid":2333678,"ip_address":"","ucode":"450F120047252E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/iaRiaKz5VweoRNz2NibVZh6N63MMh1s5evKBfaMXZTBwSoZcib10h1Me4SpZjZv95krQxMpvDxTrN3ia9VNG56icnk7w/132","comment_is_top":false,"comment_ctime":1610677503,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610677503","product_id":100036601,"comment_content":"石老师，有一个问题，DevOps平台的能分别在开发环境开发、测试环境测试、生产环境里面正式使用吗？我们团队目前遇到这个问题，像常规项目一样实施，需要在三个环境里面分别部署一整套所有的工具，非常麻烦，是不是必须要这样呢？","like_count":0},{"had_liked":false,"id":264954,"user_name":"王丰","can_delete":false,"product_type":"c1","uid":1084423,"ip_address":"","ucode":"E4A668D873A32A","user_header":"https://static001.geekbang.org/account/avatar/00/10/8c/07/b4ea8f10.jpg","comment_is_top":false,"comment_ctime":1606720335,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606720335","product_id":100036601,"comment_content":"“使用 Jira 和 GitLab 的 Webhook 进行打通” 的配置链接失效了<br>http:&#47;&#47;confluence.gjingao.com&#47;pages&#47;viewpage.action?pageId=6520911","like_count":0},{"had_liked":false,"id":240159,"user_name":"Geek_599062","can_delete":false,"product_type":"c1","uid":1137592,"ip_address":"","ucode":"B8C8A6750DB713","user_header":"https://static001.geekbang.org/account/avatar/00/11/5b/b8/7b39de23.jpg","comment_is_top":false,"comment_ctime":1596772589,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596772589","product_id":100036601,"comment_content":"不错的流水线搭建介绍","like_count":0},{"had_liked":false,"id":236826,"user_name":"yyz","can_delete":false,"product_type":"c1","uid":1098513,"ip_address":"","ucode":"364D3C40C3E917","user_header":"https://static001.geekbang.org/account/avatar/00/10/c3/11/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1595558334,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595558334","product_id":100036601,"comment_content":"想问一下 根据流程图，如何触发 不同的分支 走不同的策略的呢？ 有最佳实践推荐吗？","like_count":0},{"had_liked":false,"id":222629,"user_name":"送普选","can_delete":false,"product_type":"c1","uid":1220775,"ip_address":"","ucode":"AB2C98BB9C3A5D","user_header":"https://static001.geekbang.org/account/avatar/00/12/a0/a7/db7a7c50.jpg","comment_is_top":false,"comment_ctime":1590851991,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590851991","product_id":100036601,"comment_content":"石老师，测试环境使用k8s容器平台挺好，是否依赖公司能提供的k8s容器运行平台，若公司还没有自己建设一套是否太费时间费力了？谢谢","like_count":0},{"had_liked":false,"id":215004,"user_name":"似曾相识","can_delete":false,"product_type":"c1","uid":1971079,"ip_address":"","ucode":"DCBA5F6ABC7401","user_header":"https://static001.geekbang.org/account/avatar/00/1e/13/87/73a17c60.jpg","comment_is_top":false,"comment_ctime":1588866834,"is_pvip":false,"replies":[{"id":"80746","content":"如果只是单纯使用，其实差不多，哪个用的熟练用哪个😄","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1589792900,"ip_address":"","comment_id":215004,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1588866834","product_id":100036601,"comment_content":"老师 gitlab runner 与jenkins如何选择呢？","like_count":0,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494271,"discussion_content":"如果只是单纯使用，其实差不多，哪个用的熟练用哪个😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589792900,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1104850,"avatar":"https://static001.geekbang.org/account/avatar/00/10/db/d2/e29f8834.jpg","nickname":"lidashuang","note":"","ucode":"560ABE8032760E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293778,"discussion_content":"可以都用啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595666246,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167882,"user_name":"zero","can_delete":false,"product_type":"c1","uid":1000718,"ip_address":"","ucode":"61C28D2DEDDD2D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/45/0e/f7f27802.jpg","comment_is_top":false,"comment_ctime":1577957239,"is_pvip":false,"replies":[{"id":"65251","content":"我理解不应该出现这种问题呀，我明天去公司看下，你可以加我微信沟通哈，cendrier","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1577983903,"ip_address":"","comment_id":167882,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1577957239","product_id":100036601,"comment_content":"对于jenkins的使用，有一个场景需求： 有两个账号user1,user2，分别建立视图view1,view2 。user1登录只能看到view1;user2登录只能看到user2。但是，实际使用过程中发现，做不到视图隐藏。user1登录依然可以看到view2，虽然view2视图下没有任务。使用插件过滤，但是只能对任务生效，石老师是否有好的建议？","like_count":0,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480040,"discussion_content":"我理解不应该出现这种问题呀，我明天去公司看下，你可以加我微信沟通哈，cendrier","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577983903,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}