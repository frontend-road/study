{"id":127495,"title":"10 | 作用域链和闭包 ：代码中出现相同的变量，JavaScript引擎是如何选择的？","content":"<p>在<a href=\"https://time.geekbang.org/column/article/126339\">上一篇文章</a>中我们讲到了什么是作用域，以及ES6是如何通过变量环境和词法环境来同时支持变量提升和块级作用域，在最后我们也提到了如何通过词法环境和变量环境来查找变量，这其中就涉及到<strong>作用域链</strong>的概念。</p><p>理解作用域链是理解闭包的基础，而闭包在JavaScript中几乎无处不在，同时作用域和作用域链还是所有编程语言的基础。所以，如果你想学透一门语言，作用域和作用域链一定是绕不开的。</p><p>那今天我们就来聊聊<strong>什么是作用域链</strong>，并通过作用域链再来讲讲<strong>什么是闭包</strong>。</p><p>首先我们来看下面这段代码：</p><pre><code>function bar() {\n    console.log(myName)\n}\nfunction foo() {\n    var myName = &quot;极客邦&quot;\n    bar()\n}\nvar myName = &quot;极客时间&quot;\nfoo()\n</code></pre><p>你觉得这段代码中的bar函数和foo函数打印出来的内容是什么？这就要分析下这两段代码的执行流程。</p><p>通过前面几篇文章的学习，想必你已经知道了如何通过执行上下文来分析代码的执行流程了。那么当这段代码执行到bar函数内部时，其调用栈的状态图如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/87/f7/87d8bbc2bb62b03131802fba074146f7.png?wh=1142*675\" alt=\"\"></p><center><span class=\"reference\">执行bar函数时的调用栈</span></center><p>从图中可以看出，全局执行上下文和foo函数的执行上下文中都包含变量myName，那bar函数里面myName的值到底该选择哪个呢？</p><p>也许你的第一反应是按照调用栈的顺序来查找变量，查找方式如下：</p><ol>\n<li>先查找栈顶是否存在myName变量，但是这里没有，所以接着往下查找foo函数中的变量。</li>\n<li>在foo函数中查找到了myName变量，这时候就使用foo函数中的myName。</li>\n</ol><!-- [[[read_end]]] --><p>如果按照这种方式来查找变量，那么最终执行bar函数打印出来的结果就应该是“极客邦”。但实际情况并非如此，如果你试着执行上述代码，你会发现打印出来的结果是“极客时间”。为什么会是这种情况呢？要解释清楚这个问题，那么你就需要先搞清楚作用域链了。</p><h2>作用域链</h2><p>关于作用域链，很多人会感觉费解，但如果你理解了调用栈、执行上下文、词法环境、变量环境等概念，那么你理解起来作用域链也会很容易。所以很是建议你结合前几篇文章将上面那几个概念学习透彻。</p><p>其实在每个执行上下文的变量环境中，都包含了一个外部引用，用来指向外部的执行上下文，我们把这个外部引用称为<strong>outer</strong>。</p><p>当一段代码使用了一个变量时，JavaScript引擎首先会在“当前的执行上下文”中查找该变量，<br>\n比如上面那段代码在查找myName变量时，如果在当前的变量环境中没有查找到，那么JavaScript引擎会继续在outer所指向的执行上下文中查找。为了直观理解，你可以看下面这张图：</p><p><img src=\"https://static001.geekbang.org/resource/image/20/a7/20a832656434264db47c93e657e346a7.png?wh=1142*797\" alt=\"\"></p><center><span class=\"reference\">带有外部引用的调用栈示意图</span></center><p>从图中可以看出，bar函数和foo函数的outer都是指向全局上下文的，这也就意味着如果在bar函数或者foo函数中使用了外部变量，那么JavaScript引擎会去全局执行上下文中查找。我们把这个查找的链条就称为<strong>作用域链</strong>。</p><p>现在你知道变量是通过作用域链来查找的了，不过还有一个疑问没有解开，foo函数调用的bar函数，那为什么bar函数的外部引用是全局执行上下文，而不是foo函数的执行上下文？</p><p>要回答这个问题，你还需要知道什么是<strong>词法作用域</strong>。这是因为在JavaScript执行过程中，其作用域链是由词法作用域决定的。</p><h2>词法作用域</h2><p><strong>词法作用域就是指作用域是由代码中函数声明的位置来决定的，所以词法作用域是静态的作用域，通过它就能够预测代码在执行过程中如何查找标识符。</strong></p><p>这么讲可能不太好理解，你可以看下面这张图：</p><p><img src=\"https://static001.geekbang.org/resource/image/21/39/216433d2d0c64149a731d84ba1a07739.png?wh=1142*864\" alt=\"\"></p><center><span class=\"reference\">词法作用域</span></center><p>从图中可以看出，词法作用域就是根据代码的位置来决定的，其中main函数包含了bar函数，bar函数中包含了foo函数，因为JavaScript作用域链是由词法作用域决定的，所以整个词法作用域链的顺序是：foo函数作用域—&gt;bar函数作用域—&gt;main函数作用域—&gt;全局作用域。</p><p>了解了词法作用域以及JavaScript中的作用域链，我们再回过头来看看上面的那个问题：在开头那段代码中，foo函数调用了bar函数，那为什么bar函数的外部引用是全局执行上下文，而不是foo函数的执行上下文?</p><p>这是因为根据词法作用域，foo和bar的上级作用域都是全局作用域，所以如果foo或者bar函数使用了一个它们没有定义的变量，那么它们会到全局作用域去查找。也就是说，<strong>词法作用域是代码编译阶段就决定好的，和函数是怎么调用的没有关系</strong>。</p><h2>块级作用域中的变量查找</h2><p>前面我们通过全局作用域和函数级作用域来分析了作用域链，那接下来我们再来看看块级作用域中变量是如何查找的？在编写代码的时候，如果你使用了一个在当前作用域中不存在的变量，这时JavaScript引擎就需要按照作用域链在其他作用域中查找该变量，如果你不了解该过程，那就会有很大概率写出不稳定的代码。</p><p>我们还是先看下面这段代码：</p><pre><code>function bar() {\n    var myName = &quot;极客世界&quot;\n    let test1 = 100\n    if (1) {\n        let myName = &quot;Chrome浏览器&quot;\n        console.log(test)\n    }\n}\nfunction foo() {\n    var myName = &quot;极客邦&quot;\n    let test = 2\n    {\n        let test = 3\n        bar()\n    }\n}\nvar myName = &quot;极客时间&quot;\nlet myAge = 10\nlet test = 1\nfoo()\n</code></pre><p>你可以自己先分析下这段代码的执行流程，看看能否分析出来执行结果。</p><p>要想得出其执行结果，那接下来我们就得站在作用域链和词法环境的角度来分析下其执行过程。</p><p>在<a href=\"https://time.geekbang.org/column/article/126339\">上篇文章</a>中我们已经介绍过了，ES6是支持块级作用域的，当执行到代码块时，如果代码块中有let或者const声明的变量，那么变量就会存放到该函数的词法环境中。对于上面这段代码，当执行到bar函数内部的if语句块时，其调用栈的情况如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/25/a7/25053af5ae30c8be991fa14631cde0a7.png?wh=1142*634\" alt=\"\"></p><center><span class=\"reference\">块级作用域中是如何查找变量的</span></center><p>现在是执行到bar函数的if语块之内，需要打印出来变量test，那么就需要查找到test变量的值，其查找过程我已经在上图中使用序号1、2、3、4、5标记出来了。</p><p>下面我就来解释下这个过程。首先是在bar函数的执行上下文中查找，但因为bar函数的执行上下文中没有定义test变量，所以根据词法作用域的规则，下一步就在bar函数的外部作用域中查找，也就是全局作用域。</p><p>至于单个执行上下文中如何查找变量，我在<a href=\"https://time.geekbang.org/column/article/126339\">上一篇文章</a>中已经做了介绍，这里就不重复了。</p><h2>闭包</h2><p>了解了作用域链，接着我们就可以来聊聊闭包了。关于闭包，理解起来可能会是一道坎，特别是在你不太熟悉JavaScript这门语言的时候，接触闭包很可能会让你产生一些挫败感，因为你很难通过理解背后的原理来彻底理解闭包，从而导致学习过程中似乎总是似懂非懂。最要命的是，JavaScript代码中还总是充斥着大量的闭包代码。</p><p>但理解了变量环境、词法环境和作用域链等概念，那接下来你再理解什么是JavaScript中的闭包就容易多了。这里你可以结合下面这段代码来理解什么是闭包：</p><pre><code>function foo() {\n    var myName = &quot;极客时间&quot;\n    let test1 = 1\n    const test2 = 2\n    var innerBar = {\n        getName:function(){\n            console.log(test1)\n            return myName\n        },\n        setName:function(newName){\n            myName = newName\n        }\n    }\n    return innerBar\n}\nvar bar = foo()\nbar.setName(&quot;极客邦&quot;)\nbar.getName()\nconsole.log(bar.getName())\n</code></pre><p>首先我们看看当执行到foo函数内部的<code>return innerBar</code>这行代码时调用栈的情况，你可以参考下图：</p><p><img src=\"https://static001.geekbang.org/resource/image/d5/ef/d5587b76427a56c5f0b0571e4264b7ef.png?wh=1142*660\" alt=\"\"></p><center><span class=\"reference\">执行到return bar时候的调用栈</span></center><p>从上面的代码可以看出，innerBar是一个对象，包含了getName和setName的两个方法（通常我们把对象内部的函数称为方法）。你可以看到，这两个方法都是在foo函数内部定义的，并且这两个方法内部都使用了myName和test1两个变量。</p><p><strong>根据词法作用域的规则，内部函数getName和setName总是可以访问它们的外部函数foo中的变量</strong>，所以当innerBar对象返回给全局变量bar时，虽然foo函数已经执行结束，但是getName和setName函数依然可以使用foo函数中的变量myName和test1。所以当foo函数执行完成之后，其整个调用栈的状态如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/ee/3f/ee7c1ca481875ad4bdeb4383bd1f883f.png?wh=1142*607\" alt=\"\"></p><center><span class=\"reference\">闭包的产生过程</span></center><p>从上图可以看出，foo函数执行完成之后，其执行上下文从栈顶弹出了，但是由于返回的setName和getName方法中使用了foo函数内部的变量myName和test1，所以这两个变量依然保存在内存中。这像极了setName和getName方法背的一个专属背包，无论在哪里调用了setName和getName方法，它们都会背着这个foo函数的专属背包。</p><p>之所以是<strong>专属</strong>背包，是因为除了setName和getName函数之外，其他任何地方都是无法访问该背包的，我们就可以把这个背包称为foo函数的<strong>闭包</strong>。</p><p>好了，现在我们终于可以给闭包一个正式的定义了。<strong>在JavaScript中，根据词法作用域的规则，内部函数总是可以访问其外部函数中声明的变量，当通过调用一个外部函数返回一个内部函数后，即使该外部函数已经执行结束了，但是内部函数引用外部函数的变量依然保存在内存中，我们就把这些变量的集合称为闭包。比如外部函数是foo，那么这些变量的集合就称为foo函数的闭包</strong>。</p><p>那这些闭包是如何使用的呢？当执行到bar.setName方法中的<code>myName = \"极客邦\"</code>这句代码时，JavaScript引擎会沿着“当前执行上下文–&gt;foo函数闭包–&gt;全局执行上下文”的顺序来查找myName变量，你可以参考下面的调用栈状态图：</p><p><img src=\"https://static001.geekbang.org/resource/image/50/46/50e4ba60fc7e420e83b35b95e379b246.png?wh=1142*845\" alt=\"\"></p><center><span class=\"reference\">执行bar时调用栈状态</span></center><p>从图中可以看出，setName的执行上下文中没有myName变量，foo函数的闭包中包含了变量myName，所以调用setName时，会修改foo闭包中的myName变量的值。</p><p>同样的流程，当调用bar.getName的时候，所访问的变量myName也是位于foo函数闭包中的。</p><p>你也可以通过“开发者工具”来看看闭包的情况，打开Chrome的“开发者工具”，在bar函数任意地方打上断点，然后刷新页面，可以看到如下内容：</p><p><img src=\"https://static001.geekbang.org/resource/image/40/a8/40b8840480a5df4f43ad5f4e7907e3a8.png?wh=1142*694\" alt=\"\"></p><center><span class=\"reference\">开发者工具中的闭包展示</span></center><p>从图中可以看出来，当调用bar.getName的时候，右边Scope项就体现出了作用域链的情况：Local就是当前的getName函数的作用域，Closure(foo)是指foo函数的闭包，最下面的Global就是指全局作用域，从“Local–&gt;Closure(foo)–&gt;Global”就是一个完整的作用域链。</p><p>所以说，你以后也可以通过Scope来查看实际代码作用域链的情况，这样调试代码也会比较方便。</p><h2>闭包是怎么回收的</h2><p>理解什么是闭包之后，接下来我们再来简单聊聊闭包是什么时候销毁的。因为如果闭包使用不正确，会很容易造成内存泄漏的，关注闭包是如何回收的能让你正确地使用闭包。</p><p>通常，如果引用闭包的函数是一个全局变量，那么闭包会一直存在直到页面关闭；但如果这个闭包以后不再使用的话，就会造成内存泄漏。</p><p>如果引用闭包的函数是个局部变量，等函数销毁后，在下次JavaScript引擎执行垃圾回收时，判断闭包这块内容如果已经不再被使用了，那么JavaScript引擎的垃圾回收器就会回收这块内存。</p><p>所以在使用闭包的时候，你要尽量注意一个原则：<strong>如果该闭包会一直使用，那么它可以作为全局变量而存在；但如果使用频率不高，而且占用内存又比较大的话，那就尽量让它成为一个局部变量</strong>。</p><p>关于闭包回收的问题本文只是做了个简单的介绍，其实闭包是如何回收的还牵涉到了JavaScript的垃圾回收机制，而关于垃圾回收，后续章节我会再为你做详细介绍的。</p><h2>总结</h2><p>好了，今天的内容就讲到这里，下面我们来回顾下今天的内容：</p><ul>\n<li>首先，介绍了什么是作用域链，我们把通过作用域查找变量的链条称为作用域链；作用域链是通过词法作用域来确定的，而词法作用域反映了代码的结构。</li>\n<li>其次，介绍了在块级作用域中是如何通过作用域链来查找变量的。</li>\n<li>最后，又基于作用域链和词法环境介绍了到底什么是闭包。</li>\n</ul><p>通过展开词法作用域，我们介绍了JavaScript中的作用域链和闭包；通过词法作用域，我们分析了在JavaScript的执行过程中，作用域链是已经注定好了，比如即使在foo函数中调用了bar函数，你也无法在bar函数中直接使用foo函数中的变量信息。</p><p>因此理解词法作用域对于你理解JavaScript语言本身有着非常大帮助，比如有助于你理解下一篇文章中要介绍的this。另外，理解词法作用域对于你理解其他语言也有很大的帮助，因为它们的逻辑都是一样的。</p><h2>思考时间</h2><p>今天留给你的思考题是关于词法作用域和闭包，我修改了上面那段产生闭包的代码，如下所示：</p><pre><code>var bar = {\n    myName:&quot;time.geekbang.com&quot;,\n    printName: function () {\n        console.log(myName)\n    }    \n}\nfunction foo() {\n    let myName = &quot;极客时间&quot;\n    return bar.printName\n}\nlet myName = &quot;极客邦&quot;\nlet _printName = foo()\n_printName()\nbar.printName()\n</code></pre><p>在上面这段代码中有三个地方定义了myName，分析这段代码，你觉得这段代码在执行过程中会产生闭包吗？最终打印的结果是什么？</p><p>欢迎在留言区与我分享你的想法，也欢迎你在留言区记录你的思考过程。感谢阅读，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友。</p>","comments":[{"had_liked":true,"id":128593,"user_name":"蓝配鸡","can_delete":false,"product_type":"c1","uid":1348738,"ip_address":"","ucode":"C79A7CA8885B7C","user_header":"https://static001.geekbang.org/account/avatar/00/14/94/82/d0a417ba.jpg","comment_is_top":false,"comment_ctime":1566910329,"is_pvip":false,"replies":[{"id":"47705","content":"分析步骤很详细 👍","user_name":"作者回复","comment_id":128593,"uid":"1141464","ip_address":"","utype":1,"ctime":1566916648,"user_name_real":"李兵"}],"discussion_count":20,"race_medal":0,"score":"839085533049","product_id":100033601,"comment_content":"var bar = {<br>    myName:&quot;time.geekbang.com&quot;,<br>    printName: function () {<br>        console.log(myName)<br>    }    <br>}<br>function foo() {<br>    let myName = &quot; 极客时间 &quot;<br>    return bar.printName<br>}<br>let myName = &quot; 极客邦 &quot;<br>let _printName = foo()<br>_printName()<br>bar.printName()<br><br><br>全局执行上下文：<br>变量环境：<br>Bar=undefined<br>Foo= function <br>词法环境：<br>myname = undefined <br>_printName = undefined <br><br>开始执行：<br>bar ={myname: &quot;time.geekbang.com&quot;, printName: function(){...}}<br><br>myName = &quot; 极客邦 &quot;<br> _printName = foo() 调用foo函数，压执行上下文入调用栈<br><br>foo函数执行上下文：<br>变量环境： 空<br>词法环境： myName=undefined<br>开始执行：<br>myName = &quot; 极客时间 &quot;<br>return bar.printName<br>开始查询变量bar， 查找当前词法环境（没有）-&gt;查找当前变量环境（没有） -&gt; 查找outer词法环境（没有）-&gt; 查找outer语法环境（找到了）并且返回找到的值<br>pop foo的执行上下文<br><br>_printName = bar.printName<br>printName（）压bar.printName方法的执行上下文入调用栈<br><br>bar.printName函数执行上下文：<br>变量环境： 空<br>词法环境： 空<br>开始执行：<br>console.log(myName)<br>开始查询变量myName， 查找当前词法环境（没有）-&gt;查找当前变量环境（没有） -&gt; 查找outer词法环境（找到了）<br>打印&quot; 极客邦 &quot;<br>pop bar.printName的执行上下文<br><br><br>bar.printName() 压bar.printName方法的执行上下文入调用栈<br><br>bar.printName函数执行上下文：<br>变量环境： 空<br>词法环境： 空<br>开始执行：<br>console.log(myName)<br>开始查询变量myName， 查找当前词法环境（没有）-&gt;查找当前变量环境（没有） -&gt; 查找outer词法环境（找到了）<br>打印&quot; 极客邦 &quot;<br>pop bar.printName的执行上下文<br><br><br><br><br>","like_count":195,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465013,"discussion_content":"分析步骤很详细 👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566916648,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1584664,"avatar":"https://static001.geekbang.org/account/avatar/00/18/2e/18/0ff22cf0.jpg","nickname":"贺正賢","note":"","ucode":"25791B4654AAAB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299075,"discussion_content":"printName（）压bar.printName方法的执行上下文入调用栈\n这儿打错了吧？应该是_printName（）吧","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1597555773,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1038790,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/d9/c6/8be8664d.jpg","nickname":"ytd","note":"","ucode":"C6AEA2D19E447A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6656,"discussion_content":"回头再看你的回答，步骤很详细，很赞。👍👍👍","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1567036160,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1371535,"avatar":"https://static001.geekbang.org/account/avatar/00/14/ed/8f/493738b7.jpg","nickname":"Libolus","note":"","ucode":"CACDFBB9B81575","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310561,"discussion_content":"快速过了一遍，和我想的一样～","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1601906124,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1266698,"avatar":"https://static001.geekbang.org/account/avatar/00/13/54/0a/9a002ad5.jpg","nickname":"Adam Lau","note":"","ucode":"7E542D6E789500","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":356358,"discussion_content":"主要是没this，简单。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1615563586,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1328142,"avatar":"https://static001.geekbang.org/account/avatar/00/14/44/0e/ce14b7d3.jpg","nickname":"-_-|||","note":"","ucode":"94B21594658BF9","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":71550,"discussion_content":"开始查询变量myName，查找outer词法环境为什么不在bar这个对象中找，非待到全局找","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575432324,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1910075,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/25/3b/a971fc8e.jpg","nickname":"阿感","note":"","ucode":"7BCB7E44A832D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1328142,"avatar":"https://static001.geekbang.org/account/avatar/00/14/44/0e/ce14b7d3.jpg","nickname":"-_-|||","note":"","ucode":"94B21594658BF9","race_medal":1,"user_type":1,"is_pvip":false},"discussion":{"id":247167,"discussion_content":"对象里那是对象的属性，里面可没有什么对象里的作用域执行上下文之类的亲","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1587803569,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":71550,"ip_address":""},"score":247167,"extra":""}]},{"author":{"id":1376306,"avatar":"https://static001.geekbang.org/account/avatar/00/15/00/32/0e6a3084.jpg","nickname":"Gavan","note":"","ucode":"AAF46C35216540","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530930,"discussion_content":"为什么我执行是报错？？？？ Uncaught SyntaxError: Identifier &#39;myName&#39; has already been declared","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637168864,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":3,"child_discussions":[{"author":{"id":2159152,"avatar":"https://static001.geekbang.org/account/avatar/00/20/f2/30/5b677e8d.jpg","nickname":"Yvan","note":"","ucode":"DA5BB215E65ED3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1376306,"avatar":"https://static001.geekbang.org/account/avatar/00/15/00/32/0e6a3084.jpg","nickname":"Gavan","note":"","ucode":"AAF46C35216540","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538784,"discussion_content":"因为你之前执行过一遍let，再执行就会报这个错，重复执行之前需要刷新一下浏览器","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639520191,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":530930,"ip_address":""},"score":538784,"extra":""},{"author":{"id":1817289,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/ba/c9/37a1d853.jpg","nickname":"百步飞剑","note":"","ucode":"11197E4C0EDA34","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":1376306,"avatar":"https://static001.geekbang.org/account/avatar/00/15/00/32/0e6a3084.jpg","nickname":"Gavan","note":"","ucode":"AAF46C35216540","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539218,"discussion_content":"之前输入的代码定义了myName,window.myName有了这个变量","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639643981,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":530930,"ip_address":""},"score":539218,"extra":""},{"author":{"id":1316189,"avatar":"https://static001.geekbang.org/account/avatar/00/14/15/5d/20485ebf.jpg","nickname":"🛫Sophia","note":"","ucode":"31E88C449645EB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2159152,"avatar":"https://static001.geekbang.org/account/avatar/00/20/f2/30/5b677e8d.jpg","nickname":"Yvan","note":"","ucode":"DA5BB215E65ED3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580563,"discussion_content":"是的，刷一下可以了，感谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658248343,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":538784,"ip_address":""},"score":580563,"extra":""}]},{"author":{"id":2109637,"avatar":"","nickname":"尤泽阳","note":"","ucode":"02C58BCA6DBF7D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352529,"discussion_content":"不是说函数声明会放到词法环境吗？？求解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614763263,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1624821,"avatar":"https://static001.geekbang.org/account/avatar/00/18/ca/f5/3f95bf91.jpg","nickname":"tron","note":"","ucode":"F94DB2BE804998","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2109637,"avatar":"","nickname":"尤泽阳","note":"","ucode":"02C58BCA6DBF7D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371215,"discussion_content":"放在变量环境","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1619686304,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":352529,"ip_address":""},"score":371215,"extra":""}]},{"author":{"id":1625651,"avatar":"https://static001.geekbang.org/account/avatar/00/18/ce/33/09498236.jpg","nickname":"Geek_1b6022","note":"","ucode":"EBDDEF36DE58DF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":346515,"discussion_content":"这分析真厉害！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611977614,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1950802,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/c4/52/74d2ff15.jpg","nickname":"摩根","note":"","ucode":"628B4F3B79FE7D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":233789,"discussion_content":"bar.printName的函数执行上下文会创建和销毁2遍吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586945360,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1624821,"avatar":"https://static001.geekbang.org/account/avatar/00/18/ca/f5/3f95bf91.jpg","nickname":"tron","note":"","ucode":"F94DB2BE804998","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1950802,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/c4/52/74d2ff15.jpg","nickname":"摩根","note":"","ucode":"628B4F3B79FE7D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371216,"discussion_content":"上面代码用不同方式调用了两次，每次调用都会有一次上下文创建和销毁的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619686411,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":233789,"ip_address":""},"score":371216,"extra":""}]},{"author":{"id":1283791,"avatar":"https://static001.geekbang.org/account/avatar/00/13/96/cf/f94ec6b7.jpg","nickname":"CROssING","note":"","ucode":"2AE0748F3E189F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7919,"discussion_content":"outer的语法环境是指变量环境吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567730576,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1541552,"avatar":"https://static001.geekbang.org/account/avatar/00/17/85/b0/496ae224.jpg","nickname":"Boogie 捷","note":"","ucode":"9F54EF69CC0106","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1283791,"avatar":"https://static001.geekbang.org/account/avatar/00/13/96/cf/f94ec6b7.jpg","nickname":"CROssING","note":"","ucode":"2AE0748F3E189F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":21934,"discussion_content":"我也觉得这儿应该是变量环境","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1569554533,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":7919,"ip_address":""},"score":21934,"extra":""},{"author":{"id":1374445,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f8/ed/60fb8fba.jpg","nickname":"陈小渣👻","note":"","ucode":"6B968B06C76C63","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1283791,"avatar":"https://static001.geekbang.org/account/avatar/00/13/96/cf/f94ec6b7.jpg","nickname":"CROssING","note":"","ucode":"2AE0748F3E189F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277091,"discussion_content":"是let 和 const 就找 词法环境，找不到就去变量环境。是var 就找变量环境","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1590997207,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":7919,"ip_address":""},"score":277091,"extra":""}]},{"author":{"id":1375756,"avatar":"https://static001.geekbang.org/account/avatar/00/14/fe/0c/f9cb1af4.jpg","nickname":"李艺轩","note":"","ucode":"EF387413327B1D","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7615,"discussion_content":"最后bar.printName的词法环境难道不是myName = &#34;极客帮&#34;和_printName吗，变量环境是foo","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567587188,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128383,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1566876730,"is_pvip":false,"replies":[{"id":"47715","content":"分析的没问题","user_name":"作者回复","comment_id":128383,"uid":"1141464","ip_address":"","utype":1,"ctime":1566917671,"user_name_real":"李兵"}],"discussion_count":12,"race_medal":0,"score":"353754195002","product_id":100033601,"comment_content":"思考题：<br>这道题其实是个障眼法，只需要确定好函数调用栈就可以很轻松的解答，调用了foo()后，返回的是bar.printName，后续就跟foo函数没有关系了，所以结果就是调用了两次bar.printName()，根据词法作用域，结果都是“极客邦”，也不会形成闭包。<br>闭包还可以这样理解：当函数嵌套时，内层函数引用了外层函数作用域下的变量，并且内层函数在全局作用域下可访问时，就形成了闭包。","like_count":82,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464931,"discussion_content":"分析的没问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566917671,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2161870,"avatar":"","nickname":"Geek_941fee","note":"","ucode":"428660D38C4C2B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":313137,"discussion_content":"其实红宝书把闭包讲的很清楚，就是同时有两个函数的作用域链指针（外函数和内函数）指向了同一个变量环境对象，所以无论你删除其中任何一个指针，该变量环境对象都无法被垃圾回收（无论是标记清楚还是计数法）清楚，所以保存在了内存中。所以就有了所谓的”闭包“。","likes_number":14,"is_delete":false,"is_hidden":false,"ctime":1602951402,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1546786,"avatar":"https://static001.geekbang.org/account/avatar/00/17/9a/22/1be230b7.jpg","nickname":"神经蛙在学习","note":"","ucode":"A448FCCB8A10C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2161870,"avatar":"","nickname":"Geek_941fee","note":"","ucode":"428660D38C4C2B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379324,"discussion_content":"解惑了啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623830144,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":313137,"ip_address":""},"score":379324,"extra":""}]},{"author":{"id":1608695,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJib1lsydmKBBqtOg3An1XdPh0kUzWrStVsU9HicVBQVibs5T6icdqACXR9GJAMj9pV9qGrHuVGIzm2lA/132","nickname":"shanzi","note":"","ucode":"013D91BC16382F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":238003,"discussion_content":"&#34;当函数嵌套时，内层函数引用了外层函数作用域下的变量，并且内层函数在全局作用域下可访问时，就形成了闭包&#34;   个人觉得不应该是全局作用域 而是在父级作用域之外的地方","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1587204511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":3091674,"avatar":"https://static001.geekbang.org/account/avatar/00/2f/2c/da/15a93b34.jpg","nickname":"LittlerXu","note":"","ucode":"084BCC23F6A003","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1608695,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJib1lsydmKBBqtOg3An1XdPh0kUzWrStVsU9HicVBQVibs5T6icdqACXR9GJAMj9pV9qGrHuVGIzm2lA/132","nickname":"shanzi","note":"","ucode":"013D91BC16382F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582979,"discussion_content":"我也这样认为，我觉得闭包形成的原因是内层函数引用外层函数的变量时外层函数的执行上下文已经出栈，所以只要是在外层函数以外的区域能够访问内层函数就会产生闭包","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659857699,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":238003,"ip_address":"陕西"},"score":582979,"extra":""}]},{"author":{"id":1337970,"avatar":"https://static001.geekbang.org/account/avatar/00/14/6a/72/36c82f74.jpg","nickname":"踏凌霄","note":"","ucode":"79459F6CCF1B1D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":39437,"discussion_content":"我学习时了解到在函数都有闭包，无论是否有函数的嵌套关系。对闭包的一个理解是在函数执行时，能够访问函数在定义时能够访问到的变量。如有偏差，还请大家指正。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1571924512,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1039904,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/de/20/03130a39.jpg","nickname":"沧海一声笑","note":"","ucode":"5297F2F4736B63","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1337970,"avatar":"https://static001.geekbang.org/account/avatar/00/14/6a/72/36c82f74.jpg","nickname":"踏凌霄","note":"","ucode":"79459F6CCF1B1D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":201630,"discussion_content":"我学习时也是这样的描述， 在MDN 上 和 javascript 忍者秘笈上都如如此描述。 不知道为什么另外一种说法是两个函数嵌套。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1583816729,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":39437,"ip_address":""},"score":201630,"extra":""},{"author":{"id":2524182,"avatar":"https://static001.geekbang.org/account/avatar/00/26/84/16/e4df1c0b.jpg","nickname":"hin","note":"","ucode":"368DBF2A797D88","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1337970,"avatar":"https://static001.geekbang.org/account/avatar/00/14/6a/72/36c82f74.jpg","nickname":"踏凌霄","note":"","ucode":"79459F6CCF1B1D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380508,"discussion_content":"之前忘记是在MDN还是哪里看到闭包的定义是：可以访问自由变量的函数就是闭包，而自由变量指的是该变量既不属于当前函数作用域定义的变量，也不是当前函数参数。而根据作者这里说的词法作用域，js中的闭包都是这个词法作用域作怪，因为函数要访问到它定义时所能访问的变量，所以函数要一直保持着对外部变量的引用。表达不太好，纯粹个人理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624537084,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":39437,"ip_address":""},"score":380508,"extra":""}]},{"author":{"id":1623282,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erMrXia5kb1AXUJoiccmIQxSQ7ib5SkibsQqd9FZInQcwYeNbZXp7CCtMibtg0RLHoza1NVo8A5M3uIluA/132","nickname":"Geek_8476da","note":"","ucode":"9AE358E5F160AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588226,"discussion_content":"大佬","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663598852,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1623282,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erMrXia5kb1AXUJoiccmIQxSQ7ib5SkibsQqd9FZInQcwYeNbZXp7CCtMibtg0RLHoza1NVo8A5M3uIluA/132","nickname":"Geek_8476da","note":"","ucode":"9AE358E5F160AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588225,"discussion_content":"我以为调用全局作用域里的变量也会产生闭包，原来不会","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663598803,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2159152,"avatar":"https://static001.geekbang.org/account/avatar/00/20/f2/30/5b677e8d.jpg","nickname":"Yvan","note":"","ucode":"DA5BB215E65ED3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538782,"discussion_content":"我被这障眼法迷了眼😭","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639519548,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1138560,"avatar":"https://static001.geekbang.org/account/avatar/00/11/5f/80/51269d88.jpg","nickname":"Hurry","note":"","ucode":"12FEE2A50CC667","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6402,"discussion_content":"厉害，正解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566885773,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128174,"user_name":"pyhhou","can_delete":false,"product_type":"c1","uid":1256496,"ip_address":"","ucode":"31EF8D50CF91A5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibZVAmmdAibBeVpUjzwId8ibgRzNk7fkuR5pgVicB5mFSjjmt2eNadlykVLKCyGA0GxGffbhqLsHnhDRgyzxcKUhjg/132","comment_is_top":false,"comment_ctime":1566844798,"is_pvip":false,"replies":[{"id":"47727","content":"分析的没问题 很赞","user_name":"作者回复","comment_id":128174,"uid":"1141464","ip_address":"","utype":1,"ctime":1566918363,"user_name_real":"李兵"}],"discussion_count":2,"race_medal":0,"score":"276444751742","product_id":100033601,"comment_content":"思考题，最后输出的都是 “极客邦”，这里不会产生函数闭包，解释如下：<br><br>1. bar 不是一个函数，因此 bar 当中的 printName 其实是一个全局声明的函数，bar 当中的 myName 只是对象的一个属性，也和 printName 没有联系，如果要产生联系，需要使用 this 关键字，表示这里的 myName 是对象的一个属性，不然的话，printName 会通过词法作用域链去到其声明的环境，也就是全局，去找 myName<br><br>2. foo 函数返回的 printName 是全局声明的函数，因此和 foo 当中定义的变量也没有任何联系，这个时候 foo 函数返回 printName 并不会产生闭包","like_count":64,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464823,"discussion_content":"分析的没问题 很赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566918363,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2224365,"avatar":"https://static001.geekbang.org/account/avatar/00/21/f0/ed/89bf1510.jpg","nickname":"时光搁浅","note":"","ucode":"E504969E2A36F2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392302,"discussion_content":" bar 当中的 printName 为什么是一个全局声明的函数？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1630938310,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":true,"id":130970,"user_name":"李艺轩","can_delete":false,"product_type":"c1","uid":1375756,"ip_address":"","ucode":"EF387413327B1D","user_header":"https://static001.geekbang.org/account/avatar/00/14/fe/0c/f9cb1af4.jpg","comment_is_top":false,"comment_ctime":1567585850,"is_pvip":true,"replies":[{"id":"49186","content":"很高兴终于有人提这个问题了，我的观点是不要太纠结于概念，因为如何定义闭包不会影响到实际的使用，了解闭包是如何产生的，这才是本质的东西。","user_name":"作者回复","comment_id":130970,"uid":"1141464","ip_address":"","utype":1,"ctime":1567599072,"user_name_real":"李兵"}],"discussion_count":7,"race_medal":0,"score":"203431048762","product_id":100033601,"comment_content":"关于闭包的概念：<br>老师提出的概念：内部函数引用外部函数的变量的集合。<br>高级程序设计中的概念：闭包是指有权访问另一个函数作用域中的变量的函数。<br>MDN上的概念：闭包是函数和声明该函数的词法环境的组合。<br>所以到底哪个是对的。。MDN = 老师 + 高程","like_count":47,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466220,"discussion_content":"很高兴终于有人提这个问题了，我的观点是不要太纠结于概念，因为如何定义闭包不会影响到实际的使用，了解闭包是如何产生的，这才是本质的东西。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1567599072,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1416755,"avatar":"https://static001.geekbang.org/account/avatar/00/15/9e/33/48649a96.jpg","nickname":"申朝","note":"","ucode":"F120EF0EA9885B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281874,"discussion_content":"有广义上的闭包和狭义上的闭包，按狭义的定义，这里没有闭包，确实v8引擎也没有形成闭包，但是按广义的概念来说，这个也是个闭包，只不过闭包正好是全局作用域而已，全局作用域在运行时不会被回收，其实平时理解的话不用过于纠结，只要明白闭包如何形成、如何避免不必要的内存泄漏就行了","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1591837099,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1344810,"avatar":"https://static001.geekbang.org/account/avatar/00/14/85/2a/376dd985.jpg","nickname":"uccs","note":"","ucode":"93DF5B81AB170E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302118,"discussion_content":"在 ES6 之前，使用闭包的目的是为了隐藏变量，怎样才能隐藏变量呢？就是用函数套函数的方式，利用外部不可访问函数作用域，从而达到隐藏变量的目的。从这个角度看，如果变量定义在全局，你就达不到隐藏变量的效果，这也就是很多人说的要函数套函数","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1598794716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1039904,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/de/20/03130a39.jpg","nickname":"沧海一声笑","note":"","ucode":"5297F2F4736B63","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":220477,"discussion_content":"嗯嗯 我也觉得 以前研究闭包也是对概念很痛苦 各有说法 但是老师说出了本质，茅塞顿开啊","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1585882282,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1167767,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d1/97/3abdd9cd.jpg","nickname":"stanny","note":"","ucode":"DD2BB91548A881","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371850,"discussion_content":"结合浏览器控制台 Scope 的结构，感觉还是老师说的最能理解","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1620019992,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1905024,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/11/80/73ff198e.jpg","nickname":"VictorLee","note":"","ucode":"FF7C211DA853CE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368521,"discussion_content":"个人倾向于mdn的定义","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1618740874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2510131,"avatar":"https://static001.geekbang.org/account/avatar/00/26/4d/33/b33daca6.jpg","nickname":"enne","note":"","ucode":"A4D21496F16206","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":357753,"discussion_content":"JavaScript 引擎会沿着“当前执行上下文–>foo 函数闭包–> 全局执行上下文”的顺序来查找 myName 变量\n\n我觉得这是最好的回答。闭包就是作用域链中的一环。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1615861231,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":true,"id":128424,"user_name":"李懂","can_delete":false,"product_type":"c1","uid":1330436,"ip_address":"","ucode":"539E6639042C88","user_header":"https://static001.geekbang.org/account/avatar/00/14/4d/04/5e0d3713.jpg","comment_is_top":false,"comment_ctime":1566878414,"is_pvip":false,"replies":[{"id":"47713","content":"第一个我的疏忽，图明天改正过来。<br><br>第二个问题：当闭包函数执行结束之后，执行上下文都从栈中弹出来，只不过被内部函数引用的变量不会被垃圾回收，这块内容要到讲v8 GC那节来讲了。<br><br>第三个没明白意思<br><br>第四个是 只包含用到的变量，这是因为在返回内部函数时，JS引擎会提前分析闭包内部函数的词法环境，有引用的外部变量都不会被gc回收。","user_name":"作者回复","comment_id":128424,"uid":"1141464","ip_address":"","utype":1,"ctime":1566917633,"user_name_real":"李兵"}],"discussion_count":5,"race_medal":0,"score":"57401453262","product_id":100033601,"comment_content":"本来对这篇文章充满期待,看完后还是有很多疑惑<br>又翻看了一下小红书<br>有以下疑问:<br><br>1. 最后的分析图是不是有问题,全局上下文中变量环境怎么会有myName<br>foo上下文中的innerBar是对象,用了函数?<br><br>2.闭包是存在调用栈里的,现在的模块化存在大量闭包,那不是调用栈底部存在大量闭包<br>很容易栈溢出吧<br>3.看了下chrome中函数对应的[[Scopes]]是个List集合包含了闭包模块,这个是不是文章中的outer<br><br>4.闭包是包含了整个变量环境和词法环境,还是只是包含用到的变量","like_count":13,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464941,"discussion_content":"第一个我的疏忽，图明天改正过来。\n\n第二个问题：当闭包函数执行结束之后，执行上下文都从栈中弹出来，只不过被内部函数引用的变量不会被垃圾回收，这块内容要到讲v8 GC那节来讲了。\n\n第三个没明白意思\n\n第四个是 只包含用到的变量，这是因为在返回内部函数时，JS引擎会提前分析闭包内部函数的词法环境，有引用的外部变量都不会被gc回收。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566917633,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1159974,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b3/26/cc28a05a.jpg","nickname":"悬炫","note":"","ucode":"28BA6B2169256B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6531,"discussion_content":"第三点：outer就是上级作用域，它永远指向定义它的执行上下文，上级作用域是在定义的时候就已经确定了的，和如何调用无关\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1566958256,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3044528,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/QYcblHAcd1UFu5WfqibX2J0EP50TCUxDensKHn7FulcFphBHnORs0vn5qPHXOvTeHRyb9Omt8WMZBvREZpPuQhg/132","nickname":"Geek_81588f","note":"","ucode":"DC5B90B6E0818D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586913,"discussion_content":"想问一下，闭包到底是存在堆中还是栈中啊，为啥有些参考资料说存在堆中，上面说存在调用栈中啊，求解答，感谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662607163,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"湖北"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3012057,"avatar":"","nickname":"Geek_106ed1","note":"","ucode":"280DC4DC8820ED","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573532,"discussion_content":"第三点个人理解，函数中的[[Scopes]]是一个属性，在函数定义的时候就会将所有外部上下文中的变量环境保存下来，在编译阶段，创建了函数上下文之后，会将[[scope]]中保存的外部上下文变量环境赋值给outer","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653478277,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1950802,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/c4/52/74d2ff15.jpg","nickname":"摩根","note":"","ucode":"628B4F3B79FE7D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":233802,"discussion_content":"老师这里说的第四点：JS引擎会提前分析闭包内部函数的词法环境，这个词法环境表述是不是不准确？应该是指可执行代码中的变量吧\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586945925,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":180201,"user_name":"常金","can_delete":false,"product_type":"c1","uid":1876406,"ip_address":"","ucode":"6868495B5F8E1B","user_header":"https://static001.geekbang.org/account/avatar/00/1c/a1/b6/7fa10b2a.jpg","comment_is_top":false,"comment_ctime":1582208672,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"53121816224","product_id":100033601,"comment_content":"只需记住一句话，作用域是由代码中函数声明的位置来决定的","like_count":12,"discussions":[{"author":{"id":2349136,"avatar":"https://static001.geekbang.org/account/avatar/00/23/d8/50/151ef55a.jpg","nickname":"Zane","note":"","ucode":"4D51D7EAD62372","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376923,"discussion_content":"也就是词法作用域","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622426971,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128295,"user_name":"早起不吃虫","can_delete":false,"product_type":"c1","uid":1369757,"ip_address":"","ucode":"13CD3B5E1F9435","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/7WkTI1IicbKvsPJng5vQh5qlrf1smbfl2zb7icHZfzcAk1k4lr8w8IDEAdrqq1NHW5XZMPXiaa1h7Jn1LGOWOCkIA/132","comment_is_top":false,"comment_ctime":1566869415,"is_pvip":false,"replies":[{"id":"47718","content":"我争取把每篇内容讲的通俗易懂，不过这相当有挑战。","user_name":"作者回复","comment_id":128295,"uid":"1141464","ip_address":"","utype":1,"ctime":1566917834,"user_name_real":"李兵"}],"discussion_count":1,"race_medal":0,"score":"40221575079","product_id":100033601,"comment_content":"作为一名前端虽然这些都是早已熟悉的，但是老师讲的确实是好呀，深入浅出，逻辑清晰，期待后面的课程！","like_count":9,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464883,"discussion_content":"我争取把每篇内容讲的通俗易懂，不过这相当有挑战。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566917834,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":288245,"user_name":"Morty","can_delete":false,"product_type":"c1","uid":1026658,"ip_address":"","ucode":"C2E532741F99E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/aa/62/78b45741.jpg","comment_is_top":false,"comment_ctime":1618378444,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"35978116812","product_id":100033601,"comment_content":"根据标准，outer 属于词法环境：https:&#47;&#47;262.ecma-international.org&#47;11.0&#47;#sec-lexical-environments<br><br>A Lexical Environment consists of an Environment Record and a possibly null reference to an outer Lexical Environment.","like_count":8},{"had_liked":false,"id":128159,"user_name":"hzj.","can_delete":false,"product_type":"c1","uid":1365557,"ip_address":"","ucode":"ACE09C43A46EEF","user_header":"https://static001.geekbang.org/account/avatar/00/14/d6/35/9b213d2f.jpg","comment_is_top":false,"comment_ctime":1566838391,"is_pvip":false,"replies":[{"id":"47728","content":"分析的没问题，你把闭包的概念外延扩大也没问题，分析思路很赞","user_name":"作者回复","comment_id":128159,"uid":"1141464","ip_address":"","utype":1,"ctime":1566918513,"user_name_real":"李兵"}],"discussion_count":3,"race_medal":0,"score":"35926576759","product_id":100033601,"comment_content":"首先两个函数都会打印 : 极客邦<br>社区中对闭包的定义: 函数执行产生私有作用域, 函数内部返回一个调用的函数, 由于外部会拿到内部函数的返回值, 所以内部函数不会被垃圾回收, 这个私有作用域就是闭包.<br>闭包的作用有两点: 1. 保护私有变量      2. 维持内部私有变量的状态<br>但是在 sicp (计算机程序的构造与解释) 中认为:   只要函数调用, 那么就会产生闭包.<br>所以, 我认为是会产生闭包的<br>_printName() 输出 极客邦, 因为 _printName拿到了bar.printName, 打印上面的 myName即可.<br>bar.printName() 输出 极客邦, 因为会直接打印全局的 myName.<br>最后, 只有在 foo() 函数中有 log, 才会输出 &quot;极客时间&quot;, 因为 这个值是在 foo 函数的私有作用域中的!!!","like_count":8,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464817,"discussion_content":"分析的没问题，你把闭包的概念外延扩大也没问题，分析思路很赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566918513,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1365557,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d6/35/9b213d2f.jpg","nickname":"hzj.","note":"","ucode":"ACE09C43A46EEF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6496,"discussion_content":"老师讲的非常好，可以看出老师深厚的功底，只是js这门语言几天就被创造出来了，又被管理层要求 &#34;长得像java&#34;, 否则我觉得js一定会成为非常优秀的设计语言，就像c#那样~","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1566921537,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1027182,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ac/6e/2a272fce.jpg","nickname":"风语菡","note":"","ucode":"E96C91E47FEF77","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":278300,"discussion_content":"我在printName那打了断点，调试了下程序，过程中没有产生闭包","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591171275,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146037,"user_name":"gigot","can_delete":false,"product_type":"c1","uid":1355699,"ip_address":"","ucode":"FCAA7BCEC157CC","user_header":"https://static001.geekbang.org/account/avatar/00/14/af/b3/3486dea2.jpg","comment_is_top":false,"comment_ctime":1572422434,"is_pvip":false,"discussion_count":15,"race_medal":0,"score":"27342226210","product_id":100033601,"comment_content":"var a=0;<br>if(true){<br> a = 1;<br> function a(){};<br> a=21;<br> console.log(a)<br>}<br>console.log(a)<br>老师，在 chrome 中，这里的 if 块语句有 a 函数，形成块级作用域了，所以函数 a 的声明被提升到 a = 1 之前；但是接下执行 function a() {} 的时候，全局的 a 的值却改变成 1 了， 导致最终输出为 21 和 1。想问下老师，这里面全局 a 是怎么改变的","like_count":6,"discussions":[{"author":{"id":1910075,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/25/3b/a971fc8e.jpg","nickname":"阿感","note":"","ucode":"7BCB7E44A832D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":248981,"discussion_content":"var a = 0;\nif(true){\n    console.log(a,window.a);// 函数提升，是块级作用域，输出 function a 和 0\n    a = 1;  // 取作用域最近的块级作用域的 function a ,且被重置为 1了，本质又是一个 变量的赋值。\n    console.log(a,window.a);// a 是指向块级作用域的 a, 输出 1 和 0 \n    function a(){} // 函数的声明，将执行函数的变量的定义同步到函数级的作用域。\n    console.log(a,window.a);// 输出 1 和 1\n    a = 21; // 仍然是函数定义块级作用域的 a ,重置为 21\n    console.log(a,window.a); // 输出为函数提升的块级作用域的 a, 输出 21，1\n    console.log(&#34;里面&#34;,a);\n}\nconsole.log(&#34;外部&#34;,a);","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1587905555,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1910075,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/25/3b/a971fc8e.jpg","nickname":"阿感","note":"","ucode":"7BCB7E44A832D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249102,"discussion_content":"这几篇看看，至少了解大概了。简单来说块级作用域里函数定义出现后，会把当前在块里的映射同步到全局里去，如果后面又有同名函数，那么又映射修改……\n{\n  function foo(){}\n  foo=1;\n  function foo(){}\n  foo=2;\n}\nconsole.log(foo); //1\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1587910092,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1910075,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/25/3b/a971fc8e.jpg","nickname":"阿感","note":"","ucode":"7BCB7E44A832D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249091,"discussion_content":"https://juejin.im/post/5d90ae9ef265da5b646480a0","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1587909967,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1910075,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/25/3b/a971fc8e.jpg","nickname":"阿感","note":"","ucode":"7BCB7E44A832D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249090,"discussion_content":"https://juejin.im/post/5e9b3cc851882573834edd7d","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1587909964,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1910075,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/25/3b/a971fc8e.jpg","nickname":"阿感","note":"","ucode":"7BCB7E44A832D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":248721,"discussion_content":"https://mp.weixin.qq.com/s/YQEBZo1pdy-5B1Jz8cvWmw 前端大佬的公众号解释","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1587891798,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1910075,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/25/3b/a971fc8e.jpg","nickname":"阿感","note":"","ucode":"7BCB7E44A832D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":248716,"discussion_content":"https://zhuanlan.zhihu.com/p/122932123 来自知乎。。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1587891049,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2090039,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/e4/37/8b79657f.jpg","nickname":"废柴。","note":"","ucode":"CB14F28082DE53","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326057,"discussion_content":"这题下面楼有人问过了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605509307,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1030373,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/e5/4e1463de.jpg","nickname":"SSL","note":"","ucode":"E007E54FABBD4B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299579,"discussion_content":"IE 和 Chrome 还不一样......","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597739135,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1910075,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/25/3b/a971fc8e.jpg","nickname":"阿感","note":"","ucode":"7BCB7E44A832D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249106,"discussion_content":"{  function foo(){}  foo=1;  function foo(){}}console.log(foo);","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587910157,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1910075,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/25/3b/a971fc8e.jpg","nickname":"阿感","note":"","ucode":"7BCB7E44A832D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249105,"discussion_content":"{  function foo(){}  foo=1;}console.log(foo);","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587910147,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1910075,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/25/3b/a971fc8e.jpg","nickname":"阿感","note":"","ucode":"7BCB7E44A832D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":248715,"discussion_content":"代码等价于如下\n\nvar a = 0;\nif (true) {\n    a = 1;\n    let a1 = function() {return &#39;123&#39;}\n    a1 = 21;\n    console.log(a1);  //21\n}\nconsole.log(a);  // 1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587891034,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1374421,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f8/d5/fd04fcbc.jpg","nickname":"Kite","note":"","ucode":"9DACE8E0EC84A6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":245757,"discussion_content":"想艾特老师，艾特不了。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587697507,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1201350,"avatar":"https://static001.geekbang.org/account/avatar/00/12/54/c6/c2481790.jpg","nickname":"lisiur","note":"","ucode":"CEB2DBCE29CAA7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":240990,"discussion_content":"插眼，有解答记得@我 多谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587392702,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1231133,"avatar":"https://static001.geekbang.org/account/avatar/00/12/c9/1d/c7586cfc.jpg","nickname":"Zkerhcy","note":"","ucode":"43A883F6FB6070","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":156921,"discussion_content":"老师什么时候解答下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580401707,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1309455,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM4QOQtS9EkriaJb24JjS8TSvpq7vq1r07bZoTlnfNAIa2jbsIgNKgyecr7XgoKBZ9daJkk7fzvnwxg/132","nickname":"Ccc","note":"","ucode":"5A588B3EE9BF98","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":153140,"discussion_content":"请问你现在理解了是为什么了么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580030510,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":true,"id":130986,"user_name":"oc7","can_delete":false,"product_type":"c1","uid":1436976,"ip_address":"","ucode":"05067ED84F1493","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJibVeub5HnlS9HgLdrDSnQma6VINyAyf1bTOhKh4MGQkMydoCVs7ofbicePRomxjDM873A56fqx97w/132","comment_is_top":false,"comment_ctime":1567590068,"is_pvip":false,"replies":[{"id":"49191","content":"这是预分析过程，主要是查看内部函数是否引用了外部作用域变量，用来判断是否要创建闭包，所以预分析过程并不是编译过程！","user_name":"作者回复","comment_id":130986,"uid":"1141464","ip_address":"","utype":1,"ctime":1567600499,"user_name_real":"李兵"}],"discussion_count":1,"race_medal":0,"score":"27337393844","product_id":100033601,"comment_content":"function foo() {<br>    var myName = &quot; 极客时间 &quot;<br>    let test1 = 1<br>    const test2 = 2<br>    var innerBar = {<br>        getName:function(){<br>            console.log(test1)<br>            return myName<br>        },<br>        setName:function(newName){<br>            myName = newName<br>        }<br>    }<br>    return innerBar<br>}<br>var bar = foo()<br>bar.setName(&quot; 极客邦 &quot;)<br>bar.getName()<br>console.log(bar.getName())<br><br>有个问题没搞明白<br>在return innerBar的时候 bar.setName(&quot; 极客邦 &quot;)和bar.getName()这两个函数还没有执行 为什么会执行词法作用域的分析 之前不是说只有函数调用时才创建这个函数的执行作用域和可执行代码","like_count":6,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466229,"discussion_content":"这是预分析过程，主要是查看内部函数是否引用了外部作用域变量，用来判断是否要创建闭包，所以预分析过程并不是编译过程！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567600499,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129174,"user_name":"忘忧草的约定","can_delete":false,"product_type":"c1","uid":1114753,"ip_address":"","ucode":"F99D2F5D179B2A","user_header":"https://static001.geekbang.org/account/avatar/00/11/02/81/489e1cd4.jpg","comment_is_top":false,"comment_ctime":1567056883,"is_pvip":false,"replies":[{"id":"48081","content":"是的 编译阶段就确定了","user_name":"作者回复","comment_id":129174,"uid":"1141464","ip_address":"","utype":1,"ctime":1567066853,"user_name_real":"李兵"}],"discussion_count":3,"race_medal":0,"score":"27336860659","product_id":100033601,"comment_content":"老师我想请教一个问题：函数执行上下文是在函数执行前的编译阶段存入执行栈的、那么执行上下文中的outer也是在编译阶段通过分析函数声明的位置来赋值的吗？","like_count":6,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465320,"discussion_content":"是的 编译阶段就确定了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567066853,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1938247,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/93/47/ef2c3c4e.jpg","nickname":"何江涛","note":"","ucode":"844470733623BF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587708,"discussion_content":"老师说的编译应该是预编译，可以理解为预解析的时候。    运行a函数，a进行预解析时，a的内部函数的outer就确定了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663232132,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江西"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1930698,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/75/ca/4c127da3.jpg","nickname":"Emma","note":"","ucode":"C2D31142AF7288","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":212720,"discussion_content":"老师是不是在生成ast和作用域那一块确定了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585011136,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":139983,"user_name":"Andy Jiang","can_delete":false,"product_type":"c1","uid":1227279,"ip_address":"","ucode":"436609A0A445CF","user_header":"https://static001.geekbang.org/account/avatar/00/12/ba/0f/9789c2cc.jpg","comment_is_top":false,"comment_ctime":1570779930,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18750649114","product_id":100033601,"comment_content":"Local–&gt;Closure(foo)–&gt;Global，是不是表示setName执行时的执行上下文中的outer是指向闭包的？闭包中是否有outer指向全局执行上下文？","like_count":4},{"had_liked":true,"id":128509,"user_name":"ChaoZzz","can_delete":false,"product_type":"c1","uid":1007680,"ip_address":"","ucode":"E338FEF55D9BAA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/60/40/e6d4c1b4.jpg","comment_is_top":false,"comment_ctime":1566891529,"is_pvip":false,"replies":[{"id":"47707","content":"分析没问题，不过es6已经不用ao了，这块知识可以更新下了","user_name":"作者回复","comment_id":128509,"uid":"1141464","ip_address":"","utype":1,"ctime":1566917150,"user_name_real":"李兵"}],"discussion_count":1,"race_medal":0,"score":"18746760713","product_id":100033601,"comment_content":"不会产生闭包，函数在被创建的时候它的作用域链就已经确定了，所以不论是直接调用bar对象中的printName方法还是在foo函数中返回的printName方法他们的作用域链都是[自身的AO, 全局作用域]，自身的AO中没有myName就到全局中找，找到了全局作用域中的myName = &#39; 极客邦 &#39;，所以两次打印都是“极客邦”啦~","like_count":4,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464980,"discussion_content":"分析没问题，不过es6已经不用ao了，这块知识可以更新下了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566917150,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":134218,"user_name":"YBB","can_delete":false,"product_type":"c1","uid":1585967,"ip_address":"","ucode":"1507DBFE008715","user_header":"https://static001.geekbang.org/account/avatar/00/18/33/2f/84f7d587.jpg","comment_is_top":false,"comment_ctime":1568777020,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14453678908","product_id":100033601,"comment_content":"有几个问题，还想请老师解惑：<br>1. 返回的内部函数在运行时，由于其外部函数的执行上下文已经出栈，其执行上下文中的outer指向何处？<br>2. 如果函数嵌套产生多个闭包，是否也是类似于作用域链一样的机制，提供内部函数按序在闭包中查找变量？","like_count":3},{"had_liked":false,"id":128203,"user_name":"Marvin","can_delete":false,"product_type":"c1","uid":1096381,"ip_address":"","ucode":"443BD8B20285A9","user_header":"https://static001.geekbang.org/account/avatar/00/10/ba/bd/6f2f078c.jpg","comment_is_top":false,"comment_ctime":1566862531,"is_pvip":false,"replies":[{"id":"47722","content":"<br>这个问题我在前面回答过一次了，重新贴下：<br><br>ES规定函数只不能在块级作用域中声明，<br>function foo(){<br>    if(true){<br>        console.log(&amp;#39;hello world&amp;#39;);<br>        function g(){ return true; }<br>    }<br>}<br>也就是说，上面这行代码执行会报错，但是个大浏览器都没有遵守这个标准。<br><br>接下来到了ES6了，ES6明确支持块级作用域，ES6规定块级作用域内部声明的函数，和通过let声明变量的行为类似。<br><br>规定的是理想的，但是还要照顾实现，要是完全按照let的方式来修订，会影响到以前老的代码，所以为了向下兼容，个大浏览器基本是按照下面的方式来实现的：<br><br>function foo(){<br>    if(true){<br>        console.log(&amp;#39;hello world&amp;#39;);<br>        var g = function(){return true;} <br>    }<br>}<br><br>这就解释了你的疑问，不过还是不建议在块级作用域中定义函数，很多时候，简单的才是最好的。","user_name":"作者回复","comment_id":128203,"uid":"1141464","ip_address":"","utype":1,"ctime":1566918156,"user_name_real":"李兵"}],"discussion_count":4,"race_medal":0,"score":"14451764419","product_id":100033601,"comment_content":"请问<br>console.log(a)<br>{<br>  function a(){}<br>}<br>为何会log一个undefined？目测function的变量提升会受到块的影响，这是标准浏览器的特性造成的，还是IE6时代就是这样呢？","like_count":3,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464841,"discussion_content":"\n这个问题我在前面回答过一次了，重新贴下：\n\nES规定函数只不能在块级作用域中声明，\nfunction foo(){\n    if(true){\n        console.log(&amp;amp;#39;hello world&amp;amp;#39;);\n        function g(){ return true; }\n    }\n}\n也就是说，上面这行代码执行会报错，但是个大浏览器都没有遵守这个标准。\n\n接下来到了ES6了，ES6明确支持块级作用域，ES6规定块级作用域内部声明的函数，和通过let声明变量的行为类似。\n\n规定的是理想的，但是还要照顾实现，要是完全按照let的方式来修订，会影响到以前老的代码，所以为了向下兼容，个大浏览器基本是按照下面的方式来实现的：\n\nfunction foo(){\n    if(true){\n        console.log(&amp;amp;#39;hello world&amp;amp;#39;);\n        var g = function(){return true;} \n    }\n}\n\n这就解释了你的疑问，不过还是不建议在块级作用域中定义函数，很多时候，简单的才是最好的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566918156,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1096381,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ba/bd/6f2f078c.jpg","nickname":"Marvin","note":"","ucode":"443BD8B20285A9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6505,"discussion_content":"另外，根据实验，chrome的for块里声明function确实会报错，if/while/dowhile和独立的blockstatement都不报错。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1566948105,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1950802,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/c4/52/74d2ff15.jpg","nickname":"摩根","note":"","ucode":"628B4F3B79FE7D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":235636,"discussion_content":"表示还是没太明白这个解释","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587046386,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1096381,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ba/bd/6f2f078c.jpg","nickname":"Marvin","note":"","ucode":"443BD8B20285A9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6502,"discussion_content":"谢谢您的耐心解答","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566947715,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":300612,"user_name":"Geek_21be37","can_delete":false,"product_type":"c1","uid":2680454,"ip_address":"","ucode":"0C761733E11912","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJiaWQI7tUfDVmScfCgZIur1B511eHdNsQyjTzQucAOJZrnJfYrEyA1dGOcnZUoqYRzwsbNjlftGhQ/132","comment_is_top":false,"comment_ctime":1625247223,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10215181815","product_id":100033601,"comment_content":"我觉得讲的有问题。闭包内部函数词法环境里的外部引用，是在外部函数执行时候创建的。<br>而不是js全局编译时候产生","like_count":2,"discussions":[{"author":{"id":1478157,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/8H9JoTQj0gmhgUhtozvFoNesW3fv7pow3IibGeLhakDz5aWlicA3UOjqSc5jWw9C0ibgFIemlK6DkrYUe9Sibcl9Vg/132","nickname":"🏴‍☠️","note":"","ucode":"E62C53E781AF81","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590085,"discussion_content":"编译外部函数时，会把外部函数执行上下文保存在内部函数对象的scope属性上，编译完外部函数，紧接着执行，执行过程中赋值语句会填充上下文，然后返回内部函数，当调用内部函数时，编译阶段会构建内部函数上下文，形成内部函数上下文--外部函数上下文--全局上下文链","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665515365,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"福建"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159782,"user_name":"Geek_East","can_delete":false,"product_type":"c1","uid":1589947,"ip_address":"","ucode":"A1A7CBF9B8FB2D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqXKSvfaeicog2Ficx4W3pNeA1KRLOS7iaFy2uoxCDoYpGkGnP6KPGecKia6Dr3MtCkNGpHxAzmTMd0LA/132","comment_is_top":false,"comment_ctime":1575787484,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10165722076","product_id":100033601,"comment_content":"如果从定义拓展来看，可不可以说闭包是在作用域层面的，因为对象本身并不构成作用域，所以最后留的问题，其实是产生了闭包，不过变量是来自于global scope的。","like_count":2},{"had_liked":false,"id":128218,"user_name":"ytd","can_delete":false,"product_type":"c1","uid":1038790,"ip_address":"","ucode":"C6AEA2D19E447A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d9/c6/8be8664d.jpg","comment_is_top":false,"comment_ctime":1566863864,"is_pvip":false,"replies":[{"id":"47719","content":"嗯，词法作用域是关键","user_name":"作者回复","comment_id":128218,"uid":"1141464","ip_address":"","utype":1,"ctime":1566917901,"user_name_real":"李兵"}],"discussion_count":1,"race_medal":0,"score":"10156798456","product_id":100033601,"comment_content":"不会产生闭包，都打印极客邦。printName函数定义时的执行上下文是全局，所以会在全局词法环境和变量环境下找myName。","like_count":2,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464851,"discussion_content":"嗯，词法作用域是关键","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566917901,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128189,"user_name":"mfist","can_delete":false,"product_type":"c1","uid":1373624,"ip_address":"","ucode":"4F99F422C23FB4","user_header":"https://static001.geekbang.org/account/avatar/00/14/f5/b8/9f165f4b.jpg","comment_is_top":false,"comment_ctime":1566860700,"is_pvip":false,"replies":[{"id":"47724","content":"加油，词法作用域影响到作用域链，这点很关键","user_name":"作者回复","comment_id":128189,"uid":"1141464","ip_address":"","utype":1,"ctime":1566918235,"user_name_real":"李兵"}],"discussion_count":1,"race_medal":0,"score":"10156795292","product_id":100033601,"comment_content":"1. _printName是一个全局函数，执行的话 不会访问到内部变量。输出全局变量的myName 极客邦<br>2. bar.printName 同样输出是极客邦<br><br>随着专栏的推进，发现看一遍文章的时间一直在增长。发现了很多的知识盲区，很多内容只是知道，不知道底层原理。<br><br>今日得到：作用域链如何选择，闭包如何形成","like_count":2,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464834,"discussion_content":"加油，词法作用域影响到作用域链，这点很关键","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566918235,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358303,"user_name":"momo","can_delete":false,"product_type":"c1","uid":3181408,"ip_address":"湖北","ucode":"868DA7C7491C1E","user_header":"https://static001.geekbang.org/account/avatar/00/30/8b/60/00a7d37a.jpg","comment_is_top":false,"comment_ctime":1664182368,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5959149664","product_id":100033601,"comment_content":"这是我见过最烂的闭包定义了，面试时很多人也是这么回答的。<br><br> 我比较喜欢mdn的版本<br><br>闭包定义：在函数『定义时』的『词法环境引用』和函数本身的集合。","like_count":1,"discussions":[{"author":{"id":1478157,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/8H9JoTQj0gmhgUhtozvFoNesW3fv7pow3IibGeLhakDz5aWlicA3UOjqSc5jWw9C0ibgFIemlK6DkrYUe9Sibcl9Vg/132","nickname":"🏴‍☠️","note":"","ucode":"E62C53E781AF81","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590084,"discussion_content":"这个集合必须在调用栈外能访问的到，才算闭包吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665514741,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"福建"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":253933,"user_name":"Geek_941fee","can_delete":false,"product_type":"c1","uid":2161870,"ip_address":"","ucode":"428660D38C4C2B","user_header":"","comment_is_top":false,"comment_ctime":1602951497,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5897918793","product_id":100033601,"comment_content":"其实红宝书把闭包讲的很清楚，就是同时有两个函数的作用域链指针（外函数和内函数）指向了同一个变量环境对象，所以无论你删除其中任何一个指针，该变量环境对象都无法被垃圾回收（无论是标记清楚还是计数法）清楚，所以保存在了内存中。所以就有了所谓的”闭包“。不过老师在这里把词法作用域讲的很清楚，配合红宝书讲的闭包的原理，就能完全理解！","like_count":1},{"had_liked":false,"id":224778,"user_name":"james","can_delete":false,"product_type":"c1","uid":1232771,"ip_address":"","ucode":"AC42035106E5B9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/yyibGRYCArsUNBfCAEAibua09Yb9D5AdO8TkCmXymhAepibqmlz0hzg06ggBLxyvXicnjqFVGr7zYF0rQoZ0aXCBAg/132","comment_is_top":false,"comment_ctime":1591537635,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"5886504931","product_id":100033601,"comment_content":"当函数嵌套时，内层函数引用了外层函数作用域下的变量，并且内层函数在全局作用域下可访问时，就形成了闭包。","like_count":1},{"had_liked":false,"id":221898,"user_name":"卡尔","can_delete":false,"product_type":"c1","uid":1445936,"ip_address":"","ucode":"BD6F76BC18FF8F","user_header":"https://static001.geekbang.org/account/avatar/00/16/10/30/c07d419c.jpg","comment_is_top":false,"comment_ctime":1590629994,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5885597290","product_id":100033601,"comment_content":"老师，如果闭包是&#39;在 JavaScript 中，根据词法作用域的规则，内部函数总是可以访问其外部函数中声明的变量，当通过调用一个外部函数返回一个内部函数后，即使该外部函数已经执行结束了，但是内部函数引用外部函数的变量依然保存在内存中，我们就把这些变量的集合称为闭包。比如外部函数是 foo，那么这些变量的集合就称为 foo 函数的闭包&#39;，那外部函数里，那些没被内部函数访问的变量，是不是就不在闭包里？","like_count":1,"discussions":[{"author":{"id":1177430,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f7/56/b82eeac7.jpg","nickname":"champ可口可乐了","note":"","ucode":"EA75C67E9124C7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277536,"discussion_content":"是的，这些变量会被正常销毁","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1591067390,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149321,"user_name":"dwanYellow","can_delete":false,"product_type":"c1","uid":1550430,"ip_address":"","ucode":"5C990EAB13E4C7","user_header":"https://static001.geekbang.org/account/avatar/00/17/a8/5e/ed38c2fa.jpg","comment_is_top":false,"comment_ctime":1573192371,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868159667","product_id":100033601,"comment_content":"这个专栏真的是太良心了。看了十节收获太大了","like_count":1},{"had_liked":false,"id":143035,"user_name":"Sean","can_delete":false,"product_type":"c1","uid":1272789,"ip_address":"","ucode":"BC0715BF423613","user_header":"https://static001.geekbang.org/account/avatar/00/13/6b/d5/0e4b70a2.jpg","comment_is_top":false,"comment_ctime":1571622864,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5866590160","product_id":100033601,"comment_content":"老师有个地方希望解惑一下，关于arguments是如何与形参变量绑定的（修改其中一方，另一方也会对应的变化）。谢谢","like_count":1},{"had_liked":false,"id":128178,"user_name":"程力辛","can_delete":false,"product_type":"c1","uid":1218940,"ip_address":"","ucode":"E37109F46D5B3B","user_header":"https://static001.geekbang.org/account/avatar/00/12/99/7c/fddb4261.jpg","comment_is_top":false,"comment_ctime":1566852622,"is_pvip":false,"replies":[{"id":"47726","content":"都是静态的，动态绑定的this下节内容讲，this系统和作用域链是两套不一样的系统","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1566918304,"ip_address":"","comment_id":128178,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5861819918","product_id":100033601,"comment_content":"所以变量环境是动态的，根据函数调用关系。词法环境是静态的，根据函数定义时的状态？","like_count":1,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464826,"discussion_content":"都是静态的，动态绑定的this下节内容讲，this系统和作用域链是两套不一样的系统","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566918304,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1632217,"avatar":"https://static001.geekbang.org/account/avatar/00/18/e7/d9/83d1346c.jpg","nickname":"Lx","note":"","ucode":"90F4EEE985A9B0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6373,"discussion_content":"我觉得不是，应该都是静态的。动态是this吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566872836,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360248,"user_name":"大神博士","can_delete":false,"product_type":"c1","uid":1195144,"ip_address":"上海","ucode":"8C4318095949F0","user_header":"https://static001.geekbang.org/account/avatar/00/12/3c/88/6bef27d6.jpg","comment_is_top":false,"comment_ctime":1666336511,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1666336511","product_id":100033601,"comment_content":"函数对象结合作用域解析变量的机制是 闭包？这个说法对不多呢？<br><br>这样即使不在内存中有闭包的变量，有函数就有闭包。<br><br>swift 语言中，回调函数就叫做闭包，也是不一定会产生闭包变量的","like_count":0},{"had_liked":false,"id":360092,"user_name":"KyotoNewton","can_delete":false,"product_type":"c1","uid":3197368,"ip_address":"广东","ucode":"53F5DE8F249563","user_header":"https://static001.geekbang.org/account/avatar/00/30/c9/b8/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1666171746,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1666171746","product_id":100033601,"comment_content":"bar.printName 和 _printName  其实就是 <br>function () {<br>  console.log(myName)<br>} <br>然后在后面加个()就是执行这个函数，所以依据作用域链，输出的myname是在全局环境的&quot;极客邦&quot;","like_count":0},{"had_liked":false,"id":359423,"user_name":"🏴‍☠️","can_delete":false,"product_type":"c1","uid":1478157,"ip_address":"福建","ucode":"E62C53E781AF81","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/8H9JoTQj0gmhgUhtozvFoNesW3fv7pow3IibGeLhakDz5aWlicA3UOjqSc5jWw9C0ibgFIemlK6DkrYUe9Sibcl9Vg/132","comment_is_top":false,"comment_ctime":1665514617,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665514617","product_id":100033601,"comment_content":"可以这样理解吗？能访问调用栈外的函数上下文，这个函数上下文就形成闭包","like_count":0},{"had_liked":false,"id":351059,"user_name":"夏季末","can_delete":false,"product_type":"c1","uid":2815143,"ip_address":"","ucode":"C85B0536B76E75","user_header":"https://static001.geekbang.org/account/avatar/00/2a/f4/a7/a96a8bdb.jpg","comment_is_top":false,"comment_ctime":1657505997,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1657505997","product_id":100033601,"comment_content":"我看winter老师说闭包是一个绑定了执行环境的函数。<br>但李兵老师说是变量的集合。把我搞懵了！！<br>老师能不能解释下？","like_count":0},{"had_liked":false,"id":344566,"user_name":"Fiona B Y Fan","can_delete":false,"product_type":"c1","uid":2936462,"ip_address":"","ucode":"5FB0F453DCDAE6","user_header":"","comment_is_top":false,"comment_ctime":1651650471,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651650471","product_id":100033601,"comment_content":"请问老师outer到底是在变量环境中还是和变量环境同在执行上下文中，因为您有些图是在变量环境里边，有些在外边？","like_count":0},{"had_liked":false,"id":338458,"user_name":"TyrionJ","can_delete":false,"product_type":"c1","uid":2374581,"ip_address":"","ucode":"CBB10E57538E6D","user_header":"https://static001.geekbang.org/account/avatar/00/24/3b/b5/c6eea696.jpg","comment_is_top":false,"comment_ctime":1647508323,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647508323","product_id":100033601,"comment_content":"function bar() {<br>    var myName = &quot;极客世界&quot;<br>    let test1 = 100<br>    if (1) {<br>        let myName = &quot;Chrome浏览器&quot;<br>       console.log(test)<br>    }<br>}<br>function foo() {<br>    var myName = &quot;极客邦&quot;<br>    let test = 2<br>    {<br>        let test = 3<br>        bar()<br>    }<br>}<br>var myName = &quot;极客时间&quot;<br>let myAge = 10<br>var test = 1<br>{<br>    let test = 2<br>}<br>foo()<br><br>这个问题按照文中的分析应该是输出2，全局上下文的词法环境中test等于2，变量环境中test等于1，实际上打印出了1，老师能解释下吗？","like_count":0},{"had_liked":false,"id":333775,"user_name":"℃","can_delete":false,"product_type":"c1","uid":2673520,"ip_address":"","ucode":"D95BACAD96B6F3","user_header":"https://static001.geekbang.org/account/avatar/00/28/cb/70/dde7884d.jpg","comment_is_top":false,"comment_ctime":1644509131,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644509131","product_id":100033601,"comment_content":"作用域链由词法作用域决定，这也就是为什么大家说函数的this由定义它的地方决定的原因了吧。<br>作用域链，先从自己的词法环境找变量，然后从自己的变量环境找，自己这里没有，就去词法作用域的上一级找","like_count":0},{"had_liked":false,"id":327805,"user_name":"Forever ZWR","can_delete":false,"product_type":"c1","uid":1036467,"ip_address":"","ucode":"4C78C6BCB6F8A4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d0/b3/2072210d.jpg","comment_is_top":false,"comment_ctime":1640310977,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640310977","product_id":100033601,"comment_content":"老师，一段js代码中，词法作用域是否可能不止一条？？？","like_count":0},{"had_liked":false,"id":326565,"user_name":"哈哈","can_delete":false,"product_type":"c1","uid":1837442,"ip_address":"","ucode":"E68A8A4B76AE56","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/KWL1AtUjVjZXxyEhqrokziazdibGazWQlmAwQ2dJ5b2MibWblqr0D0icBv6TnqQkC7pUPWCkbtoQRjf4dPGQKBR9BQ/132","comment_is_top":false,"comment_ctime":1639562976,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639562976","product_id":100033601,"comment_content":"老师你好，我和楼下一个人有个一样的问题是关于作用域链，<br>function A()｛<br>   function B()｛<br>     debugger<br>     console.log(&quot;hello&quot;)<br>   ｝<br>   B()<br>｝<br>调试发现，debugger处为什么B的上级作用域不是A，而是全局作用域 ？按照词法作用域来看，B的上级作用域应该是A吧 ？但是当B函数如果访问了A函数的变量之后，此时出现闭包，B的上级作用域就成了A函数形成的闭包。那么上级作用域的查找，跟是否闭包有关吗？或者有大佬能帮忙解释下吗😂","like_count":0},{"had_liked":false,"id":319346,"user_name":"Geek_a99323","can_delete":false,"product_type":"c1","uid":1709988,"ip_address":"","ucode":"87F80317099295","user_header":"","comment_is_top":false,"comment_ctime":1635754150,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635754150","product_id":100033601,"comment_content":"由于没有内部函数对外部函数的引用，所以没有产生闭包","like_count":0},{"had_liked":false,"id":319345,"user_name":"Geek_a99323","can_delete":false,"product_type":"c1","uid":1709988,"ip_address":"","ucode":"87F80317099295","user_header":"","comment_is_top":false,"comment_ctime":1635754103,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635754103","product_id":100033601,"comment_content":"javscrpt采用的是静态作用域，作用域由声明他的地方决定<br>var bar = { myName:&quot;time.geekbang.com&quot;, printName: function () { console.log(myName) } }<br>声明的地方外层没有函数，所以是全局作用域，<br>执行console.log(myName)<br>首先会去查找当前词法环境=&gt;变量环境=&gt;outer词法环境","like_count":0},{"had_liked":false,"id":308047,"user_name":"风絮","can_delete":false,"product_type":"c1","uid":1547804,"ip_address":"","ucode":"8CB171D0834000","user_header":"https://static001.geekbang.org/account/avatar/00/17/9e/1c/76f8338e.jpg","comment_is_top":false,"comment_ctime":1629367630,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629367630","product_id":100033601,"comment_content":"老师，能帮忙解答一个问题吗：<br>let a = &#39;&#39;<br>    {<br>        function a(){}<br>        console.log(a)<br>    }<br>    console.log(a)<br>这个我觉得let应该在词法作用域里面，function应该有变量声明提前，所以两个console都应该返回空串，但实际结果有一个返回了function，这是为什么？","like_count":0},{"had_liked":false,"id":294462,"user_name":"马成","can_delete":false,"product_type":"c1","uid":1486895,"ip_address":"","ucode":"664F2BAA2E0F0B","user_header":"https://static001.geekbang.org/account/avatar/00/16/b0/2f/e2096905.jpg","comment_is_top":false,"comment_ctime":1621950778,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1621950778","product_id":100033601,"comment_content":"老师，我执行下面的代码，输出的结果是1M、1M        <br>var o = {<br>            name: &quot;Y&quot;,<br>            f1: function () {<br>                console.log(&quot;1&quot; + this.name); &#47;&#47; 1M<br>                console.log(&quot;2&quot; + name); &#47;&#47; 2M<br>            }<br>        }<br>        let name = &quot;M&quot;; <br>        {<br>            let name = &quot;T&quot;;<br>            let f = o.f1;<br>            f();<br>        }<br><br>我觉得这个说明两个问题：<br>1）作用域链查找时，先查找当前执行上下文的词法环境，再查找变量环境，如果没有找到，再找outer指向的执行上下文的变量环境（不会查找词法环境）；<br>2）let和const产生的变量不是全部都放入词法环境中，只有在块级作用域的时候才会放入到词法环境中，在函数作用域或全局作用域时也是放入变量环境中的。","like_count":0},{"had_liked":false,"id":286353,"user_name":"Geek_005778","can_delete":false,"product_type":"c1","uid":1483630,"ip_address":"","ucode":"B4E2DE7B9D0387","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJp0JzSialEHSLNFUnSLgpEDicTWkrDYyKbvh0GI6G2kHFyeEtwe3mibPMFMXKkR6uSfkoMb5Yib7r9Kg/132","comment_is_top":false,"comment_ctime":1617265312,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617265312","product_id":100033601,"comment_content":"老师，https:&#47;&#47;time.geekbang.org&#47;column&#47;article&#47;83302 寒老师这门课里说“闭包其实只是一个绑定了执行环境的函数”， 而你这里的定义的是那些没回收的变量的集合，哪个比较有道理呢？","like_count":0},{"had_liked":false,"id":285665,"user_name":"Random","can_delete":false,"product_type":"c1","uid":1630111,"ip_address":"","ucode":"4E164C8CF487FA","user_header":"https://static001.geekbang.org/account/avatar/00/18/df/9f/6db75dff.jpg","comment_is_top":false,"comment_ctime":1616947587,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616947587","product_id":100033601,"comment_content":"这几个章节结合 你不知道的JavaScript 一块看，一定收获满满","like_count":0},{"had_liked":false,"id":284769,"user_name":"小白菜","can_delete":false,"product_type":"c1","uid":2334321,"ip_address":"","ucode":"48692A4061175E","user_header":"https://static001.geekbang.org/account/avatar/00/23/9e/71/3b548202.jpg","comment_is_top":false,"comment_ctime":1616465049,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616465049","product_id":100033601,"comment_content":"作用域是由代码中函数声明的位置来决定的","like_count":0},{"had_liked":false,"id":269718,"user_name":"学聪","can_delete":false,"product_type":"c1","uid":1024573,"ip_address":"","ucode":"C1F3950FAFE827","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a2/3d/c6b68ce8.jpg","comment_is_top":false,"comment_ctime":1608769417,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608769417","product_id":100033601,"comment_content":"作用域链讲得真透彻，总算明白了","like_count":0},{"had_liked":false,"id":266287,"user_name":"小白菜","can_delete":false,"product_type":"c1","uid":2334321,"ip_address":"","ucode":"48692A4061175E","user_header":"https://static001.geekbang.org/account/avatar/00/23/9e/71/3b548202.jpg","comment_is_top":false,"comment_ctime":1607269550,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607269550","product_id":100033601,"comment_content":"没有形成闭包。bar是全局变量。不存在外部访问内部。<br>输出极客邦","like_count":0},{"had_liked":false,"id":260954,"user_name":"Geek_5042f7","can_delete":false,"product_type":"c1","uid":2008707,"ip_address":"","ucode":"4A6FFB2631715D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIUpmVjZjv9icMLIEicTrFdQXrLg6Oc8ia29krKdCko7icmE9OPhZe9IWS1tjuZZT3tGebPUpwA5M7YJw/132","comment_is_top":false,"comment_ctime":1605161539,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605161539","product_id":100033601,"comment_content":"var bar = {<br>  myName: &quot;time.geekbang.com&quot;,<br>  printName: function () {<br>    console.log(myName);<br>  },<br>};  实际只要理解了myName与printName在同一层级，不存在谁的作用域包含谁，就知道答案了","like_count":0},{"had_liked":false,"id":258206,"user_name":"(｡ì _ í｡)","can_delete":false,"product_type":"c1","uid":2062515,"ip_address":"","ucode":"6BF86085311937","user_header":"https://static001.geekbang.org/account/avatar/00/1f/78/b3/27ca90f1.jpg","comment_is_top":false,"comment_ctime":1604325539,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604325539","product_id":100033601,"comment_content":"老师为啥一会使用词法作用域，一会使用词法环境，根据前文的讲解，词法环境应该是指存放let，const声明的变量，并且具有栈结构。而这篇文章开篇说的词法作用域则是一种链式访问的规则，感觉两种似乎不是一个东西。<br><br>但是在总结时却是混用这两给词语的，有点迷糊了。<br><br>希望老师可以解惑。感谢🙏","like_count":0},{"had_liked":false,"id":255758,"user_name":"Crystal","can_delete":false,"product_type":"c1","uid":1308710,"ip_address":"","ucode":"1481B20843D690","user_header":"https://static001.geekbang.org/account/avatar/00/13/f8/26/e0bd8d24.jpg","comment_is_top":false,"comment_ctime":1603422713,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603422713","product_id":100033601,"comment_content":"闭包是内层函数引用外层函数变量时被返回的，重要的是内层外层函数并不是调用栈的内外层，而是定义函数的内外层之分。题目重点就在于返回的函数并不是在当前函数上下文中定义的，所以无所谓有没有引用外层函数这一说","like_count":0},{"had_liked":false,"id":255134,"user_name":"A.     成事在天","can_delete":false,"product_type":"c1","uid":2056450,"ip_address":"","ucode":"0B069A8EAD0E9B","user_header":"https://static001.geekbang.org/account/avatar/00/1f/61/02/6ccf315c.jpg","comment_is_top":false,"comment_ctime":1603271886,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603271886","product_id":100033601,"comment_content":"var name = &quot;asd&quot;;<br>\t\t\t\tvar num = 1;<br>\t\t\t\tfunction foo () {<br>\t\t\t\t\treturn {<br>\t\t\t\t\t\tget () {<br>\t\t\t\t\t\t\tnum+=1;<br>\t\t\t\t\t\t\tconsole.log(num);<br>\t\t\t\t\t\t},<br>\t\t\t\t\t\tset (newName) {<br>\t\t\t\t\t\t\tname=newName;<br>\t\t\t\t\t\t\tconsole.log(name);<br>\t\t\t\t\t\t}<br>\t\t\t\t\t}<br>\t\t\t\t}<br>\t\t\t\tvar a=foo();<br>\t\t\t\ta.get();<br>\t\t\t\ta.set(&quot;a&quot;);<br>\t\t\t\tconsole.log(name)<br>老师这个算闭包的话，那么变量name也是可以被其他在global环境下的函数访问，是怎么解释这个呢","like_count":0},{"had_liked":false,"id":251084,"user_name":"林浩","can_delete":false,"product_type":"c1","uid":1375777,"ip_address":"","ucode":"266C06165AFA47","user_header":"https://static001.geekbang.org/account/avatar/00/14/fe/21/df75ca94.jpg","comment_is_top":false,"comment_ctime":1601359727,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601359727","product_id":100033601,"comment_content":"按照老师的说法，块级作用域中定义一个函数  function g(){ return true; }  被当成 var g = function(){} 处理<br><br>if (true) {<br>    a=1<br>    var a = function () {}<br>    console.log(&#39;in&#39;,a);<br>  }<br>  console.log(&#39;out&#39;,a);<br>和<br>if (true) {<br>    a=1<br>    function a () {}<br>    console.log(&#39;in&#39;,a);<br>  }<br>  console.log(&#39;out&#39;,a);<br>按照上面分析这两段代码输出应该一样才对  但实际上第一个外层输出的是  f(){}, 第二段代码的外层输出的却是1  有点解释不通了","like_count":0},{"had_liked":false,"id":247750,"user_name":"Geek_d64504","can_delete":false,"product_type":"c1","uid":2173380,"ip_address":"","ucode":"189FCE37DC7F51","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/e2P3IHwSzByoDiaQpcB6qap62ia635GLEOSBXNnrOVf7AEMkliaT1gibNWBwWxJfABOqCHz5FRXUHvSiaSiaCvwrgUjw/132","comment_is_top":false,"comment_ctime":1599817365,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599817365","product_id":100033601,"comment_content":"按照老师的讲解，就看bar.printName的词法作用域，bar.printName的词法作用域只想全局，所以没有","like_count":0},{"had_liked":false,"id":242217,"user_name":"总有一天，我会回到你身边","can_delete":false,"product_type":"c1","uid":2104258,"ip_address":"","ucode":"F7E16631F2C76E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bWViaQ5oSbeHp1vicFVgQ35B9v2LQZTkTxzNicP0fefSq0PU8ZoRk8VC8LAJvhOibia4zg2TCJPEz0TlN3rSEehlIuA/132","comment_is_top":false,"comment_ctime":1597635622,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597635622","product_id":100033601,"comment_content":"另外，即使没使用该函数的内部声明变量，也会形成闭包，只是这个闭包什么作用也没有。。。，但它依然会显示在scope中","like_count":0},{"had_liked":false,"id":242215,"user_name":"总有一天，我会回到你身边","can_delete":false,"product_type":"c1","uid":2104258,"ip_address":"","ucode":"F7E16631F2C76E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bWViaQ5oSbeHp1vicFVgQ35B9v2LQZTkTxzNicP0fefSq0PU8ZoRk8VC8LAJvhOibia4zg2TCJPEz0TlN3rSEehlIuA/132","comment_is_top":false,"comment_ctime":1597635518,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597635518","product_id":100033601,"comment_content":"function bar() {<br>        &#47;&#47; let myName = &quot;风色幻想&quot;;<br>        &#47;&#47; return的{}并没有算作 bar函数的属性，只是作为一个变量做处理<br>        &#47;&#47; 问题？ 是否进入了该函数的词法环境<br>            &#47;&#47; 一定没有进入，因为会先从词法环境开始查找<br>        return {<br>            myName : &quot;time.geekbang.com&quot;,<br>            printName : function () {<br>                console.log(myName);<br>            }    <br>        };<br>    }<br><br>    function foo() {<br>        let myName = &quot;极客时间&quot;;<br>        let obj = bar();<br>        obj.printName();<br>    }<br><br>    &#47;&#47; 如果去掉它，会去obj里找吗？<br>    &#47;&#47; let myName = &quot;极客邦&quot;;<br>    let obj = bar();<br>    obj.printName();<br><br>    &#47;&#47; 不会进入obj内寻找，也就是说只会在对象的第一层寻找，虚拟机不会进入obj寻找","like_count":0},{"had_liked":false,"id":240468,"user_name":"A君","can_delete":false,"product_type":"c1","uid":1940105,"ip_address":"","ucode":"FE96F089C2312C","user_header":"https://static001.geekbang.org/account/avatar/00/1d/9a/89/babe8b52.jpg","comment_is_top":false,"comment_ctime":1596940017,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1596940017","product_id":100033601,"comment_content":"作用域链实际上就是上下文中环境变量的outer指针链表，在查找变量时会根据outer切换上下文环境，先从词法环境变量中查找，再到环境变量中查找。闭包是在某个上下文出栈后，由于其中某个变量还被作用域外的变量所使用，因此为其保留下部分变量的内容，这部分内存称为closure.","like_count":0},{"had_liked":false,"id":239974,"user_name":"不二","can_delete":false,"product_type":"c1","uid":1253124,"ip_address":"","ucode":"B018B32EDB44E5","user_header":"https://static001.geekbang.org/account/avatar/00/13/1f/04/1cddf65b.jpg","comment_is_top":false,"comment_ctime":1596704050,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596704050","product_id":100033601,"comment_content":"老师，闭包何时回收这块理解的不是很清楚，希望可以解答一下：<br><br>通常，如果引用闭包的函数是一个全局变量，那么闭包会一直存在直到页面关闭；但如果这个闭包以后不再使用的话，就会造成内存泄漏。<br><br>如果引用闭包的函数是个局部变量，等函数销毁后，在下次 JavaScript 引擎执行垃圾回收时，判断闭包这块内容如果已经不再被使用了，那么 JavaScript 引擎的垃圾回收器就会回收这块内存。<br><br>我们文章中给出的例子，foo函数是一个全局变量，但是代码执行完，闭包就不存在啦， 这和上面的结论是相反的，所以，引入闭包的函数是一个全局变量还是局部变量这块可能理解不对，希望老师抽空解答一下","like_count":0},{"had_liked":false,"id":239379,"user_name":"大桥2号","can_delete":false,"product_type":"c1","uid":2095749,"ip_address":"","ucode":"2BB88B211C5C8A","user_header":"https://static001.geekbang.org/account/avatar/00/1f/fa/85/1920fa21.jpg","comment_is_top":false,"comment_ctime":1596516850,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596516850","product_id":100033601,"comment_content":"当函数嵌套时，内层函数引用了外层函数作用域下的变量，并且内层函数在全局作用域下可访问时，就形成了闭包。<br> 评论区这句话可以","like_count":0},{"had_liked":false,"id":234276,"user_name":"蹦哒","can_delete":false,"product_type":"c1","uid":1458931,"ip_address":"","ucode":"56591A657DE7C7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epcs6PibsP9vEXv4EibUw3bhQPUK04zRTOvfrvF08TwM67xPb1LBh2uRENHQwo2VqYfC5GhJmM7icxHA/132","comment_is_top":false,"comment_ctime":1594632725,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594632725","product_id":100033601,"comment_content":"闭包产生的原因：如果没有闭包，那么当内部函数执行的时候，访问外部函数的变量就会出错，所以这里需要把外部函数的变量保持住。<br>所以思考题之所以不会产生闭包，从另一个角度看，是因为通过作用域链的原理知道，这里只需要访问全局的myName，没有闭包也能实现","like_count":0},{"had_liked":false,"id":234269,"user_name":"蹦哒","can_delete":false,"product_type":"c1","uid":1458931,"ip_address":"","ucode":"56591A657DE7C7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epcs6PibsP9vEXv4EibUw3bhQPUK04zRTOvfrvF08TwM67xPb1LBh2uRENHQwo2VqYfC5GhJmM7icxHA/132","comment_is_top":false,"comment_ctime":1594632166,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1594632166","product_id":100033601,"comment_content":"闭包的实现原理，和Object-C中的block原理比较相似：截获词法作用域内的变量，延长声明周期，直到block销毁","like_count":0,"discussions":[{"author":{"id":1043824,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ed/70/dafc8858.jpg","nickname":"孟谦","note":"","ucode":"7504C438D973D3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331405,"discussion_content":"是的。iOS还有weak，strong引用之分","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1606865613,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":234180,"user_name":"Simon少明","can_delete":false,"product_type":"c1","uid":1358133,"ip_address":"","ucode":"F7ABE6DE4E55DE","user_header":"https://static001.geekbang.org/account/avatar/00/14/b9/35/96fb49d6.jpg","comment_is_top":false,"comment_ctime":1594611862,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594611862","product_id":100033601,"comment_content":"老师，刚才中的例子查找路径：JavaScript 引擎会沿着“当前执行上下文–&gt;foo 函数闭包–&gt; 全局执行上下文”的顺序来查找 myName 变量。<br><br>那如果foo函数执行了两遍并赋值给两个全局变量，那么会生成了两个闭包，底层查找时是如何对应上哪个闭包的？","like_count":0},{"had_liked":false,"id":232340,"user_name":"杨学茂","can_delete":false,"product_type":"c1","uid":1377459,"ip_address":"","ucode":"C12DAA295CC945","user_header":"https://static001.geekbang.org/account/avatar/00/15/04/b3/3f0b69f9.jpg","comment_is_top":false,"comment_ctime":1593960475,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593960475","product_id":100033601,"comment_content":"函数的编译过程是在被调用时进行的还是函数声明所在的外层函数执行时进行的？如果是在被调用时才编译，也就是说作用域也是在此时才创建的，那怎么确定其outer呢？<br>作用域和变量环境有何区别，貌似里面都存的是函数内部声明的变量、参数？","like_count":0},{"had_liked":false,"id":228427,"user_name":"王沙沙","can_delete":false,"product_type":"c1","uid":1151692,"ip_address":"","ucode":"288D34F0B40E85","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo62etdyoSUiagbCGxcfhUTqP6hIOje6ibiaFKtnZiaVbJ7zmLsCkYeDBgCGficZEGia6DViay65IyaqbmEA/132","comment_is_top":false,"comment_ctime":1592667243,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592667243","product_id":100033601,"comment_content":"块级作用域中的变量查找那个例子里，bar里变量环境里的myName值为啥会是浏览器，是不是应该是极客世界？","like_count":0},{"had_liked":false,"id":223352,"user_name":"zoomdong","can_delete":false,"product_type":"c1","uid":1460980,"ip_address":"","ucode":"AA0B8F945D9935","user_header":"https://static001.geekbang.org/account/avatar/00/16/4a/f4/513d26e8.jpg","comment_is_top":false,"comment_ctime":1591068720,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591068720","product_id":100033601,"comment_content":"这里没有闭包，bar 那里会直接去全局变量那里找值。","like_count":0},{"had_liked":false,"id":223351,"user_name":"champ可口可乐了","can_delete":false,"product_type":"c1","uid":1177430,"ip_address":"","ucode":"EA75C67E9124C7","user_header":"https://static001.geekbang.org/account/avatar/00/11/f7/56/b82eeac7.jpg","comment_is_top":false,"comment_ctime":1591068663,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591068663","product_id":100033601,"comment_content":"关于闭包的回收，如果是存放在全局变量中的，可不可以通过给这个全局变量赋值 undefined 来让垃圾回收器回收闭包呢？","like_count":0},{"had_liked":false,"id":223346,"user_name":"champ可口可乐了","can_delete":false,"product_type":"c1","uid":1177430,"ip_address":"","ucode":"EA75C67E9124C7","user_header":"https://static001.geekbang.org/account/avatar/00/11/f7/56/b82eeac7.jpg","comment_is_top":false,"comment_ctime":1591067820,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1591067820","product_id":100033601,"comment_content":"老师，关于**块级作用域中的变量查找**那段代码有一个疑问:<br>function bar() {<br>    var myName = &quot;极客世界&quot;<br>    let test1 = 100<br>    if (1) {<br>        let myName = &quot;Chrome浏览器&quot;<br>        console.log(test)<br>    }<br>}<br>function foo() {<br>    var myName = &quot;极客邦&quot;<br>    let test = 2<br>    {<br>        let test = 3<br>        bar()<br>    }<br>}<br>var myName = &quot;极客时间&quot;<br>let myAge = 10<br>let test = 1<br>foo()<br>{<br>    let test = 100<br>    foo()<br>}<br>我这最后加了一个块级作用域，然后内部声明了test变量，为啥调用foo函数仍然打印的是1，而不是100呢？","like_count":0,"discussions":[{"author":{"id":1358133,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b9/35/96fb49d6.jpg","nickname":"Simon少明","note":"","ucode":"F7ABE6DE4E55DE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288259,"discussion_content":"词法作用域是静态的，foo函数outer指向的全局作用域，不管你在不在块级作用域，所以找到全局作用域中词法环境test=1","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1593695865,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":223065,"user_name":"一只鱼","can_delete":false,"product_type":"c1","uid":1272756,"ip_address":"","ucode":"44C6751552953B","user_header":"https://static001.geekbang.org/account/avatar/00/13/6b/b4/47c548fd.jpg","comment_is_top":false,"comment_ctime":1590993482,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1590993482","product_id":100033601,"comment_content":"怎么理解下面这段话中的“返回”两个字：<br>在 JavaScript 中，根据词法作用域的规则，内部函数总是可以访问其外部函数中声明的变量，当通过调用一个外部函数“返回”一个内部函数后，即使该外部函数已经执行结束了，但是内部函数引用外部函数的变量依然保存在内存中，我们就把这些变量的集合称为闭包。<br><br>下面这个例子中，并没有使用 return 进行显示的返回内部函数，而是把内部方法赋值到某个对象里面了，这其实也会产生闭包。<br>&#47;&#47; addMethod - By John Resig (MIT Licensed)<br>function addMethod(object, name, fn){<br>    var old = object[ name ];<br>    object[ name ] = function(){<br>        if ( fn.length == arguments.length )<br>            return fn.apply( this, arguments );<br>        else if ( typeof old == &#39;function&#39; )<br>            return old.apply( this, arguments );<br>    };<br>}","like_count":0},{"had_liked":false,"id":213752,"user_name":"彼岸","can_delete":false,"product_type":"c1","uid":1981907,"ip_address":"","ucode":"C98A096FC24E54","user_header":"https://static001.geekbang.org/account/avatar/00/1e/3d/d3/06e66d3c.jpg","comment_is_top":false,"comment_ctime":1588552298,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588552298","product_id":100033601,"comment_content":"老师你好，有个问题是关于作用域链，<br>function A()｛<br>   function B()｛<br>     console.log(&quot;hello&quot;)<br>   ｝<br>   B()<br>｝<br>老师我调试发现，为什么B的上级作用域不是A，而是全局作用域。但是当B函数如果访问了A函数的变量之后，此时出现闭包，B的上级作用域就成了A。问题来了，上级作用域的查找，跟是否是闭包有关吗？","like_count":0},{"had_liked":false,"id":211112,"user_name":"sakura","can_delete":false,"product_type":"c1","uid":1958109,"ip_address":"","ucode":"19853DC8C53529","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/LLzqOoaSOZp1GeoDFWUiaU3IVniaGDk75JvGib3HVMF4M9Me6gkQB6yy81Q06LIgCooib3ibx44KZ95GeO3qOXoehrw/132","comment_is_top":false,"comment_ctime":1587897021,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1587897021","product_id":100033601,"comment_content":"function bar() {<br>    var myName = &quot;极客世界&quot;<br>    let test1 = 100<br>    if (1) {<br>        let myName = &quot;Chrome浏览器&quot;<br>        console.log(test)<br>    }<br>}<br>function foo() {<br>    var myName = &quot;极客邦&quot;<br>    let test = 2<br>    {<br>        let test = 3<br>        bar()<br>    }<br>}<br>var myName = &quot;极客时间&quot;<br>let myAge = 10<br>var test = 0  &#47;&#47; 改动点<br>if(1){   &#47;&#47; 改动点<br>    let test = 1   <br>}<br>foo()<br><br><br>打印结果为啥是【0】，相当于在全局作用域中查找时，先查找的变量环境，再查找的此法环境；<br>那是否可以给出结论：向上查找，同一作用域时，先变量环境后此法环境？","like_count":0,"discussions":[{"author":{"id":1358133,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b9/35/96fb49d6.jpg","nickname":"Simon少明","note":"","ucode":"F7ABE6DE4E55DE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288263,"discussion_content":"你看这样理解对不对：词法作用域是静态的，foo函数outer指向的全局作用域，所以找到全局作用域中词法环境test=0，而foo函数上面的块级作用域这时候其实已经不存在了，可以在foo函数执行前通过断点查看并没有block","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593696221,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":210213,"user_name":"Ritter","can_delete":false,"product_type":"c1","uid":1272593,"ip_address":"","ucode":"4A35DB167A44C3","user_header":"https://static001.geekbang.org/account/avatar/00/13/6b/11/306325bb.jpg","comment_is_top":false,"comment_ctime":1587698570,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1587698570","product_id":100033601,"comment_content":"在控制台执行了这段代码，直接报错了<br><br>var bar = {<br>    myName:&quot;time.geekbang.com&quot;,<br>    printName: function () {<br>        console.log(myName)<br>    }    <br>}<br>function foo() {<br>    let myName = &quot;极客时间&quot;<br>    return bar.printName<br>}<br>let myName = &quot;极客邦&quot;<br>let _printName = foo()<br>_printName()<br>bar.printName()<br><br><br>VM2446:1 Uncaught SyntaxError: Identifier &#39;myName&#39; has already been declared<br>    at &lt;anonymous&gt;:1:1<br>(anonymous) @ VM2446:1","like_count":0,"discussions":[{"author":{"id":2755365,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKgGCPd19I4196ABAo6H1ibq9Q89dFAulRkBagHib7qg5RRyibPIQ49juiaAhVMDp4QW8veR8chMG5eBQ/132","nickname":"思凡","note":"","ucode":"E89B2AF5969F69","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545123,"discussion_content":"哈哈哈我也遇到了，肯定是你前面跟着教程敲代码时在控制台运行了var myName = XXX，后面再let myName就会报这个错，刷新下浏览器就行了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641837379,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1910075,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/25/3b/a971fc8e.jpg","nickname":"阿感","note":"","ucode":"7BCB7E44A832D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249155,"discussion_content":"复制你的没问题，正常输出","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587911386,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":204832,"user_name":"HoSalt","can_delete":false,"product_type":"c1","uid":1156074,"ip_address":"","ucode":"610B03E2A002D1","user_header":"https://static001.geekbang.org/account/avatar/00/11/a3/ea/53333dd5.jpg","comment_is_top":false,"comment_ctime":1586481278,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586481278","product_id":100033601,"comment_content":"老师，那箭头函数是怎样的执行上下文是个什么情况","like_count":0},{"had_liked":false,"id":200416,"user_name":"王晓蘅","can_delete":false,"product_type":"c1","uid":1467926,"ip_address":"","ucode":"09B6D5D8A40CAA","user_header":"https://static001.geekbang.org/account/avatar/00/16/66/16/b8e6436c.jpg","comment_is_top":false,"comment_ctime":1585581474,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585581474","product_id":100033601,"comment_content":"在 JavaScript 中，根据词法作用域的规则，内部函数总是可以访问其外部函数中声明的变量，当通过调用一个外部函数返回一个内部函数后，即使该外部函数已经执行结束了，但是内部函数引用外部函数的变量依然保存在内存中，我们就把这些变量的集合称为闭包。<br><br>这个定义太精准了！","like_count":0},{"had_liked":false,"id":198362,"user_name":"大熊猫的五分裤","can_delete":false,"product_type":"c1","uid":1451410,"ip_address":"","ucode":"6E094B040EA8C8","user_header":"https://static001.geekbang.org/account/avatar/00/16/25/92/cfee2bc0.jpg","comment_is_top":false,"comment_ctime":1585447626,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585447626","product_id":100033601,"comment_content":"李兵老师想请教一下作用域是不是实际上就是执行上下文中的词法环境和变量环境啊？","like_count":0},{"had_liked":false,"id":188969,"user_name":"大蓝","can_delete":false,"product_type":"c1","uid":1355288,"ip_address":"","ucode":"855648168C77ED","user_header":"https://static001.geekbang.org/account/avatar/00/14/ae/18/ee4ded86.jpg","comment_is_top":false,"comment_ctime":1584440161,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584440161","product_id":100033601,"comment_content":"词法作用域就是根据代码的位置来决定的，其中 main 函数包含了 bar 函数，bar 函数中包含了 foo 函数，因为 JavaScript 作用域链是由词法作用域决定的，所以整个词法作用域链的顺序是：foo 函数作用域—&gt;bar 函数作用域—&gt;main 函数作用域—&gt; 全局作用域。<br><br>因为根据词法作用域，foo 和 bar 的上级作用域都是全局作用域，所以如果 foo 或者 bar 函数使用了一个它们没有定义的变量，那么它们会到全局作用域去查找。也就是说，词法作用域是代码阶段就决定好的，和函数是怎么调用的没有关系。<br><br>这两段感觉前后矛盾，前面说词法作用于根据代码位置静态...突然转向说是全局作用于","like_count":0},{"had_liked":false,"id":188804,"user_name":"Rainnut","can_delete":false,"product_type":"c1","uid":1317034,"ip_address":"","ucode":"4BB3DDC637C9C9","user_header":"https://static001.geekbang.org/account/avatar/00/14/18/aa/b1dacb64.jpg","comment_is_top":false,"comment_ctime":1584418644,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1584418644","product_id":100033601,"comment_content":"function bar() {<br>    var myName = &quot;极客世界&quot;<br>    let test1 = 100<br>    if (1) {<br>        let myName = &quot;Chrome浏览器&quot;<br>        console.log(test)<br>    }<br>}<br>function foo() {<br>    var myName = &quot;极客邦&quot;<br>    let test = 2<br>    {<br>        let test = 3<br>        bar()<br>    }<br>}<br>var myName = &quot;极客时间&quot;<br>let myAge = 10<br>let test = 1<br>{<br>let test = 666<br>foo(). &#47;&#47; 结果为1？为啥不是666<br>}","like_count":0,"discussions":[{"author":{"id":1910075,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/25/3b/a971fc8e.jpg","nickname":"阿感","note":"","ucode":"7BCB7E44A832D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":247466,"discussion_content":"666在块级里。bar的外部引用是全局里的test","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587815359,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":187444,"user_name":"Shuttle","can_delete":false,"product_type":"c1","uid":1118235,"ip_address":"","ucode":"3837AA626997B8","user_header":"https://static001.geekbang.org/account/avatar/00/11/10/1b/d17ea26b.jpg","comment_is_top":false,"comment_ctime":1584110761,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584110761","product_id":100033601,"comment_content":"您好 老师，下面的这这段代码，为什么setTimeout添加的延时任务能够访问到func的词法环境呢<br>function func() {<br>        var name = &quot;ngnice&quot;;<br>        var str = &quot;&quot;;<br>        if(name) {<br>            let name = &quot;inner name&quot;;<br>            console.log(name);<br>        }<br>        for (let index = 0; index &lt; 4; index++) {<br>            setTimeout(function () {<br>                console.log(index);<br>            }, 10)<br>        }<br><br>    }<br>    func();","like_count":0},{"had_liked":false,"id":185073,"user_name":"Vfeelit","can_delete":false,"product_type":"c1","uid":1501818,"ip_address":"","ucode":"F3FF2B069F347F","user_header":"https://static001.geekbang.org/account/avatar/00/16/ea/7a/d857723d.jpg","comment_is_top":false,"comment_ctime":1583478131,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583478131","product_id":100033601,"comment_content":"JS平时是用得多。一些概念理解确实很含糊。基于我当前对JS的理解，这几节课堪称神作。说明老师功底很深厚，已经得道了。","like_count":0},{"had_liked":false,"id":180252,"user_name":"小薛菜菜子","can_delete":false,"product_type":"c1","uid":1622598,"ip_address":"","ucode":"C4E13239E84544","user_header":"https://static001.geekbang.org/account/avatar/00/18/c2/46/eca306d4.jpg","comment_is_top":false,"comment_ctime":1582220705,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582220705","product_id":100033601,"comment_content":"请问 innerBar.getName 方法的 outer 是什么呢？按理说应该是 foo 的执行上下文，但 foo 的执行上下文又已经被推出销毁了……<br>虽然文章中直接讲了，查找顺序为 当前执行上下文-闭包-全局执行上下文，但我还是觉得，这中间少了 outer 的步骤。","like_count":0},{"had_liked":false,"id":177486,"user_name":"Geek_b792ab","can_delete":false,"product_type":"c1","uid":1683092,"ip_address":"","ucode":"6427F14600A73D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEJMMbMdicVvu1ssiaE0olibd8Z6810bb0PkulCHxvLF3h45bxxq8cU989aMJDm8ZNib6gDibXRRlOH9PgQ/132","comment_is_top":false,"comment_ctime":1581403041,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1581403041","product_id":100033601,"comment_content":"var bar = {<br>    myName:&quot;time.geekbang.com&quot;,<br>    printName: function () {<br>        console.log(this.myName)<br>    }    <br>}<br>function foo() {<br>    let myName = &quot;极客时间&quot;<br>    return bar.printName<br>}<br>let myName = &quot;极客邦&quot;<br>let _printName = foo()<br>_printName()&#47;&#47;undefined 如果是var myName就会是极客邦 请问为什么用let后就undefined <br>bar.printName()&#47;&#47;time.geekbang.com ","like_count":0,"discussions":[{"author":{"id":1910075,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/25/3b/a971fc8e.jpg","nickname":"阿感","note":"","ucode":"7BCB7E44A832D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":247730,"discussion_content":"这个this是window。var声明时候，顶层对象的属性赋值与全局变量的赋值，是同一件事。ES6 为了改变这一点，一方面规定，为了保持兼容性，var命令和function命令声明的全局变量，依旧是顶层对象的属性；另一方面规定，let命令、const命令、class命令声明的全局变量，不属于顶层对象的属性。也就是说，从 ES6 开始，全局变量将逐步与顶层对象的属性脱钩。var a = 1;\n// 如果在 Node 的 REPL 环境，可以写成 global.a\n// 或者采用通用方法，写成 this.a\nwindow.a // 1\n\nlet b = 1;\nwindow.b // undefined\n上面代码中，全局变量a由var命令声明，所以它是顶层对象的属性；全局变量b由let命令声明，所以它不是顶层对象的属性，返回undefined。\n来源\nhttps://es6.ruanyifeng.com/#docs/let","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587823309,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":172165,"user_name":"NikkiZeng","can_delete":false,"product_type":"c1","uid":1765894,"ip_address":"","ucode":"F669C811773394","user_header":"https://static001.geekbang.org/account/avatar/00/1a/f2/06/ebb5b764.jpg","comment_is_top":false,"comment_ctime":1579099758,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1579099758","product_id":100033601,"comment_content":"老师,请问一下,闭包是只有一个,可以以不同调用方式传参修改,还是说每一次调用一次函数就会在执行上下文中产生不同的闭包呢?如果发生下面这种多层嵌套的时候,最里层的函数使用最外层函数的变量,那么是不是意味着三个函数,js垃圾回收机制都不会及时处理呢?<br><br>  function fun(n, o) {<br>        console.log(o);<br>        return {<br>          fun: function(m) {<br>            return fun(m, n);<br>          }<br>        };<br>      }<br>        var a = fun(0);<br>      a.fun(1);<br>      a.fun(2);<br>      a.fun(3);  <br>      var b = fun(0).fun(1).fun(2).fun(3);<br>      var c = fun(0).fun(1);<br>      c.fun(2); <br>      c.fun(3); ","like_count":0,"discussions":[{"author":{"id":1910075,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/25/3b/a971fc8e.jpg","nickname":"阿感","note":"","ucode":"7BCB7E44A832D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":247748,"discussion_content":"这题好像是经典面试题。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587823723,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170170,"user_name":"咖喱蟹","can_delete":false,"product_type":"c1","uid":1228218,"ip_address":"","ucode":"3024A85C31D54A","user_header":"https://static001.geekbang.org/account/avatar/00/12/bd/ba/0a1a4dd1.jpg","comment_is_top":false,"comment_ctime":1578542286,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578542286","product_id":100033601,"comment_content":"李老师讲得真好，图例结合，很清晰明了，赞一个","like_count":0},{"had_liked":false,"id":159778,"user_name":"Geek_East","can_delete":false,"product_type":"c1","uid":1589947,"ip_address":"","ucode":"A1A7CBF9B8FB2D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqXKSvfaeicog2Ficx4W3pNeA1KRLOS7iaFy2uoxCDoYpGkGnP6KPGecKia6Dr3MtCkNGpHxAzmTMd0LA/132","comment_is_top":false,"comment_ctime":1575786008,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575786008","product_id":100033601,"comment_content":"看了很多评论，有些疑惑的地方：<br>闭包之所以没有产生是因为，闭包的界定在内部函数与外部函数直接的，而且闭包本身是在scope范围内的，跟执行上下文没有关系；在返回bar.printName的时候，myName的查找首先肯定不会是time.geekbang,com， 因为对象本身并不能成为scope，再往上一层查找的时候，根部不会查找到foo里面的极客时间，因为scope查找是静态的，根据代码位置决定的，所以就找打了global scope里面的极客邦。<br><br>最关键的一点是：<br>执行上下文的机制遵循stack LIFO原则，是动态的，是运行时的东西；标识符的查找则是通过代码字面上的位置进行查找，是静态的，是编译时的东西；这两种机制搞在一起，确实容易难倒很多人；但是只要分的开，就好多了；<br><br>另外想问一个问题是：scope的这种寻找机制貌似是通过outer引用机制实现的，而且会从词法环境找到变量环境再横跨不同的执行上下问，这样理解可以吗？","like_count":0},{"had_liked":false,"id":159771,"user_name":"Geek_East","can_delete":false,"product_type":"c1","uid":1589947,"ip_address":"","ucode":"A1A7CBF9B8FB2D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqXKSvfaeicog2Ficx4W3pNeA1KRLOS7iaFy2uoxCDoYpGkGnP6KPGecKia6Dr3MtCkNGpHxAzmTMd0LA/132","comment_is_top":false,"comment_ctime":1575783847,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1575783847","product_id":100033601,"comment_content":"词法作用域的查找机制，可以不可以说是通过outer引用来实现的；而执行上下文的运行机制，则是由调用栈来实现的。","like_count":0,"discussions":[{"author":{"id":1308710,"avatar":"https://static001.geekbang.org/account/avatar/00/13/f8/26/e0bd8d24.jpg","nickname":"Crystal","note":"","ucode":"1481B20843D690","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":316536,"discussion_content":"没错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603422871,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159755,"user_name":"Geek_East","can_delete":false,"product_type":"c1","uid":1589947,"ip_address":"","ucode":"A1A7CBF9B8FB2D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqXKSvfaeicog2Ficx4W3pNeA1KRLOS7iaFy2uoxCDoYpGkGnP6KPGecKia6Dr3MtCkNGpHxAzmTMd0LA/132","comment_is_top":false,"comment_ctime":1575779825,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575779825","product_id":100033601,"comment_content":"outer这个变量在变量环境和词法环境中都有存储，这两者有什么功能上的区别吗？函数是存储在变量环境还是词法环境中的哪？","like_count":0},{"had_liked":false,"id":158448,"user_name":"-_-|||","can_delete":false,"product_type":"c1","uid":1328142,"ip_address":"","ucode":"94B21594658BF9","user_header":"https://static001.geekbang.org/account/avatar/00/14/44/0e/ce14b7d3.jpg","comment_is_top":false,"comment_ctime":1575373463,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1575373463","product_id":100033601,"comment_content":"图‘块级作用域中是如何查找变量的’中，3号的myName应该是“极客时间”;还有“Local 就是当前的 getName 函数的作用域”，我点开看this，感觉是innerBar这个作用域","like_count":0},{"had_liked":false,"id":156777,"user_name":"Zkerhcy","can_delete":false,"product_type":"c1","uid":1231133,"ip_address":"","ucode":"43A883F6FB6070","user_header":"https://static001.geekbang.org/account/avatar/00/12/c9/1d/c7586cfc.jpg","comment_is_top":false,"comment_ctime":1574953778,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574953778","product_id":100033601,"comment_content":"关于老师对闭包的定义有一个疑问：<br>『当通过调用一个外部函数返回一个内部函数后，』这句，实际上在老师示例的闭包代码中，调用 foo() 返回的其实是 innerBar 这个对象，innerBar 对象包含了两个方法 getName 和 setName。<br>是不是只要是内部函数的代码编写在外部函数里，并且引用了外部函数变量环境或词法环境的变量，就产生了闭包？","like_count":0},{"had_liked":false,"id":155698,"user_name":"王喃喃自语","can_delete":false,"product_type":"c1","uid":1718363,"ip_address":"","ucode":"1DFA0C95DCBB80","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL0N2vjxvyje3z6BQsdmGsKX7icyRtOukaibTb61Copiccf4hdvIZibbbBq5ElqkWln49WgKNWmViaISeQ/132","comment_is_top":false,"comment_ctime":1574738236,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574738236","product_id":100033601,"comment_content":"function bar() { var myName = &quot;极客世界&quot; let test1 = 100 if (1) { let myName = &quot;Chrome浏览器&quot; console.log(test) }}function foo() { var myName = &quot;极客邦&quot; let test = 2 { let test = 3 bar() }}var myName = &quot;极客时间&quot;let myAge = 10let test = 1foo()<br>&quot;现在是执行到 bar 函数的 if 语块之内，需要打印出来变量 test，那么就需要查找到 test 变量的值，其查找过程我已经在上图中使用序号 1、2、3、4、5 标记出来了。&quot;<br>以上这段代执行到 bar 函数的 if 语块之内的时候，查找test变量的值，为什么还需要查找到序号5？在全局执行上下文的词法环境已经找到了test的值，为什么还要找到5","like_count":0},{"had_liked":false,"id":155270,"user_name":"vianem","can_delete":false,"product_type":"c1","uid":1748290,"ip_address":"","ucode":"59A2D19426ABC4","user_header":"","comment_is_top":false,"comment_ctime":1574672915,"is_pvip":false,"replies":[{"id":"59678","content":"词法环境是解析之后的表现词法作用域的人数据表示！<br><br>可以看出类似DOM和HTML的区别！","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1574716213,"ip_address":"","comment_id":155270,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1574672915","product_id":100033601,"comment_content":"老师，词法环境和词法作用域不是一个东西吧？","like_count":0,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475706,"discussion_content":"词法环境是解析之后的表现词法作用域的人数据表示！\n\n可以看出类似DOM和HTML的区别！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574716213,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1231133,"avatar":"https://static001.geekbang.org/account/avatar/00/12/c9/1d/c7586cfc.jpg","nickname":"Zkerhcy","note":"","ucode":"43A883F6FB6070","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":64672,"discussion_content":"老师这句回复有点读不通","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574952505,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151346,"user_name":"江谢木","can_delete":false,"product_type":"c1","uid":1563403,"ip_address":"","ucode":"E1B1B0F0F03D41","user_header":"https://static001.geekbang.org/account/avatar/00/17/db/0b/f0ded153.jpg","comment_is_top":false,"comment_ctime":1573703427,"is_pvip":false,"replies":[{"id":"58223","content":"是的，那就不会有闭包了","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1573710490,"ip_address":"","comment_id":151346,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1573703427","product_id":100033601,"comment_content":"老师没太明白“如果引用闭包的函数是全局变量”这句，按文章的理解一个函数在另一个函数内部声明才会产生闭包，那如果一个函数是全局变量那他就不会产生闭包啊？","like_count":0,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474448,"discussion_content":"是的，那就不会有闭包了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573710490,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148968,"user_name":"蓝配鸡","can_delete":false,"product_type":"c1","uid":1348738,"ip_address":"","ucode":"C79A7CA8885B7C","user_header":"https://static001.geekbang.org/account/avatar/00/14/94/82/d0a417ba.jpg","comment_is_top":false,"comment_ctime":1573119648,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573119648","product_id":100033601,"comment_content":"作用域链如果是一个像linked list类似的数据结构。那么它的head被保存在哪里呢？是不是保存在function中？执行的时候直接查找?<br><br>谢谢老师！","like_count":0},{"had_liked":false,"id":146839,"user_name":"张芳朝","can_delete":false,"product_type":"c1","uid":1376603,"ip_address":"","ucode":"4BFC61CA32C1A6","user_header":"https://static001.geekbang.org/account/avatar/00/15/01/5b/79997d31.jpg","comment_is_top":false,"comment_ctime":1572671376,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1572671376","product_id":100033601,"comment_content":"闭包真的会造成内存泄漏吗？<br>网上有很多的歧义，说闭包造成了内存的泄漏。其实内存泄漏并不是闭包造成的，根本原因是：内部函数没有及时断开对变量的引用。","like_count":0,"discussions":[{"author":{"id":1358133,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b9/35/96fb49d6.jpg","nickname":"Simon少明","note":"","ucode":"F7ABE6DE4E55DE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290813,"discussion_content":"确实很多歧义，应该说闭包容易产生内存泄露，因为一般我们不会关注内存管理，不会主动释放。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594611577,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":140804,"user_name":"动摇的小指南针","can_delete":false,"product_type":"c1","uid":1132592,"ip_address":"","ucode":"D1795D52F078BA","user_header":"https://static001.geekbang.org/account/avatar/00/11/48/30/77c6c4ec.jpg","comment_is_top":false,"comment_ctime":1571050905,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571050905","product_id":100033601,"comment_content":"老师讲的非常好，我想问一下，您的这些知识是从什么途径获取的呢，从JS的文档吗，还是浏览器的规范","like_count":0},{"had_liked":false,"id":138661,"user_name":"小小灬厮","can_delete":false,"product_type":"c1","uid":1445003,"ip_address":"","ucode":"F4197D2F73364B","user_header":"https://static001.geekbang.org/account/avatar/00/16/0c/8b/3f7e9e74.jpg","comment_is_top":false,"comment_ctime":1570413427,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570413427","product_id":100033601,"comment_content":"内部函数总是可以访问其外部函数中声明的变量，bar的外部函数是全局作用域，myname指向的是全局的myname<br><br><br>如果改成这样就是闭包了，因为bar的外部函数现在是foo：<br><br>function foo() {<br>    let myName = &quot; 极客时间 &quot;<br><br>    var bar = {<br>        myName:&quot;time.geekbang.com&quot;,<br>        printName: function () {<br>            console.log(myName)<br>        }    <br>    }<br><br>    return bar.printName<br>}<br>let myName = &quot; 极客邦 &quot;<br>let _printName = foo()<br>_printName() &#47;&#47; 极客时间","like_count":0},{"had_liked":false,"id":137951,"user_name":"Cris","can_delete":false,"product_type":"c1","uid":1473520,"ip_address":"","ucode":"F8A287134F1078","user_header":"https://static001.geekbang.org/account/avatar/00/16/7b/f0/269139d5.jpg","comment_is_top":false,"comment_ctime":1569935385,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569935385","product_id":100033601,"comment_content":"老师，块级作用域里的变量查找例子，如果把全局里的let test =1；这条语句加个花括号{},是不是就访问不到test了？","like_count":0},{"had_liked":false,"id":137500,"user_name":"来自火星的小花","can_delete":false,"product_type":"c1","uid":1556015,"ip_address":"","ucode":"AA0A2916DFF9DA","user_header":"https://static001.geekbang.org/account/avatar/00/17/be/2f/40a45135.jpg","comment_is_top":false,"comment_ctime":1569754757,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569754757","product_id":100033601,"comment_content":"function bar() {<br>    var myName = &quot; 极客世界 &quot;<br>    let test1 = 100<br>    if (1) {<br>        let myName = &quot;Chrome 浏览器 &quot;<br>        console.log(test) &#47;&#47; 1<br>    }<br>}<br>function foo() {<br>    var myName = &quot; 极客邦 &quot;<br>    let test = 2<br>    {<br>        let test = 3<br>        bar()<br>    }<br>}<br>var myName = &quot; 极客时间 &quot;<br>let myAge = 10<br>let test = 1<br>{<br>    let test = 123<br>    foo()<br>}<br><br>此时全局执行上下文的词法环境应该有两项，分别为myAge, test(1)和test(123)。<br>按照作用域链进行查找时是怎么略过test(123)的？","like_count":0},{"had_liked":false,"id":136919,"user_name":"Boogie 捷","can_delete":false,"product_type":"c1","uid":1541552,"ip_address":"","ucode":"9F54EF69CC0106","user_header":"https://static001.geekbang.org/account/avatar/00/17/85/b0/496ae224.jpg","comment_is_top":false,"comment_ctime":1569554347,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569554347","product_id":100033601,"comment_content":"之前看过很多讲闭包的文章，都不是完全的理解。直到看到老师这篇，算是醍醐灌顶了！感谢老师精心准备的文章","like_count":0},{"had_liked":false,"id":135947,"user_name":"🌞🇨🇳👦","can_delete":false,"product_type":"c1","uid":1168085,"ip_address":"","ucode":"6BB08F05546D06","user_header":"https://static001.geekbang.org/account/avatar/00/11/d2/d5/ed93f2fa.jpg","comment_is_top":false,"comment_ctime":1569312457,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569312457","product_id":100033601,"comment_content":"看完有一个疑问，麻烦老师回答一下。我看文中描述和图片，发现闭包中的变量只有被使用的才存在，像文中例子的myName和test1，没有被使用的test2就会被正确回收吗","like_count":0},{"had_liked":false,"id":134972,"user_name":"海骅薯条","can_delete":false,"product_type":"c1","uid":1080760,"ip_address":"","ucode":"B40DB6D38FC08E","user_header":"https://static001.geekbang.org/account/avatar/00/10/7d/b8/62ed38de.jpg","comment_is_top":false,"comment_ctime":1568965098,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568965098","product_id":100033601,"comment_content":"还是没看懂为啥 根据词法作用域，foo 和 bar 的上级作用域都是全局作用...？","like_count":0},{"had_liked":false,"id":133560,"user_name":"melissa_614","can_delete":false,"product_type":"c1","uid":1627478,"ip_address":"","ucode":"02F246391E8A0E","user_header":"https://static001.geekbang.org/account/avatar/00/18/d5/56/a4434297.jpg","comment_is_top":false,"comment_ctime":1568605532,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568605532","product_id":100033601,"comment_content":"我的思考题在 console 里打印出来是： Uncaught SyntaxError: Identifier &#39;myName&#39; has already been declared<br>","like_count":0},{"had_liked":false,"id":132854,"user_name":"拖鞋","can_delete":false,"product_type":"c1","uid":1089424,"ip_address":"","ucode":"09985C731090A3","user_header":"https://static001.geekbang.org/account/avatar/00/10/9f/90/4656119a.jpg","comment_is_top":false,"comment_ctime":1568253548,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568253548","product_id":100033601,"comment_content":"老师讲的真好 解惑了","like_count":0},{"had_liked":false,"id":131260,"user_name":"KAO","can_delete":false,"product_type":"c1","uid":1551650,"ip_address":"","ucode":"5DCCD1A2484618","user_header":"https://static001.geekbang.org/account/avatar/00/17/ad/22/6d662781.jpg","comment_is_top":false,"comment_ctime":1567683532,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567683532","product_id":100033601,"comment_content":"请问下，词法作用域 和 执行上下文有什么关系？","like_count":0},{"had_liked":false,"id":130762,"user_name":"欣欣向荣的万七七","can_delete":false,"product_type":"c1","uid":1386665,"ip_address":"","ucode":"ED6BB1BF8C29B8","user_header":"https://static001.geekbang.org/account/avatar/00/15/28/a9/99b74f3e.jpg","comment_is_top":false,"comment_ctime":1567528295,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1567528295","product_id":100033601,"comment_content":"哇 李兵老师对闭包的定义真是数一数二的明确！好多人都只会语焉不详的说说“闭包就是函数”。","like_count":0},{"had_liked":false,"id":130651,"user_name":"Geek_d2e882","can_delete":false,"product_type":"c1","uid":1638114,"ip_address":"","ucode":"54C9368B9779FC","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLWicO71cIdfk09jXREj7y8g9IldXQjQibnrnoNLr7uWT6Vv2LEQDgibZOcgBEA3Ho9tB5tDmR9epQOw/132","comment_is_top":false,"comment_ctime":1567501726,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567501726","product_id":100033601,"comment_content":"作用域链是根据词法分析而确定的，所给定例子有一定的迷惑性，其实第一句定义bar变量，理解为bar. printName = function（）｛…｝，这样就可以轻松的答出它的作用域链是local — global，而local没有myName，所以会用global的mayName","like_count":0},{"had_liked":false,"id":130541,"user_name":"肥嘟嘟左卫门","can_delete":false,"product_type":"c1","uid":1358889,"ip_address":"","ucode":"BA6D8E04C6B2CE","user_header":"https://static001.geekbang.org/account/avatar/00/14/bc/29/c248bfd1.jpg","comment_is_top":false,"comment_ctime":1567480792,"is_pvip":false,"replies":[{"id":"48717","content":"超赞","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1567487154,"ip_address":"","comment_id":130541,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567480792","product_id":100033601,"comment_content":"好开心，感觉我终于理解闭包了，我是不是膨胀了#捂脸# 这个专栏真的超赞👍","like_count":0,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466006,"discussion_content":"超赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567487154,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130376,"user_name":"不将就","can_delete":false,"product_type":"c1","uid":1462422,"ip_address":"","ucode":"20A1EFAB085B0F","user_header":"https://static001.geekbang.org/account/avatar/00/16/50/96/dd23dcb0.jpg","comment_is_top":false,"comment_ctime":1567436899,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567436899","product_id":100033601,"comment_content":"function fn(){<br>var a =10<br>function f1(){<br>console.log(a)<br>};<br>function f2(){<br>console.log(&#39;f2&#39;)<br>};<br>f2();<br>};<br>fn();<br>&#47;&#47;我在函数f2里打断点，当执行到函数f2时，chrome里显示Closure:{a:10},<br>&#47;&#47; 如果把这个原因解释为在fn函数里会预扫描f1函数，那我现在把fn2函数和调用都注释了，<br>&#47;&#47; 现在执行fn函数时不产生Closure，为什么就不预扫描f1函数了？这是为什么？","like_count":0},{"had_liked":false,"id":129573,"user_name":"易儿易","can_delete":false,"product_type":"c1","uid":1242864,"ip_address":"","ucode":"B15D1031CA841E","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqLcWH3mSPmhjrs1aGL4b3TqI7xDqWWibM4nYFrRlp0z7FNSWaJz0mqovrgIA7ibmrPt8zRScSfRaqQ/132","comment_is_top":false,"comment_ctime":1567156695,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567156695","product_id":100033601,"comment_content":"函数变量对函数内部方法才会形成闭包，var bar={}代码块不是函数，所以无法形成闭包，可以这么理解吗老师？","like_count":0},{"had_liked":false,"id":129368,"user_name":"AICC","can_delete":false,"product_type":"c1","uid":1020746,"ip_address":"","ucode":"C1D18B1E8B2DCE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/93/4a/de82f373.jpg","comment_is_top":false,"comment_ctime":1567098969,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567098969","product_id":100033601,"comment_content":"从来没对这几个概念有过这么清晰的理解过，学习了，老师的课程实在是太爱了","like_count":0},{"had_liked":false,"id":129147,"user_name":"歌在云端","can_delete":false,"product_type":"c1","uid":1110238,"ip_address":"","ucode":"1C876780C9D25E","user_header":"https://static001.geekbang.org/account/avatar/00/10/f0/de/ef564e67.jpg","comment_is_top":false,"comment_ctime":1567049752,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1567049752","product_id":100033601,"comment_content":"不会产生闭包，因为foo函数返回的是bar.printName,并没有使用到foo的变量。foo和bar的词法作用于都是固定的是全局的所以打印出来的都是全局上下文里面的myname<br>","like_count":0},{"had_liked":false,"id":128770,"user_name":"Angus","can_delete":false,"product_type":"c1","uid":1377467,"ip_address":"","ucode":"7CC3BA1550FB5B","user_header":"https://static001.geekbang.org/account/avatar/00/15/04/bb/5e5c37c1.jpg","comment_is_top":false,"comment_ctime":1566960291,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566960291","product_id":100033601,"comment_content":"都打印了” 极客帮 “，不知道为啥会多个空格。<br><br>关于闭包的理解真的看过好多解释了，之前看到的是闭包是能访问自由变量的函数，这里有两个特点，一是闭包是一个函数，二是可以理解为所有函数都是闭包。这样理解的话闭包的特点和用处我就觉得有些不好理解了。<br><br>然后本文中说闭包是变量的集合，确实在Chrome中看到的Closure也确实是闭包的集合。按照本文的思路确实帮我理清楚了闭包，让闭包更加具体了，我也能理解为何闭包会造成内存泄露以及如果避免了。","like_count":0},{"had_liked":false,"id":128647,"user_name":"晓小东","can_delete":false,"product_type":"c1","uid":1194643,"ip_address":"","ucode":"93F9462EAAA63C","user_header":"https://static001.geekbang.org/account/avatar/00/12/3a/93/d7be8a1a.jpg","comment_is_top":false,"comment_ctime":1566922416,"is_pvip":true,"replies":[{"id":"47884","content":"欢迎推荐一些资料👍","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1566996786,"ip_address":"","comment_id":128647,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566922416","product_id":100033601,"comment_content":"词法作用域(与之对应动态作用域)，发生在编译器编译阶段，与代码书写位置相关，编译器要求当前作用域声明变量, 供引擎执行代码阶段查找，编译器_引擎_作用域  扩展阅读，《你不知道JavaScript 上》第一章","like_count":0,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465038,"discussion_content":"欢迎推荐一些资料👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566996786,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128639,"user_name":"朱维娜🍍","can_delete":false,"product_type":"c1","uid":1625918,"ip_address":"","ucode":"2BE89ABFE2BF0C","user_header":"https://static001.geekbang.org/account/avatar/00/18/cf/3e/5c684022.jpg","comment_is_top":false,"comment_ctime":1566919071,"is_pvip":false,"replies":[{"id":"48028","content":"不好意思，图弄错了，已经改过来了","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1567037888,"ip_address":"","comment_id":128639,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566919071","product_id":100033601,"comment_content":"在讲闭包的时候，一会讨论调用闭包的函数是全局变量还是局部变量；一会又讨论闭包本身是局部变量还是全局变量，感觉有点蒙。<br>另外，我也觉得最后的图里有错误","like_count":0,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465034,"discussion_content":"不好意思，图弄错了，已经改过来了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567037888,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128597,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1566911173,"is_pvip":true,"replies":[{"id":"47704","content":"不是，this是另外一套系统，下文会介绍。","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1566916483,"ip_address":"","comment_id":128597,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1566911173","product_id":100033601,"comment_content":"文章中 变量环境中的 outer， 是不是就是当前执行上文中的this 值？","like_count":0,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465016,"discussion_content":"不是，this是另外一套系统，下文会介绍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566916483,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128548,"user_name":"悬炫","can_delete":false,"product_type":"c1","uid":1159974,"ip_address":"","ucode":"28BA6B2169256B","user_header":"https://static001.geekbang.org/account/avatar/00/11/b3/26/cc28a05a.jpg","comment_is_top":false,"comment_ctime":1566899366,"is_pvip":false,"replies":[{"id":"47706","content":"嗯 是没有，这个我的疏忽，图我明天改正过来。","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1566917050,"ip_address":"","comment_id":128548,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566899366","product_id":100033601,"comment_content":"function foo() {<br>    var myName = &quot; 极客时间 &quot;<br>    let test1 = 1<br>    const test2 = 2<br>    var innerBar = {<br>        getName:function(){<br>            console.log(test1)<br>            return myName<br>        },<br>        setName:function(newName){<br>            myName = newName<br>        }<br>    }<br>    return innerBar<br>}<br>var bar = foo()<br>bar.setName(&quot; 极客邦 &quot;)<br>bar.getName()<br>console.log(bar.getName())<br>闭包的这个例子中，全局执行环境中应该是没有‘myName’这个变量的，我去控制台断点验证过","like_count":0,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464991,"discussion_content":"嗯 是没有，这个我的疏忽，图我明天改正过来。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566917050,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128361,"user_name":"Chao","can_delete":false,"product_type":"c1","uid":1108745,"ip_address":"","ucode":"DD7742F5537521","user_header":"https://static001.geekbang.org/account/avatar/00/10/eb/09/ba5f0135.jpg","comment_is_top":false,"comment_ctime":1566874287,"is_pvip":false,"replies":[{"id":"47717","content":"为下节this铺垫","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1566917720,"ip_address":"","comment_id":128361,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566874287","product_id":100033601,"comment_content":"思考题 引入了如何变更执行上下文的问题。 ","like_count":0,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464919,"discussion_content":"为下节this铺垫","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566917720,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128344,"user_name":"Lx","can_delete":false,"product_type":"c1","uid":1632217,"ip_address":"","ucode":"90F4EEE985A9B0","user_header":"https://static001.geekbang.org/account/avatar/00/18/e7/d9/83d1346c.jpg","comment_is_top":false,"comment_ctime":1566872788,"is_pvip":false,"replies":[{"id":"47730","content":"后面一句我没理解","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1566918636,"ip_address":"","comment_id":128344,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1566872788","product_id":100033601,"comment_content":"闭包的理解是不是应该说内部仍访问外部函数变量？至于外部函数返回一般对象和函数都一样","like_count":0,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464907,"discussion_content":"后面一句我没理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566918636,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1632217,"avatar":"https://static001.geekbang.org/account/avatar/00/18/e7/d9/83d1346c.jpg","nickname":"Lx","note":"","ucode":"90F4EEE985A9B0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6483,"discussion_content":"我看到闭包事例中外部函数返回的是有两个方法的对象，一般之前看到的都是返回一个函数。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566918761,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}