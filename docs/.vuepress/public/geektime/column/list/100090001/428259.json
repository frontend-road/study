{"id":428259,"title":"18 | 数据关联优化：都有哪些Join策略，开发者该如何取舍？","content":"<p>你好，我是吴磊。</p><p>在上一讲，我们分别从关联形式与实现机制这两个方面，对数据分析进行了讲解和介绍。对于不同关联形式的用法和实现机制的原理，想必你已经了然于胸。不过，在大数据的应用场景中，数据的处理往往是在分布式的环境下进行的，在这种情况下，数据关联的计算还要考虑网络分发这个环节。</p><p>我们知道，在分布式环境中，Spark支持两类数据分发模式。一类是我们在<a href=\"https://time.geekbang.org/column/article/421566\">第7讲</a>学过的Shuffle，Shuffle通过中间文件来完成Map阶段与Reduce阶段的数据交换，因此它会引入大量的磁盘与网络开销。另一类是我们在<a href=\"https://time.geekbang.org/column/article/423878\">第10讲</a>介绍的广播变量（Broadcast Variables），广播变量在Driver端创建，并由Driver分发到各个Executors。</p><p>因此，从数据分发模式的角度出发，数据关联又可以分为Shuffle Join和Broadcast Join这两大类。将两种分发模式与Join本身的3种实现机制相结合，就会衍生出分布式环境下的6种Join策略。</p><p>那么，对于这6种Join策略，Spark SQL是如何支持的呢？它们的优劣势与适用场景都有哪些？开发者能否针对这些策略有的放矢地进行取舍？今天这一讲，咱们就来聊聊这些话题。</p><!-- [[[read_end]]] --><h2>Join实现机制的优势对比</h2><p>首先，我们先来说一说不同Join实现机制本身的一些特性与适用场景，从而为后续的讨论打好基础。需要说明的是，咱们这里说的Join实现机制，指的是算法层面的工作原理，不同的算法有着不同的适用场景与复杂度，我们需要对它们有足够认识并有所区分。</p><p>我们知道，Join支持3种实现机制，它们分别是Hash Join、Sort Merge Join和Nested Loop Join。三者之中，Hash Join的执行效率最高，这主要得益于哈希表O(1)的查找效率。不过，在Probe阶段享受哈希表的“性能红利”之前，Build阶段得先在内存中构建出哈希表才行。因此，Hash Join这种算法对于内存的要求比较高，适用于内存能够容纳基表数据的计算场景。</p><p>相比之下，Sort Merge Join就没有内存方面的限制。不论是排序、还是合并，SMJ都可以利用磁盘来完成计算。所以，在稳定性这方面，SMJ更胜一筹。</p><p>而且与Hash Join相比，SMJ的执行效率也没有差太多，前者是O(M)，后者是O(M + N)，可以说是不分伯仲。当然，O(M + N)的复杂度得益于SMJ的排序阶段。因此，如果准备参与Join的两张表是有序表，那么这个时候采用SMJ算法来实现关联简直是再好不过了。</p><p>与前两者相比，Nested Loop Join看上去有些多余，嵌套的双层for循环带来的计算复杂度最高：O(M * N)。不过，尺有所短寸有所长，执行高效的HJ和SMJ只能用于等值关联，也就是说关联条件必须是等式，像salaries(“id”) &lt; employees(“id”)这样的关联条件，HJ和SMJ是无能为力的。相反，NLJ既可以处理等值关联（Equi Join），也可以应付不等值关联（Non Equi Join），可以说是数据关联在实现机制上的最后一道防线。</p><h2>Shuffle Join与Broadcast Join</h2><p>分析完不同Join机制的优缺点之后，接下来，我们再来说说分布式环境下的Join策略。与单机环境不同，在分布式环境中，两张表的数据各自散落在不同的计算节点与Executors进程。因此，要想完成数据关联，Spark SQL就必须先要把Join Keys相同的数据，分发到同一个Executors中去才行。</p><p>我们还是用上一讲的员工信息和薪资表来举例，如果我们打算对salaries和employees两张表按照id列做关联，那么，对于id字段值相同的薪资数据与员工数据，<strong>我们必须要保证它们坐落在同样的Executors进程里</strong>，Spark SQL才能利用刚刚说的HJ、SMJ、以及NLJ，以Executors（进程）为粒度并行地完成数据关联。</p><p>换句话说，以Join Keys为基准，两张表的数据分布保持一致，是Spark SQL执行分布式数据关联的前提。<strong>而能满足这个前提的途径只有两个：Shuffle与广播</strong>。这里我额外提醒一下，Shuffle和广播变量我们在前面的课程有过详细的介绍，如果你记不太清了，不妨翻回去看一看。</p><p>回到正题，开篇咱们说到，如果按照分发模式来划分，数据关联可以分为Shuffle Join和Broadcast Join两大类。通常来说，在执行性能方面，相比Shuffle Join，Broadcast Join往往会更胜一筹。为什么这么说呢？</p><p>接下来，我们就一起来分析分析，这两大类Join在分布式环境下的执行过程，~~然后再来回答这个问题。~~理解了执行过程，你自然就能解答这个问题了。</p><h3>Shuffle Join</h3><p>在没有开发者干预的情况下，Spark SQL默认采用Shuffle Join来完成分布式环境下的数据关联。对于参与Join的两张数据表，Spark SQL先是按照如下规则，来决定不同数据记录应当分发到哪个Executors中去：</p><ul>\n<li>根据Join Keys计算哈希值</li>\n<li>将哈希值对并行度（Parallelism）取模</li>\n</ul><p>由于左表与右表在并行度（分区数）上是一致的，因此，按照同样的规则分发数据之后，一定能够保证id字段值相同的薪资数据与员工数据坐落在同样的Executors中。</p><p><img src=\"https://static001.geekbang.org/resource/image/5a/6a/5a5531dd1dea1b2d5c710f026c5aae6a.jpg?wh=1920x726\" alt=\"图片\" title=\"Shuffle Join工作原理\"></p><p>如上图所示，颜色相同的矩形代表Join Keys相同的数据记录，可以看到，在Map阶段，数据分散在不同的Executors当中。经过Shuffle过后，Join Keys相同的记录被分发到了同样的Executors中去。接下来，在Reduce阶段，Reduce Task就可以使用HJ、SMJ、或是NLJ算法在Executors内部完成数据关联的计算。</p><p>Spark SQL之所以在默认情况下一律采用Shuffle Join，原因在于Shuffle Join的“万金油”属性。也就是说，<strong>在任何情况下，不论数据的体量是大是小、不管内存是否足够，Shuffle Join在功能上都能够“不辱使命”，成功地完成数据关联的计算</strong>。然而，有得必有失，功能上的完备性，往往伴随着的是性能上的损耗。</p><p>学习过 <a href=\"https://time.geekbang.org/column/article/420399\">Shuffle的原理</a>（第6讲）之后，不用我多说，Shuffle的弊端想必你早已烂熟于心。我们知道，从CPU到内存，从磁盘到网络，Shuffle的计算几乎需要消耗所有类型的硬件资源。尤其是磁盘和网络开销，这两座大山往往是应用执行的性能瓶颈。</p><p>那么问题来了，除了Shuffle Join这种“万金油”式的Join策略，开发者还有没有其他效率更高的选择呢？答案当然是肯定的，Broadcast Join就是用来克制Shuffle的“杀手锏”。</p><h3>Broadcast Join</h3><p>在广播变量那一讲（第10讲），我们讲过把用户数据结构封装为广播变量的过程。实际上，Spark不仅可以在普通变量上创建广播变量，在分布式数据集（如RDD、DataFrame）之上也可以创建广播变量。这样一来，对于参与Join的两张表，我们可以把其中较小的一个封装为广播变量，然后再让它们进行关联。</p><p>光说思路你可能体会不深，我们还是结合例子理解。以薪资表和员工表为例，只要对代码稍加改动，我们就能充分利用广播变量的优势。</p><p>更改后的代码如下所示。</p><pre><code class=\"language-scala\">import org.apache.spark.sql.functions.broadcast\n&nbsp;\n// 创建员工表的广播变量\nval bcEmployees = broadcast(employees)\n&nbsp;\n// 内关联，PS：将原来的employees替换为bcEmployees\nval jointDF: DataFrame = salaries.join(bcEmployees, salaries(\"id\") === employees(\"id\"), \"inner\")\n</code></pre><p>在Broadcast Join的执行过程中，Spark SQL首先从各个Executors收集employees表所有的数据分片，然后在Driver端构建广播变量bcEmployees，构建的过程如下图实线部分所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/48/4d/4814b57f9d9e4a98217773f161d9de4d.jpg?wh=1920x697\" alt=\"图片\" title=\"Broadcast Join工作原理\"></p><p>可以看到，散落在不同Executors内花花绿绿的矩形，代表的正是employees表的数据分片。这些数据分片聚集到一起，就构成了广播变量。接下来，如图中虚线部分所示，携带着employees表全量数据的广播变量bcEmployees，被分发到了全网所有的Executors当中去。</p><p>在这种情况下，体量较大的薪资表数据只要“待在原地、保持不动”，就可以轻松关联到跟它保持之一致的员工表数据了。通过这种方式，Spark SQL成功地避开了Shuffle这种“劳师动众”的数据分发过程，转而用广播变量的分发取而代之。</p><p>尽管广播变量的创建与分发同样需要消耗网络带宽，但相比Shuffle Join中两张表的全网分发，因为仅仅<strong>通过分发体量较小的数据表来完成数据关联，Spark SQL的执行性能显然要高效得多</strong>。这种小投入、大产出，用极小的成本去博取高额的性能收益，可以说是“四两拨千斤”！</p><h2>Spark SQL支持的Join策略</h2><p>不论是Shuffle Join，还是Broadcast Join，一旦数据分发完毕，理论上可以采用HJ、SMJ和NLJ这3种实现机制中的任意一种，完成Executors内部的数据关联。因此，两种分发模式，与三种实现机制，它们组合起来，总共有6种分布式Join策略，如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/ec/74/ece8f8d14fcb5d089d61ac76376f9874.jpg?wh=1920x754\" alt=\"图片\" title=\"6种分布式Join策略\"></p><p>虽然组合起来选择多样，但你也不必死记硬背，抓住里面的规律才是关键，我们一起来分析看看。</p><p>在这6种Join策略中，Spark SQL支持其中的5种来应对不用的关联场景，也即图中蓝色的5个矩形。对于等值关联（Equi Join），Spark SQL优先考虑采用Broadcast HJ策略，其次是Shuffle SMJ，最次是Shuffle HJ。对于不等值关联（Non Equi Join），Spark SQL优先考虑Broadcast NLJ，其次是Shuffle NLJ。</p><p><img src=\"https://static001.geekbang.org/resource/image/f6/a2/f661e892f7d1179aff2532d27caa9da2.jpg?wh=1905x504\" alt=\"图片\" title=\"Spark SQL对不同Join策略的选择倾向\"></p><p>不难发现，<strong>不论是等值关联、还是不等值关联，只要Broadcast Join的前提条件成立，Spark SQL一定会优先选择Broadcast Join相关的策略</strong>。那么问题来了，Broadcast Join的前提条件是什么呢？</p><p>回顾Broadcast Join的工作原理图，我们不难发现，<strong>Broadcast Join得以实施的基础，是被广播数据表（图中的表2）的全量数据能够完全放入Driver的内存、以及各个Executors的内存</strong>，如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/19/aa/19429ae459a3fdeeac0b16a76435f1aa.jpeg?wh=1378x394\" alt=\"图片\" title=\"Broadcast Join工作原理\"></p><p>另外，为了避免因广播表尺寸过大而引入新的性能隐患，Spark SQL要求被广播表的内存大小不能超过8GB。</p><p>好，这里我们简单总结一下。只要被广播表满足上述两个条件，我们就可以利用SQL Functions中的broadcast函数来创建广播变量，进而利用Broadcast Join策略来提升执行性能。</p><p>当然，在Broadcast Join前提条件不成立的情况下，Spark SQL就会退化到Shuffle Join的策略。在不等值的数据关联中，Spark SQL只有Shuffle NLJ这一种选择，因此咱们无需赘述。</p><p>但在等值关联的场景中，Spark SQL有Shuffle SMJ和Shuffle HJ这两种选择。尽管如此，Shuffle SMJ与Shuffle HJ的关系，就像是关羽和周仓的关系。周仓虽说武艺也不错，但他向来只是站在关公后面提刀。大战在即，刘备仰仗的自然是站在前面的关羽，而很少启用后面的周仓。在Shuffle SMJ与Shuffle HJ的取舍上，Spark SQL也是如此。</p><p>学习过Shuffle之后，我们知道，Shuffle在Map阶段往往会对数据做排序，而这恰恰正中SMJ机制的下怀。对于已经排好序的两张表，SMJ的复杂度是O(M + N)，这样的执行效率与HJ的O(M)可以说是不相上下。再者，SMJ在执行稳定性方面，远胜于HJ，在内存受限的情况下，SMJ可以充分利用磁盘来顺利地完成关联计算。因此，考虑到Shuffle SMJ的诸多优势，Shuffle HJ就像是关公后面的周仓，Spark SQL向来对之视而不见，所以对于HJ你大概知道它的作用就行。</p><h2>重点回顾</h2><p>好啦，到此为止，今天的课程就全部讲完了，我们一起来做个总结。首先，我们一起分析、对比了单机环境中不同Join机制的优劣势，我把它们整理到了下面的表格中，供你随时查看。</p><p><img src=\"https://static001.geekbang.org/resource/image/d0/93/d08bb6866c98c5e308ee5f415d1f7d93.jpg?wh=1920x453\" alt=\"图片\"></p><p>在分布式环境中，要想利用上述机制完成数据关联，Spark SQL首先需要把两张表中Join Keys一致的数据分发到相同的Executors中。</p><p>因此，数据分发是分布式数据关联的基础和前提。Spark SQL支持Shuffle和广播两种数据分发模式，相应地，Join也被分为Shuffle Join和Broadcast Join，其中Shuffle Join是默认的关联策略。关于两种策略的优劣势对比，我也整理到了如下的表格中，供你参考。</p><p><img src=\"https://static001.geekbang.org/resource/image/2b/04/2b8d95fe525d6f197f869cfd381c2d04.jpg?wh=2053x702\" alt=\"\"></p><p>结合三种实现机制和两种数据分发模式，Spark SQL支持5种分布式Join策略。对于这些不同的Join策略，Spark SQL有着自己的选择偏好，我把它整理到了如下的表格中，供你随时查看。</p><p><strong>其中，Broadcast Join的生效前提，是基表能够放进内存，且存储尺寸小于8GB。只要前提条件成立，Spark SQL就会优先选择Broadcast Join。</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/f6/a2/f661e892f7d1179aff2532d27caa9da2.jpg?wh=1905x504\" alt=\"图片\" title=\"Spark SQL对不同Join策略的选择倾向\"></p><h2>每课一练</h2><p>在6种分布式Join策略中，Spark SQL唯独没有支持Broadcast SMJ，你能想一想，为什么Spark SQL没有选择支持这种Join策略吗？提示一下，你可以从SMJ与HJ的执行效率入手做分析。</p><p>欢迎你在留言区跟我交流互动，也推荐你把这一讲分享给更多同事、朋友。</p>","neighbors":{"left":{"article_title":"17 | 数据关联：不同的关联形式与实现机制该怎么选？","id":427470},"right":{"article_title":"19 | 配置项详解：哪些参数会影响应用程序执行性能？","id":429113}},"comments":[{"had_liked":false,"id":317170,"user_name":"崔小豪","can_delete":false,"product_type":"c1","uid":2604437,"ip_address":"","ucode":"ABB59CE5209E67","user_header":"https://static001.geekbang.org/account/avatar/00/27/bd/95/e923a332.jpg","comment_is_top":false,"comment_ctime":1634698958,"is_pvip":false,"replies":[{"id":"115114","content":"是的，正解~ 满分💯","user_name":"作者回复","user_name_real":"吴磊","uid":"1043100","ctime":1634887841,"ip_address":"","comment_id":317170,"utype":1}],"discussion_count":1,"race_medal":0,"score":"53174306510","product_id":100090001,"comment_content":"Broadcast Join 中相比 SMJ，HJ 并不要求参与 Join 的两张表有序，也不需要维护两个游标来判断当前的记录位置，只要在 Build 阶段构建的哈希表可以放进内存就行。这个时候，相比 NLJ、SMJ，HJ 的执行效率是最高的。因此，当Broadcast Join 的前提条件存在，在可以采用 HJ 的情况下，Spark 自然就没有必要再去用 SMJ 这种前置开销（排序）比较大的方式去完成数据关联。","like_count":13,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528696,"discussion_content":"是的，正解~ 满分💯","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634887841,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324395,"user_name":"小新","can_delete":false,"product_type":"c1","uid":1690884,"ip_address":"","ucode":"DCAD04665E2CF8","user_header":"https://static001.geekbang.org/account/avatar/00/19/cd/04/e27b7803.jpg","comment_is_top":false,"comment_ctime":1638415228,"is_pvip":false,"replies":[{"id":"117762","content":"好问题，由于咱们这门课程的定位，是入门课，所有很多东西，都没能介绍的更深入，老弟问了个非常好的问题，这个问题在《Spark性能调优实战》有详细的介绍，我把它贴出来，供老弟参考哈<br><br>“<br>在等值数据关联中，Spark 会尝试按照 BHJ &gt; SMJ &gt; SHJ 的顺序依次选择 Join 策略。在这三种策略中，执行效率最高的是 BHJ，其次是 SHJ，再次是 SMJ。其中，SMJ 和 SHJ 策略支持所有连接类型，如全连接、Anti Join 等等。BHJ 尽管效率最高，但是有两个前提条件：一是连接类型不能是全连接（Full Outer Join）；二是基表要足够小，可以放到广播变量里面去。<br><br>那为什么 SHJ 比 SMJ 执行效率高，排名却不如 SMJ 靠前呢？这是个非常好的问题。我们先来说结论，相比 SHJ，Spark 优先选择 SMJ 的原因在于，SMJ 的实现方式更加稳定，更不容易 OOM。回顾 HJ 的实现机制，在 Build 阶段，算法根据内表创建哈希表。在 Probe 阶段，为了让外表能够成功“探测”（Probe）到每一个 Hash Key，哈希表要全部放进内存才行。坦白说，这个前提还是蛮苛刻的，仅这一点要求就足以让 Spark 对其望而却步。<br><br>要知道，在不同的计算场景中，数据分布的多样性很难保证内表一定能全部放进内存。而且在 Spark 中，SHJ 策略要想被选中必须要满足两个先决条件，这两个条件都是对数据尺寸的要求。首先，外表大小至少是内表的 3 倍。其次，内表数据分片的平均大小要小于广播变量阈值。第一个条件的动机很好理解，只有当内外表的尺寸悬殊到一定程度时，HJ 的优势才会比 SMJ 更显著。第二个限制的目的是，确保内表的每一个数据分片都能全部放进内存。<br><br>和 SHJ 相比，SMJ 没有这么多的附加条件，无论是单表排序，还是两表做归并关联，都可以借助磁盘来完成。内存中放不下的数据，可以临时溢出到磁盘。单表排序的过程，我们可以参考 Shuffle Map 阶段生成中间文件的过程。在做归并关联的时候，算法可以把磁盘中的有序数据用合理的粒度，依次加载进内存完成计算。这个粒度可大可小，大到以数据分片为单位，小到逐条扫描。<br><br>正是考虑到这些因素，相比 SHJ，Spark SQL 会优先选择 SMJ。事实上，在配置项 spark.sql.join.preferSortMergeJoin 默认为 True 的情况下，Spark SQL 会用 SMJ 策略来兜底，确保作业执行的稳定性，压根就不会打算去尝试 SHJ。开发者如果想通过配置项来调整 Join 策略，需要把这个参数改为 False，这样 Spark SQL 才有可能去尝试 SHJ。<br>”","user_name":"作者回复","user_name_real":"编辑","uid":"1043100","ctime":1638486030,"ip_address":"","comment_id":324395,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27408219004","product_id":100090001,"comment_content":"SMJ 在执行稳定性方面，远胜于 HJ,这句话怎么理解？<br>还有在做等值关联时，优先级是：Broadcast HJ Shuffle SMJ Shuffle HJ那什么情况下Shuffle HJ会启用呢？","like_count":7,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535580,"discussion_content":"好问题，由于咱们这门课程的定位，是入门课，所有很多东西，都没能介绍的更深入，老弟问了个非常好的问题，这个问题在《Spark性能调优实战》有详细的介绍，我把它贴出来，供老弟参考哈\n\n“\n在等值数据关联中，Spark 会尝试按照 BHJ &gt; SMJ &gt; SHJ 的顺序依次选择 Join 策略。在这三种策略中，执行效率最高的是 BHJ，其次是 SHJ，再次是 SMJ。其中，SMJ 和 SHJ 策略支持所有连接类型，如全连接、Anti Join 等等。BHJ 尽管效率最高，但是有两个前提条件：一是连接类型不能是全连接（Full Outer Join）；二是基表要足够小，可以放到广播变量里面去。\n\n那为什么 SHJ 比 SMJ 执行效率高，排名却不如 SMJ 靠前呢？这是个非常好的问题。我们先来说结论，相比 SHJ，Spark 优先选择 SMJ 的原因在于，SMJ 的实现方式更加稳定，更不容易 OOM。回顾 HJ 的实现机制，在 Build 阶段，算法根据内表创建哈希表。在 Probe 阶段，为了让外表能够成功“探测”（Probe）到每一个 Hash Key，哈希表要全部放进内存才行。坦白说，这个前提还是蛮苛刻的，仅这一点要求就足以让 Spark 对其望而却步。\n\n要知道，在不同的计算场景中，数据分布的多样性很难保证内表一定能全部放进内存。而且在 Spark 中，SHJ 策略要想被选中必须要满足两个先决条件，这两个条件都是对数据尺寸的要求。首先，外表大小至少是内表的 3 倍。其次，内表数据分片的平均大小要小于广播变量阈值。第一个条件的动机很好理解，只有当内外表的尺寸悬殊到一定程度时，HJ 的优势才会比 SMJ 更显著。第二个限制的目的是，确保内表的每一个数据分片都能全部放进内存。\n\n和 SHJ 相比，SMJ 没有这么多的附加条件，无论是单表排序，还是两表做归并关联，都可以借助磁盘来完成。内存中放不下的数据，可以临时溢出到磁盘。单表排序的过程，我们可以参考 Shuffle Map 阶段生成中间文件的过程。在做归并关联的时候，算法可以把磁盘中的有序数据用合理的粒度，依次加载进内存完成计算。这个粒度可大可小，大到以数据分片为单位，小到逐条扫描。\n\n正是考虑到这些因素，相比 SHJ，Spark SQL 会优先选择 SMJ。事实上，在配置项 spark.sql.join.preferSortMergeJoin 默认为 True 的情况下，Spark SQL 会用 SMJ 策略来兜底，确保作业执行的稳定性，压根就不会打算去尝试 SHJ。开发者如果想通过配置项来调整 Join 策略，需要把这个参数改为 False，这样 Spark SQL 才有可能去尝试 SHJ。\n”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638486030,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320071,"user_name":"LJK","can_delete":false,"product_type":"c1","uid":1199213,"ip_address":"","ucode":"12B2441099FF1D","user_header":"https://static001.geekbang.org/account/avatar/00/12/4c/6d/c20f2d5a.jpg","comment_is_top":false,"comment_ctime":1636075573,"is_pvip":false,"replies":[{"id":"116036","content":"广播变量创建超时~ 原因是广播变量封装的数据量太大了，导致在分发的过程中超时，两种解决思路：<br>1）想办法把广播变量封装的内容变小<br>2）增加广播变量超时时间，调大配置项：spark.sql.broadcastTimeout，他的默认值就是这里的300s，把它调大一些就好了","user_name":"作者回复","user_name_real":"吴磊","uid":"1043100","ctime":1636092882,"ip_address":"","comment_id":320071,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5931042869","product_id":100090001,"comment_content":"老师好，工作中碰到过ERROR BroadcastExchangeExec: Could not execute broadcast in 300 secs.的报错，请问这种报错的排查思路以及有哪些可能的原因导致的呢？","like_count":1,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529861,"discussion_content":"广播变量创建超时~ 原因是广播变量封装的数据量太大了，导致在分发的过程中超时，两种解决思路：\n1）想办法把广播变量封装的内容变小\n2）增加广播变量超时时间，调大配置项：spark.sql.broadcastTimeout，他的默认值就是这里的300s，把它调大一些就好了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636092882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341383,"user_name":"Spoon","can_delete":false,"product_type":"c1","uid":1959822,"ip_address":"","ucode":"2FF9193AD482C2","user_header":"https://static001.geekbang.org/account/avatar/00/1d/e7/8e/318cfde0.jpg","comment_is_top":false,"comment_ctime":1649574157,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649574157","product_id":100090001,"comment_content":"使用Boradcast SMJ需要前置排序，纯内存的排序最好也需要O(nlgn)的复杂度，更何况是Sorted Merge可能还会利用磁盘排序，这就得不偿失了","like_count":0},{"had_liked":false,"id":330285,"user_name":"王璀璨","can_delete":false,"product_type":"c1","uid":1408343,"ip_address":"","ucode":"9873E12D503CB4","user_header":"https://static001.geekbang.org/account/avatar/00/15/7d/57/c94b6a93.jpg","comment_is_top":false,"comment_ctime":1641893533,"is_pvip":false,"replies":[{"id":"120667","content":"get_data函数定义的有问题，你只需要把输入、输出的计算逻辑定义清楚就可以了，不要在函数里面引入外面的数据集，比如hospital_data_sheet1，spark是不可能把它序列化的。get_number这udf，后面实际的函数是get_data，所以它需要序列化这个函数：get_data。但是这个函数里面，有一个数据集，这个数据集对于Spark调度系统来说，是透明的，不可能序列化的。所以，把这个数据集去掉，而且，这个函数的计算逻辑，跟这个数据集没有任何关系的。你需要定义一个简单数据处理逻辑。然后最后在result_data = temp_data.withColumn(&#39;total&#39;, get_number(temp_data[&#39;hcp_id&#39;]))这里面调用就好了","user_name":"作者回复","user_name_real":"编辑","uid":"1043100","ctime":1642244059,"ip_address":"","comment_id":330285,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1641893533","product_id":100090001,"comment_content":"老师最近在用spark重构pandas的时候遇到一个问题，在udf中使用filter查询的时候报错<br><br>temp_data = hospital_data_sheet1.groupby([&#39;hcp_id&#39;, &#39;hcp_name&#39;]).count().select(&#39;hcp_id&#39;, &#39;hcp_name&#39;)<br><br>def get_data(data1): <br>    search_data = hospital_data_sheet1.select((hospital_data_sheet1[&#39;hcp_id&#39;] == data1))<br>    total = data1<br>    return total<br>    <br>get_number = F.udf(get_data, StringType())<br>result_data = temp_data.withColumn(&#39;total&#39;, get_number(temp_data[&#39;hcp_id&#39;]))<br>result_data.show()<br><br>最后报错  _pickle.PicklingError: Could not serialize object: TypeError: cannot pickle &#39;_thread.RLock&#39; object   不知道为什么会这样，请老师看一下<br>","like_count":1,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546231,"discussion_content":"get_data函数定义的有问题，你只需要把输入、输出的计算逻辑定义清楚就可以了，不要在函数里面引入外面的数据集，比如hospital_data_sheet1，spark是不可能把它序列化的。get_number这udf，后面实际的函数是get_data，所以它需要序列化这个函数：get_data。但是这个函数里面，有一个数据集，这个数据集对于Spark调度系统来说，是透明的，不可能序列化的。所以，把这个数据集去掉，而且，这个函数的计算逻辑，跟这个数据集没有任何关系的。你需要定义一个简单数据处理逻辑。然后最后在result_data = temp_data.withColumn(&#39;total&#39;, get_number(temp_data[&#39;hcp_id&#39;]))这里面调用就好了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642244059,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325516,"user_name":"慢慢卢","can_delete":false,"product_type":"c1","uid":1329566,"ip_address":"","ucode":"853D399100D83B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/IcDlyK6DaBrssVGlmosXnahdJ4bwCesjXa98iaapSDozBiagZTqSCok6iaktu2wOibvpNv9Pd6nfwMg7N7KTSTzYRw/132","comment_is_top":false,"comment_ctime":1639013990,"is_pvip":false,"replies":[{"id":"118145","content":"这里说的是Spark的Spill和外排机制，正如你所说，内存计算，理论上都该在内存中完成，但实际情况是，数据体量，往往超出内存的限制，因此通过spill和外排，来保证任务的顺利执行。Spark当中很多环节，都会利用磁盘的，比方说shuffle、cache、join、reuseExchange，等等，等等。当然，对于大多数计算，spark还是优先利用内存的，实在放不下，才考虑磁盘","user_name":"作者回复","user_name_real":"编辑","uid":"1043100","ctime":1639061097,"ip_address":"","comment_id":325516,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1639013990","product_id":100090001,"comment_content":"&quot;学习过 Shuffle 之后，我们知道，Shuffle 在 Map 阶段往往会对数据做排序，而这恰恰正中 SMJ 机制的下怀。对于已经排好序的两张表，SMJ 的复杂度是 O(M + N)，这样的执行效率与 HJ 的 O(M) 可以说是不相上下。再者，SMJ 在执行稳定性方面，远胜于 HJ，在内存受限的情况下，SMJ 可以充分利用磁盘来顺利地完成关联计算。因此，考虑到 Shuffle SMJ 的诸多优势，Shuffle HJ 就像是关公后面的周仓，Spark SQL 向来对之视而不见，所以对于 HJ 你大概知道它的作用就行。&quot;<br><br>这段里面提到SMJ可以利用磁盘完成计算，结合前面提到内存管理，能使用磁盘的除了cache、shuffle write外，也就是说内存计算其他过程也会使用到磁盘(比如SMJ)，但我理解内存计算应该完全在内存中，不然就不会有OOM了。  所以这点我没有搞懂，辛苦老师指导解释下。","like_count":0,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537446,"discussion_content":"这里说的是Spark的Spill和外排机制，正如你所说，内存计算，理论上都该在内存中完成，但实际情况是，数据体量，往往超出内存的限制，因此通过spill和外排，来保证任务的顺利执行。Spark当中很多环节，都会利用磁盘的，比方说shuffle、cache、join、reuseExchange，等等，等等。当然，对于大多数计算，spark还是优先利用内存的，实在放不下，才考虑磁盘","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639061097,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318221,"user_name":"Geek_038655","can_delete":false,"product_type":"c1","uid":1657319,"ip_address":"","ucode":"495F542A729F1F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIjUDIRQ0gRictgQpjWia38qjN3pYicfzahAwbntWq93CorhjiaIOVh7j2Fj6a9WxUW85icMxF3r2Ymblg/132","comment_is_top":false,"comment_ctime":1635210310,"is_pvip":false,"replies":[{"id":"115461","content":"这块要说声抱歉，由于是入门篇，所以咱们没有安排这部分课程。大表Join大表属于比较复杂的场景，需要特殊对待，性能篇有介绍具体怎么处理。<br><br>当然，并不是鼓励老弟去买性能篇，不是这个意思，只是交代一下，为什么大表Join大表没有录入咱们这门课。<br><br>老弟有需要的话，我把性能篇里面相关章节的核心内容，copy到评论区，希望对你有所帮助~","user_name":"作者回复","user_name_real":"吴磊","uid":"1043100","ctime":1635259928,"ip_address":"","comment_id":318221,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1635210310","product_id":100090001,"comment_content":"请问：大表join大表怎么优化？","like_count":0,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529143,"discussion_content":"这块要说声抱歉，由于是入门篇，所以咱们没有安排这部分课程。大表Join大表属于比较复杂的场景，需要特殊对待，性能篇有介绍具体怎么处理。\n\n当然，并不是鼓励老弟去买性能篇，不是这个意思，只是交代一下，为什么大表Join大表没有录入咱们这门课。\n\n老弟有需要的话，我把性能篇里面相关章节的核心内容，copy到评论区，希望对你有所帮助~","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1635259928,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":317494,"user_name":"Unknown element","can_delete":false,"product_type":"c1","uid":2028277,"ip_address":"","ucode":"34A129800D0238","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f2/f5/b82f410d.jpg","comment_is_top":false,"comment_ctime":1634815701,"is_pvip":false,"replies":[{"id":"115139","content":"这里并不需要全局有序，只要Task内部两边有序就可以了，老弟不妨想一想为什么~<br><br>提示：本质上，还是要理解，分布式下的Join与单机Join的不同~","user_name":"作者回复","user_name_real":"吴磊","uid":"1043100","ctime":1634890514,"ip_address":"","comment_id":317494,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1634815701","product_id":100090001,"comment_content":"“学习过 Shuffle 之后，我们知道，Shuffle 在 Map 阶段往往会对数据做排序，而这恰恰正中 SMJ 机制的下怀。”<br>老师问下这里 join 之前应该还得再排一次序吧？因为 map 阶段的排序只能保证 reduce task 从每个 map task 拉取过来的数据片段是有序的，但是多个数据片段之间还是无序的吧","like_count":1,"discussions":[{"author":{"id":1043100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ea/9c/230061e7.jpg","nickname":"吴磊","note":"","ucode":"136DC8CF1B10DC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528838,"discussion_content":"这里并不需要全局有序，只要Task内部两边有序就可以了，老弟不妨想一想为什么~\n\n提示：本质上，还是要理解，分布式下的Join与单机Join的不同~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634890514,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1268197,"avatar":"https://static001.geekbang.org/account/avatar/00/13/59/e5/9fd61c8a.jpg","nickname":"GEEKBANG_5135321","note":"","ucode":"D24B09F1DFD72E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576655,"discussion_content":"两张表相同的key肯定在同一个分区，所以在同分区内是排好序的就可以了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1655728725,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2876299,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIw0Nnvrrt9fV1wHVfBlPzrZmxNCRTbWPfNEbCEMtuoj6gw0LlMbbS3gtRLgLMfCoAV3TXsk5giavw/132","nickname":"Geek_b2839b","note":"","ucode":"6D8ABA989AB724","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574395,"discussion_content":"map阶段排序完后，reduce拉取的时候也会总体做归并排序，因此join的时候已经保证了有序","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1654044377,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}