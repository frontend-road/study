{"id":464927,"title":"11 | 矢量运算：Java的机器学习要来了吗？","content":"<p>你好，我是范学雷。今天，我们讨论Java的矢量运算。</p><p>Java的矢量运算，我写这篇文章的时候还在孵化期，还没有发布预览版。我们之所以选取了这样一个还处于孵化期的技术，主要是因为这个技术代表了Java语言发展的一个重要方向，在未来一定会有着重要的影响。早一点了解这样的技术，除了扩展视野之外，还能够帮助我们制定未来几年要学习或者要使用的技术路线。</p><p>我们从阅读案例开始，看一看没有矢量运算的时候，Java是怎么支持科学计算的；然后，我们再看看矢量运算能够带来什么样的变化。</p><h2>阅读案例</h2><p>我想，你对线性方程（或者说一次方程）一定不陌生。一般情况下，我们可以把线性方程表述成下面的形式。</p><p><img src=\"https://static001.geekbang.org/resource/image/ed/c8/edf1d437a318f298ef09769f76c37fc8.png?wh=1186x100\" alt=\"\"></p><p>其中$a_{0}$，$a_{1}$，$a_{n-1}$表示的是常数，$x_{0}$，$x_{1}$，$x_{n-1}$表示的是变量，而$y$就表示$a_{i}$和$x_{i}$的组合结果。$n$表示未知变量的数目，通常，我们也把它称为方程的维度。</p><!-- [[[read_end]]] --><p>如果给定方程式右边的常数和变量，我们就能计算出方程式左边的$y$数值了。那么，该怎么用代码表示这个方程式呢？我们可以把$a_{0}$，$a_{1}$，$a_{n-1}$表示的常数放到一个数组里，把$x_{0}$，$x_{1}$，$x_{n-1}$表示的变量放到另外一个数组里。下面的代码里，变量a和x就可以用来表示一个有四个维度的一次方程组。</p><pre><code class=\"language-java\">static final float[] a = new float[] {0.6F, 0.7F, 0.8F, 0.9F};\nstatic final float[] x = new float[] {1.0F, 2.0F, 3.0F, 4.0F};\n</code></pre><p>能用Java的变量来表示一次方程，我们也就能够计算线性方程的结果了。下面的代码，就是一个实现的办法。</p><pre><code class=\"language-java\">private static Returned&lt;Float&gt; sumInScalar(float[] a, float[] x) {\n    if (a == null || x == null || a.length != x.length) {\n        return new Returned.ErrorCode(-1);\n    }\n    float[] y = new float[a.length];\n    for (int i = 0; i &lt; a.length; i++) {\n        y[i] = a[i] * x[i];\n    }\n    float r = 0F;\n    for (int i = 0; i &lt; y.length; i++) {\n        r += y[i];\n    }\n    return new Returned.ReturnValue&lt;&gt;(r);\n}\n</code></pre><p>在上面的代码里，我们先计算$a_{i}$和$x_{i}$的乘积，然后再计算乘积结果的总和。其中的乘法运算，就是我们常说的标量运算。为了方便讨论，我把乘法运算的代码单独拿出来，粘贴在下面。</p><pre><code class=\"language-java\">float[] y = new float[a.length];\nfor (int i = 0; i &lt; a.length; i++) {\n    y[i] = a[i] * x[i];\n}\n</code></pre><p>如果我们仔细观察线性方程就会发现，对于每一个纬度，$a_{i}$和$x_{i}$是互不影响的， 当然它们的乘积也是互不影响的。既然每个维度的计算都互不影响，那么我们能不能并行计算呢？</p><h2>矢量运算</h2><p>Java的矢量运算就是使用单个指令并行处理多个数据的一个尝试（单指令多数据，Single Instruction Multiple Data）。</p><p>在现代的微处理器（CPU）中，一个控制器可以控制多个平行的处理单元；在现代的图形处理器（GPU）中呢，更是拥有强大的并发处理能力和可编程流水线。这些处理器层面的技术，为软件层面的单指令多数据处理提供了物理支持。Java矢量运算的设计和实现，也是希望能够借助现代处理器的这种能力，提高运算的性能。</p><p>为了使用单指令多数据的指令，我们需要把不同数据的运算独立出来，让并行运算成为可能。而数学里的矢量运算，恰好就能满足这样的要求。</p><p>如果使用矢量，我们可以把线性方程表述成下面的形式（使用向量的数量积形式）：</p><p><img src=\"https://static001.geekbang.org/resource/image/a5/0d/a588097f5d725f00ee33405a58a8950d.png?wh=1159x234\" alt=\"\"></p><p>其中，$a$，$x$和$y^{'}$是三个n维的矢量。</p><p><img src=\"https://static001.geekbang.org/resource/image/01/25/01de675d1d2f528068b246d013efbb25.png?wh=1083x192\" alt=\"\"><br>\n好了，现在我们可以看看Java是怎么表达矢量的了。下面代码里的变量a，和前面阅读案例里a是一样的，它以数组的形式表示；变量va，就是变量a的矢量表达形式。fromArray这个方法，可以把一个数组变量，转换成一个矢量的变量。</p><pre><code class=\"language-java\">static final float[] a = new float[] {0.6F, 0.7F, 0.8F, 0.9F};\nstatic final FloatVector va =\n        FloatVector.fromArray(FloatVector.SPECIES_128, a, 0);\n        \nstatic final float[] x = new float[] {1.0F, 2.0F, 3.0F, 4.0F};\nstatic final FloatVector vx =\n        FloatVector.fromArray(FloatVector.SPECIES_128, x, 0);\n</code></pre><p>有了表示矢量的办法，我们就可以试着使用矢量运算的办法，来计算线性方程的结果了。下面的代码，就是一个简化了的实现。</p><pre><code class=\"language-java\">private static Returned&lt;Float&gt; sumInVector(FloatVector va, FloatVector vx) {\n    if (va == null || vx == null || va.length() != vx.length()) {\n        return new Returned.ErrorCode(-1);\n    }\n    \n    // FloatVector vy = va.mul(vx);\n    float[] y = va.mul(vx).toArray();\n    \n    float r = 0F;\n    for (int i = 0; i &lt; y.length; i++) {\n        r += y[i];\n    }\n    return new Returned.ReturnValue&lt;&gt;(r);\n}\n</code></pre><p>这个运算的关键部分是其中的矢量运算，也就是下面这行代码。</p><pre><code class=\"language-java\">FloatVector vy = va.mul(vx);\n</code></pre><p>和上面的标量运算的办法相比，矢量运算的代码精简了很多。这是矢量运算的第一个优点。但它的优点还不止于此。</p><p><img src=\"https://static001.geekbang.org/resource/image/e0/88/e001179cd54623b07ef99210ab13f388.jpg?wh=1920x583\" alt=\"图片\"></p><h2>飙升的性能</h2><p>我们前面提到，Java矢量运算的设计，主要是为了性能。 那么，性能的提升能有多大呢？ 我自己做了一个性能测试。虽然这个特性还处于孵化期，但是它的性能测试结果还是很令人振奋的。 就上面这个简单的、四维的矢量来说，和我们在阅读案例里使用的标量运算相比，矢量运算的性能提高了足足有10倍。</p><pre><code class=\"language-plain\">Benchmark                       Mode  Cnt           Score           Error  Units\nVectorBench.scalarComputation  thrpt   15   180635563.597 ±  30893274.582  ops/s\nVectorBench.vectorComputation  thrpt   15  1839556188.443 ± 153876900.442  ops/s\n</code></pre><p>对于一个还处于孵化阶段的实现来说，这么大的性能提升是有点超出预料的。</p><p>在密码学和机器学习领域，通常需要处理几百甚至几千维的数据。一般情况下，为了能够使用处理器的计算优势，我们经常需要特殊的设计以及内嵌于JVM的本地代码来获得硬件加速。这样的限制，让普通代码的计算很难获得硬件加速的好处。</p><p>希望成熟后的Java矢量运算，能在这些领域有出色的表现，让普通的代码获得处理器的单指令多数据的强大运算能力。毕竟，只有单指令多数据的优势能够被普通的Java应用程序广泛使用，Java才能在机器学习、科学计算这些领域获得计算优势。</p><p>如果从机器学习在未来的重要性来说，Java在科学计算领域的拓展来得也许正是时候。</p><h2>总结</h2><p>好，到这里，我来做个小结。前面，我们讨论了Java的矢量运算这个尚处于孵化阶段的新特性，对Java的矢量运算这个新特性有了一个初始的印象。</p><p>如果Java矢量运算成熟起来，许多领域都可以从这个新特性中受益，包括但是不限于机器学习、线性代数、密码学、金融和JDK 本身的代码。</p><p>这一次学习的主要目的，就是让你对矢量运算有一个基本的印象。这样的话，如果你的代码里有大量的数值计算，也许可以考虑在将来使用矢量运算获得硬件的并行计算能力，大幅度提高代码的性能。</p><p>由于矢量运算尚处于孵化阶段，目前我们还不需要学习它的API，知道Java有这个发展方向，并且能够思考你的代码潜在的改进空间就足够了。知道了这个方向，等Java矢量运算正式发布的时候，你就可以尽早地改进你的代码，从而获得领先的优势了。</p><p>如果面试中聊到了数值计算的性能，你应该知道有矢量运算这么一个潜在的方向，以及“单指令多数据”这么一个术语。</p><h2>思考题</h2><p>其实，今天的这个新特性，是练习使用JShell快速学习新技术的一个好机会。使用阅读案例里提供的数据，你能够使用JShell，快速地表示出下面的这个矢量吗？</p><p>$$y{'} = ax$$</p><p>需要注意的是，要想使用孵化期的JDK技术，需要在JShell里导入孵化期的JDK模块，就像下面的例子这样。</p><pre><code class=\"language-java\">$ jshell --add-modules jdk.incubator.vector -v\n|&nbsp; Welcome to JShell -- Version 17\n|&nbsp; For an introduction type: /help intro\n\njshell&gt; import jdk.incubator.vector.*;\n</code></pre><p>欢迎你在留言区留言、讨论，分享你的阅读体验以及你的设计和代码。我们下节课见！</p><p>注：本文使用的完整的代码可以从<a href=\"https://github.com/XueleiFan/java-up/tree/main/src/main/java/co/ivi/jus/vector\">GitHub</a>下载，你可以通过修改<a href=\"https://github.com/XueleiFan/java-up/tree/main/src/main/java/co/ivi/jus/vector\">GitHub</a>上<a href=\"https://github.com/XueleiFan/java-up/blob/main/src/main/java/co/ivi/jus/vector/review/xuelei/vector.jsh\">review template</a>代码，完成这次的思考题。如果你想要分享你的修改或者想听听评审的意见，请提交一个 GitHub的拉取请求（Pull Request），并把拉取请求的地址贴到留言里。这一小节的拉取请求代码，请在<a href=\"https://github.com/XueleiFan/java-up/blob/main/src/main/java/co/ivi/jus/vector/review\">矢量运算专用的代码评审目录</a>下，建一个以你的名字命名的子目录，代码放到你专有的子目录里。比如，我的代码，就放在vector/review/xuelei的目录下面。</p>","neighbors":{"left":{"article_title":"10 | Flow，是异步编程的终极选择吗？","id":464209},"right":{"article_title":"12 | 外部内存接口：零拷贝的障碍还有多少？","id":465899}},"comments":[{"had_liked":false,"id":325299,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1638896477,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18818765661","product_id":100097301,"comment_content":"看个热闹","like_count":4},{"had_liked":false,"id":359365,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"浙江","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1665476696,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665476696","product_id":100097301,"comment_content":"学习打卡，Java矢量运算","like_count":0},{"had_liked":false,"id":330724,"user_name":"发光如星","can_delete":false,"product_type":"c1","uid":1087348,"ip_address":"","ucode":"1176C2EB6CC401","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/74/49d150d7.jpg","comment_is_top":false,"comment_ctime":1642132435,"is_pvip":true,"replies":[{"id":"120619","content":"嗨，我要是回答了这个问题，就会暴露我对于Scala的了解仅限于名字。小伙伴们，有了解的吗？ 帮忙回答一下？","user_name":"作者回复","user_name_real":"编辑","uid":"1111315","ctime":1642146548,"ip_address":"","comment_id":330724,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1642132435","product_id":100097301,"comment_content":"这个功能是不是scala已经具备了的","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546062,"discussion_content":"嗨，我要是回答了这个问题，就会暴露我对于Scala的了解仅限于名字。小伙伴们，有了解的吗？ 帮忙回答一下？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642146548,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326278,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1639458240,"is_pvip":false,"replies":[{"id":"118532","content":"哈哈，每个人的案头，都有一堆的未来计划。 其实，这是单指令多数据技术在CPU&#47;GPU指令集里成熟的结果。","user_name":"作者回复","user_name_real":"编辑","uid":"1111315","ctime":1639524144,"ip_address":"","comment_id":326278,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1639458240","product_id":100097301,"comment_content":"矢量运算的代码实现更符合oo的风格。并且知道背后运行逻辑，理解起来没任何障碍。哪怕没有性能提升，它的推行也没有太大问题，相比标量只有优势没有劣势。那么问题来了，为什么到现在才支持，之前不支持是出于什么考虑吗？","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538792,"discussion_content":"哈哈，每个人的案头，都有一堆的未来计划。 其实，这是单指令多数据技术在CPU/GPU指令集里成熟的结果。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639524144,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325562,"user_name":"哦吼掉了","can_delete":false,"product_type":"c1","uid":1232599,"ip_address":"","ucode":"1F89B1BA1EEF52","user_header":"https://static001.geekbang.org/account/avatar/00/12/ce/d7/8168e1bf.jpg","comment_is_top":false,"comment_ctime":1639021416,"is_pvip":true,"replies":[{"id":"118118","content":"第一个问题，我也不知道该怎么办。我使用的是IDEA，花费了很长时间，我也没搞清楚IDEA是怎么支持孵化期的特性的。有经验的小伙伴们帮帮忙。<br><br>第二个问题，我没有看到为什么不可以，应该和脚本大小没有关系。","user_name":"作者回复","user_name_real":"编辑","uid":"1111315","ctime":1639032865,"ip_address":"","comment_id":325562,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1639021416","product_id":100097301,"comment_content":"遇到的问题：程序包 jdk.incubator.vector 已在模块 jdk.incubator.vector 中声明, 但该模块不在模块图中；<br>咨询的问题：如果稍微大一点的java脚本(一堆测试代码)，能使用jshell导入执行么？","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537319,"discussion_content":"第一个问题，我也不知道该怎么办。我使用的是IDEA，花费了很长时间，我也没搞清楚IDEA是怎么支持孵化期的特性的。有经验的小伙伴们帮帮忙。\n\n第二个问题，我没有看到为什么不可以，应该和脚本大小没有关系。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639032866,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1059926,"avatar":"https://static001.geekbang.org/account/avatar/00/10/2c/56/ff7a9730.jpg","nickname":"许灵","note":"","ucode":"0296EC9929B570","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537572,"discussion_content":"第一个问题，是需要在src下新建module-info.java类，引入新的特性。\nmodule cn.ivi.jus {\n    requires jdk.incubator.foreign;\n    requires jdk.incubator.vector;\n    requires jmh.core;\n}\n同时需要修复两个类的package错误","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1639106565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325363,"user_name":"过去  Sword  将来","can_delete":false,"product_type":"c1","uid":1399935,"ip_address":"","ucode":"BC459EBEE00184","user_header":"https://static001.geekbang.org/account/avatar/00/15/5c/7f/3c46f3c5.jpg","comment_is_top":false,"comment_ctime":1638932012,"is_pvip":false,"replies":[{"id":"118063","content":"嗯，要是说一下就好了。 孵化期的特性， 建议使用最新版本的。","user_name":"作者回复","user_name_real":"编辑","uid":"1111315","ctime":1638945916,"ip_address":"","comment_id":325363,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1638932012","product_id":100097301,"comment_content":"老师，能否和之前那样说一下新特性在哪个版本以预览版出来的呢？个人电脑装了17，但是刚刚我在公司电脑jdk11输入FloatVector发现并没有😂","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537049,"discussion_content":"嗯，要是说一下就好了。 孵化期的特性， 建议使用最新版本的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638945916,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1337030,"avatar":"https://static001.geekbang.org/account/avatar/00/14/66/c6/d779dfb6.jpg","nickname":"松松","note":"","ucode":"EB2A80CF7BCA4B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537007,"discussion_content":"还没进预览版，属于孵化阶段，需要手动导入","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638933523,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}