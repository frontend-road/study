{"id":689782,"title":"31｜缓存过期：为什么 Redis 不立刻删除已经过期的数据？","content":"<p>你好，我是大明。今天我们来讨论一个全新的话题——缓存。</p><p>缓存在实践中、面试中的重要性不言而喻。应该说，缓存用好了就能解决你大部分的性能问题。反过来，如果缓存没有用好，那么系统性能是不可能好的。</p><p>缓存在面试中也分成两个方向：一个是理论上缓存的设计，包括 Redis 的原理；一个是在实践中使用缓存的案例，聚焦在怎么使用缓存，怎么解决一致性问题。</p><p>那么今天我们先从第一个话题缓存的过期时间开始。</p><h2>缓存命中率</h2><p>缓存命中率是我们用来衡量缓存效果的关键指标。它的计算方式是缓存命中次数除以查询总次数。</p><p>在实践中，你要努力把缓存命中率提高到 90% 以上。不过，缓存命中率也受到业务模式的影响，有一些业务是没有办法做到 90% 以上的。</p><p>比如说有一些场景是缓存计算时间很长的结果，但是大部分请求都是小请求，也就是都不会命中缓存，这种时候缓存命中率可能连一半都没有。但是因为这些小请求计算很快，所以走实时计算响应时间也能接受，而且实时计算的数据更加准确。</p><p><img src=\"https://static001.geekbang.org/resource/image/8y/73/8yy71b8106121d5d9f992542c65a6e73.png?wh=1920x799\" alt=\"图片\"></p><h2>实现过期机制的一般思路</h2><p>从系统设计的角度来说，过期之类的机制可以考虑使用四种思路来实现。</p><ul>\n<li>定时删除：是指针对每一个需要被删除的对象启动一个计时器，到期之后直接删除。</li>\n<li>延迟队列：也就是把对象放到一个延迟队列里面。当从队列里取出这个对象的时候，就说明它已经过期了，这时候就可以删除。</li>\n<li>懒惰删除：是指每次要使用对象的时候，检查一下这个对象是不是已经过期了。如果已经过期了，那么直接删除。</li>\n<li>定期删除：是指每隔一段时间就遍历对象，找到已经过期的对象删除掉。<br>\n针对这四种思路的优缺点，你可以参考下面的表格。</li>\n</ul><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/5e/ae/5e46e9e857e289ace47d67aa50640fae.png?wh=1920x787\" alt=\"图片\"></p><p>大部分的缓存框架，比如Redis，它们都使用了懒惰删除和定期删除结合的策略。定时删除和延迟队列对于缓存这种场景来说，性能太差。</p><h2>面试准备</h2><p>你在面试前，需要弄清楚一些信息。</p><ul>\n<li>你的业务是如何使用缓存的，命中率有多少？业务高峰的时候消耗了多少内存？</li>\n<li>你的业务使用缓存的时候过期时间是多少？当时为什么设置成这个过期时间？</li>\n<li>有没有一些不一般的业务场景，你确定过期时间的时候是费了比较多精力的？</li>\n<li>你有没有调整过缓存的过期时间，怎么调整的？你为什么这么调整？最好就是调大过期时间和调小过期时间的案例你各准备一个。</li>\n</ul><p>在面试过程中，面试官可能会直接问你缓存中间件的原理。比如说你的简历上提到了 Redis，那么面试官就可能直接问你 Redis，进一步就可能问到 Redis 的过期 key 的删除策略。</p><p>另外一种可能是你在和面试官聊项目的时候，你讲到你项目中使用了缓存，于是面试官就可能会问你具体细节，也就包括缓存的过期时间等内容。</p><p>如果面试官问到了这些问题，也可以用本节课的内容来回答。</p><ol>\n<li>你是如何确定缓存的过期时间的？</li>\n<li>过期时间过长或者过短有什么问题？</li>\n<li>怎么优化缓存的命中率？</li>\n<li>Redis 是如何处理过期 key 的？是立刻删除吗？</li>\n<li>当你读 Redis 从库的时候，有可能读到过期 key 吗？</li>\n<li>Redis 的 RDB 或者 AOF 是如何处理过期 key 的？</li>\n</ol><h2>基本思路</h2><p>优化过期时间有两个方向。第一个是调大过期时间，提高缓存命中率，并提高性能。</p><blockquote>\n<p>早期我优化过一个缓存的过期时间，从十分钟延长到了二十分钟，缓存命中率从 80% 提升到了 90%。当然，代价就是 Redis 中缓存了更多的 key，占用了更多内存。</p>\n</blockquote><p>又或者是减少过期时间，从而减少 Redis 的消耗。</p><blockquote>\n<p>我刚进我们公司的时候，发现我们公司的过期时间基本上都是统一的半小时，而没有考虑具体的业务特征。后来我排查之后，发现很多业务根本用不了半小时。比如说我把一个业务的过期时间降低到 10 分钟，缓存命中率基本上没有变化。经过这样的排查之后，Redis 的开销降了 30%。</p>\n</blockquote><p>在你提到了缓存过期时间之后，面试官就很可能问你，你使用的缓存是如何删除过期对象的？这个时候你要根据自己使用的缓存来回答，但是基本上不会超出我在前置知识里面讲到的四种思路。这里我以 Redis 为例来说明。</p><blockquote>\n<p>我使用的是 Redis，Redis 的过期删除机制简单来说就是懒惰删除和定期删除。懒惰删除是指Redis 会在查询 key 的时候检测这个 key 是否已经过期，如果已经过期，那么 Redis 就会顺手删除这个 key。<br>\n&nbsp;<br>\n单纯使用懒惰删除肯定是不行的，因为一个 key 过期之后，可能一直没有被使用过。所以 Redis 结合了定期删除策略。Redis 每运行一段时间，就会随机挑选出一部分 key，查看是否过期，如果已经过期了，就把 key 删除掉。Redis 的定期删除要比我这里讲的复杂很多，毕竟 Redis 是一个追求高性能的中间件，所以肯定要有复杂的机制控制住定期删除的开销。</p>\n</blockquote><p>最后一句也就是为了引出后面的亮点。当你回答完这一句之后，就可以等着面试官追问了。面试官追问的问题会有很多，我们一个个看。</p><h3>为什么不立刻删除？</h3><p>一个经典问题就是，为什么不立刻删除过期的 key？答案就是做不到，或者即便能做到，代价也太高。</p><p>最简单的做法就是我在前置知识里面提到的，每一个 key 启动一个定时器，到时间了就删掉。但是这里会有2个问题。</p><ol>\n<li>key 太多了，一个 key 一个计时器，Redis 承受不住那么大的计时器开销。</li>\n<li>修改过期时间的时候，要重置计时器的时间，这会进一步带来额外的开销。</li>\n</ol><p>所以这个思路肯定不行。</p><p>那么还有一种思路就是把所有的 key 额外再按照过期时间组一个延迟队列，排在最前面的就是最近要过期的。不过这个思路也有3个问题。</p><ol>\n<li>延迟队列的本身开销很大，尤其是在 key 很多的情况下。</li>\n<li>修改过期时间需要调整延迟队列中各个 key 的顺序。</li>\n<li>延迟队列一般需要一个线程配合使用，如果引入这个线程，那么 Redis 就需要做更多并发控制，性能会下降。</li>\n</ol><p><img src=\"https://static001.geekbang.org/resource/image/f1/84/f13d9ea81e9587yyfef7421cf84d6084.png?wh=1920x799\" alt=\"图片\"></p><p>总的来说，你在回答的时候可以抓住关键点<strong>性能</strong>来回答。</p><blockquote>\n<p>理论上来说，并不是做不到，只不过代价比较高昂不值得而已。<br>\n&nbsp;<br>\n最简单的做法就是使用定时器，但是定时器本身开销太大，还得考虑在更新过期时间的时候重置定时器。另外一种思路就是使用延迟队列，但是延迟队列本身开销也很大，修改过期时间也要调整延迟队列，还要引入大量的并发控制。<br>\n&nbsp;<br>\n综合来看，并不值得。而定期删除和懒惰删除的策略虽然看上去可能浪费内存，但是这个浪费很少，并且对响应时间也没那么大的影响。</p>\n</blockquote><p>既然没办法立刻删除，只能定期删除，那么我们怎么控制这个开销呢？</p><h3>Redis 是怎么控制定期删除开销的？</h3><p>假如说现在 Redis 有 100 万 key，那么显然 Redis 在定期删除过期 key 的时候，是不可能遍历完这 100 万个 key 的。而 Redis 也确实没有遍历全部的 key，简单来说 Redis 会在每一个循环中遍历 DB。如果当次定期删除循环没有遍历完全部 DB，那么下一个循环就会从当次最后遍历的 DB 的下一个继续遍历下去。</p><p><img src=\"https://static001.geekbang.org/resource/image/51/68/517fc00a423affbe5cb88989659a3a68.png?wh=1920x799\" alt=\"图片\"></p><p>针对每一个 DB，都会有这样一个步骤。</p><ol>\n<li>如果 DB 里存放的 key 都没有设置过期时间，那么遍历下一个 DB。</li>\n<li>从设置了过期时间的 key 中抽一批，默认一批是 25 个。</li>\n<li>逐个检查这些 key。如果这个 key 已经过期了，那么执行删除操作。</li>\n<li>每遍历 16 个 key，就检测执行时间。如果执行时间已经超过了阈值，那么就中断这一次定期删除循环。</li>\n<li>如果这一批过期的 key 比例超过一个阈值，那么就抽取下一批 key 来检查，这个阈值也是可以通过参数来控制的。</li>\n</ol><p>上面这个步骤你记不住也没关系，因为在面试中很少会考察 Redis 的源码，而且 Redis 这部分的代码修改过很多次，也无从面起。</p><p>你只需要按照我最后总结出来的来回答就可以了。</p><blockquote>\n<p>在每一个定期删除循环中，Redis 会遍历 DB。如果这个 DB 完全没有设置了过期时间的 key，那就直接跳过。否则就针对这个 DB 抽一批 key，如果 key 已经过期，就直接删除。<br>\n&nbsp;<br>\n如果在这一批 key 里面，过期的比例太低，那么就会中断循环，遍历下一个 DB。如果执行时间超过了阈值，也会中断。不过这个中断是整个中断，下一次定期删除的时候会从当前 DB 的下一个继续遍历。<br>\n&nbsp;<br>\n总的来说，<strong>Redis 是通过控制执行定期删除循环时间来控制开销</strong>，这样可以在服务正常请求和清理过期 key 之间取得平衡。</p>\n</blockquote><p>这个时候，有些面试官会问为什么要随机抽样，同一个 DB 内按照顺序遍历下去不就可以吗？你就要回答<strong>确保每个 key 都能遍历到</strong>。</p><blockquote>\n<p>随机只是为了保证每个 key 都有一定概率被抽查到。假设说我们在每个 DB 内部都是从头遍历的话，那么如果每次遍历到中间，就没时间了，那么 DB 后面的 key 你可能永远也遍历不到。</p>\n</blockquote><p><img src=\"https://static001.geekbang.org/resource/image/62/cc/627222a024ca0c871d1e74a214c32acc.png?wh=1920x799\" alt=\"图片\"></p><p>你可以进一步总结大部分缓存控制开销的套路，也就是<strong>控制时间或者控制个数</strong>。</p><blockquote>\n<p>在一些本地缓存的实现里面，也基本上会控制住这个开销。但是做法会比较简单。一种做法是循环的每个迭代都检测执行时间，超过某个阈值了就中断循环。另外一种做法是遍历够了就结束，比如说固定遍历 10000 个。当然也可以考虑两种策略混合使用。</p>\n</blockquote><p>实际上，Redis 抽样 key 的算法变过几次，不过这部分内容在面试中是不会考察的，所以准备面试的话其实不需要深入了解。但是如果你想要参考 Redis 来设计本地缓存，那么就可以深入了解一下。</p><h3>如何控制定期删除的频率？</h3><p>在 Redis 里面，定期删除的频率可以通过 hz 参数来控制。不过 hz 控制的是所有的后台任务，并不是单独控制这一个定期删除循环。</p><p>假如说 hz 的值是 N，那么就意味着每 1/N 秒就会执行一次后台任务。举例来说，如果 hz=10，那么就意味着每 100ms 执行一次后台任务。</p><p><img src=\"https://static001.geekbang.org/resource/image/21/76/210422533009e84bb629a06677221c76.png?wh=1920x799\" alt=\"图片\"></p><p>正常来说，Redis 这个值不要超过 100。越大就意味着后台任务执行的频率越高，CPU 使用率越高。</p><p>与之对应的是一个 dynamic-hz 选项。在开启了这个选项之后，hz 的值会被认为是一个基数，而实际的值是 Redis 自己动态计算的。</p><p>所以如果面试官问到了如何控制这个频率，你就可以回答 hz 和 dynamic-hz。</p><blockquote>\n<p>在 Redis 里面有一个参数叫做 hz，它代表的是 Redis 后台任务运行的频率。正常来说，这个值不需要调，即便调整也不要超过 100。与之相关的是 dynamic-hz 参数。这个参数开启之后，Redis 就会在 hz 的基础上动态计算一个值，用来控制后台任务的执行频率。</p>\n</blockquote><p>在这之后有一个问题，就是 Redis 在使用了主从集群的时候，如果查询从库，有没有可能查询到过期的数据？</p><h3>从库处理过期 key</h3><p>在 Redis 3.2 之前有一个非常著名的 Bug，就是你在从库查询一个 key 的时候，即便这个 key 已经过期，但是你还是能够拿到数据。后来这个 Bug 在 3.2 修复了。当下如果你在从库上查询 key，而这个 key 已经过期了，那么 Redis 从库会返回给你 NULL。</p><p>注意，从库和主库的区别是，主库发现 key 过期后会执行删除操作。但是从库不会，从库会等待主库的删除命令。</p><p><img src=\"https://static001.geekbang.org/resource/image/43/be/43187e3a40c4ddae59e7c81d453df0be.png?wh=1920x799\" alt=\"图片\"></p><p>有时候面试官可能会问你，如果一个 key 过期了，那么还能不能拿到这个 key 的值？这时候你就应该知道，面试官问的是这个 Bug，你区分回答 3.2 之前的行为和 3.2 之后的行为就可以。</p><blockquote>\n<p>在 Redis 的 3.2 版本之前，如果读从库的话，是有可能读取到已经过期的 key。后来在 3.2 版本之后这个 Bug 就被修复了。不过从库上的懒惰删除特性和主库不一样。主库上的懒惰删除是在发现 key 已经过期之后，就直接删除了。但是在从库上，即便 key 已经过期了，它也不会删除，只是会给你返回一个 NULL 值。</p>\n</blockquote><p>因为讨论到了从库之类的问题，那么可能会把话题引导到主从同步，以及 Redis Sentinel 和 Redis Cluster 等问题上，课程后面也会讨论这些。</p><p>Redis 本身也有持久化机制，那么问题来了，Redis 在持久化的时候怎么处理这些过期的 key？</p><h3>持久化处理过期 key</h3><p>Redis 里面有两种持久化文件，RDB 和 AOF。</p><p>RDB 简单来说就是快照文件，也就是当 Redis 执行 SAVE 或者 BGSAVE 命令的时候，就会把内存里的所有数据都写入 RDB 文件里。后续主库可以载入这个文件来恢复数据，从库也可以利用这个文件来完成数据同步。对于 RDB 来说，一句话总结就是<strong>主库不读不写，从库原封不动。</strong></p><p>也就是说，在生成 RDB 的时候，主库会忽略已经过期的 key。在主库加载 RDB 的时候，也会忽略 RDB 中已经过期的 key。而从库则是整个 RDB 都加载进来，因为从库在加载完 RDB 之后，很快就能从主库里面收到删除的指令，从而删除这个过期的 key。</p><p>AOF 是之前我们就提到过的 Append Only File。Redis 用这个文件来逐条记录执行的修改数据的命令。不管 Redis 是定期删除，还是懒惰删除过期 key，<strong>Redis 都会记录一条 DEL 命令</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/2e/7d/2e6975c57615715b55e0cd7a7f22c57d.png?wh=1920x682\" alt=\"图片\"></p><p>因为每一条修改命令都要记录，所以 AOF 就会很大。这时候 Redis 就会考虑重写整个 AOF，也就是直接把整个内存中的数据写下来，写完就可以把之前的 AOF 文件都删了。在重写过程中，Redis 会忽略已经过期的 key。</p><h2>亮点方案</h2><p>这一次的亮点方案我给你准备了理论和实践两方面的内容。理论上是讨论该如何确定一个合理的过期时间，而实践方面我给你三个有特色的过期时间案例。</p><h3>如何确定过期时间？</h3><p>确定过期时间是那种看起来很简单，但是如果之前没有认真思考过就会栽跟头的问题。在回答这个问题之前，你可以想到，如果缓存容量足够大，那么缓存就可以设置成永不过期，所有的请求都会百分百命中。但是问题是我们没有足够的资源。</p><p>所以在实践中就是根据你希望的缓存命中率来确定缓存过期时间。缓存命中率越高，就需要越多的缓存容量，越长的过期时间。</p><p><img src=\"https://static001.geekbang.org/resource/image/d5/bb/d57232565685c07e10ffec2ba0e70ebb.png?wh=1920x806\" alt=\"图片\"></p><p>所以你要<strong>先揭示这三者之间的关系</strong>，然后通过一个简单的例子说明你是如何确定具体的过期时间的。</p><blockquote>\n<p>一般我们是根据缓存容量和缓存命中率确定过期时间的。正常来说，越高缓存命中率，需要越多的缓存容量，越长的过期时间。所以最佳的做法还是通过模拟线上流量来做测试，不断延长过期时间，直到满足命中率的要求。当然，也可以从业务场景出发。比如说，当某个数据被查询出来以后，用户大概率在接下来的三十分钟内再次使用这个对象，那么就可以把过期时间设置成 30 分钟。</p>\n</blockquote><p>这个回答是非常正统的，但是有些时候如果公司资源不足，比如说你原本需要 3G 内存才能满足 90% 的命中率，结果公司只能给你 1G，这个时候你就只能缩短过期时间了，这个时候命中率也会跟着下降。你可以进一步补充这个点。</p><blockquote>\n<p>如果公司的缓存资源不足，那么就只能缩短过期时间，当然代价就是缓存命中率降低。</p>\n</blockquote><p>在这个回答里面，你反复提到了命中率，那么面试官很可能会问你如何确定缓存命中率。你可以说<strong>根据用户体验来确定</strong>。</p><blockquote>\n<p>缓存命中率要根据用户体验来确定。比如说要求 90% 的用户都能直接命中缓存，以保证响应时间在 100ms 以内，那么命中率就不能低于 90%。又或者公司规定了接口的 99 线或者平均响应时间，那么根据自己接口命中缓存和不命中缓存的响应时间，就可以推断出来命中率应该多高。<br>\n&nbsp;<br>\n举个例子，如果公司要求平均响应时间是 300ms，命中缓存响应时间是 100ms，没命中缓存的响应时间是 1000ms，假设命中率是 p，那么 p 要满足$100 \\times p +1000 \\times (1-p) = 300$。</p>\n</blockquote><p>在这个回答里面，p 计算出来大概是 0.78。但是你在面试的时候只需要回答这个等式就可以了，并不需要真的计算出来 p。</p><h3>确定过期时间的案例</h3><p>接下来你在面试的时候可以考虑用一些案例来证明你对计算缓存的过期时间很有经验。你可以先引出这个话题。</p><blockquote>\n<p>理论上是要根据用户体验来确定过期时间，更加直观的做法是根据重试的时间、数据的热度来确定过期时间。</p>\n</blockquote><h4>高并发幂等方案中 Redis 的过期时间</h4><p>第一个是之前我们说过的布隆过滤器-Redis-唯一索引的高并发幂等方案中，确定 Redis 的过期时间的方法。</p><blockquote>\n<p>之前我设计过一个支持高并发的幂等方案，里面用到了 Redis。这个 Redis 会缓存近期已经处理过的业务 key，那么为了避免穿透这个缓存，缓存的过期时间就很关键了。如果过短，缓存命中率太低，请求都落到数据库上，撑不住高并发；如果过长，那么会浪费内存。<br>\n&nbsp;<br>\n所以这个过期时间是和重复请求相关的，例如在我的某个业务里面，重试是很快的，基本上在 10 分钟内就能重试完毕，那么我就把这个 Redis 的 key 的过期时间设置为 10 分钟。<br>\n&nbsp;<br>\n类似的思路也可以用于重试机制。比如说如果流程很漫长，那么可以考虑缓存中间结果，比如说中间某个步骤计算的结果。当触发重试请求的时候，就直接利用中间结果来继续执行。而这些中间结果的过期时间，就会触发重试的时间。</p>\n</blockquote><p>实际中很多过期时间都是根据重试机制来确定的，不过也有一些过期时间是根据数据是不是热点来确定的。</p><h4>热点数据过期时间</h4><p>简单来说，就是越热的数据，过期时间越长。也就是说，如果你能够确定什么样的数据是热点数据，那么这一部分数据你就可以设置更长的过期时间。反过来，一个数据越冷，你就可以将过期时间设置得越短。</p><blockquote>\n<p>也可以考虑根据数据是否是热点来确定过期时间。热点数据我们就会设置很长的过期时间，但是非热点数据，过期时间就可以设置得短一些。比如说我们的业务每个小时都会计算一些榜单数据，那么这些榜单对应的缓存过期时间就是一个小时。<br>\n&nbsp;<br>\n又比如说当某个大 V 发布了一个新作品之后，这个新作品的缓存时间可以保持在数小时。因为我们可以预期大 V 的粉丝会在这几小时内看完这个新作品。而一个已经发布很久的作品，即便要缓存，缓存时间也要设置得比较短，因为这个时候并没有什么人来看。</p>\n</blockquote><p>此外还有一个比较奇诡的方案，就是缓存预加载与超短过期时间。</p><h4>预加载与超短过期时间</h4><p>在一些业务场景里面，用户的行为是可以预料的。比如说列表页和详情页，用户在看到列表页之后，下一个动作比较大的可能就是点击列表页里的某项，查看详情。例如在搜索的时候，用户有意识地搜索了某个关键字，那么看到结果列表页之后，他大概率就会点击列表页中的头几项进一步查看详情。</p><p>抽象地来说，就是用户访问 A 数据的时候，大概率会访问 B 数据。所以你在返回 A 数据时，顺便把 B 数据准备好，丢到缓存里面。那么进一步考虑，这个用户不管有没有访问 B 数据，别人都是用不上的。而且用户也不会一直访问 B 数据，可能就是一分钟或者更短的时间内访问一次两次。所以这个时候你可以把缓存时间设置得很短，来控制住缓存的内存使用率。</p><p>所以，也可以认为这个方案就是用<strong>内存换响应时间</strong>。</p><blockquote>\n<p>早期我们有一个业务场景，就是用户会搜索出一个列表页，然后用户大概率就会点击列表页前面的某些数据。因此我做了一个简单的性能优化，就是预加载缓存。当用户访问列表页的时候，我会异步地把列表页的第一页的数据加载出来放到缓存里面。因为我可以预计的是，接下来用户会直接使用查看列表页中内容的详情信息。那么就会直接命中缓存，而不必再次查询。<br>\n&nbsp;<br>\n当然，因为用户也不一定就会访问，而且就算访问了也就是只访问一两次，因此过期时间可以设置得很短，比如说用一分钟。</p>\n</blockquote><p>这个方案应该说，在实践中的局限性很大，你只有在我提到的这种关联性很强的业务场景中才能使用。但是拿出去面试，就很有用，因为它能体现你对缓存过期时间以及对具体业务场景的深刻理解。</p><h2>面试思路总结</h2><p>让我们来总结一下这节课的主要内容。</p><p>首先在前置知识里面我介绍缓存命中率和实现过期机制的一般思路，你可以结合自己使用的各种缓存来理解。在实践中，我也非常建议你关注一下自己使用的缓存命中率，并且尝试优化一下。</p><p>我们这节课还重点解决了Redis 中和过期时间有关的问题，分别是：</p><ul>\n<li>Redis 具体是怎么处理过期 key 的？懒惰删除加定期删除。</li>\n<li>Redis 为什么不立刻删除？实现立刻删除的代价太高。</li>\n<li>Redis 是怎么控制定期删除的开销的？总的来说是控制执行时间。</li>\n<li>怎么控制 Redis 的定期删除频率？通过 hz 参数和 dynamic-hz 参数控制。</li>\n<li>从库是怎么处理过期 key 的？查询返回 NULL，删除等主库命令。</li>\n<li>Redis 持久化怎么处理过期 key？对于 RDB 来说，主库不读不写，从库原封不动。对于 AOF 来说，正常追加 DEL 命令，重写则是不管。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/1b/1e/1b3ac9cffdaa5b02bd4cyy0058cfc11e.jpg?wh=1948x2327\" alt=\"\"></p><h2>思考题</h2><p>最后请你来思考2个问题。</p><ol>\n<li>你有没有用过本地缓存？你知道它是如何删除过期 key 的吗？</li>\n<li>你有没有遇到过动态确定过期时间的场景？比如说根据请求特征、计算时间、重要性、优先级等，为同一个业务场景的不同请求设置不同的过期时间。</li>\n</ol><p>欢迎你把自己的经验分享到评论区和我互动，也欢迎你把这节课的内容分享给需要的朋友，我们下节课再见！</p>","comments":[{"had_liked":false,"id":380487,"user_name":"penbox","can_delete":false,"product_type":"c1","uid":1052938,"ip_address":"四川","ucode":"59C4F47ACCB7F2","user_header":"https://static001.geekbang.org/account/avatar/00/10/11/0a/59639f1f.jpg","comment_is_top":false,"comment_ctime":1693672840,"is_pvip":true,"replies":[{"id":138598,"content":"是的。不过这个代码写起来麻烦。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1693895741,"ip_address":"广东","comment_id":380487,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"感觉最后的那个预加载案例实际生活中还是比较多的。\n比如说点开一篇文章，只会返回文字，文章中的图片只有浏览到了相应的位置之后才会加载出来。但是等浏览到图片的实际显示位置才开始加载图片，图片显示的速度就可能很慢。所以实际的图片加载的位置会提前一些。\n还有就是比如查看朋友圈的九宫格图片，点开了第一张大图，多半还会打开后面几张。那么就可以先预加载第二张第三张，等真的打开第二张的时候，又继续预加载第四张。\n预加载这种思路，在用户行为可预期的情况下，可以做到既提高用户的使用体验，又不过多地占用服务资源。","like_count":3,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":627205,"discussion_content":"是的。不过这个代码写起来麻烦。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1693895741,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3720570,"avatar":"https://static001.geekbang.org/account/avatar/00/38/c5/7a/c03cb56e.jpg","nickname":"一弦一柱思华年","note":"","ucode":"36F8086A275AA7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":648913,"discussion_content":"这种场景感觉也不是很有必要使用缓存，完全可以让前端在后台进行预加载，这样既不影响用户体验还不占用服务端内存资源","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1722397996,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":385112,"user_name":"程序员花卷","can_delete":false,"product_type":"c1","uid":1665471,"ip_address":"云南","ucode":"DDCFE578C6C428","user_header":"https://static001.geekbang.org/account/avatar/00/19/69/bf/58f70a2a.jpg","comment_is_top":false,"comment_ctime":1702103244,"is_pvip":false,"replies":[{"id":140764,"content":"可以。但是还可以更加高级。\n\n考虑到缓存的数据很多，我们结合了哈希负载均衡和本地缓存。例如说某个特定的商品的信息，一定在特定的节点的本地缓存上，这样可以提高本地缓存的命中率，减少缓存的消耗。\n\n更加好可以是，在抢购的时候，我们的直接不允许这个阶段参与抢购的商品修改，因此我们可以将缓存前置到 BFF （搞 CDN 都可以，或者静态页面）……","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1704190056,"ip_address":"广东","comment_id":385112,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"我在 xxx 零售项目中，为了应对高并发的抢购场景，进一步提高系统的性能，采用了多级缓存即 &quot;本地缓存 + Redis 缓存 + 数据库 &quot;的缓存方案，让本地缓存抗住大流量，Redis 缓存次之，数据库兜底。主要是针对读操作的接口做缓存设计，将抢购活动列表、抢购活动详情、抢购商品列表以及抢购商品详情放到了本地缓存和 Redis 缓存，这些数据在我们平台中都属于热点数据，如何给这些热点数据设置缓存过期时间就尤为重要了，设置短了，命中率低，大量的流量都会打在数据库上；设置长了，会浪费内存空间。\n我们最终是以抢购活动时间来作为缓存过期时间的，假设运营那边添加了一个抢购活动并且持续时间是 2 小时，那么这些数据我们设置的过期时间基本都是 2 小时左右，因为一旦抢购活动结束，这些数据都可能不再是热点数据。为了释放内存，所以会将其清理。\n\n我这么回答OK不，老师，哈哈","like_count":2,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634925,"discussion_content":"可以。但是还可以更加高级。\n\n考虑到缓存的数据很多，我们结合了哈希负载均衡和本地缓存。例如说某个特定的商品的信息，一定在特定的节点的本地缓存上，这样可以提高本地缓存的命中率，减少缓存的消耗。\n\n更加好可以是，在抢购的时候，我们的直接不允许这个阶段参与抢购的商品修改，因此我们可以将缓存前置到 BFF （搞 CDN 都可以，或者静态页面）……","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1704190056,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1258251,"avatar":"https://static001.geekbang.org/account/avatar/00/13/33/0b/fd18c8ab.jpg","nickname":"大胖子呀、","note":"","ucode":"4BADF8096254BE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634861,"discussion_content":"你的本地缓存方案，还要增加一个就是请求负载策略，你要保证同一个用户的请求会负载到相同的机器上，这样可以避免多台机器缓存同样的数据，也可以避免用户负载到其他机器之后，请求速度突然变慢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1704159008,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":389445,"user_name":"Focus","can_delete":false,"product_type":"c1","uid":2545217,"ip_address":"浙江","ucode":"6A8401BECD39D0","user_header":"https://static001.geekbang.org/account/avatar/00/26/d6/41/e664c345.jpg","comment_is_top":false,"comment_ctime":1712592252,"is_pvip":false,"replies":[{"id":141987,"content":"可以的，而且是很好的思路。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1715231116,"ip_address":"广东","comment_id":389445,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"老师，您好！在设置缓存过期时间的时候，是否可以根据业务需要使用这个数据多久来设置过期时间，比如我们知道订单的自动取消时间是X分钟，缓存的过期时间就设置为X分钟？","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":644408,"discussion_content":"可以的，而且是很好的思路。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1715231116,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":381880,"user_name":"ZhiguoXue_IT","can_delete":false,"product_type":"c1","uid":2639055,"ip_address":"山西","ucode":"EAA83F53B54520","user_header":"https://static001.geekbang.org/account/avatar/00/28/44/cf/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1696084331,"is_pvip":false,"replies":[{"id":139228,"content":"赞！","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1696923168,"ip_address":"广东","comment_id":381880,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"1）本地缓存的场景，我们绑定映射关系是用的是本地的hashmap，我理解在调用remove方法的时候，进行删除当前的key哇\n2）之前12点有电商流量进来，如果大量缓存过期，会出现缓存雪崩的现象，我们一般都加上随机过期时间","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":629296,"discussion_content":"赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1696923168,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":380362,"user_name":"god_like","can_delete":false,"product_type":"c1","uid":2052401,"ip_address":"北京","ucode":"7FE955DEB49493","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKFeiaiaRibDT8iaBV2wwf8MLNW0BkeCxm8nH6bXCTIhUb9KgiaXLOCQadSxM2ZFynNT5OBjETW8oTqvLg/132","comment_is_top":false,"comment_ctime":1693443211,"is_pvip":false,"replies":[{"id":138521,"content":"可以详细说说哪里有错误吗，我们看一下","user_name":"编辑回复","user_name_real":"编辑","uid":2843479,"ctime":1693451938,"ip_address":"北京","comment_id":380362,"utype":2}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"老师 最后的思维导图有几处错误，辛苦更正下哈\n","like_count":0,"discussions":[{"author":{"id":2843479,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/63/57/cba4c68b.jpg","nickname":"小虎子🐯","note":"","ucode":"4C9530B3FB407B","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":626866,"discussion_content":"可以详细说说哪里有错误吗，我们看一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1693451938,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":8}","child_discussion_number":2,"child_discussions":[{"author":{"id":1904645,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/10/05/af45721e.jpg","nickname":"jCodePorter","note":"","ucode":"39F43B9A705543","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2843479,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/63/57/cba4c68b.jpg","nickname":"小虎子🐯","note":"","ucode":"4C9530B3FB407B","race_medal":0,"user_type":8,"is_pvip":false},"discussion":{"id":628077,"discussion_content":"过期机制的一般思路，四种方案中，有两个重复了\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1694850911,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":626866,"ip_address":"河南","group_id":0},"score":628077,"extra":""},{"author":{"id":1138926,"avatar":"https://static001.geekbang.org/account/avatar/00/11/60/ee/b536678b.jpg","nickname":"傲然绝唳","note":"","ucode":"BD7365DD44589B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2843479,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/63/57/cba4c68b.jpg","nickname":"小虎子🐯","note":"","ucode":"4C9530B3FB407B","race_medal":0,"user_type":8,"is_pvip":false},"discussion":{"id":641220,"discussion_content":"过期机制的一般思路，第一个应该是定时删除","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1712385443,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":626866,"ip_address":"美国","group_id":0},"score":641220,"extra":""}]}]},{"had_liked":false,"id":380314,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"北京","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1693361995,"is_pvip":false,"replies":[{"id":138538,"content":"1. 设置键值对的时候就要放进去，Set 方法的时候\n2. 自身实现的\n3. Redis 的 DB，不是 MySQL \n4. 看我对 hz 的描述。一般如果你没把握就不要调整，直接使用默认值。或者，你去问你家运维，他们可能调过。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1693488272,"ip_address":"广东","comment_id":380314,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"请教老师几个问题：\nQ1：延迟队列这种方式是什么时候放入队列?\n实现过期机制的四种方式中，对于延迟队列，对象是过期以后放入队列吗？还是一开始就放入队列？\nQ2：Redis的定期删除，是自身实现的？还是依靠外部程序实现的？\n(自身实现是指Redis通过设置某个参数等操作来实现；依靠外部程序实现是指Redis之外的一个程序来定期扫描Redis从而删除)\nQ3：遍历DB是指Redis而不是MySQL吧。\n文中遍历的DB0、DB1等等，是Redis自身划分的几个区域，而不是指真正的数据库比如MySQL吧。\nQ4： Redis删除过期key时，遍历的执行时间一般设置多大？","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":626919,"discussion_content":"1. 设置键值对的时候就要放进去，Set 方法的时候\n2. 自身实现的\n3. Redis 的 DB，不是 MySQL \n4. 看我对 hz 的描述。一般如果你没把握就不要调整，直接使用默认值。或者，你去问你家运维，他们可能调过。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1693488272,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}