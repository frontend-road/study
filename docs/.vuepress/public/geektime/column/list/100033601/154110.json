{"id":154110,"title":"34 | CSRF攻击：陌生链接不要随便点","content":"<p>在<a href=\"https://time.geekbang.org/column/article/152807\">上一篇文章</a>中我们讲到了XSS攻击，XSS 的攻击方式是黑客往用户的页面中注入恶意脚本，然后再通过恶意脚本将用户页面的数据上传到黑客的服务器上，最后黑客再利用这些数据进行一些恶意操作。XSS攻击能够带来很大的破坏性，不过另外一种类型的攻击也不容忽视，它就是我们今天要聊的CSRF攻击。</p><p>相信你经常能听到的一句话：“别点那个链接，小心有病毒！”点击一个链接怎么就能染上病毒了呢？</p><p>我们结合一个真实的关于CSRF攻击的典型案例来分析下，在2007年的某一天，David 无意间打开了Gmail邮箱中的一份邮件，并点击了该邮件中的一个链接。过了几天，David就发现他的域名被盗了。不过几经周折，David还是要回了他的域名，也弄清楚了他的域名之所以被盗，就是因为无意间点击的那个链接。</p><p><strong>那David的域名是怎么被盗的呢？</strong></p><p>我们结合下图来分析下David域名的被盗流程：</p><p><img src=\"https://static001.geekbang.org/resource/image/3d/6b/3d7f097b1d6a8f93a960a12892f1556b.png?wh=1142*694\" alt=\"\"></p><center><span class=\"reference\">David域名被盗流程</span></center><ul>\n<li>首先David发起登录Gmail邮箱请求，然后Gmail服务器返回一些登录状态给David的浏览器，这些信息包括了Cookie、Session等，这样在David的浏览器中，Gmail邮箱就处于登录状态了。</li>\n<li>接着黑客通过各种手段引诱David去打开他的链接，比如hacker.com，然后在hacker.com页面中，黑客编写好了一个邮件过滤器，并通过Gmail提供的HTTP设置接口设置好了新的邮件过滤功能，该过滤器会将David所有的邮件都转发到黑客的邮箱中。</li>\n<li>最后的事情就很简单了，因为有了David的邮件内容，所以黑客就可以去域名服务商那边重置David域名账户的密码，重置好密码之后，就可以将其转出到黑客的账户了。</li>\n</ul><!-- [[[read_end]]] --><p>以上就是David的域名被盗的完整过程，其中前两步就是我们今天要聊的CSRF攻击。David在要回了他的域名之后，也将整个攻击过程分享到他的站点上了，如果你感兴趣的话，可以参考<a href=\"https://www.davidairey.com/google-gmail-security-hijack\">该链接</a>（放心这个链接是安全的）。</p><h2>什么是CSRF攻击</h2><p>CSRF英文全称是Cross-site request forgery，所以又称为“跨站请求伪造”，是指黑客引诱用户打开黑客的网站，在黑客的网站中，利用用户的登录状态发起的跨站请求。简单来讲，<strong>CSRF攻击就是黑客利用了用户的登录状态，并通过第三方的站点来做一些坏事</strong>。</p><p>通常当用户打开了黑客的页面后，黑客有三种方式去实施CSRF攻击。</p><p>下面我们以极客时间官网为例子，来分析这三种攻击方式都是怎么实施的。这里假设极客时间具有转账功能，可以通过POST或Get来实现转账，转账接口如下所示：</p><pre><code>#同时支持POST和Get\n#接口 \nhttps://time.geekbang.org/sendcoin\n#参数\n##目标用户\nuser\n##目标金额\nnumber\n</code></pre><p>有了上面的转账接口，我们就可以来模拟CSRF攻击了。</p><h3>1. 自动发起Get请求</h3><p>黑客最容易实施的攻击方式是自动发起Get请求，具体攻击方式你可以参考下面这段代码：</p><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;body&gt;\n    &lt;h1&gt;黑客的站点：CSRF攻击演示&lt;/h1&gt;\n    &lt;img src=&quot;https://time.geekbang.org/sendcoin?user=hacker&amp;number=100&quot;&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>这是黑客页面的HTML代码，在这段代码中，黑客将转账的请求接口隐藏在img标签内，欺骗浏览器这是一张图片资源。当该页面被加载时，浏览器会自动发起img的资源请求，如果服务器没有对该请求做判断的话，那么服务器就会认为该请求是一个转账请求，于是用户账户上的100极客币就被转移到黑客的账户上去了。</p><h3>2. 自动发起POST请求</h3><p>除了自动发送Get请求之外，有些服务器的接口是使用POST方法的，所以黑客还需要在他的站点上伪造POST请求，当用户打开黑客的站点时，是自动提交POST请求，具体的方式你可以参考下面示例代码：</p><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n  &lt;h1&gt;黑客的站点：CSRF攻击演示&lt;/h1&gt;\n  &lt;form id='hacker-form' action=&quot;https://time.geekbang.org/sendcoin&quot; method=POST&gt;\n    &lt;input type=&quot;hidden&quot; name=&quot;user&quot; value=&quot;hacker&quot; /&gt;\n    &lt;input type=&quot;hidden&quot; name=&quot;number&quot; value=&quot;100&quot; /&gt;\n  &lt;/form&gt;\n  &lt;script&gt; document.getElementById('hacker-form').submit(); &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>在这段代码中，我们可以看到黑客在他的页面中构建了一个隐藏的表单，该表单的内容就是极客时间的转账接口。当用户打开该站点之后，这个表单会被自动执行提交；当表单被提交之后，服务器就会执行转账操作。因此使用构建自动提交表单这种方式，就可以自动实现跨站点POST数据提交。</p><h3>3. 引诱用户点击链接</h3><p>除了自动发起Get和Post请求之外，还有一种方式是诱惑用户点击黑客站点上的链接，这种方式通常出现在论坛或者恶意邮件上。黑客会采用很多方式去诱惑用户点击链接，示例代码如下所示：</p><pre><code>&lt;div&gt;\n  &lt;img width=150 src=http://images.xuejuzi.cn/1612/1_161230185104_1.jpg&gt; &lt;/img&gt; &lt;/div&gt; &lt;div&gt;\n  &lt;a href=&quot;https://time.geekbang.org/sendcoin?user=hacker&amp;number=100&quot; taget=&quot;_blank&quot;&gt;\n    点击下载美女照片\n  &lt;/a&gt;\n&lt;/div&gt;\n</code></pre><p>这段黑客站点代码，页面上放了一张美女图片，下面放了图片下载地址，而这个下载地址实际上是黑客用来转账的接口，一旦用户点击了这个链接，那么他的极客币就被转到黑客账户上了。</p><p>以上三种就是黑客经常采用的攻击方式。如果当用户登录了极客时间，以上三种CSRF攻击方式中的任何一种发生时，那么服务器都会将一定金额的极客币发送到黑客账户。</p><p>到这里，相信你已经知道什么是CSRF攻击了。<strong>和XSS不同的是，CSRF攻击不需要将恶意代码注入用户的页面，仅仅是利用服务器的漏洞和用户的登录状态来实施攻击</strong>。</p><h2>如何防止CSRF攻击</h2><p>了解了CSRF攻击的一些手段之后，我们再来看看CSRF攻击的一些“特征”，然后根据这些“特征”分析下如何防止CSRF攻击。下面是我总结的发起CSRF攻击的三个必要条件：</p><ul>\n<li>第一个，目标站点一定要有CSRF漏洞；</li>\n<li>第二个，用户要登录过目标站点，并且在浏览器上保持有该站点的登录状态；</li>\n<li>第三个，需要用户打开一个第三方站点，可以是黑客的站点，也可以是一些论坛。</li>\n</ul><p>满足以上三个条件之后，黑客就可以对用户进行CSRF攻击了。这里还需要额外注意一点，与XSS攻击不同，CSRF攻击不会往页面注入恶意脚本，因此黑客是无法通过CSRF攻击来获取用户页面数据的；其最关键的一点是要能找到服务器的漏洞，所以说对于CSRF攻击我们主要的防护手段是提升服务器的安全性。</p><p>要让服务器避免遭受到CSRF攻击，通常有以下几种途径。</p><h3>1. 充分利用好Cookie 的 SameSite 属性</h3><p>通过上面的介绍，相信你已经知道了黑客会利用用户的登录状态来发起CSRF攻击，而<strong>Cookie正是浏览器和服务器之间维护登录状态的一个关键数据</strong>，因此要阻止CSRF攻击，我们首先就要考虑在Cookie上来做文章。</p><p>通常CSRF攻击都是从第三方站点发起的，要防止CSRF攻击，我们最好能实现从第三方站点发送请求时禁止Cookie的发送，因此在浏览器通过不同来源发送HTTP请求时，有如下区别：</p><ul>\n<li>如果是从第三方站点发起的请求，那么需要浏览器禁止发送某些关键Cookie数据到服务器；</li>\n<li>如果是同一个站点发起的请求，那么就需要保证Cookie数据正常发送。</li>\n</ul><p>而我们要聊的Cookie 中的SameSite属性正是为了解决这个问题的，通过使用SameSite可以有效地降低CSRF攻击的风险。</p><p>那SameSite是怎么防止CSRF攻击的呢？</p><p>在HTTP响应头中，通过set-cookie字段设置Cookie时，可以带上SameSite选项，如下：</p><pre><code>set-cookie: 1P_JAR=2019-10-20-06; expires=Tue, 19-Nov-2019 06:36:21 GMT; path=/; domain=.google.com; SameSite=none\n</code></pre><p><strong>SameSite选项通常有Strict、Lax和None三个值。</strong></p><ul>\n<li>Strict最为严格。如果SameSite的值是Strict，那么浏览器会完全禁止第三方 Cookie。简言之，如果你从极客时间的页面中访问InfoQ的资源，而InfoQ的某些Cookie设置了SameSite = Strict的话，那么这些Cookie是不会被发送到InfoQ的服务器上的。只有你从InfoQ的站点去请求InfoQ的资源时，才会带上这些Cookie。</li>\n<li>Lax相对宽松一点。在跨站点的情况下，从第三方站点的链接打开和从第三方站点提交Get方式的表单这两种方式都会携带Cookie。但如果在第三方站点中使用Post方法，或者通过img、iframe等标签加载的URL，这些场景都不会携带Cookie。</li>\n<li>而如果使用None的话，在任何情况下都会发送Cookie数据。</li>\n</ul><p>关于SameSite的具体使用方式，你可以参考这个链接：<a href=\"https://web.dev/samesite-cookies-explained\">https://web.dev/samesite-cookies-explained</a> 。</p><p>对于防范CSRF攻击，我们可以针对实际情况将一些关键的Cookie设置为Strict或者Lax模式，这样在跨站点请求时，这些关键的Cookie就不会被发送到服务器，从而使得黑客的CSRF攻击失效。</p><h3>2. 验证请求的来源站点</h3><p>接着我们再来了解另外一种防止CSRF攻击的策略，那就是<strong>在服务器端验证请求来源的站点</strong>。由于CSRF攻击大多来自于第三方站点，因此服务器可以禁止来自第三方站点的请求。那么该怎么判断请求是否来自第三方站点呢？</p><p>这就需要介绍HTTP请求头中的 Referer和Origin 属性了。</p><p><strong>Referer是HTTP请求头中的一个字段，记录了该HTTP请求的来源地址</strong>。比如我从极客时间的官网打开了InfoQ的站点，那么请求头中的Referer值是极客时间的URL，如下图：</p><p><img src=\"https://static001.geekbang.org/resource/image/15/c9/159430e9d15cb7bcfa4fd014da31a2c9.png?wh=1142*816\" alt=\"\"></p><center><span class=\"reference\">HTTP请求头中的Referer引用</span></center><p>虽然可以通过Referer告诉服务器HTTP请求的来源，但是有一些场景是不适合将来源URL暴露给服务器的，因此浏览器提供给开发者一个选项，可以不用上传Referer值，具体可参考<strong>Referrer Policy</strong>。</p><p>但在服务器端验证请求头中的Referer并不是太可靠，因此标准委员会又制定了<strong>Origin属性</strong>，在一些重要的场合，比如通过XMLHttpRequest、Fecth发起跨站请求或者通过Post方法发送请求时，都会带上Origin属性，如下图：</p><p><img src=\"https://static001.geekbang.org/resource/image/25/03/258dc5542db8961aaa23ec0c02030003.png?wh=1142*864\" alt=\"\"></p><center><span class=\"reference\">Post请求时的Origin信息</span></center><p>从上图可以看出，Origin属性只包含了域名信息，并没有包含具体的URL路径，这是Origin和Referer的一个主要区别。在这里需要补充一点，Origin的值之所以不包含详细路径信息，是有些站点因为安全考虑，不想把源站点的详细路径暴露给服务器。</p><p>因此，服务器的策略是优先判断Origin，如果请求头中没有包含Origin属性，再根据实际情况判断是否使用Referer值。</p><h3>3. CSRF Token</h3><p>除了使用以上两种方式来防止CSRF攻击之外，还可以采用CSRF Token来验证，这个流程比较好理解，大致分为两步。</p><p>第一步，在浏览器向服务器发起请求时，服务器生成一个CSRF Token。CSRF Token其实就是服务器生成的字符串，然后将该字符串植入到返回的页面中。你可以参考下面示例代码：</p><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n    &lt;form action=&quot;https://time.geekbang.org/sendcoin&quot; method=&quot;POST&quot;&gt;\n      &lt;input type=&quot;hidden&quot; name=&quot;csrf-token&quot; value=&quot;nc98P987bcpncYhoadjoiydc9ajDlcn&quot;&gt;\n      &lt;input type=&quot;text&quot; name=&quot;user&quot;&gt;\n      &lt;input type=&quot;text&quot; name=&quot;number&quot;&gt;\n      &lt;input type=&quot;submit&quot;&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>第二步，在浏览器端如果要发起转账的请求，那么需要带上页面中的CSRF Token，然后服务器会验证该Token是否合法。如果是从第三方站点发出的请求，那么将无法获取到CSRF Token的值，所以即使发出了请求，服务器也会因为CSRF Token不正确而拒绝请求。</p><h2>总结</h2><p>好了，今天我们就介绍到这里，下面我来总结下本文的主要内容。</p><p>我们结合一个实际案例介绍了CSRF攻击，要发起CSRF攻击需要具备三个条件：目标站点存在漏洞、用户要登录过目标站点和黑客需要通过第三方站点发起攻击。</p><p>根据这三个必要条件，我们又介绍了该如何防止CSRF攻击，具体来讲主要有三种方式：充分利用好Cookie的SameSite属性、验证请求的来源站点和使用CSRF Token。这三种方式需要合理搭配使用，这样才可以有效地防止CSRF攻击。</p><p>再结合前面两篇文章，我们可以得出页面安全问题的主要原因就是浏览器为同源策略开的两个“后门”：一个是在页面中可以任意引用第三方资源，另外一个是通过CORS策略让XMLHttpRequest和Fetch去跨域请求资源。</p><p>为了解决这些问题，我们引入了CSP来限制页面任意引入外部资源，引入了HttpOnly机制来禁止XMLHttpRequest或者Fetch发送一些关键Cookie，引入了SameSite和Origin来防止CSRF攻击。</p><p>通过这三篇文章的分析，相信你应该已经能搭建<strong>Web页面安全</strong>的知识体系网络了。有了这张网络，你就可以将HTTP请求头和响应头中各种安全相关的字段关联起来，比如Cookie中的一些字段，还有X-Frame-Options、X-Content-Type-Options、X-XSS-Protection等字段，也可以将CSP、CORS这些知识点关联起来。当然这些并不是浏览器安全的全部，后面两篇文章我们还会介绍<strong>浏览器系统安全</strong>和<strong>浏览器网络安全</strong>两大块的内容，这对于你学习浏览器安全来说也是至关重要的。</p><h2>思考题</h2><p>今天留给你的思考题：什么是CSRF攻击？在开发项目过程中应该如何防御CSRF攻击？</p><p>欢迎在留言区与我分享你的想法，也欢迎你在留言区记录你的思考过程。感谢阅读，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友。</p><p></p>","comments":[{"had_liked":false,"id":143456,"user_name":"淡","can_delete":false,"product_type":"c1","uid":1456392,"ip_address":"","ucode":"6856CA319DE2F0","user_header":"https://static001.geekbang.org/account/avatar/00/16/39/08/09055b47.jpg","comment_is_top":false,"comment_ctime":1571711608,"is_pvip":false,"replies":[{"id":"55395","content":"我把整个流程写一遍：<br>首先假设你发出登录InfoQ的站点请求，然后在InfoQ返回HTTP响应头给浏览器，InfoQ响应头中的某些set-cookie字段如下所示：<br>set-cookie: a_value=avalue_xxx; expires=Thu, 21-Nov-2019 03:53:16 GMT; path=&#47;; domain=.infoq.com; SameSite=strict<br>set-cookie: b_value=bvalue_xxx; expires=Thu, 21-Nov-2019 03:53:16 GMT; path=&#47;; domain=.infoq.com; SameSite=lax<br>set-cookie: c_value=cvaule_xxx; expires=Thu, 21-Nov-2019 03:53:16 GMT; path=&#47;; domain=.infoq.com; SameSite=none<br>set-cookie: d_value=dvaule_xxxx; expires=Thu, 21-Nov-2019 03:53:16 GMT; path=&#47;; domain=.infoq.com; <br><br><br>我们可以看出，<br>a_value的SameSite属性设置成了strict，<br>b_value的SameSite属性设置成了lax<br>c_value的SameSite属性值设置成了none<br>d_value没有设置SameSite属性值<br><br><br>好，这些Cookie设置好之后，当你再次在InfoQ的页面内部请求InfoQ的资源时，这些Cookie信息都会被附加到HTTP的请求头中，如下所示：<br>cookie: a_value=avalue_xxx;b_value=bvalue_xxx;c_value=cvaule_xxx;d_value=dvaule_xxxx;<br><br>但是，假如你从time.geekbang.org的页面中，通过a标签打开页面，如下所示：<br>&lt;a href=&quot;https:&#47;&#47;www.infoq.cn&#47;sendcoin?user=hacker&amp;number=100&quot;&gt;点我下载&lt;&#47;a&gt;<br>当用户点击整个链接的时候，因为InfoQ中a_vaule的SameSite的值设置成了strict，那么a_vaule的值将不会被携带到这个请求的HTTP头中。<br><br>如果time.geekbang.org的页面中，有通过img来加载的infoq的资源代码，如下所示：<br> &lt;img src=&quot;https:&#47;&#47;www.infoq.cn&#47;sendcoin?user=hacker&amp;number=100&quot;&gt;<br>那么在加载infoQ资源的时候，只会携带c_value,和d_value的值。<br><br><br>这样写不知道你明白没有，如果还有疑惑欢迎继续提问。","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1571717639,"ip_address":"","comment_id":143456,"utype":1}],"discussion_count":5,"race_medal":0,"score":"263564716664","product_id":100033601,"comment_content":"“简言之，如果你从极客时间的页面中访问 InfoQ 的资源，而 InfoQ 的某些 Cookie 设置了 SameSite = Strict 的话，那么这些 Cookie 是不会被发送到 InfoQ 的服务器上的”，这里是不是我理解错了还是写错了。应该是不会发送到极客时间的服务器上，或者说极客时间的某些Cookie设置了SameSite = Strict吧。","like_count":62,"discussions":[{"author":{"id":1358174,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b9/5e/a8f6f7db.jpg","nickname":"Ming","note":"","ucode":"A94E8D8433E54F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":38251,"discussion_content":"@老师 阐述的没毛病，就是举例不是太恰当，因为潜意识里把极客站点当做正向网站，第三方站点当做恶意网站，如果描述为极客站点设置SameSite为严格，第三方站点去请求极客，极客不认相应cookie更易理解😊","likes_number":14,"is_delete":false,"is_hidden":false,"ctime":1571752343,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471547,"discussion_content":"我把整个流程写一遍：\n首先假设你发出登录InfoQ的站点请求，然后在InfoQ返回HTTP响应头给浏览器，InfoQ响应头中的某些set-cookie字段如下所示：\nset-cookie: a_value=avalue_xxx; expires=Thu, 21-Nov-2019 03:53:16 GMT; path=/; domain=.infoq.com; SameSite=strict\nset-cookie: b_value=bvalue_xxx; expires=Thu, 21-Nov-2019 03:53:16 GMT; path=/; domain=.infoq.com; SameSite=lax\nset-cookie: c_value=cvaule_xxx; expires=Thu, 21-Nov-2019 03:53:16 GMT; path=/; domain=.infoq.com; SameSite=none\nset-cookie: d_value=dvaule_xxxx; expires=Thu, 21-Nov-2019 03:53:16 GMT; path=/; domain=.infoq.com; \n\n\n我们可以看出，\na_value的SameSite属性设置成了strict，\nb_value的SameSite属性设置成了lax\nc_value的SameSite属性值设置成了none\nd_value没有设置SameSite属性值\n\n\n好，这些Cookie设置好之后，当你再次在InfoQ的页面内部请求InfoQ的资源时，这些Cookie信息都会被附加到HTTP的请求头中，如下所示：\ncookie: a_value=avalue_xxx;b_value=bvalue_xxx;c_value=cvaule_xxx;d_value=dvaule_xxxx;\n\n但是，假如你从time.geekbang.org的页面中，通过a标签打开页面，如下所示：\n&amp;lt;a href=&amp;quot;https://www.infoq.cn/sendcoin?user=hacker&amp;amp;number=100&amp;quot;&amp;gt;点我下载&amp;lt;/a&amp;gt;\n当用户点击整个链接的时候，因为InfoQ中a_vaule的SameSite的值设置成了strict，那么a_vaule的值将不会被携带到这个请求的HTTP头中。\n\n如果time.geekbang.org的页面中，有通过img来加载的infoq的资源代码，如下所示：\n &amp;lt;img src=&amp;quot;https://www.infoq.cn/sendcoin?user=hacker&amp;amp;number=100&amp;quot;&amp;gt;\n那么在加载infoQ资源的时候，只会携带c_value,和d_value的值。\n\n\n这样写不知道你明白没有，如果还有疑惑欢迎继续提问。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1571717639,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2378535,"avatar":"https://static001.geekbang.org/account/avatar/00/24/4b/27/d5266f19.jpg","nickname":"拿来吧","note":"","ucode":"7F4B64285D2AA5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":545018,"discussion_content":"父子域名之间访问 会携带SameSite: strict|lax的cookie吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641802723,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":471547,"ip_address":""},"score":545018,"extra":""}]},{"author":{"id":2217956,"avatar":"https://static001.geekbang.org/account/avatar/00/21/d7/e4/8154a102.jpg","nickname":"CV练习生","note":"","ucode":"E874C7992ECA72","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":322686,"discussion_content":"明白了，从别的站点请求会有strict限制，从当前站点就没限制","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604800389,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1456392,"avatar":"https://static001.geekbang.org/account/avatar/00/16/39/08/09055b47.jpg","nickname":"淡","note":"","ucode":"6856CA319DE2F0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":38099,"discussion_content":"非常感谢，我把流程想错了。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571726275,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143691,"user_name":"李小白","can_delete":false,"product_type":"c1","uid":1322576,"ip_address":"","ucode":"7187646DDEACE6","user_header":"https://static001.geekbang.org/account/avatar/00/14/2e/50/240e7beb.jpg","comment_is_top":false,"comment_ctime":1571756608,"is_pvip":false,"discussion_count":13,"race_medal":0,"score":"74586200640","product_id":100033601,"comment_content":"老师，我想请问一下，在浏览器打开第三方站点是如何拿到极客时间站点cookie的？第三方站点和极客时间的站点不同，存在同源策略，所以转账请求验证cookie也是不通过的，那么CSRF是如何攻击的呢？","like_count":18,"discussions":[{"author":{"id":1624537,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c9/d9/00870178.jpg","nickname":"Slowdive","note":"","ucode":"AF3429CE47C462","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":261559,"discussion_content":"浏览器处理cookie的机制，做某个域的请求，自动会把这个域的cookie带上。","likes_number":12,"is_delete":false,"is_hidden":false,"ctime":1588983928,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1391354,"avatar":"https://static001.geekbang.org/account/avatar/00/15/3a/fa/21f64eaa.jpg","nickname":"mimof9","note":"","ucode":"C83B3E2CD62BBD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":230888,"discussion_content":"层主的问题梳理一下是两个点：1.第三方网站是如何拿到cookie的 2.同源策略为什么不能阻止CSRF。\n同源策略并没有完全限制网站不能使用非同源的资源，比如引用第三方script文件，引用第三方CSS文件等，同样的，也没有限制一些跨域写操作，比如表单提交。因此，光靠同源策略不能阻止CSRF。明白了可以在第三方站点成功发送跨域请求这一点之后，浏览器会自动带上请求的那个站点的cookie。","likes_number":12,"is_delete":false,"is_hidden":false,"ctime":1586778888,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1016299,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/81/eb/04c16c3e.jpg","nickname":"silence_wh","note":"","ucode":"95FB5D6C02EC89","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1391354,"avatar":"https://static001.geekbang.org/account/avatar/00/15/3a/fa/21f64eaa.jpg","nickname":"mimof9","note":"","ucode":"C83B3E2CD62BBD","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288495,"discussion_content":"有合理的CORS策略的话，也可以降低CSRF的风险","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593762331,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":230888,"ip_address":""},"score":288495,"extra":""},{"author":{"id":1039904,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/de/20/03130a39.jpg","nickname":"沧海一声笑","note":"","ucode":"5297F2F4736B63","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1391354,"avatar":"https://static001.geekbang.org/account/avatar/00/15/3a/fa/21f64eaa.jpg","nickname":"mimof9","note":"","ucode":"C83B3E2CD62BBD","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296918,"discussion_content":"解答了我很久的疑问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596705518,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":230888,"ip_address":""},"score":296918,"extra":""}]},{"author":{"id":1748640,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/ae/a0/707350ef.jpg","nickname":"穿秋裤的男孩","note":"","ucode":"D0F48C66377893","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":244736,"discussion_content":"第三方cookie了解一下。第三方网址只需要负责发起即刻时间的转账接口，接口发起的时候会带上浏览器中保存的本站cookie，此时cookie是作为第三方cookie带上的，所以第三方压根不需要获取你的cookie，浏览器自动会带上。这也是samesite的作用，禁止本cookie作为第三方cookie。","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1587626034,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":38829,"discussion_content":"在第三方站点可以请求目标的服务器器地址，这时会带上目标站点的用户Cookie 登陆态信息","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1571839749,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1782777,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/33/f9/50b76abe.jpg","nickname":"AMIR","note":"","ucode":"65142D9669071B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":1,"user_type":1,"is_pvip":true},"discussion":{"id":113801,"discussion_content":"真的是这样的吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577933332,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":38829,"ip_address":""},"score":113801,"extra":""},{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":1782777,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/33/f9/50b76abe.jpg","nickname":"AMIR","note":"","ucode":"65142D9669071B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":113855,"discussion_content":"如果你没有设置一些限制，是这样的，自己可以试验一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577937309,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":113801,"ip_address":""},"score":113855,"extra":""}]},{"author":{"id":1121775,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/ef/00874090.jpg","nickname":"李大军","note":"","ucode":"5B01D44F2F9248","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":217826,"discussion_content":"第三方网页可以通过 form 表单的形式提交，浏览器不会限制form表单的提交，不会有跨域","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1585581421,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1782777,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/33/f9/50b76abe.jpg","nickname":"AMIR","note":"","ucode":"65142D9669071B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":113761,"discussion_content":"有点意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577930964,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1022568,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/9a/68/92caeed6.jpg","nickname":"Shine","note":"","ucode":"C8C617B87C63C7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":39001,"discussion_content":"我也很困惑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571877509,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1626759,"avatar":"https://static001.geekbang.org/account/avatar/00/18/d2/87/e5f78961.jpg","nickname":"于你","note":"","ucode":"6A3F8C38874410","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":38553,"discussion_content":"我也是没弄懂，跨域限制第三方网站是不可能拿到cookie或者其他的网站信息，那这个user信息是怎么来的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571802863,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1272789,"avatar":"https://static001.geekbang.org/account/avatar/00/13/6b/d5/0e4b70a2.jpg","nickname":"Sean","note":"","ucode":"BC0715BF423613","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1626759,"avatar":"https://static001.geekbang.org/account/avatar/00/18/d2/87/e5f78961.jpg","nickname":"于你","note":"","ucode":"6A3F8C38874410","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":56629,"discussion_content":"我的理解是，跨域限制第三方站点获取cookie信息，限制的是第三方站点以代码的形式读取到cookie信息；\n但是你在第三方站点上向目标站点发起请求的时候，如果你曾经登录过目标站点，浏览器中存储这目标站点的cookie，浏览器会自动帮你把这些cookie带上的。\n黑客拿不到但是可以利用cookie\n感觉像是浏览器的这个cookie机制，帮助了csrf的攻击。","likes_number":21,"is_delete":false,"is_hidden":false,"ctime":1574504529,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":38553,"ip_address":""},"score":56629,"extra":""}]}]},{"had_liked":false,"id":143374,"user_name":"許敲敲","can_delete":false,"product_type":"c1","uid":1046681,"ip_address":"","ucode":"6486466820E7BF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/99/8e760987.jpg","comment_is_top":false,"comment_ctime":1571700750,"is_pvip":false,"replies":[{"id":"55384","content":"主要是根据这几年工作经验和浏览器文档、源码总结出来的，因为维护一个日活跃几千万的浏览器，能带来大量的流量，而流量就是金钱，因此我们的浏览器会遭受到各种类型的攻击，所以我们有很大一部分时间都是在处理攻击！<br><br>当然为了写这个专栏，网上web安全相关的书籍我也买了好多，基本都看了一圈，但是有一些问题：<br>第一是这些书籍都有一些年限了，里面的知识比较滞后！<br>第二，大多数和前端关系不是太大<br>第三，大多数写的比较零碎<br><br><br>你们如果发现有好的web安全相关的书籍，也可以推荐下！","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1571708002,"ip_address":"","comment_id":143374,"utype":1}],"discussion_count":2,"race_medal":0,"score":"57406275598","product_id":100033601,"comment_content":"老师，这方面有比较好的资料或是书嘛？想多了解一下","like_count":14,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471506,"discussion_content":"主要是根据这几年工作经验和浏览器文档、源码总结出来的，因为维护一个日活跃几千万的浏览器，能带来大量的流量，而流量就是金钱，因此我们的浏览器会遭受到各种类型的攻击，所以我们有很大一部分时间都是在处理攻击！\n\n当然为了写这个专栏，网上web安全相关的书籍我也买了好多，基本都看了一圈，但是有一些问题：\n第一是这些书籍都有一些年限了，里面的知识比较滞后！\n第二，大多数和前端关系不是太大\n第三，大多数写的比较零碎\n\n\n你们如果发现有好的web安全相关的书籍，也可以推荐下！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1571708002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1626734,"avatar":"","nickname":"Geek_f74777","note":"","ucode":"8B512972A145A7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":38010,"discussion_content":"推荐可以看看《Real-World Bug Hunting》","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571713779,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143401,"user_name":"蓝配鸡","can_delete":false,"product_type":"c1","uid":1348738,"ip_address":"","ucode":"C79A7CA8885B7C","user_header":"https://static001.geekbang.org/account/avatar/00/14/94/82/d0a417ba.jpg","comment_is_top":false,"comment_ctime":1571705661,"is_pvip":false,"replies":[{"id":"55382","content":"如果是CSRF攻击，那么黑客是拿不到受害者站点数据的。<br><br>但是黑客会在他的A站点中调用受害者B站点的http接口，这些接口可以是转账，删帖或者设置等。<br><br>这个过程中你需要注意一点，在黑客A站点中调用受害者B站点的http接口时，默认情况下，浏览器依然会把受害者的Cookie等信息数据发送到受害者的B站点，【注意这里并不是黑客的A站点】。<br><br>如果B站点存在漏洞的话，那么黑客就会攻击成功，比如将受害者的金币转出去了！  <br><br>这样解释不知道问你清楚了没有？","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1571707399,"ip_address":"","comment_id":143401,"utype":1}],"discussion_count":5,"race_medal":0,"score":"44521378621","product_id":100033601,"comment_content":"有个疑问：<br>same origin policy不是确保了不同域名时间不可以访问数据的吗？ 那第三方站点如何拿到cookie和session？<br><br>谢谢老师🙏","like_count":11,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471516,"discussion_content":"如果是CSRF攻击，那么黑客是拿不到受害者站点数据的。\n\n但是黑客会在他的A站点中调用受害者B站点的http接口，这些接口可以是转账，删帖或者设置等。\n\n这个过程中你需要注意一点，在黑客A站点中调用受害者B站点的http接口时，默认情况下，浏览器依然会把受害者的Cookie等信息数据发送到受害者的B站点，【注意这里并不是黑客的A站点】。\n\n如果B站点存在漏洞的话，那么黑客就会攻击成功，比如将受害者的金币转出去了！  \n\n这样解释不知道问你清楚了没有？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1571707399,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1684882,"avatar":"https://static001.geekbang.org/account/avatar/00/19/b5/92/ac0d4705.jpg","nickname":"geek_syk","note":"","ucode":"1CAA40765D1F23","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":38008,"discussion_content":"同源政策限制的是 XMLHttpRequest 请求，而像 <script src=&#34;http://.....&#34;></script> 这种内嵌的请求不属于 XMLHttpRequest，而是 JSONP，所以不会受限","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1571713051,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1348738,"avatar":"https://static001.geekbang.org/account/avatar/00/14/94/82/d0a417ba.jpg","nickname":"蓝配鸡","note":"","ucode":"C79A7CA8885B7C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":37984,"discussion_content":"谢谢老师的答复，可我还是有一些不解。\n\n比方说黑客在A站点调用B站点的http接口，同源策略不是会阻止这个http请求吗？\n\n如果B站点的服务器设置了Cors允许A站点请求。\n我对cookie的理解是：“他是属于一个站点的数据”， 不同站点怎么可以访问其他站点的数据呢？ ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571708849,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1456392,"avatar":"https://static001.geekbang.org/account/avatar/00/16/39/08/09055b47.jpg","nickname":"淡","note":"","ucode":"6856CA319DE2F0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1348738,"avatar":"https://static001.geekbang.org/account/avatar/00/14/94/82/d0a417ba.jpg","nickname":"蓝配鸡","note":"","ucode":"C79A7CA8885B7C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":38103,"discussion_content":"我的理解：Cookie是属于一个站点的数据，所以你在A页面里是直接拿不到B的Cookie；但是在A页面里发B站请求的时候，默认浏览器会给塞上，在服务器看来这就是一个合法的请求（该要的数据啥都有）。所以就有了设置Cookie SameSite的策略来防CRSF攻击","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1571727002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":37984,"ip_address":""},"score":38103,"extra":""},{"author":{"id":1348738,"avatar":"https://static001.geekbang.org/account/avatar/00/14/94/82/d0a417ba.jpg","nickname":"蓝配鸡","note":"","ucode":"C79A7CA8885B7C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1456392,"avatar":"https://static001.geekbang.org/account/avatar/00/16/39/08/09055b47.jpg","nickname":"淡","note":"","ucode":"6856CA319DE2F0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":38233,"discussion_content":"谢谢回答， 今天去看了下http的cookie机制， 明白了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571748728,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":38103,"ip_address":""},"score":38233,"extra":""}]}]},{"had_liked":false,"id":157028,"user_name":"江谢木","can_delete":false,"product_type":"c1","uid":1563403,"ip_address":"","ucode":"E1B1B0F0F03D41","user_header":"https://static001.geekbang.org/account/avatar/00/17/db/0b/f0ded153.jpg","comment_is_top":false,"comment_ctime":1575015037,"is_pvip":false,"replies":[{"id":"60301","content":"是的，针对于请求的，比如同一个浏览器打开两个相同页面，那么服务器为这两个页面生成的csrf token都是不同的","user_name":"作者回复","user_name_real":"李兵","uid":"1141464","ctime":1575081713,"ip_address":"","comment_id":157028,"utype":1}],"discussion_count":4,"race_medal":0,"score":"35934753405","product_id":100033601,"comment_content":"CSRF TOKEN类似于cookie, 都是存储用户信息，而此用户信息只存储在当前你请求的站点，而不是浏览器，所以不同的标签页面，或不同次的请求是不共享此用户信息的，所以规避了cookie所带来的的漏洞，老师，我这样理解对？","like_count":9,"discussions":[{"author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476308,"discussion_content":"是的，针对于请求的，比如同一个浏览器打开两个相同页面，那么服务器为这两个页面生成的csrf token都是不同的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575081713,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2840430,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/57/6e/0010eec8.jpg","nickname":"月光林地","note":"","ucode":"827DFEBA385367","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1141464,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/d8/228449c9.jpg","nickname":"李兵","note":"","ucode":"3F3D3F6E20209E","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":534884,"discussion_content":"那如果黑客知道了这个逻辑，在csrf页面也做两次请求，一次拿csrf token，一次做csrf，不就绕过了。本质上是因为这个站点接口没有限制跨域或者cookie没有设置好samesite，或者干脆不要用cookie，把用户信息放进session或者localstorage。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1638288295,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":476308,"ip_address":""},"score":534884,"extra":""}]},{"author":{"id":2530802,"avatar":"https://static001.geekbang.org/account/avatar/00/26/9d/f2/a93285b0.jpg","nickname":"Dwayne","note":"","ucode":"17714CF4011350","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382544,"discussion_content":"csrf是怎么生成的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625628480,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352305,"discussion_content":"没看明白, 是一个csrf_token在同一个页面最多只能用于一次请求?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614677792,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229093,"user_name":"LIKE","can_delete":false,"product_type":"c1","uid":1254252,"ip_address":"","ucode":"9DAB7F9051648A","user_header":"https://static001.geekbang.org/account/avatar/00/13/23/6c/82ba5e1f.jpg","comment_is_top":false,"comment_ctime":1592895966,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31657667038","product_id":100033601,"comment_content":"1.CSRF是什么： 跨域请求伪造，通过第三方站点模拟用户请求行为<br>2.如何防范CSRF攻击：  本质就是识别客户端操作是否是用户本人操作<br>\t1&gt;.业务上针对重要操作，需要再次验证，如短信验证码等，确保你是你<br>\t2&gt;.公司内部做好文档管理：源码、接口文档等，减少信息泄露<br>\t3&gt;.服务端针对cookie、session等敏感头信息设置samesite<br>\t4&gt;.敏感接口数据采用加密传输、新增时效性或随机参数，增加请求信息不确定性，比如：CSRF Token参数","like_count":7},{"had_liked":false,"id":143518,"user_name":"Chao","can_delete":false,"product_type":"c1","uid":1108745,"ip_address":"","ucode":"DD7742F5537521","user_header":"https://static001.geekbang.org/account/avatar/00/10/eb/09/ba5f0135.jpg","comment_is_top":false,"comment_ctime":1571723811,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23046560291","product_id":100033601,"comment_content":"chrome 默认启用 SameSite 了","like_count":5},{"had_liked":false,"id":275694,"user_name":"田","can_delete":false,"product_type":"c1","uid":1669795,"ip_address":"","ucode":"2CC99CC96D59CC","user_header":"https://static001.geekbang.org/account/avatar/00/19/7a/a3/19d9bf76.jpg","comment_is_top":false,"comment_ctime":1611647833,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14496549721","product_id":100033601,"comment_content":"终于搞懂csrf了（之前看掘金、看书没有示例），学习网络要结合事例，有了事例就能通俗易懂","like_count":3},{"had_liked":false,"id":152662,"user_name":"lee","can_delete":false,"product_type":"c1","uid":1134107,"ip_address":"","ucode":"F931BF01A04F1E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJrZb9pm07aickG3dVFBd2yhk5J2clztUniaMNFsjpHu7uacfpGhleKYbgicEnwF5MusKNFKLTUUAYKg/132","comment_is_top":false,"comment_ctime":1574058727,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"14458960615","product_id":100033601,"comment_content":"在前后端分离的项目里面，是不是服务器端设置了access-control-allow-arigin只允许受信任的站点访问接口也可以防止CSRF攻击？","like_count":3,"discussions":[{"author":{"id":1201350,"avatar":"https://static001.geekbang.org/account/avatar/00/12/54/c6/c2481790.jpg","nickname":"lisiur","note":"","ucode":"CEB2DBCE29CAA7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":245904,"discussion_content":"另一方面，同源策略只是阻止浏览器获取响应数据，没有阻止其发送请求","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1587709959,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1201350,"avatar":"https://static001.geekbang.org/account/avatar/00/12/54/c6/c2481790.jpg","nickname":"lisiur","note":"","ucode":"CEB2DBCE29CAA7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":245899,"discussion_content":"应该没作用，csrf 是通过 img form 等构造请求发送的，这些请求不受跨域限制","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1587709681,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":237164,"user_name":"昵称","can_delete":false,"product_type":"c1","uid":1486529,"ip_address":"","ucode":"38C14BF83EAC1C","user_header":"https://static001.geekbang.org/account/avatar/00/16/ae/c1/76a9237f.jpg","comment_is_top":false,"comment_ctime":1595695155,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10185629747","product_id":100033601,"comment_content":"目前为止比较好的防止csrf策略<br>1：不用cookie,登录态改用token,这样就不会有csrf攻击;<br>2：重要接口加验证参数：如短信验证码、谷歌验证码验证。即使它发起请求了，没有用户本身的手机验证码、谷歌验证码也通过不了这次请求。","like_count":2},{"had_liked":false,"id":285726,"user_name":"Xx","can_delete":false,"product_type":"c1","uid":2514423,"ip_address":"","ucode":"0BE62D47E42B0E","user_header":"","comment_is_top":false,"comment_ctime":1616991698,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5911958994","product_id":100033601,"comment_content":"最后总结里的这段<br>&quot;为了解决这些问题，我们引入了 CSP 来限制页面任意引入外部资源，引入了 HttpOnly 机制来禁止 XMLHttpRequest 或者 Fetch 发送一些关键 Cookie，引入了 SameSite 和 Origin 来防止 CSRF 攻击。&quot;<br>好像不太正确？ HttpOnly不是用来限制除Http之外的渠道来获取cookie吗？ SameSite属性才是用来限制Ajax请求对于cookie的权限的吧？","like_count":1},{"had_liked":false,"id":270960,"user_name":"不二","can_delete":false,"product_type":"c1","uid":1253124,"ip_address":"","ucode":"B018B32EDB44E5","user_header":"https://static001.geekbang.org/account/avatar/00/13/1f/04/1cddf65b.jpg","comment_is_top":false,"comment_ctime":1609330310,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5904297606","product_id":100033601,"comment_content":"希望老师帮忙解答一下，疑问点是，发起csrf攻击，为什么一定要用户跳转到第三方页面，再请求当前域名的请求，感觉直接结合XSS不更好？利用XSS在浏览器端注入恶意代码，当然恶意代码的内容就是直接发起请求，例如转账的例子，直接在恶意代码就是转账到指定用户，这样感觉也可以呀。","like_count":1,"discussions":[{"author":{"id":1269541,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/u1TI6W7VyYJmRqGoyY9dvHU8icxdZT6LVbsWLibWBIj3Tia8p2Ipia8DjoiagWKMmFib1g9KTNcvagThaLNialKk4VaCw/132","nickname":"Geek_0a1c28","note":"","ucode":"FAFA866B841001","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352266,"discussion_content":"那首先该网站得有XSS漏洞才行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614669866,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173109,"user_name":"爱看书的蜗牛","can_delete":false,"product_type":"c1","uid":1115276,"ip_address":"","ucode":"02A280A16F162D","user_header":"https://static001.geekbang.org/account/avatar/00/11/04/8c/ce36a2d0.jpg","comment_is_top":false,"comment_ctime":1579425440,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"5874392736","product_id":100033601,"comment_content":"“如果是从第三方站点发出的请求，那么将无法获取到 CSRF Token 的值，所以即使发出了请求”要获得这个token应该很容易吧，抓包就行啊","like_count":1,"discussions":[{"author":{"id":1239917,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/OVq8d3D1m1SkoOUL6iaerJjDfVlibDDfutGBJ3ceu2vpskOXb6ib6vS7iaLAQSUK7U5kv2xrHcdqFXR6ROo5QeAhow/132","nickname":"Oliveryoung","note":"","ucode":"1EA8AB91949B82","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":215874,"discussion_content":"https 中间人抓不到","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1585393660,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1480732,"avatar":"https://static001.geekbang.org/account/avatar/00/16/98/1c/d7a1439e.jpg","nickname":"KaKaKa","note":"","ucode":"07D1980A71F321","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1239917,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/OVq8d3D1m1SkoOUL6iaerJjDfVlibDDfutGBJ3ceu2vpskOXb6ib6vS7iaLAQSUK7U5kv2xrHcdqFXR6ROo5QeAhow/132","nickname":"Oliveryoung","note":"","ucode":"1EA8AB91949B82","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":242135,"discussion_content":"厉害~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587468133,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":215874,"ip_address":""},"score":242135,"extra":""}]},{"author":{"id":1055073,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/sOvjoV6STk6SYPHRqVOo7DkiajY0KKuKLHSnDNvOKic5lllRNGEQo6W1oE6FrPiaSzUia1vCw9lqmV0vibCOtYtIfHQ/132","nickname":"余昭","note":"","ucode":"29EEEA1BFFE16B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549406,"discussion_content":"因为CSRF Token每次打开页面都不一样，一般不重用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643950985,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":162732,"user_name":"-_-|||","can_delete":false,"product_type":"c1","uid":1328142,"ip_address":"","ucode":"94B21594658BF9","user_header":"https://static001.geekbang.org/account/avatar/00/14/44/0e/ce14b7d3.jpg","comment_is_top":false,"comment_ctime":1576582453,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"5871549749","product_id":100033601,"comment_content":"&quot;如果是从第三方站点发起的请求，那么需要浏览器禁止发送某些关键 Cookie 数据到服务器；&quot;,如果是第三方网站，还会有被攻击网站的cookie吗，域名不一样，应该没有吧。","like_count":1},{"had_liked":false,"id":144006,"user_name":"可笑的霸王","can_delete":false,"product_type":"c1","uid":1379465,"ip_address":"","ucode":"CDCE2AA7119E2C","user_header":"https://static001.geekbang.org/account/avatar/00/15/0c/89/d5077e61.jpg","comment_is_top":false,"comment_ctime":1571823246,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5866790542","product_id":100033601,"comment_content":"老师，关于Referrer服务器验证不太稳定可以详细解释下吗，因为我看到Referrer-Policy也可以设置为origin，达到Origin类似的效果","like_count":1},{"had_liked":false,"id":344289,"user_name":"Geek_115bc8","can_delete":false,"product_type":"c1","uid":1673843,"ip_address":"","ucode":"71FBC9F02AFE1B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erXRaa98A3zjLDkOibUJV1254aQ4EYFTbSLJuEvD0nXicMNA8pLoxOfHf5kPTbGLXNicg8CPFH3Tn0mA/132","comment_is_top":false,"comment_ctime":1651422824,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651422824","product_id":100033601,"comment_content":"什么是 CSRF 攻击？<br>就是用户点击了黑客的连接，跳转到黑客的网站，然后该网站有第三方网站的连接，如果用户浏览器此时有该第三方网站的未过期的cookie，那么将被发送。用来做一些转账的危险操作。<br><br>在开发项目过程中应该如何防御 CSRF 攻击？<br>1. 通过设置cookie samesite: strict。阻止用户通过链接跳转来发送cookie。<br>2. 因为发送请求，都会携带origin, referer头字段来表示发送方的域名。服务器进行验证。<br>3. 通过颁发token，验证用户身份。","like_count":1},{"had_liked":false,"id":334905,"user_name":"JC.彦","can_delete":false,"product_type":"c1","uid":1698735,"ip_address":"","ucode":"E87C1420B140F4","user_header":"https://static001.geekbang.org/account/avatar/00/19/eb/af/e49af9a8.jpg","comment_is_top":false,"comment_ctime":1645176304,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645176304","product_id":100033601,"comment_content":"实施CSRF攻击需要3个条件：<br>1. 目标站点存在CSRF漏洞<br>2. 用户登录过目标站点，且在浏览器有登录信息。<br>3. 需要用户打开第三方站点<br><br>这里的CSRF漏洞是什么漏洞？","like_count":0},{"had_liked":false,"id":332549,"user_name":"Geek_cd4e2d","can_delete":false,"product_type":"c1","uid":2872600,"ip_address":"","ucode":"6CFABCA5502217","user_header":"","comment_is_top":false,"comment_ctime":1643336356,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1643336356","product_id":100033601,"comment_content":"提示一下，攻击者内部页面通过img标签访问接口不存在同源策略","like_count":1},{"had_liked":false,"id":326259,"user_name":"lynnli","can_delete":false,"product_type":"c1","uid":1850528,"ip_address":"","ucode":"EE2FA8B6637BFE","user_header":"https://static001.geekbang.org/account/avatar/00/1c/3c/a0/1d286e39.jpg","comment_is_top":false,"comment_ctime":1639451659,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639451659","product_id":100033601,"comment_content":"老师的课讲的真的很好，受益匪浅值得多看几遍，希望老师有时间可以出本浏览器渲染原理方面的书，市面上没有这类书，都是涉及一点点这方面的知识，现在还没有系统总结浏览器渲染原理的书本","like_count":0},{"had_liked":false,"id":326127,"user_name":"了不起的小六先生🌊","can_delete":false,"product_type":"c1","uid":2863185,"ip_address":"","ucode":"159F73780EC51E","user_header":"https://static001.geekbang.org/account/avatar/00/2b/b0/51/26f7cb0b.jpg","comment_is_top":false,"comment_ctime":1639387890,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639387890","product_id":100033601,"comment_content":"CSRF攻击叫做跨站请求伪造，是指用户在登录了一个安全网站后会存储用户登录态在cookie中，此时黑客诱导用户点击恶意链接（可能是点击事件、也可能是恶意网站）来做一些恶意操作","like_count":0},{"had_liked":false,"id":322672,"user_name":"Geek_Ranfon","can_delete":false,"product_type":"c1","uid":2790908,"ip_address":"","ucode":"31F420EB2330B1","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/LDN7icjqGqTWSmiay9mKj5pChr86V8xjljseJnwHL2lPreGtQy4v0wFBGHb1N1XbibLP1Qv3FRcOPNwVazaPQJCxQ/132","comment_is_top":false,"comment_ctime":1637547696,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637547696","product_id":100033601,"comment_content":"老师我有个问题就是，这个第三方网站是写好的吗？那我怎么知道你要登录的站点是什么，这个伪造的接口怎么提前写好？","like_count":0},{"had_liked":false,"id":321678,"user_name":"撒哈拉","can_delete":false,"product_type":"c1","uid":1608406,"ip_address":"","ucode":"2F64B26543D772","user_header":"https://static001.geekbang.org/account/avatar/00/18/8a/d6/00cf9218.jpg","comment_is_top":false,"comment_ctime":1636989807,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636989807","product_id":100033601,"comment_content":"csrf  通常翻译为跨站请求伪造，利用用户登录时，浏览器发送请求自动携带用户登录信息的特点，伪造虚假请求欺骗用户点击，获取用户登录信息，然后进行不法行为的攻击。","like_count":0},{"had_liked":false,"id":318742,"user_name":"ss","can_delete":false,"product_type":"c1","uid":1438827,"ip_address":"","ucode":"3CEA88D72E5C36","user_header":"https://static001.geekbang.org/account/avatar/00/15/f4/6b/b6f6810c.jpg","comment_is_top":false,"comment_ctime":1635408866,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635408866","product_id":100033601,"comment_content":"老师你好，我想请问下get  和 post方式的xsrf攻击是具体的发生场景有哪些呀？我能想到的好像都是点击一个链接","like_count":0},{"had_liked":false,"id":217538,"user_name":"c.h","can_delete":false,"product_type":"c1","uid":1374695,"ip_address":"","ucode":"08FAC6FF81D0FA","user_header":"https://static001.geekbang.org/account/avatar/00/14/f9/e7/99318dd9.jpg","comment_is_top":false,"comment_ctime":1589529385,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1589529385","product_id":100033601,"comment_content":"老师，我想请问一下，这句 “如果是从第三方站点发出的请求，那么将无法获取到 CSRF Token 的值“ 这种方式是一定安全的吗？第三方一定没有办法获取到CSRF Token 的值吗？","like_count":0,"discussions":[{"author":{"id":1059845,"avatar":"https://static001.geekbang.org/account/avatar/00/10/2c/05/b8e769fa.jpg","nickname":"Mickey","note":"","ucode":"548E950F57D2A8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284404,"discussion_content":"1、对于预防 csrf 攻击来说还是还是安全的\n2、攻击者是可以获取 csrf token 的，攻击者访问主站，从元素中把csrf token 拷下来即可，csrf token 一般有个有效期，在有效期内，都可以使用\n 3、但是 csrf 攻击是依赖浏览器发送请求时，会携带当前域下的 cookie 从而通过被攻击用户校验导致的攻击，只要服务器不把 csrf token 设置在 cookie 中，就是OK的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1592528502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":213848,"user_name":"汤显文","can_delete":false,"product_type":"c1","uid":1377966,"ip_address":"","ucode":"C3D41A180EB0F7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/xCAJCvA3iaMXgjibb0mh99qN9y2Kibc5y31DOaAM0RaEryHM50qJ8GOqXvPAtjILIArIysRQhEWPq9Bt1NgibZpBoA/132","comment_is_top":false,"comment_ctime":1588576533,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1588576533","product_id":100033601,"comment_content":"csrf token 跟 jsonwebtoken 可以理解成是一个东西吗","like_count":0,"discussions":[{"author":{"id":1059845,"avatar":"https://static001.geekbang.org/account/avatar/00/10/2c/05/b8e769fa.jpg","nickname":"Mickey","note":"","ucode":"548E950F57D2A8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284412,"discussion_content":"不是同一个东西\ncsrf token 是服务器用于校验当前请求是否合法的\njwt 一般用于校验当前用户是否合法","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1592528999,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":212397,"user_name":"l_j_dota_1111","can_delete":false,"product_type":"c1","uid":1490128,"ip_address":"","ucode":"4CA8A41F5107C7","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEJwHLLQK3AicN8XqichEbfqSACpRB5kry8bIMBcuB3bSiaeic9hABrmn7TZgqaWJ8Xc1gWh6icasZCt3Fg/132","comment_is_top":false,"comment_ctime":1588117305,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1588117305","product_id":100033601,"comment_content":"如果用户信息存储在localstorage中呢？是不是csrf就不起作用了","like_count":0,"discussions":[{"author":{"id":1059845,"avatar":"https://static001.geekbang.org/account/avatar/00/10/2c/05/b8e769fa.jpg","nickname":"Mickey","note":"","ucode":"548E950F57D2A8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284414,"discussion_content":"可以这么说，但是有可能会导致 xss 攻击、如果被注入恶意脚本，浏览器中js 是可以读取当前域下的 localStorage 的，但是 当 cookie 这是 http only 之后，js 就无法读取了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592529097,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":197708,"user_name":"Oliveryoung","can_delete":false,"product_type":"c1","uid":1239917,"ip_address":"","ucode":"1EA8AB91949B82","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/OVq8d3D1m1SkoOUL6iaerJjDfVlibDDfutGBJ3ceu2vpskOXb6ib6vS7iaLAQSUK7U5kv2xrHcdqFXR6ROo5QeAhow/132","comment_is_top":false,"comment_ctime":1585393566,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1585393566","product_id":100033601,"comment_content":"csrf token是浏览器端js生成？那岂不是可以获取到生成方法","like_count":0,"discussions":[{"author":{"id":1059845,"avatar":"https://static001.geekbang.org/account/avatar/00/10/2c/05/b8e769fa.jpg","nickname":"Mickey","note":"","ucode":"548E950F57D2A8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284415,"discussion_content":"对于前端服务而言，一般是 Node 端生成的，随着 页面渲染注入到 页面中的， egg 框架有集成 csrf token 的生成，具体生成方法可以看看源码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592529229,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":185472,"user_name":"Vfeelit","can_delete":false,"product_type":"c1","uid":1501818,"ip_address":"","ucode":"F3FF2B069F347F","user_header":"https://static001.geekbang.org/account/avatar/00/16/ea/7a/d857723d.jpg","comment_is_top":false,"comment_ctime":1583588645,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1583588645","product_id":100033601,"comment_content":"第一 从cookie上下功夫 设置严格模式 但是兼容性不好  第二 返回一个token 服务端验证  第三 不使用cookie   现代的前端应用 登录后把token保存到local中 调用api时动态附加   所以还是不使用cookie才是好方法 ","like_count":0,"discussions":[{"author":{"id":1059845,"avatar":"https://static001.geekbang.org/account/avatar/00/10/2c/05/b8e769fa.jpg","nickname":"Mickey","note":"","ucode":"548E950F57D2A8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284416,"discussion_content":"把 token 保存在 local 中有个风险点，就是 xss 攻击","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592529277,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165251,"user_name":"朙","can_delete":false,"product_type":"c1","uid":1623308,"ip_address":"","ucode":"55FE217C4CEDCC","user_header":"https://static001.geekbang.org/account/avatar/00/18/c5/0c/03bd4b4e.jpg","comment_is_top":false,"comment_ctime":1577188801,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1577188801","product_id":100033601,"comment_content":"总感觉CSRF Token这么明目张胆地写在html里，也不安全呢。黑客是不能看到这个页面的内容吗？老师能讲讲什么情况下一个页面可以看到另一页面的内容，什么情况下不能吗？是不是XSS就可以拿到这个Token了","like_count":0,"discussions":[{"author":{"id":1023016,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/9c/28/87421d8f.jpg","nickname":"Happy-Coming","note":"","ucode":"4F7EA88432EDCD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":236695,"discussion_content":"每次刷新页面，后台都会为html生成不同的token。黑客可以看到内容，但是无法生成token，黑客生成的token无法通难过后台的验证。其实图片验证码和token的思路是一样的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1587116305,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}