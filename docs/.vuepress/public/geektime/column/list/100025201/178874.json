{"id":178874,"title":"65 | 架构范式：文本处理","content":"<p>你好，我是七牛云许式伟。</p><p>上一讲 “<a href=\"https://time.geekbang.org/column/article/177746?utm_source=time_pcchaping&amp;utm_term=pc_interstitial_11\">64 | 不断完善的架构范式</a>” 我们提到架构师的武器库是不断完善的架构范式。今天我们围绕一个具体的问题域，看看我们日常能够积累什么样的经验和成果，来完善作为一个架构师的知识体系。</p><p>我们选择的问题是 “文本处理”。</p><p>计算机之所以叫计算机，是因为计算机的能力基本上就是“计算+I/O”两部分。I/O 只是为了让计算机与物理世界打交道，它也是为计算服务的。所以数据是软件的灵魂，数据处理是软件的能力。</p><p>今天我们聊的文本处理，不是通用的数据处理能力，而是收敛在数据的 I/O 上。这里说的文本，是指写入到磁盘的非结构化数据。它可能真的是文本内容，比如 HTML 文档、CSS 文档；也可能是二进制内容，比如 Word 文档、Excel 文档。文本处理则是指对这类非结构化数据的处理过程，常见文本处理的需求场景有：</p><ul>\n<li>数据验证（Data Validation）。比如判断用户输入的文本是否合法，值的范围是否符合期望。</li>\n<li>数据抽取（Data Extraction）。比如从某 HTML 页面中抽取出结构化的机票信息（什么时间，从哪里出发，到哪里去，价格几何等等）。</li>\n<li>编译器（Compiler）。特殊地，在文本格式是某种语言的代码时，我们可以将文本编译成可执行的机器码，或虚拟机解释执行的字节码。当然我们也可以边解释文本的语义边执行。</li>\n<li>……</li>\n</ul><!-- [[[read_end]]] --><p>从用户需求的角度来说，文本处理的需求场景是不可穷尽的。网络爬虫与搜索引擎需要文本处理，Office 软件需要文本处理，编程语言的编译器需要文本处理，网络协议解析需要文本处理，等等。</p><p>那么，怎么才能从这些多变的需求场景中，抽出正交分解后可复用的架构范式？</p><p>我们今天聊聊文本处理的通用思路。</p><h2>我的文本处理技术栈演进</h2><p>文本处理，很多人都会遇到，只不过大家各自遇到的场景不同。我这里先回顾下我个人遇到的文本处理场景。我总结了一个图，如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/bc/0e/bc10a74957ac5bf36ec46a1b98dbbd0e.png?wh=1538*1206\" alt=\"\"></p><p>在 2000 年初，我作为实习生拿到的第一个任务，是金山电子表格自身的文件格式设计和 Excel 文件的读写。此后，我参与了多个版本的 Word 文件读写工作。为了便于分析 Excel 和 Word 文件的格式，我实现了 ExcelViewer 和 DocViewer 这两个文件格式查看器。</p><p>实际上这两个 Viewer 非常重要，因为它第一次让文件格式的理解过程用程序固化了下来。这非常利于知识传承。大家可以设想一下，假如没有 Viewer，那么后面接手的人基本上只能靠阅读 ExcelReader 和 DocReader 模块的代码来理解文件格式。</p><p>但是这有两个问题。其一，Reader 模块有大量的业务逻辑，对我们理解 Excel 和 Word 文件格式本身会造成干扰。其二，Reader 模块增加功能会比较慢，对于那些我们本身不支持的功能，或者我们还暂时来不及兼容的功能，是没有对应的解析代码的。</p><p>但是 Viewer 就不一样。我们会尽可能地把我们对 Excel 和 Word 的理解记录下来，成为稳定可传承的知识，而无需关心是否已经支持该功能。另外，从时间的维度来说，应该先有 Viewer，在理解了文件格式之后，再设计出 Reader 才比较合理。</p><p>这个时期的 ExcelViewer 和 DocViewer，它主要抽象出来的是界面呈现部分。具体 ExcelViewer 和 DocViewer 的代码不需要有一行涉及到界面。这有诸多好处。实际上可视化界面只是 ExcelViewer 和 DocViewer 的一种输出终端，它们同时也生成了一个纯文本结果到磁盘文件中。这有助于我们用常规的 diff 工具来对比两个文件的差异，从而加速我们对未知数据格式的了解。</p><p>但，此时的 ExcelViewer 和 DocViewer 并没有将文件格式的处理过程抽象出通用的模块。也可以说，还没有抽象出文本处理范式。</p><p>这个时期同期还有一个探索性的 WPS for Linux 项目。为了支持跨平台编译，我实现了一个简单的 mk 程序。这个程序区别于 Linux 标准化的 make 程序，没有那么复杂的逻辑需要理解。它的输入是一个类 Windows 平台的 ini 文件，里面只需要指定选择的编译器、相关的编译选项、源代码文件列表等，就可以进行编译。甚至源代码列表可以直接指定为从 Visual C++ 的项目配置 dsp 文件中抽取，极易使用。</p><p>这个 mk 程序除了要解析一个类 ini 的配置文件外，也会解析 C/C++ 源代码文件形成源代码文件的依赖表，以更好地支持增量编译。不只是源代码文件本身的修改会触发重新编译，任何依赖文件的修改也会触发重新编译。</p><p>同样地，这个时期的 mk 程序同样没有引入任何通用的文本处理范式。</p><p>此后大约在 2004 年，我开始在金山办公软件内部推 KSDN。KSDN 这个名字承自 MSDN，我们希望打造一个全局的文档系统，它自动从项目的源代码中提取并生成。每天日构建完毕后得到最新版本的 KSDN。</p><p>KSDN 处理的输入主要是 C++ 和 Delphi 源代码文件（当时的界面是 Delphi 写的），是纯文本的。这和 ExcelViewer、DocViewer 不同，他们的输入是二进制文件。</p><p>KSDN 第一次引入了一个通用的脚本，来表达我们想从源代码中抽取什么内容。整个 KSDN 处理单个源代码文件的工作原理可以描述为：</p><ul>\n<li>通过文件后缀选择源代码文件的解析脚本，通过该脚本解析 C++ 或 Dephi 的源代码，并输出 XML 格式的文件；</li>\n<li>通过 XSLT 脚本，将 XML 文件渲染为一个或多个 HTML 文件。XSLT 全称是 Extensible Stylesheet Language Transformations（可扩展样式表转换），是 XML 生态中的一项技术。</li>\n</ul><p>在 2006 年的时候，我决定实现 KSDN 2.0 版本。这个版本主要想解决第一个版本的脚本语法表达能力比较局限的问题。</p><p>于是 C++ 版本的 TPL（Text Processing Language）诞生了。它非常类似于 Boost Spirit，但功能要强大很多。它的项目主页为：</p><ul>\n<li><a href=\"https://github.com/xushiwei/tpl\">https://github.com/xushiwei/tpl</a></li>\n</ul><p>它依赖基础库 stdext，项目主页为：</p><ul>\n<li><a href=\"https://github.com/xushiwei/stdext\">https://github.com/xushiwei/stdext</a></li>\n</ul><p>C++ 版本的 TPL 支持的表达能力，已经完全不弱于 UNIX 经典的 LEX + YACC 组合，使用上却轻量很多。KSDN 2.0 的工作原理变成了：</p><ul>\n<li>基于 TPL 将 C++ 或 Delphi 文件转为 json 格式；</li>\n<li>与 XSLT 类似地，我们引入了 JSPT，即以 json 为输入，PHP 为 formatter，将内容转为一个或多个 HTML 文件。</li>\n</ul><p>这个过程非常通用，可以用于实现任意文件格式之间的变换。包括我们前面的 mk 程序，它本质上也是类 ini 文件格式变换到 Makefile 的过程，我们基于 TPL 很轻松就改造了一个 mk 2.0 版本。</p><p>2009 年的时候，我们基于 C++ 实现一个名为 CERL 的网络库，它和 Go 语言的 goroutine 类似，也是基于协程来实现高并发。在这个网络库中，我们定义了一个名为 SDL（Server Description Language）的语言来描述服务器的网络协议。很自然地，我们基于 TPL + JSPT 来实现了 SDL 文件的解析过程。</p><p>2011 年，七牛云成立，我们选择了 Go 语言作为技术栈的核心。在转 Go 语言后，除了 TPL，我个人沉淀的大部分 C++ 基础库都不再需要，因为它们往往已经被 Go 语言的标准库解决得很好。</p><p>在 2015 年的时候，出于某种原因我实现了一个网络爬虫，这个爬虫会在收到网页内容后，抽取网页中的结构化信息并存储起来。这个抽取信息的过程，最终导致 Go 语言版本 TPL 的诞生。它的项目主页为：</p><ul>\n<li><a href=\"https://github.com/qiniu/text\">https://github.com/qiniu/text</a></li>\n</ul><p>为了验证 Go 语言版本 TPL 的有效性，我在实现了经典的 “计算器（Calculator）” 之余，顺手实现了一门语言，这就是 qlang。它的项目主页为：</p><ul>\n<li><a href=\"https://github.com/qiniu/qlang\">https://github.com/qiniu/qlang</a></li>\n</ul><p>由于 Go 语言中实现泛型数据结构的需要，我给 qlang 实现了一个 embedded 版本，简称 eql。它是类似 erubis/erb 的东西。结合 go generate，它可以很方便地让 Go 支持模板（不是 html template，是指泛型）。</p><p>在 2017 年，出于 rtmp 网络协议理解的需要，我创建了 BPL（Binary Processing Language），它的项目主页为：</p><ul>\n<li><a href=\"https://github.com/qiniu/bpl\">https://github.com/qiniu/bpl</a></li>\n</ul><p>区别于 TPL 的是，BPL 主要用于处理二进制文档。前面我们谈到 ExcelViewer 和 DocViewer 时说过，我们并没有建立任何通用的架构范式。这一直是我引以为憾的事情，所以 2006 年 C++ 版本的 TPL 诞生后就有过 BPL 相关的尝试。这里是尝试残留的痕迹：</p><ul>\n<li><a href=\"https://github.com/xushiwei/tpl/tree/master/include/tpl/binary\">tpl/binary/*</a></li>\n</ul><p>但是二进制文档的确很难，它的格式描述中通常有一定的条件判断逻辑，所以 BPL 背后需要依赖一门语言。在 qlang 诞生后，这个条件就得到了满足，这是最终 BPL 得以能够诞生的原因。</p><p>BPL 非常强大，它可以处理任意的二进制文件，也可以用于处理任意的 TCP 网络协议数据流。有了 BPL，我们最初的 ExcelViewer 和 DocViewer 可以轻松得以实现。关于 BPL 更详细的介绍，请参阅 <a href=\"https://github.com/qiniu/bpl\">https://github.com/qiniu/bpl</a> 中的文档说明。</p><h2>文本内容的处理范式</h2><p>介绍了我个人文本处理的技术栈演进过程后，我们把话题重新回到架构范式。</p><p>首先，让我们把焦点放在文本内容的处理上。</p><p>文本内容的处理，有非常标准的方式。它通常分词法分析（Lex）和语法分析（Parser）两个阶段。UNIX 系的操作系统还提供了 lex 和 yacc 两个经典的程序来协助我们做文本文件的分析处理。</p><p>词法分析（Lex）通常由一个 Scanner 来完成，它负责将文本内容从字节流（Byte Stream）转为 Token 流（Token Stream）。我们以解析 Go 源代码的 Scanner 为例（参见 <a href=\"https://godoc.org/go/scanner\">https://godoc.org/go/scanner</a>），其 Scan 函数的原型如下：</p><pre><code>type Scanner struct {\n  Scan() (pos token.Pos, tok token.Token, lit string)\n  ...\n}\n</code></pre><p>其使用范式如下：</p><pre><code>import (\n  &quot;go/scanner&quot;\n  &quot;go/token&quot;\n)\n\nfunc doScan(s *scanner.Scanner) {\n  for {\n    pos, tok, lit := s.Scan()\n    if tok == token.EOF {\n      break\n    }\n    ...\n    // pos 是这个 token 的位置\n    // tok 是这个 token 的类型，见 https://godoc.org/go/token\n    // lit 是这个 token 的文本内容\n  }\n}\n</code></pre><p>Scanner 有时候也叫 Tokenizer。例如 Go 语言中 HTML 的 Tokenizer 类（参阅 <a href=\"https://godoc.org/golang.org/x/net/html\">https://godoc.org/golang.org/x/net/html</a>）的原型如下：</p><pre><code>type Token struct {\n  Type     TokenType\n  DataAtom atom.Atom\n  Data     string\n  Attr     []Attribute\n}\n\ntype Tokenizer struct {\n  Next() TokenType\n  Err() error\n  Token() Token\n  ...\n}\n</code></pre><p>其使用范式如下：</p><pre><code>import (\n  &quot;golang.org/x/net/html&quot;\n)\n\nfunc doScan(z *html.Tokenizer) error {\n  for {\n  \tif z.Next() == html.ErrorToken {\n  \t  // Returning io.EOF indicates success.\n  \t  return z.Err()\n  \t}\n  \ttoken := z.Token()\n    ...\n  }\n}\n</code></pre><p>词法分析（Lex）过程非常基础，大部分情况下我们不会直接和它打交道。我们打交道的基本都是语法分析器，通常叫 Parser。而从Parser 的使用方式来说，分为 SAX 和 DOM 两种模型。SAX 模型基于事件机制，DOM 模型则基于结构化的数据访问接口。</p><p>前面我们已经多次分析过 SAX 与 DOM 的优劣，这里不再展开。通常来说，我们会倾向于采用 DOM 模型。这里我们还是以 Go 文法和 HTML 文法的解析为例。</p><p>先看 Go 文法的 Parser（参阅 <a href=\"https://godoc.org/go/parser\">https://godoc.org/go/parser</a>），它的原型如下：</p><pre><code>func ParseExpr(x string) (ast.Expr, error)\n\nfunc ParseFile(\n  fset *token.FileSet,\n  filename string, src interface{},\n  mode Mode) (f *ast.File, err error)\n</code></pre><p>这里看起来有点复杂的是 ParseFile，它输入的字节流（Byte Stream）可以是：</p><ul>\n<li>scr != nil，且为 io.Reader 类型；</li>\n<li>src != nil，且为 string 或 []byte 类型；</li>\n<li>src == nil，filename 非空，字节流从 filename 对应的文件中读取。</li>\n</ul><p>而 Parser 的输出则统一是一个抽象语法树（Abstract Syntax Tree，AST）。显然，它基于的是 DOM 模型。</p><p>我们再看 HTML 文法的 Parser（参阅 <a href=\"https://godoc.org/golang.org/x/net/html\">https://godoc.org/golang.org/x/net/html</a>），它的原型如下：</p><pre><code>func Parse(r io.Reader) (*Node, error)\n</code></pre><p>超级简单的基于 DOM 模型的使用接口，任何解释都是多余的。</p><p>那么，我前面提的 TPL（Text Processing Language）是做什么的呢？它实现了一套通用的 Scanner + Parser 的机制。首先是词法分析，也就是 Scanner，它负责将文本流转换为 Token 序列。简单来说，就是一个从 text []byte 到 tokens []Token 的过程。</p><p>尽管世上语言多样，但是词法非常接近，所以在词法分析这块 ，TPL 抽象了一个 Tokenizer 接口，方便用户自定义。TPL 也内置了一个与 Go 语言词法类似的 Scanner，只是做了非常细微的调整，增加了 <code>?</code>、<code>~</code>、<code>@</code> 等操作符。</p><p>TPL 的 Parser 通过类 EBNF 文法表达。比如一个浮点运算的计算器（Calculator），支持加减乘除、函数调用、常量（如 pi 等）的类 EBNF 文法如下：</p><pre><code>term = factor *('*' factor/mul | '/' factor/quo | '%' factor/mod)\n\ndoc = term *('+' term/add | '-' term/sub)\n\nfactor =\n  FLOAT/push |\n  '-' factor/neg |\n  '(' doc ')' |\n  (IDENT '(' doc %= ','/ARITY ')')/call |\n  IDENT/ident |\n  '+' factor\n</code></pre><p>关于这个类 EBNF 文法，有以下补充说明：</p><ul>\n<li>我们用 *G 和 +G 来表示重复，而不是用 {G}。要记住这条规则其实比较简单。在编译原理的图书中，我们看到往往是 G* 和 G+。但语言文法中除了 ++ 和 -- 运算符，很少是后缀形式，所以我们选择改为前缀。</li>\n<li>我们用 ?G 来表示可选，而不是用 [G]。同上，只要能够回忆起编译原理中我们用 G? 表示可选，我们就很容易理解这里为什么可选是用 ?G 表示。</li>\n<li>我们直接用 G1 G2 来表示串接，而不是 G1, G2。</li>\n<li>我们用 G1 % G2 和 G1 %= G2 表示 G1 G2 G1 G2 ... G1 这样的列表。其中 G1 % G2 和 G1 %= G2 的区别是前者不能为空列表，后者可以。在上面的例子中，我们用 doc %= <code>,</code> 表示函数的参数列表。</li>\n<li>我们用 G/action 表示在 G 匹配成功后执行 action 这个动作。action 最终是调用到 Go 语言中的回调函数。在上面这个计算器中大量使用了 G/action 文法。</li>\n</ul><p>与 UNIX 实用程序 yacc 不同的是，TPL 中文法描述的脚本，与执行代码尽可能分离，以加业务语义的可读性。</p><p>从模型的归属来说，TPL 属于 SAX 模型。但 G/action 不一定真的是动作。在 extractor 模式下，G/action 被视为 G/marker，TPL 变成 DOM 模型。也就是说，此时 action 只是一个标记，用于形成输出的 DOM 树。</p><p>关于 TPL 更详细的介绍需要很长的篇幅，你可以参考 <a href=\"https://github.com/qiniu/text/tree/master/tpl\">TPL Doc</a>。</p><p>在文本内容处理的技术栈中，还有一个分支是正则表达式（Regular Expression）。在简单场景下，正则表达式是比较方便的，但是它的缺点也比较明显，可伸缩性和可读性都不强。</p><h2>二进制内容的处理范式</h2><p>接下来我们讨论二进制内容的通用处理范式。</p><p>二进制内容的处理过程整体来说，似乎比较 “容易”。如果要说出一点问题的话，那就是 “有点繁琐”。</p><p>还记得序列化机制吧？它基本上算得上二进制内容的 I/O 框架了。它看起来是这样的：</p><pre><code>type Foo struct {\n  A uint32\n  B string\n  C float64\n  D Bar\n}\n\nfunc readFoo(foo *Foo, ar *Archive) {\n  readUint32(&amp;foo.A, ar)\n  readString(&amp;foo.B, ar)\n  readFloat64(&amp;foo.C, ar)\n  readBar(&amp;foo.D, ar)\n}\n</code></pre><p>在 C++ 的操作符重载的支持下，这段代码看起来会更简洁一些：</p><pre><code>Archive&amp; operator&gt;&gt;(Archive&amp; ar, Foo&amp; foo) {\n  ar &gt;&gt; foo.A &gt;&gt; foo.B &gt;&gt; foo.C &gt;&gt; foo.D;\n  return ar;\n}\n</code></pre><p>当然，上面只是最基础的情形，所以看起来还比较简洁。但在考虑可选、重复、数组等场景，实际上并不会那么简单。比如对于数组，理想情况下代码是下面这样的：</p><pre><code>type Foo struct {\n  N uint16\n  Bars []Bar // [N]Bar\n}\n\nfunc readFoo(foo *Foo, ar *Archive) {\n  readUint16(&amp;foo.N, ar)\n  readArray(&amp;foo.Bars, int(foo.N), ar)\n}\n</code></pre><p>对于 Go 语言来说，这里我们想要的 readArray 并不存在。而在 C++ 则可以通过泛型来做到，我们示意如下：</p><pre><code>template &lt;class T&gt;\nvoid readArray(T[]&amp; v, int n, Archive&amp; ar) {\n  v = new T[n];\n  for (int i = 0; i &lt; n; i++) {\n    ar &gt;&gt; T[i];\n  }\n}\n</code></pre><p>呼唤一下 Go 语言的泛型吧。不过泛型大概率需要破坏 Go 的一些基础假设，比如不支持重载。所以 Go 的泛型之路不会那么容易。</p><p>回到序列化机制。常规意义的序列化，通常还提供了 Object 动态序列化与反序列化的能力。但是实际上这个机制属于过度设计。</p><p>为什么这么说？</p><p>因为 Object 动态序列化的确带来了一定的便捷性，但是这个便捷性的背后是让使用者放弃了对磁盘文件格式设计的思考。这是非常不正确的指导思想。</p><p>数据是软件的灵魂，文件是软件最重要的资产。</p><blockquote>\n<p>文件 I/O 的序列化机制，最重要的是定义严谨的数据格式，而非提供任何出于便捷性考虑的智能。</p>\n</blockquote><p>所以我们只需要保留序列化的形式就好了，任何额外的 “智能” 都是多余的。</p><p>基于这样的基本原则，稍作探究你就会发现，在数据结构清晰的情况下，其实整个序列化的代码是非常平庸的。假如我们参考 TPL 的类 EBNF 文法，定义以下这样一条规则：</p><pre><code>Foo = {\n  N uint16\n  Bars [N]Bar\n}\n</code></pre><p>这样，我们就可以自动帮这里的 Foo 类型实现它的序列化代码了。</p><p>而这正是 BPL 诞生的灵感来源。</p><p>BPL 设计的核心思想是，不破坏 TPL 的 EBNF 文法的任何语义，把自己作为 TPL 的扩展。这就好比，如果我们把 TPL 看作 C 的话，BPL 就是 C++。所有 TPL 的功能，BPL 都应该具备而且行为一致。</p><p>我们以 MongoDB 的网络协议为例，看看 BPL 文法是什么样的：</p><pre><code>document = bson\n\nMsgHeader = {/C\n  int32   messageLength; // total message size, including this\n  int32   requestID;     // identifier for this message\n  int32   responseTo;    // requestID from the original request (used in responses from db)\n  int32   opCode;        // request type - see table below\n}\n\nOP_UPDATE = {/C\n  int32     ZERO;               // 0 - reserved for future use\n  cstring   fullCollectionName; // &quot;dbname.collectionname&quot;\n  int32     flags;              // bit vector. see below\n  document  selector;           // the query to select the document\n  document  update;             // specification of the update to perform\n}\n\nOP_INSERT = {/C\n  int32      flags;              // bit vector - see below\n  cstring    fullCollectionName; // &quot;dbname.collectionname&quot;\n  document*  documents;          // one or more documents to insert into the collection\n}\n\nOP_QUERY = {/C\n  int32     flags;                  // bit vector of query options.  See below for details.\n  cstring   fullCollectionName;     // &quot;dbname.collectionname&quot;\n  int32     numberToSkip;           // number of documents to skip\n  int32     numberToReturn;         // number of documents to return\n  \t                                //  in the first OP_REPLY batch\n  document  query;                  // query object.  See below for details.\n  document? returnFieldsSelector;   // Optional. Selector indicating the fields\n  \t                                //  to return.  See below for details.\n}\n\nOP_GET_MORE = {/C\n  int32     ZERO;               // 0 - reserved for future use\n  cstring   fullCollectionName; // &quot;dbname.collectionname&quot;\n  int32     numberToReturn;     // number of documents to return\n  int64     cursorID;           // cursorID from the OP_REPLY\n}\n\nOP_DELETE = {/C\n  int32     ZERO;               // 0 - reserved for future use\n  cstring   fullCollectionName; // &quot;dbname.collectionname&quot;\n  int32     flags;              // bit vector - see below for details.\n  document  selector;           // query object.  See below for details.\n}\n\nOP_KILL_CURSORS = {/C\n  int32     ZERO;              // 0 - reserved for future use\n  int32     numberOfCursorIDs; // number of cursorIDs in message\n  int64*    cursorIDs;         // sequence of cursorIDs to close\n}\n\nOP_MSG = {/C\n  cstring   message; // message for the database\n}\n\nOP_REPLY = {/C\n  int32     responseFlags;  // bit vector - see details below\n  int64     cursorID;       // cursor id if client needs to do get more's\n  int32     startingFrom;   // where in the cursor this reply is starting\n  int32     numberReturned; // number of documents in the reply\n  document* documents;      // documents\n}\n\nOP_REQ = {/C\n  cstring  dbName;\n  cstring  cmd;\n  document param;\n}\n\nOP_RET = {/C\n  document ret;\n}\n\nMessage = {\n  header MsgHeader   // standard message header\n  let bodyLen = header.messageLength - sizeof(MsgHeader)\n  read bodyLen do case header.opCode {\n  \t1:    OP_REPLY    // Reply to a client request. responseTo is set.\n  \t1000: OP_MSG      // Generic msg command followed by a string.\n  \t2001: OP_UPDATE\n  \t2002: OP_INSERT\n  \t2004: OP_QUERY\n  \t2005: OP_GET_MORE // Get more data from a query. See Cursors.\n  \t2006: OP_DELETE\n  \t2007: OP_KILL_CURSORS // Notify database that the client has finished with the cursor.\n  \t2010: OP_REQ\n  \t2011: OP_RET\n  \tdefault: {\n      body [bodyLen]byte\n    }\n  }\n}\n\ndoc = *Message\n</code></pre><p>我们对比 MongoDB 官方的协议文档（参考 <a href=\"https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/\">https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/</a>），你会发现很有趣的一点是，我们 BPL 文法几乎和 MongoDB 官方采用的伪代码完全一致，除了一个小细节：在 BPL 中，我们用 {...} 表示采用 Go 语言结构体的文法，而 {/C ... } 表示采用 C 语言结构体的文法。</p><p>当前 BPL 还只支持解释执行，但这只是暂时的。就像在 TPL 中我们除了动态解释执行外，也已经提供 tpl generator 来生成 Go 代码以静态编译执行。</p><p>要进一步了解 BPL 的功能，请参阅 <a href=\"https://github.com/qiniu/bpl\">https://github.com/qiniu/bpl</a>。我们也还提供了不少具体 BPL 的样例，详细可参考：</p><ul>\n<li><a href=\"https://github.com/qiniu/bpl/tree/master/formats\">https://github.com/qiniu/bpl/tree/master/formats</a></li>\n</ul><h2>结语</h2><p>文本处理是一个非常庞大的课题，本文详细解剖了我个人在这个领域下的经验总结。相信这些经验对你面对相关场景时会有帮助。</p><p>但是更重要的一点是，我们平常需要有意识去分析我们工作中遇到的业务场景，从中提炼通用的需求场景形成架构范式的积累。</p><p>如此，架构的正交分解思想方能得到贯彻。而我们的业务迭代，也就越来越容易。</p><p>如果你对今天的内容有什么思考与解读，欢迎给我留言，我们一起讨论。下一讲我们的话题是 “架构老化与重构”。</p><p>如果你觉得有所收获，也欢迎把文章分享给你的朋友。感谢你的收听，我们下期再见。</p>","neighbors":{"left":{"article_title":"64 | 不断完善的架构范式","id":177746},"right":{"article_title":"66 | 架构老化与重构","id":180396}},"comments":[{"had_liked":false,"id":162573,"user_name":"leslie","can_delete":false,"product_type":"c1","uid":1324255,"ip_address":"","ucode":"798E7C1CC98CC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg","comment_is_top":false,"comment_ctime":1576558277,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23051394757","product_id":100025201,"comment_content":"     &quot;数据是软件的灵魂，文件是软件最重要的资产。&quot;老师这话很经典：故而之前老师讲数据库时提出的是&quot;中间件存储&quot;时，通过大量的查阅资料和总结研究找到另外一个称呼&quot;数据系统&quot;。<br>      从硬件层考虑&quot;中间件存储&quot;就是资产,软件层考虑“数据系统”就是灵魂。说个真实的案例，前段时间一个DB圈子的朋友数据库出问题，软件层各种排查做尽就是没看到问题，后来问题就处在硬件的存储。朋友问题处理完告诉我问题时我就猜测其硬件端的问题，我说你肯定是硬件的许多问题没考虑；朋友反问我为何知道，我告诉他我有5年以上核心机房的运维经验-这段经验帮助了我当问题出现时会从软硬件两方面去思考和找寻问题。<br>       这个案例体现了老师所说的&quot;数据是软件的灵魂，文件是软件最重要的资产。&quot;：当我们更高的角度和维度去思考时绕着这个核心其实就更加明白其价值、意义和处理方式。感谢老师今天的分享，跟随老师的教诲在学习中进步和成长，期待老师后续的分享。","like_count":6},{"had_liked":false,"id":162442,"user_name":"沫沫（美丽人生）","can_delete":false,"product_type":"c1","uid":1051023,"ip_address":"","ucode":"FC73BF0D79E3FD","user_header":"https://static001.geekbang.org/account/avatar/00/10/09/8f/ad6039b6.jpg","comment_is_top":false,"comment_ctime":1576536499,"is_pvip":false,"replies":[{"id":"61781","content":"循环依赖是从源代码层面的，不是运行时的网络调用。所以你说的不属于循环依赖。但如果大量存在两个服务之间的相互调用，解耦肯定也是没做好。高内聚低耦合，从功能内聚性看边界划分","user_name":"作者回复","comment_id":162442,"uid":"1228022","ip_address":"","utype":1,"ctime":1576541377,"user_name_real":"许式伟-七牛云(已满)"}],"discussion_count":2,"race_medal":0,"score":"23051372979","product_id":100025201,"comment_content":"许老师好 ，如果有两个服务A和B，A依赖于B，同时B也依赖于A，出现这种情况是属于循环依赖吗？这种情况的出现，是业务的正交分解没有做好吗？如果系统中出现大量的这种依赖，感觉系统的调用就成了复杂的网络结构 这种情况，重构应该怎么做呢？盼复！","like_count":6,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478051,"discussion_content":"循环依赖是从源代码层面的，不是运行时的网络调用。所以你说的不属于循环依赖。但如果大量存在两个服务之间的相互调用，解耦肯定也是没做好。高内聚低耦合，从功能内聚性看边界划分","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576541377,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1187198,"avatar":"https://static001.geekbang.org/account/avatar/00/12/1d/7e/202d50e8.jpg","nickname":"Sean","note":"","ucode":"6B4160C01928C7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383848,"discussion_content":"微服务之间一般是没有直接代码引用的，所以微服务直角的同步异步调用原则上就不需要加限制了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626253913,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":162449,"user_name":"Aaron Cheung","can_delete":false,"product_type":"c1","uid":1079816,"ip_address":"","ucode":"03972759C53667","user_header":"https://static001.geekbang.org/account/avatar/00/10/7a/08/4d3e47dd.jpg","comment_is_top":false,"comment_ctime":1576540146,"is_pvip":false,"replies":[{"id":"61839","content":"首先团队要有重构价值的共识，找到重构的步骤，然后才是执行。下一讲我们就是谈重构。","user_name":"作者回复","comment_id":162449,"uid":"1228022","ip_address":"","utype":1,"ctime":1576560909,"user_name_real":"许式伟-七牛云(已满)"}],"discussion_count":1,"race_medal":0,"score":"10166474738","product_id":100025201,"comment_content":"可运行的系统做重构 需要耗费不少时间 更需要团队支持😂","like_count":2,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478053,"discussion_content":"首先团队要有重构价值的共识，找到重构的步骤，然后才是执行。下一讲我们就是谈重构。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576560909,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":310204,"user_name":"candy","can_delete":false,"product_type":"c1","uid":1449024,"ip_address":"","ucode":"9CA127B28F1058","user_header":"","comment_is_top":false,"comment_ctime":1630547931,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630547931","product_id":100025201,"comment_content":"这篇没太看懂，编译原理需要好好学","like_count":1},{"had_liked":false,"id":307501,"user_name":"木木","can_delete":false,"product_type":"c1","uid":1486846,"ip_address":"","ucode":"2AD54B5B3F8298","user_header":"https://static001.geekbang.org/account/avatar/00/16/af/fe/e9127277.jpg","comment_is_top":false,"comment_ctime":1629126229,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629126229","product_id":100025201,"comment_content":"厉害，顺手实现了一个语言。这篇评论怎么这么少。","like_count":0},{"had_liked":false,"id":261149,"user_name":"王建新","can_delete":false,"product_type":"c1","uid":1496759,"ip_address":"","ucode":"5AC04223422B59","user_header":"https://static001.geekbang.org/account/avatar/00/16/d6/b7/2434ed03.jpg","comment_is_top":false,"comment_ctime":1605229713,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1605229713","product_id":100025201,"comment_content":"人对现实世界的原物进行信息化管理，大致有几个阶段过程：1，将现实原物加工成信息原料 比如形成思想语言或文章图画等 2，将信息原料存储 过去存储在大脑里纸上现在存储在电脑里 电脑里存成文本文档或富媒体 3，人以自身价值取向定义原料对应原物价值的特征值 结构化数据或人脸特征或嗓音特征 4，将特征值存储 结构化数据存在结构化表格或表格库里 以前是纸上画表现在是电脑里用结构化数据库 但图像或语音的特征值过去无法抽象出数字化的特征值 只能将数字富媒体原料存储在电脑里 5，在需要的时候获取第一原料特征值或群里原料特征值 结构化数据本身就是特征值存储，便于读取。而富媒体存储的是数字化原料，现在有了人工智能算法比对特征值 可以人类定义训练后找到某个原料中的特征值。 因为存的是富媒体文件，所以要先定位找到合适的富媒体原料文件，这就是非结构化数据文件管理。找到文件后或找文件的过程中，通过人工智能确定目标特征值所在的富媒体文件。另外，搜索引擎也是这个情况，即特征值预先完全没有抽象和存储在电脑里，只不过过去主要针对文本文件。非常感谢许大的文章，让我想到了上面内容。","like_count":0,"discussions":[{"author":{"id":1634483,"avatar":"https://static001.geekbang.org/account/avatar/00/18/f0/b3/9354e63c.jpg","nickname":"今晚打老虎","note":"","ucode":"CE484C70844FE5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":361045,"discussion_content":"好家伙，开始上编译原理课了😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616587299,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}