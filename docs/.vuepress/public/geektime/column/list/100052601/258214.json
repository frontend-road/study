{"id":258214,"title":"19 | 函数式编程之不变性：怎样保证我的代码不会被别人破坏？","content":"<p><span class=\"orange\"></span>你好！我是郑晔。</p><p>经过前两讲的介绍，你已经认识到了函数式编程的能力，函数以及函数之间的组合很好地体现出了函数式编程的巧妙之处。不过，我们在讲编程范式时说过，学习编程范式不仅要看它提供了什么，还要看它约束了什么。这一讲，我们就来看看函数式编程对我们施加的约束。</p><p>在软件开发中，有一类Bug是很让人头疼的，就是你的代码怎么看都没问题，可是运行起来就是出问题了。我曾经就遇到过这样的麻烦，有一次我用C写了一个程序，怎么运行都不对。我翻来覆去地看自己的代码，看了很多遍都没发现问题，不得已，只能一步一步跟踪代码。最后，我发现我的代码调用到一个程序库时，出现了与预期不符的结果。</p><p>这个程序库是其他人封装的，我只是拿过来用。按理说，我调用的这个函数逻辑也不是特别复杂，不应该出现什么问题。不过，为了更快定位问题，我还是打开了这个程序库的源代码。经过一番挖掘，我发现在这个函数底层实现中，出现了一个全局变量。</p><p>分析之后，我发现正是这个全局变量引起了这场麻烦，因为在我的代码执行过程中，有别的程序会调用另外的函数，修改这个全局变量的值，最终，导致了我的程序执行失败。从表面上看，我调用的这个函数和另外那个函数八竿子都打不到，但是，它们却通过一个底层的全局变量，产生了相互的影响。</p><!-- [[[read_end]]] --><p>这就是一类非常让人头疼的Bug。有人认为这是全局变量使用不当造成的，在Java设计中，甚至取消了全局变量，但类似的问题并没有因此减少，只是以不同面貌展现出来而已，比如，static 变量。</p><p>那么造成这类问题的真正原因是什么呢？<strong>真正原因就在于变量是可变的</strong>。</p><h2>变之殇</h2><p>你可能会好奇，难道变量不就应该是变的吗？为了更好地理解这一类问题，我们来看一段代码：</p><pre><code>class Sample1 {\n  private static final DateFormat format = \n      new SimpleDateFormat(&quot;yyyy.MM.dd&quot;);\n\n  public String getCurrentDateText() {\n    return format.format(new Date());\n  }\n}\n</code></pre><p>如果你不熟悉JDK的SimpleDateFormat，你可能会觉得这段代码看上去还不错。然而，这段代码在多线程环境下就会出问题。正确的用法应该是这样：</p><pre><code>public class Sample2 {\n  public String getCurrentDateText() {\n    DateFormat format = new SimpleDateFormat(&quot;yyyy.MM.dd&quot;);\n    return format.format(new Date()); \n  }\n}\n</code></pre><p>两段代码最大的区别就在于，SimpleDateFormat在哪里构建。一个是被当作了一个字段，另一个则是在函数内部构建出来。这两种不同做法的根本差别就在于，SimpleDateFormat对象是否共享。</p><p>为什么这个对象共享会有问题呢？翻看format方法的源码，你会发现这样一句：</p><pre><code>calendar.setTime(date);\n</code></pre><p>这里的calendar是SimpleDateFormat这个类的一个字段，正是因为在format的过程中修改了calendar字段，所以，它才会出问题。</p><p>我们来看看这种问题是怎么出现的，就像下面这张图看到的：</p><p><img src=\"https://static001.geekbang.org/resource/image/d2/db/d267c5c0ec206bef0eeae93f056d50db.jpg?wh=2284*1285\" alt=\"\"></p><ul>\n<li>A线程把变量的值修改成自己需要的值；</li>\n<li>这时发生线程切换，B线程开始执行，将变量的值修改成它所需要的值；</li>\n<li>线程切换回来，A线程继续执行，但此时变量已经不是自己设置的值了，所以，执行会出错。</li>\n</ul><p>回到SimpleDateFormat上，问题是一样的，calendar就是那个共享的变量。一个线程刚刚设置的值，可能会被另外一个线程修改掉，因此会造成结果的不正确。而在Sample2的写法中，通过每次创建一个新的SimpleDateFormat对象，我们将二者之间的共享解开，规避了这个问题。</p><p>那如果我还是想按照Sample1的写法写，SimpleDateFormat这个库应该怎么改写呢？可能你会想，SimpleDateFormat的作者没写好，如果换我写，我就会给它加上一个同步（synchronized）或者加上锁（Lock）。你甚至都没有注意，你轻易地将多线程的复杂性引入了进来。还记得我在分离关注点那节讨论的问题吗，多线程是另外一个关注点，能少用，尽量少用。</p><p>一个更好的办法是将calendar变成局部变量，这样一来，不同线程之间共享变量的问题就得到了根本的解决。但是，这类非常头疼的问题在函数式编程中却几乎不存在，这就依赖于函数式编程的不变性。</p><h2>不变性</h2><p>函数式编程的不变性主要体现在值和纯函数上。值，你可以将它理解为一个初始化之后就不再改变的量，换句话说，当你使用一个值的时候，值是不会变的。纯函数，是符合下面两点的函数：</p><ul>\n<li>对于相同的输入，给出相同的输出；</li>\n<li>没有副作用。</li>\n</ul><p>把值和纯函数合起来看，<strong>值保证不会显式改变一个量</strong>，<strong>而纯函数保证的是</strong>，<strong>不会隐式改变一个量</strong>。</p><p>我们说过，函数式编程中的函数源自数学中的函数。在这个语境里，函数就是纯函数，一个函数计算之后是不会产生额外的改变的，而函数中用到的一个一个量就是值，它们是不会随着计算改变的。所以，在函数式编程中，计算天然就是不变的。</p><p>正是由于不变性的存在，我们在前面遇到的那些问题也就不再是问题了。一方面，如果你拿到一个量，这次的值是1，下一次它还是1，我们完全不用担心它会改变。另一方面，我们调用一个函数，传进去同样的参数，它保证给出同样的结果，行为是完全可以预期的，不会碰触到其他部分。即便是在多线程的情况下，我们也不必考虑同步的问题，后续一系列的问题也就不存在了。</p><p>这与我们习惯的方式有着非常大的区别，因为传统方式的基础是面向内存单元的，改来改去甚至已经成为了程序员的本能。所以，我们对counter = counter + 1这种代码习以为常，而初学编程的人总会觉得这在数学上是不成立的。</p><p>在之前的讨论中，我们说过，传统的编程方式占优的地方是执行效率，而现如今，这个优点则越来越不明显，反而是因为到处可变而带来了更多的问题。相较之下，我们更应该在现在的设计中，考虑借鉴函数式编程的思路，把不变性更多地应用在我们的代码之中。</p><p>那怎么应用呢？首先是值。我们可以编写不变类，就是对象一旦构造出来就不能改变，Java程序员最熟悉的不变类应该就是String类，怎样编写不变类呢？</p><ul>\n<li>所有的字段只在构造函数中初始化；</li>\n<li>所有的方法都是纯函数；</li>\n<li>如果需要有改变，返回一个新的对象，而不是修改已有字段。</li>\n</ul><p>前面两点可能还好理解，最后一点，我们可以看一下Java String类的replace方法签名：</p><pre><code>String replace(char oldChar, char newChar);\n</code></pre><p>在这里，我们会用一个新的字符（newChar）替换掉这个字符串中原有的字符（oldChar），但我们并不是直接修改已有的这个字符串，而是创建一个新的字符串对象返回。这样一来，使用原来这个字符串的类并不用担心自己引用的内容会随之变化。</p><p>有了这个基础，等我们后面学习领域驱动设计的时候，你就很容易理解值对象（Value Object）是怎么回事了。</p><p>我们再来看纯函数。<strong>编写纯函数的重点是</strong>，<strong>不修改任何字段</strong>，<strong>也不调用修改字段内容的方法</strong>。因为在实际的工作中，我们使用的大多数都是传统的程序设计语言，而不是严格的函数式编程语言，不是所有用到的量都是值。所以，站在实用性的角度，如果要使用变量，就使用局部变量。</p><p>还有一个实用性的编程建议，就是使用语法中不变的修饰符，比如，Java就尽可能多使用final，C/C++就多写const。无论是修饰变量还是方法，它们的主要作用就是让编译器提醒你，要多从不变的角度思考问题。</p><p>当你有了用不变性思考问题的角度，你会发现之前的很多编程习惯是极其糟糕的，比如，Java程序员最喜欢写的setter，它就是提供了一个接口，修改一个对象内部的值。</p><p>不过，纯粹的函数式编程是很困难的，我们只能把编程原则设定为<strong>尽可能编写不变类和纯函数</strong>。但仅仅是这么来看，你也会发现，自己从前写的很多代码，尤其是大量负责业务逻辑处理的代码，完全可以写成不变的。</p><p>绝大多数涉及到可变或者副作用的代码，应该都是与外部系统打交道的。能够把大多数代码写成不变的，这已经是一个巨大的进步，也会减少许多后期维护的成本。</p><p>而正是不变性的优势，有些新的程序设计语言默认选项不再是变量，而是值。比如，在Rust里，你这么声明的是一个值，因为一旦初始化了，你将无法修改它：</p><pre><code>let result = 1;\n</code></pre><p>而如果你想声明一个变量，必须显式地告诉编译器：</p><pre><code>let mut result = 1;\n</code></pre><p>Java也在尝试将值类型引入语言，有一个专门的<a href=\"http://openjdk.java.net/projects/valhalla/\">Valhalla 项目</a>就是做这个的。你也看到了，不变性，是减少程序问题的一个重要努力方向。</p><p>现在回过头来看编程范式那一讲里说的约束：</p><blockquote>\n<p>函数式编程，限制使用赋值语句，它是对程序中的赋值施加了约束。</p>\n</blockquote><p>理解了不变性，你应该知道这句话的含义了，一旦初始化好一个量，就不要随便给它赋值了。</p><h2>总结时刻</h2><p>今天，我们讲了无论是全局变量、还是多线程，变化给程序设计带来了很多麻烦，然后我们还分析了这类问题的成因。</p><p>然而，这类问题在函数式编程中并不存在。其中，重要的原因就是函数式编程的不变性。函数式编程的不变性主要体现在它的值和纯函数上。深入学习函数式编程时，你会遇到的与之相关的各种说法：无副作用、无状态、引用透明等等，其实都是在讨论不变性。</p><p>即便使用传统的程序设计语言，我们也可以从中借鉴一些编程的方法。比如，编写不变类、编写纯函数、尽量使用不变的修饰符等等。</p><p>经过了这三讲的介绍，相信你已经对函数式编程有了很多认识，不过，我只是把设计中最常用的部分给你做了一个介绍，这远远不是函数式编程的全部。就算Java这种后期增补的函数式编程的语言，其中也包含了惰性求值、Optional等诸多内容，值得你去深入了解。不过我相信有了前面知识的铺垫，你再去学习函数式编程其他相关内容，难度系数就会降低一些。</p><p>关于编程范式的介绍，我们就告一段落，下一讲，我们开始介绍设计原则。</p><p>如果今天的内容你只能记住一件事，那请记住：<strong>尽量编写不变类和纯函数。</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/24/1e/24e5693b11652ff520e01fce5648b11e.jpg?wh=2284*1219\" alt=\"\"></p><h2>思考题</h2><p>最后，我想请你去了解一下<a href=\"http://microservices.io/patterns/data/event-sourcing.html\">Event Sourcing</a>，结合今天的内容，谈谈你对它的理解。欢迎在留言区写下你的想法。</p><p>感谢阅读，如果你觉得这一讲的内容对你有帮助的话，也欢迎把它分享给你的朋友。</p>","neighbors":{"left":{"article_title":"18 | 函数式编程之组合性：函数式编程为什么如此吸引人？","id":257396},"right":{"article_title":"加餐 | 函数式编程拾遗","id":258954}},"comments":[{"had_liked":false,"id":236152,"user_name":"Medusa","can_delete":false,"product_type":"c1","uid":2023519,"ip_address":"","ucode":"296B9DBC461C4E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLLH2UYZGvyZ02BvGsqXb6rJeCjE7sXTapRyBzicIC0vRT3DibsliaX7HWd7iadicicXCuyd3tYhLV7fHCQ/132","comment_is_top":false,"comment_ctime":1595330047,"is_pvip":false,"replies":[{"id":"87288","content":"首先，参数的多少与是否使用局部变量无关。其次，参数如果多，可以封装成类。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1595373413,"ip_address":"","comment_id":236152,"utype":1}],"discussion_count":1,"race_medal":0,"score":"44545003007","product_id":100052601,"comment_content":"如果每个函数都使用局部变量，那有些函数入参就会很多，这又与代码整洁之道里谈到函数入参尽可能少的原则对立，怎么去做一个平衡？","like_count":11,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501962,"discussion_content":"首先，参数的多少与是否使用局部变量无关。其次，参数如果多，可以封装成类。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595373413,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232939,"user_name":"阳仔","can_delete":false,"product_type":"c1","uid":1046920,"ip_address":"","ucode":"79F73D85EDF3E2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/88/cdda9e6f.jpg","comment_is_top":false,"comment_ctime":1594172730,"is_pvip":false,"replies":[{"id":"85977","content":"变化是需求层面的不得已，不变是代码层面的努力控制。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1594180232,"ip_address":"","comment_id":232939,"utype":1}],"discussion_count":2,"race_medal":0,"score":"31658943802","product_id":100052601,"comment_content":"变化是软件开发的永恒主题，所以在编码实践上尽量的编写不变的纯函数和类，将变化的粒度控制到最小","like_count":8,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500821,"discussion_content":"变化是需求层面的不得已，不变是代码层面的努力控制。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1594180232,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1479120,"avatar":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","nickname":"无咎","note":"","ucode":"B9759B5646F3AB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579908,"discussion_content":"通过抽象(接口)和连接(组合)来正交式表达出来，减少复杂度。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657768516,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232905,"user_name":"sam","can_delete":false,"product_type":"c1","uid":1000417,"ip_address":"","ucode":"8D48F4B9045947","user_header":"https://static001.geekbang.org/account/avatar/00/0f/43/e1/b7be5560.jpg","comment_is_top":false,"comment_ctime":1594166587,"is_pvip":false,"replies":[{"id":"85964","content":"常量一般是预先确定的，而值是在运行过程中生成的。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1594175212,"ip_address":"","comment_id":232905,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31658937659","product_id":100052601,"comment_content":"初始化后不会改变的“值”就是常量吗？","like_count":8,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500809,"discussion_content":"常量一般是预先确定的，而值是在运行过程中生成的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594175212,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":309255,"user_name":"阿姆斯壮","can_delete":false,"product_type":"c1","uid":1265599,"ip_address":"","ucode":"87D5923D639CD6","user_header":"https://static001.geekbang.org/account/avatar/00/13/4f/bf/6584bdeb.jpg","comment_is_top":false,"comment_ctime":1630024511,"is_pvip":false,"replies":[{"id":"112083","content":"恭喜你通过实战有所收获","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1630159262,"ip_address":"","comment_id":309255,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14514926399","product_id":100052601,"comment_content":"学习函数式编程后，昨天发生了一件事。令我很有成就感。如果按照之前工作的方法，其实就是把JavaScript当成C语言来使用。需要引入大数组的方式来记录相应关键信息。而且中间还需要考虑各种复杂的记录和查找的代码。我用来闭包的方法，引入一个变量。调整了一下代码的结构。改动不到3行。就成功解决了这个新需求。重点是获得了很大的正向反馈。现在每天下班前回看自己今天写的代码。有种隐约发现可以从函数中反应出业务的流程。不过，由于校长介绍的知识太吸引人了。这几天老是想学习DDD。但以终为始的方式实践下来却让我感觉能在工作中应用起来的知识才是目前自己最为急需的。而且能让自己进步更快。所以我重新调整了一下自己目标。先继续打磨函数式编程。争取未来半年能在公司教其他同事。另外就是引入测试的实践。这个过程中可以不断学习设计原则。在代码中思考原则如何应用。打通这些之后，才把重点引入DDD。","like_count":4,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525803,"discussion_content":"恭喜你通过实战有所收获","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630159262,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232916,"user_name":"zcc","can_delete":false,"product_type":"c1","uid":1046664,"ip_address":"","ucode":"58FB42400517A9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/88/96b870fd.jpg","comment_is_top":false,"comment_ctime":1594168287,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14479070175","product_id":100052601,"comment_content":"尤其是大量负责业务逻辑处理的代码，完全可以写成不变的。这句话不太理解，老师可以举个例子吗？<br>事件溯源，对比一般的CRUD，就是没有修改，只有不断的插入值不同的同一条记录，下次修改时，在最新一条基础上修改值后再插入一条最新的。有点类似Java String 的处理方式，修改是生成另一个对象。","like_count":3},{"had_liked":false,"id":258548,"user_name":"Feng","can_delete":false,"product_type":"c1","uid":1015205,"ip_address":"","ucode":"42DB60B7BF69D0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7d/a5/930c9103.jpg","comment_is_top":false,"comment_ctime":1604479369,"is_pvip":false,"replies":[{"id":"100423","content":"非常好的补充。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1612099228,"ip_address":"","comment_id":258548,"utype":1}],"discussion_count":2,"race_medal":1,"score":"10194413961","product_id":100052601,"comment_content":"Event Sourcing，把对象的状态每次变化抽象成独立的事件进行保存，对象的状态变化可由一系列事件的调用重现。<br>编写不变类，无可变化的状态；Event Sourcing记录每一次状态变化。","like_count":3,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508688,"discussion_content":"非常好的补充。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612099228,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1731543,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/6b/d7/8872624a.jpg","nickname":"xmeng","note":"","ucode":"C0CA2182BA3B4B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":410336,"discussion_content":"每一次获取对象的状态都需要基于事件列表来调用重现么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635667351,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345887,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1652677178,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652677178","product_id":100052601,"comment_content":"尽量编写不变类和纯函数。--记下来","like_count":0},{"had_liked":false,"id":302446,"user_name":"独孤九剑","can_delete":false,"product_type":"c1","uid":2230909,"ip_address":"","ucode":"6C1253E2B8C1D4","user_header":"https://static001.geekbang.org/account/avatar/00/22/0a/7d/ac715471.jpg","comment_is_top":false,"comment_ctime":1626226898,"is_pvip":false,"replies":[{"id":"110015","content":"殊途同归","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1627119203,"ip_address":"","comment_id":302446,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1626226898","product_id":100052601,"comment_content":"函数式编程的“不变性”也是OCP原则的一种体现吧？","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523309,"discussion_content":"殊途同归","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627119203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":299390,"user_name":"呆呆狗的兽","can_delete":false,"product_type":"c1","uid":2404924,"ip_address":"","ucode":"B7D445F3BE2E4C","user_header":"https://static001.geekbang.org/account/avatar/00/24/b2/3c/22028324.jpg","comment_is_top":false,"comment_ctime":1624608053,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624608053","product_id":100052601,"comment_content":"粗略了解了下这个Event Sourcing，看了下其官方还是开发者，提供的代码样例，其思想就是有个全局的事件处理器，类似于消息总线？掌控着系统所有的消息的发送与接受(DomainEventPublisher负责对方法发送，DomainEventDispatcher负责对向消息的分发，然后各自服务进行处理)，这样整个系统各服务就依赖事件的发送与消费，完成了不变性？因为各系统不会直接修改其他系统的“值”了，比如order的status，都由其domain中代码控制，而其他domain或者service等，都完全没有控制其变更的方式。我是这样理解的","like_count":0},{"had_liked":false,"id":297439,"user_name":"猪肉怂","can_delete":false,"product_type":"c1","uid":2011383,"ip_address":"","ucode":"59C909384E1116","user_header":"https://static001.geekbang.org/account/avatar/00/1e/b0/f7/9016fbbb.jpg","comment_is_top":false,"comment_ctime":1623551617,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1623551617","product_id":100052601,"comment_content":"事件源：之前看过网上 MOPCON 的一个分享（https:&#47;&#47;www.youtube.com&#47;watch?v=mGR0A5Jyolg）提到过，不要轻易添加「状态」，取而代之的是通过事件源（通过事件的发生时间，去重建历史的对象及对应关系），我觉得这本质上是给实体模型赋予不变性，从而消除因为状态变化而引发的副作用。<br><br>不变性，也是诸多编程原则背后的原则。例如，基于「不变性」这样一个目标，领悟驱动设计中的「值对象」 做法(定义一个不变的对对象，用于标识实体之外的其他业务模型)，以及马丁.福勒提出的「无副作用方法」（side-effect-free function，指代方法不会对对象状态产生任何改变) 等，就都显得非常恰如其分了。<br><br>更极端的如 Rust ，直接让不变性成为语法语汇，有人评价这是一种把道德规范引入法律的做法，觉得这种类比有一定道理。然而在语言层面，至少倒逼程序员产出不那么坏的代码。","like_count":0,"discussions":[{"author":{"id":1479120,"avatar":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","nickname":"无咎","note":"","ucode":"B9759B5646F3AB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579909,"discussion_content":"Rust进一步增加了限制。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657768782,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":293646,"user_name":"podric","can_delete":false,"product_type":"c1","uid":2616984,"ip_address":"","ucode":"94FC3FE222D6C9","user_header":"","comment_is_top":false,"comment_ctime":1621475913,"is_pvip":false,"replies":[{"id":"106628","content":"这取决于所用的语言内存管理机制是什么样的，Rust就不用考虑这样的问题。<br><br>设计首先要考虑的是模型关系，实现是下一步的考量。如果你的设计里面，这个不变的设计要经常变，那你考虑的是这个设计是不是有问题。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1621692840,"ip_address":"","comment_id":293646,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1621475913","product_id":100052601,"comment_content":"您好，郑老师！较多地使用“不变类”是否会<br>+ 增加内存的占用 （改变后的值和旧值同时在内存中） -&gt; 可能由GC机制管理，因此可以解决。<br>+ 导致运算速度的降低 （较多的复制操作）","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520307,"discussion_content":"这取决于所用的语言内存管理机制是什么样的，Rust就不用考虑这样的问题。\n\n设计首先要考虑的是模型关系，实现是下一步的考量。如果你的设计里面，这个不变的设计要经常变，那你考虑的是这个设计是不是有问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621692840,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":255567,"user_name":"Janenesome","can_delete":false,"product_type":"c1","uid":1276572,"ip_address":"","ucode":"15D2673CC31D9D","user_header":"https://static001.geekbang.org/account/avatar/00/13/7a/9c/a4bc748d.jpg","comment_is_top":false,"comment_ctime":1603373997,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603373997","product_id":100052601,"comment_content":"想请教一下老师。<br>我用的是 Java，以前会经常设计非线程安全的对象，因为不用考虑并发问题，他的成员变量可以在方法内被修改。业务流程中执行到中间某个方法的时候需要顺便赋值某个变量，然后在接下来的另外一些方法里用到该变量。<br><br>如果按文中的不变性来定义，可变的变量是不是应该改成由函数来返回，然后作为入参传给其他函数？<br>或者这个对象最好只提供纯函数，对象里的成员变量拆到另外一个类去呢？","like_count":0},{"had_liked":false,"id":255563,"user_name":"Janenesome","can_delete":false,"product_type":"c1","uid":1276572,"ip_address":"","ucode":"15D2673CC31D9D","user_header":"https://static001.geekbang.org/account/avatar/00/13/7a/9c/a4bc748d.jpg","comment_is_top":false,"comment_ctime":1603373305,"is_pvip":false,"replies":[{"id":"100532","content":"学到一点，用起来都是好的。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1612247481,"ip_address":"","comment_id":255563,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1603373305","product_id":100052601,"comment_content":"实际生产中也有遇到过 static 全局变量带来的并发问题，而且还挺隐晦的，我们是 tomcat 容器多线程下引起的。因为代码里没有显式使用多线程，导致一开始还没意识到是什么问题。<br><br>static 用起来倒是挺方便的，因为很多时候都不会意识到会有什么问题，还是见得少了。看完《10X程序员》之后就已经下意识地少用 static 了。","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507755,"discussion_content":"学到一点，用起来都是好的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612247481,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1541669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/86/25/25ded6c3.jpg","nickname":"zhengyu.nie","note":"","ucode":"FFE0377D323E46","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332627,"discussion_content":"static应当作为常量或者启动加载性质的，比如打表策略和集合判断，你保证他CI之后不会再写就完事了，如果还需要写，加锁即可","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1607270533,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":247809,"user_name":"饭","can_delete":false,"product_type":"c1","uid":1610573,"ip_address":"","ucode":"B3F1702D4DE604","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJKj3GbvevFibxwJibTqm16NaE8MXibwDUlnt5tt73KF9WS2uypha2m1Myxic6Q47Zaj2DZOwia3AgicO7Q/132","comment_is_top":false,"comment_ctime":1599872107,"is_pvip":false,"replies":[{"id":"91168","content":"现在纯函数式的语言使用范围并不广，但越来越多的语言支持了函数式编程，比如，Java。<br><br>显然，我这里给出的例子都是在真实项目中如何使用的例子，所以，用函数式编程做业务系统不是问题。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1599999011,"ip_address":"","comment_id":247809,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1599872107","product_id":100052601,"comment_content":"老师，函数式语言，应用领域主要在哪里啊，适合做业务系统吗","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505501,"discussion_content":"现在纯函数式的语言使用范围并不广，但越来越多的语言支持了函数式编程，比如，Java。\n\n显然，我这里给出的例子都是在真实项目中如何使用的例子，所以，用函数式编程做业务系统不是问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599999011,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":245083,"user_name":"苗","can_delete":false,"product_type":"c1","uid":1088710,"ip_address":"","ucode":"5ECCC6C855E541","user_header":"https://static001.geekbang.org/account/avatar/00/10/9c/c6/05a6798f.jpg","comment_is_top":false,"comment_ctime":1598814866,"is_pvip":false,"replies":[{"id":"100133","content":"设计模式是值得专门学一下的。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1611728701,"ip_address":"","comment_id":245083,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1598814866","product_id":100052601,"comment_content":"从effect java中学到了builder模式；之前实验ddd的时候就考虑了不变性；比如修改用户信息；业务逻辑提取入参数据，返回值是通过builder构造一个新的对象；builder中有完整性校验；这样我可以保证经过业务逻辑处理后返回的对象一定是一个新的并且是符合业务完整性的领域对象。","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504788,"discussion_content":"设计模式是值得专门学一下的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611728701,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1541669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/86/25/25ded6c3.jpg","nickname":"zhengyu.nie","note":"","ucode":"FFE0377D323E46","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332626,"discussion_content":"是的，另外也消除了不可用状态，不会出现只set了一半的引用出现。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607270314,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244342,"user_name":"峰","can_delete":false,"product_type":"c1","uid":1056019,"ip_address":"","ucode":"C53CB64E8E7D19","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/13/31ea1b0b.jpg","comment_is_top":false,"comment_ctime":1598488950,"is_pvip":true,"discussion_count":4,"race_medal":0,"score":"1598488950","product_id":100052601,"comment_content":"那如果把全局变量都改成ThreadLocal，老师觉得怎么样，有什么不好的地方，我除了觉得这类变量方便是方便，但很难跟踪修改，导致代码可读性不好。","like_count":0,"discussions":[{"author":{"id":1541669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/86/25/25ded6c3.jpg","nickname":"zhengyu.nie","note":"","ucode":"FFE0377D323E46","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332625,"discussion_content":"绝大部分场景局部变量是最好的做法，何必整个全局再加锁或者tl呢？没有必要的开销和代码复杂度，很多没有必要的全局变量加锁的话jdk也会进行锁消除。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1607270224,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121975,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1e/b7/b20ab184.jpg","nickname":"麋鹿在泛舟","note":"","ucode":"1379CADA08688E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303203,"discussion_content":"thread local实际上减缓了并发带来的问题，不过也不算是不变，同线程多次调用状态已经改变。 需要注意的点在于线程退出要主动做thread local变量资源的释放","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1599184554,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1024994,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a3/e2/5cb4f43f.jpg","nickname":"laolinshi","note":"","ucode":"269B879389D7D5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559474,"discussion_content":"如果使用线程池的话容易带来内存泄露的问题。一个线程执行task的过程中在threadlocal中设置了一些值，在task执行完后由于疏忽没有手动清除掉threadlocal设置的值，这些值就会一直存在于threadlocal中不会被垃圾收集器回收掉，直到这个线程死亡这些值才会被回收。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648790438,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1276572,"avatar":"https://static001.geekbang.org/account/avatar/00/13/7a/9c/a4bc748d.jpg","nickname":"Janenesome","note":"","ucode":"15D2673CC31D9D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":316184,"discussion_content":"ThreadLocal 感觉只是做了线程间的隔离，理解起来好像也算是全局变量","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603372712,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}