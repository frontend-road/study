{"id":191621,"title":"35 | 实战一（下）：手把手带你将ID生成器代码从“能用”重构为“好用”","content":"<p>上一节课中，我们结合ID生成器代码讲解了如何发现代码质量问题。虽然ID生成器的需求非常简单，代码行数也不多，但看似非常简单的代码，实际上还是有很多优化的空间。综合评价一下的话，小王的代码也只能算是“能用”、勉强及格。我们大部分人写出来的代码都能达到这个程度。如果想要在团队中脱颖而出，我们就不能只满足于这个60分及格，大家都能做的事情，我们要做得更好才行。</p><p>上一节课我们讲了，为什么这份代码只能得60分，这一节课我们再讲一下，如何将60分的代码重构为80分、90分，让它从“能用”变得“好用”。话不多说，让我们正式开始今天的学习吧！</p><h2>回顾代码和制定重构计划</h2><p>为了方便你查看和对比，我把上一节课中的代码拷贝到这里。</p><pre><code>public class IdGenerator {\n  private static final Logger logger = LoggerFactory.getLogger(IdGenerator.class);\n\n  public static String generate() {\n    String id = &quot;&quot;;\n    try {\n      String hostName = InetAddress.getLocalHost().getHostName();\n      String[] tokens = hostName.split(&quot;\\\\.&quot;);\n      if (tokens.length &gt; 0) {\n        hostName = tokens[tokens.length - 1];\n      }\n      char[] randomChars = new char[8];\n      int count = 0;\n      Random random = new Random();\n      while (count &lt; 8) {\n        int randomAscii = random.nextInt(122);\n        if (randomAscii &gt;= 48 &amp;&amp; randomAscii &lt;= 57) {\n          randomChars[count] = (char)('0' + (randomAscii - 48));\n          count++;\n        } else if (randomAscii &gt;= 65 &amp;&amp; randomAscii &lt;= 90) {\n          randomChars[count] = (char)('A' + (randomAscii - 65));\n          count++;\n        } else if (randomAscii &gt;= 97 &amp;&amp; randomAscii &lt;= 122) {\n          randomChars[count] = (char)('a' + (randomAscii - 97));\n          count++;\n        }\n      }\n      id = String.format(&quot;%s-%d-%s&quot;, hostName,\n              System.currentTimeMillis(), new String(randomChars));\n    } catch (UnknownHostException e) {\n      logger.warn(&quot;Failed to get the host name.&quot;, e);\n    }\n\n    return id;\n  }\n}\n</code></pre><p>前面讲到系统设计和实现的时候，我们多次讲到要循序渐进、小步快跑。重构代码的过程也应该遵循这样的思路。每次改动一点点，改好之后，再进行下一轮的优化，保证每次对代码的改动不会过大，能在很短的时间内完成。所以，我们将上一节课中发现的代码质量问题，分成四次重构来完成，具体如下所示。</p><ul>\n<li>第一轮重构：提高代码的可读性</li>\n<li>第二轮重构：提高代码的可测试性</li>\n<li>第三轮重构：编写完善的单元测试</li>\n<li>第四轮重构：所有重构完成之后添加注释</li>\n</ul><!-- [[[read_end]]] --><h2>第一轮重构：提高代码的可读性</h2><p>首先，我们要解决最明显、最急需改进的代码可读性问题。具体有下面几点：</p><ul>\n<li>hostName变量不应该被重复使用，尤其当这两次使用时的含义还不同的时候；</li>\n<li>将获取hostName的代码抽离出来，定义为getLastfieldOfHostName()函数；</li>\n<li>删除代码中的魔法数，比如，57、90、97、122；</li>\n<li>将随机数生成的代码抽离出来，定义为generateRandomAlphameric()函数；</li>\n<li>generate()函数中的三个if逻辑重复了，且实现过于复杂，我们要对其进行简化；</li>\n<li>对IdGenerator类重命名，并且抽象出对应的接口。</li>\n</ul><p>这里我们重点讨论下最后一个修改。实际上，对于ID生成器的代码，有下面三种类的命名方式。你觉得哪种更合适呢？</p><p><img src=\"https://static001.geekbang.org/resource/image/8f/6b/8f0de72351eeb9138c7a3b8199767a6b.jpg?wh=1843*673\" alt=\"\"></p><p>我们来逐一分析一下三种命名方式。</p><p>第一种命名方式，将接口命名为IdGenerator，实现类命名为LogTraceIdGenerator，这可能是很多人最先想到的命名方式了。在命名的时候，我们要考虑到，以后两个类会如何使用、会如何扩展。从使用和扩展的角度来分析，这样的命名就不合理了。</p><p>首先，如果我们扩展新的日志ID生成算法，也就是要创建另一个新的实现类，因为原来的实现类已经叫LogTraceIdGenerator了，命名过于通用，那新的实现类就不好取名了，无法取一个跟LogTraceIdGenerator平行的名字了。</p><p>其次，你可能会说，假设我们没有日志ID的扩展需求，但要扩展其他业务的ID生成算法，比如针对用户的（UserldGenerator）、订单的（OrderIdGenerator），第一种命名方式是不是就是合理的呢？答案也是否定的。基于接口而非实现编程，主要的目的是为了方便后续灵活地替换实现类。而LogTraceIdGenerator、UserIdGenerator、OrderIdGenerator三个类从命名上来看，涉及的是完全不同的业务，不存在互相替换的场景。也就是说，我们不可能在有关日志的代码中，进行下面这种替换。所以，让这三个类实现同一个接口，实际上是没有意义的。</p><pre><code>IdGenearator idGenerator = new LogTraceIdGenerator();\n替换为:\nIdGenearator idGenerator = new UserIdGenerator();\n</code></pre><p>第二种命名方式是不是就合理了呢？答案也是否定的。其中，LogTraceIdGenerator接口的命名是合理的，但是HostNameMillisIdGenerator实现类暴露了太多实现细节，只要代码稍微有所改动，就可能需要改动命名，才能匹配实现。</p><p>第三种命名方式是我比较推荐的。在目前的ID生成器代码实现中，我们生成的ID是一个随机ID，不是递增有序的，所以，命名成RandomIdGenerator是比较合理的，即便内部生成算法有所改动，只要生成的还是随机的ID，就不需要改动命名。如果我们需要扩展新的ID生成算法，比如要实现一个递增有序的ID生成算法，那我们可以命名为SequenceIdGenerator。</p><p>实际上，更好的一种命名方式是，我们抽象出两个接口，一个是IdGenerator，一个是LogTraceIdGenerator，LogTraceIdGenerator继承IdGenerator。实现类实现接口LogTraceIdGenerator，命名为RandomIdGenerator、SequenceIdGenerator等。这样，实现类可以复用到多个业务模块中，比如前面提到的用户、订单。</p><p>根据上面的优化策略，我们对代码进行第一轮的重构，重构之后的代码如下所示：</p><pre><code>public interface IdGenerator {\n  String generate();\n}\n\npublic interface LogTraceIdGenerator extends IdGenerator {\n}\n\npublic class RandomIdGenerator implements LogTraceIdGenerator {\n  private static final Logger logger = LoggerFactory.getLogger(RandomIdGenerator.class);\n\n  @Override\n  public String generate() {\n    String substrOfHostName = getLastfieldOfHostName();\n    long currentTimeMillis = System.currentTimeMillis();\n    String randomString = generateRandomAlphameric(8);\n    String id = String.format(&quot;%s-%d-%s&quot;,\n            substrOfHostName, currentTimeMillis, randomString);\n    return id;\n  }\n\n  private String getLastfieldOfHostName() {\n    String substrOfHostName = null;\n    try {\n      String hostName = InetAddress.getLocalHost().getHostName();\n      String[] tokens = hostName.split(&quot;\\\\.&quot;);\n      substrOfHostName = tokens[tokens.length - 1];\n      return substrOfHostName;\n    } catch (UnknownHostException e) {\n      logger.warn(&quot;Failed to get the host name.&quot;, e);\n    }\n    return substrOfHostName;\n  }\n\n  private String generateRandomAlphameric(int length) {\n    char[] randomChars = new char[length];\n    int count = 0;\n    Random random = new Random();\n    while (count &lt; length) {\n      int maxAscii = 'z';\n      int randomAscii = random.nextInt(maxAscii);\n      boolean isDigit= randomAscii &gt;= '0' &amp;&amp; randomAscii &lt;= '9';\n      boolean isUppercase= randomAscii &gt;= 'A' &amp;&amp; randomAscii &lt;= 'Z';\n      boolean isLowercase= randomAscii &gt;= 'a' &amp;&amp; randomAscii &lt;= 'z';\n      if (isDigit|| isUppercase || isLowercase) {\n        randomChars[count] = (char) (randomAscii);\n        ++count;\n      }\n    }\n    return new String(randomChars);\n  }\n}\n\n//代码使用举例\nLogTraceIdGenerator logTraceIdGenerator = new RandomIdGenerator();\n</code></pre><h2>第二轮重构：提高代码的可测试性</h2><p>关于代码可测试性的问题，主要包含下面两个方面：</p><ul>\n<li>generate()函数定义为静态函数，会影响使用该函数的代码的可测试性；</li>\n<li>generate()函数的代码实现依赖运行环境（本机名）、时间函数、随机函数，所以generate()函数本身的可测试性也不好。</li>\n</ul><p>对于第一点，我们已经在第一轮重构中解决了。我们将RandomIdGenerator类中的generate()静态函数重新定义成了普通函数。调用者可以通过依赖注入的方式，在外部创建好RandomIdGenerator对象后注入到自己的代码中，从而解决静态函数调用影响代码可测试性的问题。</p><p>对于第二点，我们需要在第一轮重构的基础之上再进行重构。重构之后的代码如下所示，主要包括以下几个代码改动。</p><ul>\n<li>从getLastfieldOfHostName()函数中，将逻辑比较复杂的那部分代码剥离出来，定义为getLastSubstrSplittedByDot()函数。因为getLastfieldOfHostName()函数依赖本地主机名，所以，剥离出主要代码之后这个函数变得非常简单，可以不用测试。我们重点测试getLastSubstrSplittedByDot()函数即可。</li>\n<li>将generateRandomAlphameric()和getLastSubstrSplittedByDot()这两个函数的访问权限设置为protected。这样做的目的是，可以直接在单元测试中通过对象来调用两个函数进行测试。</li>\n<li>给generateRandomAlphameric()和getLastSubstrSplittedByDot()两个函数添加Google Guava的annotation @VisibleForTesting。这个annotation没有任何实际的作用，只起到标识的作用，告诉其他人说，这两个函数本该是private访问权限的，之所以提升访问权限到protected，只是为了测试，只能用于单元测试中。</li>\n</ul><pre><code>public class RandomIdGenerator implements LogTraceIdGenerator {\n  private static final Logger logger = LoggerFactory.getLogger(RandomIdGenerator.class);\n\n  @Override\n  public String generate() {\n    String substrOfHostName = getLastfieldOfHostName();\n    long currentTimeMillis = System.currentTimeMillis();\n    String randomString = generateRandomAlphameric(8);\n    String id = String.format(&quot;%s-%d-%s&quot;,\n            substrOfHostName, currentTimeMillis, randomString);\n    return id;\n  }\n\n  private String getLastfieldOfHostName() {\n    String substrOfHostName = null;\n    try {\n      String hostName = InetAddress.getLocalHost().getHostName();\n      substrOfHostName = getLastSubstrSplittedByDot(hostName);\n    } catch (UnknownHostException e) {\n      logger.warn(&quot;Failed to get the host name.&quot;, e);\n    }\n    return substrOfHostName;\n  }\n\n  @VisibleForTesting\n  protected String getLastSubstrSplittedByDot(String hostName) {\n    String[] tokens = hostName.split(&quot;\\\\.&quot;);\n    String substrOfHostName = tokens[tokens.length - 1];\n    return substrOfHostName;\n  }\n\n  @VisibleForTesting\n  protected String generateRandomAlphameric(int length) {\n    char[] randomChars = new char[length];\n    int count = 0;\n    Random random = new Random();\n    while (count &lt; length) {\n      int maxAscii = 'z';\n      int randomAscii = random.nextInt(maxAscii);\n      boolean isDigit= randomAscii &gt;= '0' &amp;&amp; randomAscii &lt;= '9';\n      boolean isUppercase= randomAscii &gt;= 'A' &amp;&amp; randomAscii &lt;= 'Z';\n      boolean isLowercase= randomAscii &gt;= 'a' &amp;&amp; randomAscii &lt;= 'z';\n      if (isDigit|| isUppercase || isLowercase) {\n        randomChars[count] = (char) (randomAscii);\n        ++count;\n      }\n    }\n    return new String(randomChars);\n  }\n}\n</code></pre><p>在上一节课的课堂讨论中，我们提到，打印日志的Logger对象被定义为static final的，并且在类内部创建，这是否影响到代码的可测试性？是否应该将Logger对象通过依赖注入的方式注入到类中呢？</p><p>依赖注入之所以能提高代码可测试性，主要是因为，通过这样的方式我们能轻松地用mock对象替换依赖的真实对象。那我们为什么要mock这个对象呢？这是因为，这个对象参与逻辑执行（比如，我们要依赖它输出的数据做后续的计算）但又不可控。对于Logger对象来说，我们只往里写入数据，并不读取数据，不参与业务逻辑的执行，不会影响代码逻辑的正确性，所以，我们没有必要mock Logger对象。</p><p>除此之外，一些只是为了存储数据的值对象，比如String、Map、UseVo，我们也没必要通过依赖注入的方式来创建，直接在类中通过new创建就可以了。</p><h2>第三轮重构：编写完善的单元测试</h2><p>经过上面的重构之后，代码存在的比较明显的问题，基本上都已经解决了。我们现在为代码补全单元测试。RandomIdGenerator类中有4个函数。</p><pre><code>public String generate();\nprivate String getLastfieldOfHostName();\n@VisibleForTesting\nprotected String getLastSubstrSplittedByDot(String hostName);\n@VisibleForTesting\nprotected String generateRandomAlphameric(int length);\n</code></pre><p>我们先来看后两个函数。这两个函数包含的逻辑比较复杂，是我们测试的重点。而且，在上一步重构中，为了提高代码的可测试性，我们已经将这两个部分代码跟不可控的组件（本机名、随机函数、时间函数）进行了隔离。所以，我们只需要设计完备的单元测试用例即可。具体的代码实现如下所示（注意，我们使用了JUnit测试框架）：</p><pre><code>public class RandomIdGeneratorTest {\n  @Test\n  public void testGetLastSubstrSplittedByDot() {\n    RandomIdGenerator idGenerator = new RandomIdGenerator();\n    String actualSubstr = idGenerator.getLastSubstrSplittedByDot(&quot;field1.field2.field3&quot;);\n    Assert.assertEquals(&quot;field3&quot;, actualSubstr);\n\n    actualSubstr = idGenerator.getLastSubstrSplittedByDot(&quot;field1&quot;);\n    Assert.assertEquals(&quot;field1&quot;, actualSubstr);\n\n    actualSubstr = idGenerator.getLastSubstrSplittedByDot(&quot;field1#field2#field3&quot;);\n    Assert.assertEquals(&quot;field1#field2#field3&quot;, actualSubstr);\n  }\n\n  // 此单元测试会失败，因为我们在代码中没有处理hostName为null或空字符串的情况\n  // 这部分优化留在第36、37节课中讲解\n  @Test\n  public void testGetLastSubstrSplittedByDot_nullOrEmpty() {\n    RandomIdGenerator idGenerator = new RandomIdGenerator();\n    String actualSubstr = idGenerator.getLastSubstrSplittedByDot(null);\n    Assert.assertNull(actualSubstr);\n\n    actualSubstr = idGenerator.getLastSubstrSplittedByDot(&quot;&quot;);\n    Assert.assertEquals(&quot;&quot;, actualSubstr);\n  }\n\n  @Test\n  public void testGenerateRandomAlphameric() {\n    RandomIdGenerator idGenerator = new RandomIdGenerator();\n    String actualRandomString = idGenerator.generateRandomAlphameric(6);\n    Assert.assertNotNull(actualRandomString);\n    Assert.assertEquals(6, actualRandomString.length());\n    for (char c : actualRandomString.toCharArray()) {\n         Assert.assertTrue(('0' &lt;= c &amp;&amp; c &lt;= '9') || ('a' &lt;= c &amp;&amp; c &lt;= 'z') || ('A' &lt;= c &amp;&amp; c &lt;= 'Z'));\n    }\n  }\n\n  // 此单元测试会失败，因为我们在代码中没有处理length&lt;=0的情况\n  // 这部分优化留在第36、37节课中讲解\n  @Test\n  public void testGenerateRandomAlphameric_lengthEqualsOrLessThanZero() {\n    RandomIdGenerator idGenerator = new RandomIdGenerator();\n    String actualRandomString = idGenerator.generateRandomAlphameric(0);\n    Assert.assertEquals(&quot;&quot;, actualRandomString);\n\n    actualRandomString = idGenerator.generateRandomAlphameric(-1);\n    Assert.assertNull(actualRandomString);\n  }\n}\n</code></pre><p>我们再来看generate()函数。这个函数也是我们唯一一个暴露给外部使用的public函数。虽然逻辑比较简单，最好还是测试一下。但是，它依赖主机名、随机函数、时间函数，我们该如何测试呢？需要mock这些函数的实现吗？</p><p>实际上，这要分情况来看。我们前面讲过，写单元测试的时候，测试对象是函数定义的功能，而非具体的实现逻辑。这样我们才能做到，函数的实现逻辑改变了之后，单元测试用例仍然可以工作。那generate()函数实现的功能是什么呢？这完全是由代码编写者自己来定义的。</p><p>比如，针对同一份generate()函数的代码实现，我们可以有3种不同的功能定义，对应3种不同的单元测试。</p><ol>\n<li>如果我们把generate()函数的功能定义为：“生成一个随机唯一ID”，那我们只要测试多次调用generate()函数生成的ID是否唯一即可。</li>\n<li>如果我们把generate()函数的功能定义为：“生成一个只包含数字、大小写字母和中划线的唯一ID”，那我们不仅要测试ID的唯一性，还要测试生成的ID是否只包含数字、大小写字母和中划线。</li>\n<li>如果我们把generate()函数的功能定义为：“生成唯一ID，格式为：{主机名substr}-{时间戳}-{8位随机数}。在主机名获取失败时，返回：null-{时间戳}-{8位随机数}”，那我们不仅要测试ID的唯一性，还要测试生成的ID是否完全符合格式要求。</li>\n</ol><p><strong>总结一下，单元测试用例如何写，关键看你如何定义函数。</strong>针对generate()函数的前两种定义，我们不需要mock获取主机名函数、随机函数、时间函数等，但对于第3种定义，我们需要mock获取主机名函数，让其返回null，测试代码运行是否符合预期。</p><p>最后，我们来看下getLastfieldOfHostName()函数。实际上，这个函数不容易测试，因为它调用了一个静态函数（InetAddress.getLocalHost().getHostName();），并且这个静态函数依赖运行环境。但是，这个函数的实现非常简单，肉眼基本上可以排除明显的bug，所以我们可以不为其编写单元测试代码。毕竟，我们写单元测试的目的是为了减少代码bug，而不是为了写单元测试而写单元测试。</p><p>当然，如果你真的想要对它进行测试，我们也是有办法的。一种办法是使用更加高级的测试框架。比如PowerMock，它可以mock静态函数。另一种方式是将获取本机名的逻辑再封装为一个新的函数。不过，后一种方法会造成代码过度零碎，也会稍微影响到代码的可读性，这个需要你自己去权衡利弊来做选择。</p><h2>第四轮重构：添加注释</h2><p>前面我们提到，注释不能太多，也不能太少，主要添加在类和函数上。有人说，好的命名可以替代注释，清晰的表达含义。这点对于变量的命名来说是适用的，但对于类或函数来说就不一定对了。类或函数包含的逻辑往往比较复杂，单纯靠命名很难清晰地表明实现了什么功能，这个时候我们就需要通过注释来补充。比如，前面我们提到的对于generate()函数的3种功能定义，就无法用命名来体现，需要补充到注释里面。</p><p>对于如何写注释，你可以参看我们在<a href=\"https://time.geekbang.org/column/article/188622\">第31节课</a>中的讲解。总结一下，主要就是写清楚：做什么、为什么、怎么做、怎么用，对一些边界条件、特殊情况进行说明，以及对函数输入、输出、异常进行说明。</p><pre><code>/**\n * Id Generator that is used to generate random IDs.\n *\n * &lt;p&gt;\n * The IDs generated by this class are not absolutely unique,\n * but the probability of duplication is very low.\n */\npublic class RandomIdGenerator implements LogTraceIdGenerator {\n  private static final Logger logger = LoggerFactory.getLogger(RandomIdGenerator.class);\n\n  /**\n   * Generate the random ID. The IDs may be duplicated only in extreme situation.\n   *\n   * @return an random ID\n   */\n  @Override\n  public String generate() {\n    //...\n  }\n\n  /**\n   * Get the local hostname and\n   * extract the last field of the name string splitted by delimiter '.'.\n   *\n   * @return the last field of hostname. Returns null if hostname is not obtained.\n   */\n  private String getLastfieldOfHostName() {\n    //...\n  }\n\n  /**\n   * Get the last field of {@hostName} splitted by delemiter '.'.\n   *\n   * @param hostName should not be null\n   * @return the last field of {@hostName}. Returns empty string if {@hostName} is empty string.\n   */\n  @VisibleForTesting\n  protected String getLastSubstrSplittedByDot(String hostName) {\n    //...\n  }\n\n  /**\n   * Generate random string which\n   * only contains digits, uppercase letters and lowercase letters.\n   *\n   * @param length should not be less than 0\n   * @return the random string. Returns empty string if {@length} is 0\n   */\n  @VisibleForTesting\n  protected String generateRandomAlphameric(int length) {\n    //...\n  }\n}\n</code></pre><h2>重点回顾</h2><p>好了，今天的内容到此就讲完了。我们一块来总结回顾一下，你需要掌握的重点内容。</p><p>在这节课中，我带你将小王写的凑活能用的代码，重构成了结构更加清晰、更加易读、更易测试的代码，并且为其补全了单元测试。这其中涉及的知识点都是我们在理论篇中讲过的内容，比较细节和零碎，我就不一一带你回顾了，如果哪里不是很清楚，你可以回到前面章节去复习一下。</p><p>实际上，通过这节课，我更想传达给你的是下面这样几个开发思想，我觉得这比我给你讲解具体的知识点更加有意义。</p><ol>\n<li>即便是非常简单的需求，不同水平的人写出来的代码，差别可能会很大。我们要对代码质量有所追求，不能只是凑活能用就好。花点心思写一段高质量的代码，比写100段凑活能用的代码，对你的代码能力提高更有帮助。</li>\n<li>知其然知其所以然，了解优秀代码设计的演变过程，比学习优秀设计本身更有价值。知道为什么这么做，比单纯地知道怎么做更重要，这样可以避免你过度使用设计模式、思想和原则。</li>\n<li>设计思想、原则、模式本身并没有太多“高大上”的东西，都是一些简单的道理，而且知识点也并不多，关键还是锻炼具体代码具体分析的能力，把知识点恰当地用在项目中。</li>\n<li>我经常讲，高手之间的竞争都是在细节。大的架构设计、分层、分模块思路实际上都差不多。没有项目是靠一些不为人知的设计来取胜的，即便有，很快也能被学习过去。所以，关键还是看代码细节处理得够不够好。这些细节的差别累积起来，会让代码质量有质的差别。所以，要想提高代码质量，还是要在细节处下功夫。</li>\n</ol><h2>课堂讨论</h2><ol>\n<li>获取主机名失败的时候，generate()函数应该返回什么最合适呢？是特殊ID、null、空字符，还是异常？在小王的代码实现中，获取主机名失败异常在IdGenerator内部被吞掉了，打印一条报警日志，并没有继续往上抛出，这样的异常处理是否得当？</li>\n<li>为了隐藏代码实现细节，我们把getLastSubstrSplittedByDot(String hostName)函数命名替换成getLastSubstrByDelimiter(String hostName)，这样是否更加合理？为什么？</li>\n</ol><p>欢迎在留言区写下你的答案，和同学一起交流和分享。如果有收获，也欢迎你把这篇文章分享给你的朋友。</p>","neighbors":{"left":{"article_title":"34 | 实战一（上）：通过一段ID生成器代码，学习如何发现代码质量问题","id":190979},"right":{"article_title":"36 | 实战二（上）：程序出错该返回啥？NULL、异常、错误码、空对象？","id":191642}},"comments":[{"had_liked":false,"id":173650,"user_name":"迷羊","can_delete":false,"product_type":"c1","uid":1286251,"ip_address":"","ucode":"85AF8CED3436C8","user_header":"https://static001.geekbang.org/account/avatar/00/13/a0/6b/0a21b2b8.jpg","comment_is_top":false,"comment_ctime":1579651594,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"233507885578","product_id":100039001,"comment_content":"1.应该需要继续抛出，因为在实际的业务开发中，会有对应的异常处理器，抛出可以让调用者明白哪出错了，而不是只是简单的打印日志。<br>2.命名getLastSubstrSplittedByDot替换成getLastSubstrByDelimiter，具体要看需求会不会经常变化，如果经常变化，替换没有任何问题，因为有可能后面根据别的符号来分割，这种情况下我个人认为getLastFiledOfHostName()函数命名应该替换成getLastFiled()，命名不应该暴露太多细节，要是以后不是根据HostName获取最后一个字段呢，之前的所有用到该命名的地方都需要替换，不然可读性不是很好。<br>如果需求不经常变化，那文中的命名就足够了。","like_count":55,"discussions":[{"author":{"id":1019138,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8d/02/6a16058a.jpg","nickname":"liu_liu","note":"","ucode":"24283806A07759","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":147661,"discussion_content":"getLastField 语义不太明确，不能为了命名而命名","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1579665055,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1608383,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8a/bf/3f7c45c9.jpg","nickname":"X_L～","note":"","ucode":"6BD8C24750F86B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382959,"discussion_content":"还是觉得不应该抛出，从整体来看这个功能，id的生成是为了在线上环境中，从日志排查时可以根据id确认一条完整的堆栈，并不是主要功能，不构成注解抛出异常的条件，直接提示警告即可\n","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1625811024,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1179028,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fd/94/0247f945.jpg","nickname":"咸鱼","note":"","ucode":"5E79636DE48155","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":221164,"discussion_content":"无论是getLastSubstrSplittedByDot还是getLastSubstrByDelimiter，我觉得都不需要，我们将函数的命名更通用，是为了灵活，不和具体实现绑定，但是这里这几个方法其实都是private，这种private的方法，感觉就要和具体实现绑定，表达意思更加明确。越是通用的，被用到越多的，命名就要更加的泛，万金油","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1585983712,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2772190,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/4c/de/d8b8d9ca.jpg","nickname":"花花世界besos","note":"","ucode":"D574DA13F741DA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":397345,"discussion_content":"我觉得你那个自己命名不太好，因为这个是内部使用的方法，只服务于一个方法而已，没必要这么抽象。还是得提出分隔符，让被服务者知道你是通过哪种方式获取的主机名，服务者还可以选择另一种分隔符来获取主机名","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632586501,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178559,"user_name":"马哲富","can_delete":false,"product_type":"c1","uid":1107917,"ip_address":"","ucode":"D6BDDFE3CC07ED","user_header":"https://static001.geekbang.org/account/avatar/00/10/e7/cd/08088f14.jpg","comment_is_top":false,"comment_ctime":1581744004,"is_pvip":false,"replies":[{"id":"69264","content":"哈哈，没事的，各有自己的判断，不可能让大家都觉得好，我们虚心相待，尽力而为。遇到问题，解决问题。","user_name":"编辑回复","comment_id":178559,"uid":"1000473","ip_address":"","utype":2,"ctime":1581744579,"user_name_real":"郭蕾"}],"discussion_count":7,"race_medal":0,"score":"224920043396","product_id":100039001,"comment_content":"看到有人说这个专栏写得不好，我忍不住要留个言给这个专栏叫叫好，这个专栏写得很好，非常好，只恨自己水平有限，不能完全吸收，顶这个专栏！","like_count":52,"discussions":[{"author":{"id":1000473,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/44/19/17fadc62.jpg","nickname":"郭蕾","note":"","ucode":"34F4C07D1C5FE8","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483877,"discussion_content":"哈哈，没事的，各有自己的判断，不可能让大家都觉得好，我们虚心相待，尽力而为。遇到问题，解决问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581744579,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1314724,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0f/a4/0b49469f.jpg","nickname":"木子00","note":"","ucode":"8F78CA722EB29B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277621,"discussion_content":"这个专栏，就像老歌一样，越听越有味道。看久了，才知道里面的真正的奥秘。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1591082518,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1139373,"avatar":"https://static001.geekbang.org/account/avatar/00/11/62/ad/3b780869.jpg","nickname":"Panda_High","note":"","ucode":"41A94A45ACCE1E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408377,"discussion_content":"实际上是写的一般般，说是要深入实战，实际大部分也只是泛泛而谈","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1635238092,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1622696,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c2/a8/f3f8f5d2.jpg","nickname":"一格状语","note":"","ucode":"EBA9ED5F97416D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1139373,"avatar":"https://static001.geekbang.org/account/avatar/00/11/62/ad/3b780869.jpg","nickname":"Panda_High","note":"","ucode":"41A94A45ACCE1E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413959,"discussion_content":"你该干嘛干嘛去就行了！反正我学到了很多东西","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636619435,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":408377,"ip_address":""},"score":413959,"extra":""}]},{"author":{"id":1077127,"avatar":"https://static001.geekbang.org/account/avatar/00/10/6f/87/669263b4.jpg","nickname":"陈金鑫","note":"","ucode":"609A24832CA80C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":357337,"discussion_content":"看第二遍了。希望看第三遍能掌握得差不多。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1615789091,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2475056,"avatar":"https://static001.geekbang.org/account/avatar/00/25/c4/30/711b03e5.jpg","nickname":"Geek_Candice","note":"","ucode":"0F2CBCF624F905","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":414186,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636684988,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1617369,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/FqWrN8aNrlXEfo2YeDeCRuWMZ57VzsNC0aibkEIdiaNBdUVPjlBXrg9F4Eb8uMFYckuSgmXQ49vT6SHoicAjeEGdA/132","nickname":"Geek_558387","note":"","ucode":"2EA857EBC365B5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308951,"discussion_content":"这逼装的满分啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601130705,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173661,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1579655227,"is_pvip":false,"discussion_count":8,"race_medal":1,"score":"126133706811","product_id":100039001,"comment_content":"在获取主机名失败的时候，generate函数应该能正常返回，因为是随机id，所以只要有个满足要求的id就行了，用户并不关心能不能拿到主机名字，所以在获取主机名失败的时候，可以返回一个默认的主机名，之后在拼接上时间戳和随机数也是满足需求的id，所以我认为generate函数在主机名失败的时候应该使用默认主机名正常返回。另外对于小王的异常处理我认为是可以捕获处理的，只是不能该让整个函数都返回一个空id，而是应该捕获异常时使用一个默认主机名继续后面的逻辑。<br>第二个问题：为了隐藏代码实现细节，我们把 getLastSubstrSplittedByDot(String hostName) 函数命名替换成 getLastSubstrByDelimiter(String hostName)，这样是否更加合理？为什么？<br>我认为是合理的，命名和代码的逻辑不绑定，避免了以后修改代码逻辑还要修改函数名的麻烦，比如将来可能不用点去分割hostname了，用空格分割，这时byDot函数名就不合适了，如果修改，那么所有使用到这个函数的地方都要改，大大增加了出错的概率。","like_count":30,"discussions":[{"author":{"id":1098720,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c3/e0/3db22579.jpg","nickname":"技术骨干","note":"","ucode":"8FCF8DE6D29201","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":218001,"discussion_content":"三年就有这么高的觉悟","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1585613641,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51089,"discussion_content":"我觉得能画好UML的程序员，都是很优秀的。因为这一个过程，就是老师讲到的，好的程序员，是写能让人看懂的代码，画图就是前提之一。不然能看机器看懂代码，是个程序员，都会，哈哈","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1573809696,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1996765,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ep74kPF5y5NnmKVH2N95W9RobhxkiacPhypTOHOmcNbRtiaokhr4bPacl5NtJib41RJqPCGvWZgibordw/132","nickname":"易","note":"","ucode":"D6CA82A57FEF02","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":335357,"discussion_content":"傻瓜都能写出机器能懂的程序，只有程序员才能写出人看懂的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1608172521,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":51089,"ip_address":""},"score":335357,"extra":""}]},{"author":{"id":1021530,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/96/5a/846a09f7.jpg","nickname":"pony","note":"","ucode":"B72FA864CDD286","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":58237,"discussion_content":"抽象是面向对象编程基础，双手赞成","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1574660825,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2346847,"avatar":"https://static001.geekbang.org/account/avatar/00/23/cf/5f/b14bd101.jpg","nickname":"坚持","note":"","ucode":"6CCC5C34D66306","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336486,"discussion_content":"同名不同姓！你好，很高兴认识你，我姓古。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1608606756,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1258209,"avatar":"https://static001.geekbang.org/account/avatar/00/13/32/e1/c9aacb37.jpg","nickname":"段启超","note":"","ucode":"164CF3018071B2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2346847,"avatar":"https://static001.geekbang.org/account/avatar/00/23/cf/5f/b14bd101.jpg","nickname":"坚持","note":"","ucode":"6CCC5C34D66306","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347426,"discussion_content":"这么巧啊","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1612230640,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":336486,"ip_address":""},"score":347426,"extra":""},{"author":{"id":2051293,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/4c/dd/c6035349.jpg","nickname":"Bumblebee","note":"","ucode":"B879C8A511D08D","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2346847,"avatar":"https://static001.geekbang.org/account/avatar/00/23/cf/5f/b14bd101.jpg","nickname":"坚持","note":"","ucode":"6CCC5C34D66306","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379748,"discussion_content":"我姓梁【手动狗头】","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1624105383,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":336486,"ip_address":""},"score":379748,"extra":""}]},{"author":{"id":1043401,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/eb/c9/b1b233cf.jpg","nickname":"小伟","note":"","ucode":"B631E56A112BDC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":173421,"discussion_content":"同意，常用的架构图、时序图和类图","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1581853331,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341166,"discussion_content":"写的真心不错，非常棒","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1610335179,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1242573,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f5/cd/3890be04.jpg","nickname":"小川","note":"","ucode":"D462222DDBB978","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333155,"discussion_content":"写的非常好，谢谢。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1607445165,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1910657,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/27/81/27c9d811.jpg","nickname":"高燕军","note":"","ucode":"AF31DDD0EE08BF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584341,"discussion_content":"想知道做设计不先做数据库设计，那应该先做啥嘞？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660780454,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江苏"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2962932,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/cqdrEzhcZ54ibGbf3rjuHCesA6otluIKn9BR9uESN8E8b9nbcjX6xy8UmlictdLdp62dqNofHr5J5138D2Q9yOvw/132","nickname":"Geek_949f5e","note":"","ucode":"C771E35F26B718","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560323,"discussion_content":"醍醐灌顶","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649257950,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2347168,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Rf6mwic4bGT4qtaN0acF5ShVsNyxOIUZc0pXfwdquCoibAxWuN6O6UL9KFSohqOR6fMmbm5nr23MlHelwW0BKrCg/132","nickname":"muyu","note":"","ucode":"DB86E1D49308D0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331662,"discussion_content":"可以转发下吗?当做经验保存着","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606923385,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1258209,"avatar":"https://static001.geekbang.org/account/avatar/00/13/32/e1/c9aacb37.jpg","nickname":"段启超","note":"","ucode":"164CF3018071B2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2347168,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Rf6mwic4bGT4qtaN0acF5ShVsNyxOIUZc0pXfwdquCoibAxWuN6O6UL9KFSohqOR6fMmbm5nr23MlHelwW0BKrCg/132","nickname":"muyu","note":"","ucode":"DB86E1D49308D0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347427,"discussion_content":"可以","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612230656,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":331662,"ip_address":""},"score":347427,"extra":""}]},{"author":{"id":1612120,"avatar":"https://static001.geekbang.org/account/avatar/00/18/99/58/012da9ad.jpg","nickname":"于聪","note":"","ucode":"DFB32F9FE5A6C9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":194102,"discussion_content":"大佬：‘’年初的时候误打误撞的学了一段时间的DDD‘’，看的什么资料，我也想学习。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583191777,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1451910,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ep3DicN9rHZiblqUmR1icKl5FoSJnibSibkdm2nHaibDwDatI3G9iaib5e7FQ0fJgiahR5VEqLFh8ZQBFmdBzw/132","nickname":"追风少年刘全有","note":"","ucode":"A727759687C963","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1612120,"avatar":"https://static001.geekbang.org/account/avatar/00/18/99/58/012da9ad.jpg","nickname":"于聪","note":"","ucode":"DFB32F9FE5A6C9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":208862,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584585203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":194102,"ip_address":""},"score":208862,"extra":""},{"author":{"id":1055722,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1b/ea/4f5661c6.jpg","nickname":"牛头人","note":"","ucode":"DABDEF4F32A812","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1451910,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ep3DicN9rHZiblqUmR1icKl5FoSJnibSibkdm2nHaibDwDatI3G9iaib5e7FQ0fJgiahR5VEqLFh8ZQBFmdBzw/132","nickname":"追风少年刘全有","note":"","ucode":"A727759687C963","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":217762,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585579457,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":208862,"ip_address":""},"score":217762,"extra":""},{"author":{"id":1258209,"avatar":"https://static001.geekbang.org/account/avatar/00/13/32/e1/c9aacb37.jpg","nickname":"段启超","note":"","ucode":"164CF3018071B2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1451910,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ep3DicN9rHZiblqUmR1icKl5FoSJnibSibkdm2nHaibDwDatI3G9iaib5e7FQ0fJgiahR5VEqLFh8ZQBFmdBzw/132","nickname":"追风少年刘全有","note":"","ucode":"A727759687C963","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":273177,"discussion_content":"DDD的资料不太多，简单一点的可以看  《实现领域驱动设计精粹》，也有开山之做《领域驱动设计，软件复杂性应对之道》","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1590418168,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":208862,"ip_address":""},"score":273177,"extra":""}]},{"author":{"id":1528931,"avatar":"https://static001.geekbang.org/account/avatar/00/17/54/63/3a3f7d4c.jpg","nickname":"Giraffe","note":"","ucode":"2F272FFD6CD0CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":130849,"discussion_content":"学习学习，很有启发","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578799897,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1743953,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/9c/51/76fcc9cd.jpg","nickname":"李杰","note":"","ucode":"E177762621E11E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":53392,"discussion_content":"你的路还很长","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574164826,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2432026,"avatar":"","nickname":"Geek_5a9dc0","note":"","ucode":"81B464DE3EAC26","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1743953,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/9c/51/76fcc9cd.jpg","nickname":"李杰","note":"","ucode":"E177762621E11E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373637,"discussion_content":"你挺叼的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1620808626,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":53392,"ip_address":""},"score":373637,"extra":""}]}]},{"had_liked":false,"id":173807,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1579702030,"is_pvip":true,"discussion_count":7,"race_medal":0,"score":"91774015246","product_id":100039001,"comment_content":"这两期争哥讲重构，我把Uncle Bob的《重构2》的第一章看了，大呼过瘾。自己也要操刀试一下！<br><br>他和Kent Beck强调重构时要用baby step（小步骤），什么是baby step呢？就是一次改一小点，例如改一个变量名字都需要进行 modify-build-test的步骤。<br><br>对于争哥的例子，我参考Uncle Bob书中的方法：<br>第一步、先写好测试<br>第二步、开始逐步重构（baby step）<br>第三步、修改-&gt; 测试<br><br>经过重构之后代码总计50行。重构之后代码易读，且结构清晰。<br>https:&#47;&#47;github.com&#47;gdhucoder&#47;Algorithms4&#47;blob&#47;master&#47;designpattern&#47;u35&#47;RandomLogTraceIDGenerator.java","like_count":22,"discussions":[{"author":{"id":1337016,"avatar":"https://static001.geekbang.org/account/avatar/00/14/66/b8/ece79234.jpg","nickname":"王智","note":"","ucode":"37D2AD591C1AEC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535064,"discussion_content":"“设计模式把可复用单位提升到框架层次”这点能举个例子吗？\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638344648,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2833619,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/3c/d3/fab9d588.jpg","nickname":"探雪","note":"","ucode":"2332650D9C8D54","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":412499,"discussion_content":"精辟","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636193487,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1612666,"avatar":"https://static001.geekbang.org/account/avatar/00/18/9b/7a/78dde0a2.jpg","nickname":"克一","note":"","ucode":"1C9F8229B5739A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294395,"discussion_content":"总结的到位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595864462,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179497,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1582016196,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"61711558340","product_id":100039001,"comment_content":"小争哥一波英文注释，猝不及防啊","like_count":14,"discussions":[{"author":{"id":1048314,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fe/fa/2a046821.jpg","nickname":"人间四月天","note":"","ucode":"11BE219C23EEBC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":569046,"discussion_content":"可维护性，复杂度度量工具，这个定量的，比较好操作\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651299494,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173808,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1579702532,"is_pvip":true,"replies":[{"id":"67723","content":"也可以，不过尽量的缩小变量的作用域，代码可读性也好，毕竟random只会用在某个函数中，而不是用在多个函数中，放到局部函数中，也符合封装的特性，不暴露太多细节。","user_name":"作者回复","comment_id":173808,"uid":"1190123","ip_address":"","utype":1,"ctime":1580114083,"user_name_real":"王争"}],"discussion_count":3,"race_medal":0,"score":"48824342788","product_id":100039001,"comment_content":"对于在ID generator中方法里写到<br>void foo(){<br>    Random random = new Random();<br>}<br>有个疑问：<br><br>1、为什么不声明成静态变量？<br>2、能用成员变量么？而不是写成局部变量<br>","like_count":11,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474572,"discussion_content":"嗯嗯，加餐里有讲到的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573785659,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1490169,"avatar":"https://static001.geekbang.org/account/avatar/00/16/bc/f9/f4345ea6.jpg","nickname":"聆听","note":"","ucode":"D7232626C6394D","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580542,"discussion_content":"理论指导实践 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658239363,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2942404,"avatar":"","nickname":"FOCUS","note":"","ucode":"C1AD031F155EFE","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575693,"discussion_content":"说的实在","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655028285,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2710546,"avatar":"https://static001.geekbang.org/account/avatar/00/29/5c/12/0eef6a4b.jpg","nickname":"壹零贰零","note":"","ucode":"53DC22F45FC2A5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385198,"discussion_content":"十分赞同，说的太好了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626941767,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1622209,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c0/c1/414d5d1b.jpg","nickname":"_yh葱","note":"","ucode":"FA899711E91113","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":190234,"discussion_content":"感同身受，还是以落地为主导去应用，特别是团队","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582907193,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":209180,"user_name":"林子er","can_delete":false,"product_type":"c1","uid":1629256,"ip_address":"","ucode":"85637288F22CF0","user_header":"https://static001.geekbang.org/account/avatar/00/18/dc/48/9796286e.jpg","comment_is_top":false,"comment_ctime":1587517511,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40242223175","product_id":100039001,"comment_content":"更正我的上一条回复。个人觉得从类名RandomIdGenerator看，并没有告知外界这里跟hostName有关，因而如果抛出hostName异常，对外界来说不是期望的异常结果：我只是要个随机数组成的id，跟hostName有何关系？更好的做法是生成器内部自动切换成其他随机算法（hostName只是众多随机策略的一种）。相反如果类名中包含了hostName字眼，则要抛出异常。","like_count":9},{"had_liked":false,"id":173681,"user_name":"evolution","can_delete":false,"product_type":"c1","uid":1088402,"ip_address":"","ucode":"105C59822BF75B","user_header":"https://static001.geekbang.org/account/avatar/00/10/9b/92/c0863297.jpg","comment_is_top":false,"comment_ctime":1579659536,"is_pvip":false,"replies":[{"id":"67726","content":"感谢认可，暂时没有呢","user_name":"作者回复","comment_id":173681,"uid":"1190123","ip_address":"","utype":1,"ctime":1580115107,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"40234365200","product_id":100039001,"comment_content":"代码的演变过程，真的是干货满满。不知道争哥有没有架构方面的演变课程？","like_count":9,"discussions":[{"author":{"id":1077387,"avatar":"https://static001.geekbang.org/account/avatar/00/10/70/8b/89b06343.jpg","nickname":"JustinLiu","note":"","ucode":"D571AD2910799B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":47742,"discussion_content":"谢谢建议。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573400260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1417176,"avatar":"https://static001.geekbang.org/account/avatar/00/15/9f/d8/62030082.jpg","nickname":"浅夏","note":"","ucode":"8E1F54025C865A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":44573,"discussion_content":"阔以","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572956694,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1309089,"avatar":"https://static001.geekbang.org/account/avatar/00/13/f9/a1/0396e1fb.jpg","nickname":"镞砺括羽","note":"","ucode":"EC4CD773CA06EA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":43672,"discussion_content":"知易行难👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572883543,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":258326,"user_name":"郑大钱","can_delete":false,"product_type":"c1","uid":1503067,"ip_address":"","ucode":"114CF48056880E","user_header":"https://static001.geekbang.org/account/avatar/00/16/ef/5b/ff28088f.jpg","comment_is_top":false,"comment_ctime":1604387421,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31669158493","product_id":100039001,"comment_content":"看到评论我很吃惊，居然还有人认为这个课程不好。调整了心态，对自己说不同人都有不同的理解。<br>感谢争哥，感谢你的分享，你的课程确实帮到了我，让我长成了一个更好的程序员。<br><br>由于客户端的模版模式，通常都是系统方法里完成业务代码，如果业务代码太多，再把业务代码抽象成函数或模块。<br>如果一开始就预见业务代码会多到需要拆分，才会应用自己浅薄的设计思路来编写代码。<br>由于代码都是根据需求“生长”出来的，所以对异常和边界的处理非常薄弱。往往是测试同学发现缺失的异常逻辑，线上用户撞出没考虑到的边界条件，这些都指出你不是一个靠谱的程序员。<br>“单元测试依赖函数的定义”提醒我要主动定义一个有边界的函数、模块。这也有助于遵循里式替换，保持函数的流程正确。","like_count":7},{"had_liked":false,"id":174184,"user_name":"javaadu","can_delete":false,"product_type":"c1","uid":1000519,"ip_address":"","ucode":"8C0B140F1C8992","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg","comment_is_top":false,"comment_ctime":1580051067,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"23054887547","product_id":100039001,"comment_content":"1. 目前习惯是抛异常，并且是包装过的业务异常，这样写代码，调用方拿到结果后不需要再处理特殊结果的情况；另外，这个问题还涉及到异常处理的思路，异常处理可以在模块的最上层做统一的捕获和转换，每层都捕获太麻烦了，也会影响代码的可读性<br>2. 这个名字目前是专门为.这种分隔符服务的，考虑到传入的参数就是主机名，如果有计划将该方法设计的更通用，那么也要将这个方法换个位置，抽取到某个字符串工具类中","like_count":5},{"had_liked":false,"id":173901,"user_name":"此鱼不得水","can_delete":false,"product_type":"c1","uid":1257453,"ip_address":"","ucode":"95268E823FB4D2","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/ed/a87bb8fa.jpg","comment_is_top":false,"comment_ctime":1579769457,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23054605937","product_id":100039001,"comment_content":"问题1：<br>首先要明白当前业务Id生成类的业务使用场景，因为是日志id（能接受部分重复），而日志又是非核心链路的业务，所以这里我认为应该在异常的时候返回一个默认值比较合适。<br>如果返回了异常信息的话，那上层业务难道要每次记录日志的时候都直接捕获异常处理吗？未必太麻烦了<br>如果当前的id生成代码是在重要的业务场景中使用的话，那就有必要抛出异常信息，让业务趁早的感知到问题。<br>问题2：<br>这里的名字已经不需要进一步修改了，已经到了业务实现的末端环节，没必要为了扩展而扩展，毕竟现在的方法名字可读性能佳。<br>","like_count":5},{"had_liked":false,"id":234280,"user_name":"HYH","can_delete":false,"product_type":"c1","uid":1103960,"ip_address":"","ucode":"F2A339CC9AC594","user_header":"https://static001.geekbang.org/account/avatar/00/10/d8/58/1f5f7aed.jpg","comment_is_top":false,"comment_ctime":1594632862,"is_pvip":false,"replies":[{"id":"86610","content":"拆出来的目的并非为了单元测试，更重要的是逻辑清晰，可读性好。之所以设置成potected的，是因为private的没法写单元测试。","user_name":"作者回复","comment_id":234280,"uid":"1190123","ip_address":"","utype":1,"ctime":1594781420,"user_name_real":"王争"}],"discussion_count":3,"race_medal":0,"score":"18774502046","product_id":100039001,"comment_content":"老師你好，想問一下有關測試的問題RandomIdGeneratorTest，為什麼不是分幾個Test Case去對generate做測試而是要拆出protected方法去做測試呢？","like_count":4,"discussions":[{"author":{"id":1247350,"avatar":"https://static001.geekbang.org/account/avatar/00/13/08/76/350f19ea.jpg","nickname":"听雨声淅沥","note":"","ucode":"C975EE69A5D103","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":45877,"discussion_content":"使用的时候更加手足无措","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1573093278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2567349,"avatar":"https://static001.geekbang.org/account/avatar/00/27/2c/b5/10141329.jpg","nickname":"杰良","note":"","ucode":"5DC1D1C58A4731","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369222,"discussion_content":"用费曼学习法","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1618977472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2550743,"avatar":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","nickname":"if...else...","note":"","ucode":"D0565908C99695","race_medal":4,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376913,"discussion_content":"😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622424420,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1394410,"avatar":"https://static001.geekbang.org/account/avatar/00/15/46/ea/b86667b8.jpg","nickname":"王玄","note":"","ucode":"E54ABB340D1E49","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292488,"discussion_content":"不用担心，99%不会","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595243499,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173754,"user_name":"一颗大白菜","can_delete":false,"product_type":"c1","uid":1321226,"ip_address":"","ucode":"4A15D1CECD1853","user_header":"https://static001.geekbang.org/account/avatar/00/14/29/0a/0ba09c68.jpg","comment_is_top":false,"comment_ctime":1579679690,"is_pvip":false,"replies":[{"id":"67727","content":"好像没有吧","user_name":"作者回复","comment_id":173754,"uid":"1190123","ip_address":"","utype":1,"ctime":1580115294,"user_name_real":"王争"}],"discussion_count":5,"race_medal":0,"score":"14464581578","product_id":100039001,"comment_content":"34行代码是不是写错了？<br>Assert.assertTrue((&#39;0&#39; &lt; c &amp;&amp; c &gt; &#39;9&#39;) || (&#39;a&#39; &lt; c &amp;&amp; c &gt; &#39;z&#39;) || (&#39;A&#39; &lt; c &amp;&amp; c &lt; &#39;Z&#39;));","like_count":3,"discussions":[{"author":{"id":1604344,"avatar":"","nickname":"Geek_4373f4","note":"","ucode":"8F87306FD153D7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385031,"discussion_content":"ctrl+alt+M是哪个IDE里的快捷方式，是什么意思呢，怎么就重构了呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626854890,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1958147,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/e1/03/f937e673.jpg","nickname":"🍀","note":"","ucode":"60E0AC2A55B63B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":268463,"discussion_content":"?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589784233,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":291325,"user_name":"王泽","can_delete":false,"product_type":"c1","uid":1657304,"ip_address":"","ucode":"726A5F21BE7390","user_header":"https://static001.geekbang.org/account/avatar/00/19/49/d8/533b1968.jpg","comment_is_top":false,"comment_ctime":1620206954,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"10210141546","product_id":100039001,"comment_content":"看到 Delimiter 就在想，提不提倡用函数默认值呢？比如 getLastSubstrByDelimiter(hostName, delimiter = &#39;.&#39;)","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473302,"discussion_content":"后面会讲到，等讲到了就明白了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572946436,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1640930,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/MOdHDtqwCDfU2sicYMNh7BhcqWxrn9ROzsqCANwkqq0icKAATiaibEKwxib1kCc7tuBia5TCZq28sZicQc9Uwh7IM68Dg/132","nickname":"Geek_c8b9ac","note":"","ucode":"90AB8AD4894D66","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":46841,"discussion_content":"“面向对象的特征也未必包含“继承”这一点吧，比如 Go 语言就没有提供“继承”这个特性”\n\n第一句话是不是应该反过来说，继承确实是面向对象的特征没错，但Golang并非完全是面向对象语言(Golang官方自己承认的，因其缺乏继承)","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1573215962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1118056,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0f/68/3696aae4.jpg","nickname":"雪痕","note":"","ucode":"1056F3B1D49973","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":46228,"discussion_content":"发表一下自己的想法哈：组合是无法表达A is B这个含义的，体现在语音层面就是，不能将一个组合结构体(子类)赋值给一个被组合结构体(父类)类型的变量。但是需要多态的地方是需要这个特性的，目前Go语言是通过接口&#34;组合&#34;+结构体组合的方式来实现多态的，而接口&#34;组合&#34;本质上其实不是组合而是继承，因为子接口是可以赋值给父接口的，也就是可以表达A is B的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573133297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1053955,"avatar":"https://static001.geekbang.org/account/avatar/00/10/15/03/c0fe1dbf.jpg","nickname":"考休","note":"","ucode":"968DFC00D6D0CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":43985,"discussion_content":"我觉得也是，记得许式伟老师还专门讲过继承和组合的不同","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1572920711,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1058015,"avatar":"https://static001.geekbang.org/account/avatar/00/10/24/df/645f8087.jpg","nickname":"Yayu","note":"","ucode":"5E7842458D8229","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1053955,"avatar":"https://static001.geekbang.org/account/avatar/00/10/15/03/c0fe1dbf.jpg","nickname":"考休","note":"","ucode":"968DFC00D6D0CF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":45048,"discussion_content":"期待王争老师的讲解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573001682,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":43985,"ip_address":""},"score":45048,"extra":""}]},{"author":{"id":1368522,"avatar":"https://static001.geekbang.org/account/avatar/00/14/e1/ca/d8b0835f.jpg","nickname":"橘子","note":"","ucode":"EDF6145878F897","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":44121,"discussion_content":"继承这个概念我觉得比较混，有时候接口也叫继承，extended也是继承。这个时候只要自己分清楚这个地方说的是什么就可以了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572932428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1058015,"avatar":"https://static001.geekbang.org/account/avatar/00/10/24/df/645f8087.jpg","nickname":"Yayu","note":"","ucode":"5E7842458D8229","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1368522,"avatar":"https://static001.geekbang.org/account/avatar/00/14/e1/ca/d8b0835f.jpg","nickname":"橘子","note":"","ucode":"EDF6145878F897","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":45041,"discussion_content":"“混”意味着没有搞清楚。使用什么关键字是语言范畴，与面向对象概念无关。期待王争老师的讲解吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573001375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":44121,"ip_address":""},"score":45041,"extra":""},{"author":{"id":1234682,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d6/fa/1f5bf642.jpg","nickname":"未来的胡先森","note":"","ucode":"AFF193AC0E2E6C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1368522,"avatar":"https://static001.geekbang.org/account/avatar/00/14/e1/ca/d8b0835f.jpg","nickname":"橘子","note":"","ucode":"EDF6145878F897","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":48660,"discussion_content":"接口的继承叫做实现，而在部分语言中将接口称为（协议），我觉得这个更直观一些，要想调用已经写好的方法必须遵守一致的协议。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573519067,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":44121,"ip_address":""},"score":48660,"extra":""}]},{"author":{"id":1053084,"avatar":"https://static001.geekbang.org/account/avatar/00/10/11/9c/4fd6ebe0.jpg","nickname":"白了少年头","note":"","ucode":"A65E00E05B23BA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":44018,"discussion_content":"维基百科里有面向对象的定义，里面专门介绍了面向对象的4个特性：封装、继承、多态、抽象。Go语言只是用另一种方式实现了面向对象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572923196,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1058015,"avatar":"https://static001.geekbang.org/account/avatar/00/10/24/df/645f8087.jpg","nickname":"Yayu","note":"","ucode":"5E7842458D8229","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1053084,"avatar":"https://static001.geekbang.org/account/avatar/00/10/11/9c/4fd6ebe0.jpg","nickname":"白了少年头","note":"","ucode":"A65E00E05B23BA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":45046,"discussion_content":"那么 既然Go没有继承的实现了支持面向对象的编程，是不是是说，面向对象“四个特性”中的“继承”特性，并不是不可或缺的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573001655,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":44018,"ip_address":""},"score":45046,"extra":""}]}]},{"had_liked":false,"id":246510,"user_name":"小乙哥","can_delete":false,"product_type":"c1","uid":1063308,"ip_address":"","ucode":"C77E79BEA0C325","user_header":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","comment_is_top":false,"comment_ctime":1599384794,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10189319386","product_id":100039001,"comment_content":"1.抛出不抛出异常，关键要看使用generate的方式。如果调用generate的地方，收到异常之后，也没有办法处理，那么返回特殊ID、null、空字符串，肯定要好于抛出异常。同时，特殊ID因为是一种特殊标识，查看日志的时候，能够很快知道是因为主机名获取不到的原因，所以特殊ID要好于null和空字符串。返回null有可能造成NPE，所以空字符串要好于null。如果调用方能够处理这种异常，比如采用降级方案等，这个时候异常是绝对不能吞掉的<br>2.如果不明确函数细节，建议增加第二个参数delimiter，让调用者指定分隔符。不然明确细节的函数名会相对好一点","like_count":2},{"had_liked":false,"id":232539,"user_name":"冬渐暖","can_delete":false,"product_type":"c1","uid":1586800,"ip_address":"","ucode":"907E41AAE9A36C","user_header":"https://static001.geekbang.org/account/avatar/00/18/36/70/00122b24.jpg","comment_is_top":false,"comment_ctime":1594031093,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10183965685","product_id":100039001,"comment_content":"代码重构流程<br>●第一轮重构:提高代码的可读性。如改魔法值、提取公共方法、将不同的实现封装起来、对复杂的某一段抽成单个方法、修改命名<br>●第二轮重构:提高代码的可测试性。比如将原本private的方法改成protect(后面要改回来的，只是方便再test类可以直接调用)。将容易被外部控制或者无关的数据封装成方法(下次调的时候直接把这些数据弄成假数据来测试，那些没必要的就不用测了)<br>●第三轮重构:编写完善的单元测试。针对里面不同的方法做更细测试，但我平常都是直接debug进去，直接看这一系列方法的对应结果的。<br>●第四轮重构:所有重构完成之后添加注释。<br>","like_count":2},{"had_liked":false,"id":174021,"user_name":"牛顿的烈焰激光剑","can_delete":false,"product_type":"c1","uid":1042022,"ip_address":"","ucode":"C57018C65DAFB3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e6/66/fbbf0bb1.jpg","comment_is_top":false,"comment_ctime":1579882745,"is_pvip":false,"replies":[{"id":"67714","content":"有可能hostname会改变，你的代码就获取不到最新的hostname","user_name":"作者回复","comment_id":174021,"uid":"1190123","ip_address":"","utype":1,"ctime":1580112152,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"10169817337","product_id":100039001,"comment_content":"老师，对于获取 hostname（getLastfieldOfHostName()），我的想法是用 static 代码块，只在类加载的时候执行一次。请问这样处理的话会不会有什么坏处？","like_count":2,"discussions":[{"author":{"id":1149022,"avatar":"https://static001.geekbang.org/account/avatar/00/11/88/5e/7c76f422.jpg","nickname":"scmath","note":"","ucode":"641023BB246C29","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":264433,"discussion_content":"设计模式是设计原则的细化","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589326851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173727,"user_name":"Ken张云忠","can_delete":false,"product_type":"c1","uid":1134288,"ip_address":"","ucode":"D0BAC9FC17DE2B","user_header":"https://static001.geekbang.org/account/avatar/00/11/4e/d0/d8a5f720.jpg","comment_is_top":false,"comment_ctime":1579670898,"is_pvip":false,"replies":[{"id":"67725","content":"我英语也不好，多花点心思优化一下，实在不行，写中文注释也是可以的","user_name":"作者回复","comment_id":173727,"uid":"1190123","ip_address":"","utype":1,"ctime":1580114185,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"10169605490","product_id":100039001,"comment_content":"读小争哥的注释就是种欣赏,小争哥的英文表达是怎么一步步积累的?<br>我认为动词和介词是英文的精髓,还有英文的语法","like_count":2,"discussions":[{"author":{"id":1053955,"avatar":"https://static001.geekbang.org/account/avatar/00/10/15/03/c0fe1dbf.jpg","nickname":"考休","note":"","ucode":"968DFC00D6D0CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":47980,"discussion_content":"多年的经验告诉我，遇到这种项目最好的办法就是赶紧跑，如果对项目重构，在初始阶段因为是看不到效果的，公司不乐意承担这种重构的成本，你重构完成的时候估计就是业务失去耐心的时候，最惨是这个时候换了个人在你基础上做事情，然后被业务奉为天人，自己辛苦栽的树，却免费给他人乘凉。","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1573439628,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1356225,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b1/c1/08cc53c0.jpg","nickname":"...","note":"","ucode":"D2E6EBA5E9B6F0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":44422,"discussion_content":"是在写完之后，马上看一遍重构，重复这个过程就好了。当你在原有的东西上修改的时候觉得看起来不舒服的时候也可以重构。并不是你需要花一个大版本去做这件事情，从小做起就好了，哪怕修改一个变量名，也可以说是重构。重构没有你想的那么复杂，也没有那么高大上。重构就是维以及改善代码的质量。其实遇到“代码就被业务牵着鼻子走”的时候可以多想想，再下手。","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1572947771,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1367043,"avatar":"https://static001.geekbang.org/account/avatar/00/14/dc/03/ad9574b3.jpg","nickname":"习兮习兮","note":"","ucode":"E616E924188CBA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":45799,"discussion_content":"大多数存量代码晃眼一看都会有很多槽点，静下心来重构，你就能体会到最初设计者的思想","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1573087316,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334327,"discussion_content":"是的,  有的项目过于紧急,导致没时间研究如何写出高质量代码","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1607825291,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1938739,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/95/33/7d4b08ec.jpg","nickname":"乐朦","note":"","ucode":"C5A666DB0521E0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":216460,"discussion_content":"程序员的无奈之处。多次遇到上午刚刚冒出一个想法，下午就讨论需求的可行性，晚上就着急上线的情况。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585453637,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1661704,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","nickname":"丁丁历险记","note":"","ucode":"A43829E454C067","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":43528,"discussion_content":"给你个建议，完成后，立马低调重构（偷偷的干，打抢的不要），要有颗强大的心。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1572879807,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1532404,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEIvUlicgrWtibbDzwhLw5cQrDSy2JuE1mVvmXq11KQIwpLicgDuWfpp9asE0VCN6HhibPDWn7wBc2lfmA/132","nickname":"a、","note":"","ucode":"590FE8DB111492","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1661704,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","nickname":"丁丁历险记","note":"","ucode":"A43829E454C067","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":43617,"discussion_content":"你这样是不行的，重构以后就需要测试人员，把你重构的代码全部都回归一遍，不然可能上线出bug","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1572882406,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":43528,"ip_address":""},"score":43617,"extra":""},{"author":{"id":1661704,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","nickname":"丁丁历险记","note":"","ucode":"A43829E454C067","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1532404,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEIvUlicgrWtibbDzwhLw5cQrDSy2JuE1mVvmXq11KQIwpLicgDuWfpp9asE0VCN6HhibPDWn7wBc2lfmA/132","nickname":"a、","note":"","ucode":"590FE8DB111492","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":44084,"discussion_content":"有让你完成后立马就打包上线了？？？？代码功能完成只是第1步。那么着急对外展示干嘛？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1572928569,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":43617,"ip_address":""},"score":44084,"extra":""}]}]},{"had_liked":false,"id":298844,"user_name":"青年祭司","can_delete":false,"product_type":"c1","uid":1259156,"ip_address":"","ucode":"C88EDAE3FF09AE","user_header":"https://static001.geekbang.org/account/avatar/00/13/36/94/0b969588.jpg","comment_is_top":false,"comment_ctime":1624344094,"is_pvip":false,"discussion_count":0,"race_medal":5,"score":"5919311390","product_id":100039001,"comment_content":"InetAddress.getLocalHost().getHostName();<br>这段获取的值是不是可以存起来，下次再请求的时候直接取就行了，不用再调用这个函数了，能优化点性能？","like_count":1},{"had_liked":false,"id":274658,"user_name":"Gabriel","can_delete":false,"product_type":"c1","uid":1437358,"ip_address":"","ucode":"714772A93E93DC","user_header":"https://static001.geekbang.org/account/avatar/00/15/ee/ae/855b7e6e.jpg","comment_is_top":false,"comment_ctime":1611113832,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5906081128","product_id":100039001,"comment_content":"要是我写这个功能估计就和小王是一样的，写一个类，然后一个方法返回就是了。可能我这就是我与大神大差距，大神在写随机生成ID的时候，会想随机生成具体是要做什么的，就像这个是要记录id，然后这个随机id要怎么写，就像这个栗子随机生成id是有三部分组成（hostname+timestamp+nonstr)这样的，然后根据一个业务三个方法，像小王写的，就没有实现单一原则。大神写代码，更加是思想往上层，而不是简单实现业务逻辑就好。学完这堂课，我希望我首先要 转变的整个思考观念和做事方法","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473467,"discussion_content":"后面会讲到的，别急哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573026595,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2140419,"avatar":"https://static001.geekbang.org/account/avatar/00/20/a9/03/ff4d791e.jpg","nickname":"Lucky","note":"","ucode":"8BBF890999ECE5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302294,"discussion_content":"这是个好问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598872060,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":256238,"user_name":"Jupiter","can_delete":false,"product_type":"c1","uid":2125382,"ip_address":"","ucode":"072E5C34CDE8AC","user_header":"https://static001.geekbang.org/account/avatar/00/20/6e/46/a612177a.jpg","comment_is_top":false,"comment_ctime":1603576041,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5898543337","product_id":100039001,"comment_content":"每一次课学完 我都会去看一下评论，因为有的评论也很精彩，有些是一些可爱的小伙伴给出的补充，有的时候针对某个细节 争哥跟我们更深入的讨论，这次看到这样一条抱怨的放到了顶部，胃里有些不舒服，所以想说几句，我觉得要抱怨，说不好，需要给出细节，你列出来，我相信争哥也会给你解释明白的。说回到这个课，从到学习到现在，有很多地方会突然领悟，有很多地方很有共鸣，前面说的各种设计原则，在没学习课程之前，我就只知道 SOLID, KISS这俩有名字的，其他的我就只是想着写的代码要考虑重用，高内聚低耦合，能抽出来就抽出来，这个课给了我一个系统的知识，这样在Review别人代码的时候 确实可以很有底气，这也是行业经验的总结，一个人的经验再多，也比不上整个行业总结出来的。另外，希望更多的人看到这些，形成一种意识，这样在Review代码的时候 每个人的心情也就会比较好。其实有时候 还是会有争论，因为我们有规范，在执行的时候 也需要一些主观判断的 例如颗粒度，什么样的是粗的 什么样的是细的。 没有银弹。","like_count":1},{"had_liked":false,"id":236150,"user_name":"流沙","can_delete":false,"product_type":"c1","uid":1040222,"ip_address":"","ucode":"D34D30A1494C63","user_header":"https://static001.geekbang.org/account/avatar/00/0f/df/5e/f709457f.jpg","comment_is_top":false,"comment_ctime":1595329567,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5890296863","product_id":100039001,"comment_content":"generateRandomAlphameric() 和 getLastSubstrSplittedByDot()这两个方法有必要写单测吗？ 我理解这两个方法并不能称之为一个逻辑单元，对它们的测试应该是包含在generate方法的测试中的。<br>换句话说，如果这两个方法存在generate中测不出来的问题，我们也并不关心。<br>而如果认为这两个方法是一个逻辑单元，那就应该是public的","like_count":1},{"had_liked":false,"id":232537,"user_name":"冬渐暖","can_delete":false,"product_type":"c1","uid":1586800,"ip_address":"","ucode":"907E41AAE9A36C","user_header":"https://static001.geekbang.org/account/avatar/00/18/36/70/00122b24.jpg","comment_is_top":false,"comment_ctime":1594030516,"is_pvip":false,"replies":[{"id":"85913","content":"一般来讲，一个单元测试类对应一个类。你说的可能更像是集成测试了。","user_name":"作者回复","comment_id":232537,"uid":"1190123","ip_address":"","utype":1,"ctime":1594112838,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"5888997812","product_id":100039001,"comment_content":"看了下您的代码，请教下 针对同一个service，有必要对各种情况都写一个@test吗？平时我都是一个接口一个test，如果有不同的条件，就直接在这个的入参上面改。 不然某个测试类的代码会很大，也没有必要对一个接口一个类，而是一个综合业务一个test类。","like_count":1},{"had_liked":false,"id":231419,"user_name":"Mew151","can_delete":false,"product_type":"c1","uid":1002201,"ip_address":"","ucode":"D4793F5874F345","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/d9/75dd7cf9.jpg","comment_is_top":false,"comment_ctime":1593672026,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5888639322","product_id":100039001,"comment_content":"个人觉得应该把现有的getLastSubstrSplittedByDot实现逻辑变为getLastSubstrByDelimiter的逻辑，然后getLastSubstrSplittedByDot再调用getLastSubstrByDelimiter，如果以后有需求使用别的分隔符，那么在新创建的函数内部也调用getLastSubstrByDelimiter就可以了。","like_count":1},{"had_liked":false,"id":223150,"user_name":"未来小娃","can_delete":false,"product_type":"c1","uid":1047329,"ip_address":"","ucode":"477D166EBB6B70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/21/d017438c.jpg","comment_is_top":false,"comment_ctime":1591009943,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5885977239","product_id":100039001,"comment_content":"【设计模式笔记35】20200601<br>功夫在诗外，细节决定质量。实现一个有特定功能的功夫是基本功，也是作为一名合格开发者的最低要求。那么代码质量的好坏到底区别在哪里呢？我觉得理解三个词：好，更好，最好。什么是好的？就是能用的代码，包括满足需求和能够对异常友好。什么是更好的？就是在好的基础上满足结构合理、具备可读性、可测试性的代码，所谓结构合理是划分清晰，没有大段的代码；所谓可读性就包括代码的命名、注释等；所谓可测试性就是要有单元测试用例，这里的用例不是为了测试而测试，而是想清楚函数具备做了什么事，在此基础上考虑异常情况。最好的指的是在更好的基础上具备扩展性，能够满足未来一定时间的迭代更新，且只需要较小的改动就能适应需求变化，更深层次讲什么是可复用的，多想想哪些是可抽象的。高手的创新很多都是创造了一种新的分类方法，多想想多实践总会有提升","like_count":1},{"had_liked":false,"id":212469,"user_name":"花生无翼","can_delete":false,"product_type":"c1","uid":1015371,"ip_address":"","ucode":"B4AED5CACD2B7A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/4b/001b7f3b.jpg","comment_is_top":false,"comment_ctime":1588129459,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5883096755","product_id":100039001,"comment_content":"做好单元测试，写好英文注释","like_count":1},{"had_liked":false,"id":202791,"user_name":"忆水寒","can_delete":false,"product_type":"c1","uid":1147453,"ip_address":"","ucode":"E3F86BD8AA8903","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","comment_is_top":false,"comment_ctime":1586069157,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5881036453","product_id":100039001,"comment_content":"如果只是通过某个固定符号分割字符，可以不改成函数名，因为这是用于特定场景的。<br>如果以后有扩展要求，支持其他类型的符号，建议改成getLastSubstrByDelimiter(String hostName)。","like_count":1},{"had_liked":false,"id":358512,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1015754,"ip_address":"北京","ucode":"00DF2FEC58D2E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","comment_is_top":false,"comment_ctime":1664378446,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1664378446","product_id":100039001,"comment_content":"个人认为在获取不到hostname时需要抛出异常。原因有2. 第一，获取不到hostname证明程序此时已经出错了，出错了就需要抛出异常，而不是隐藏这个错误；第二，如果给出默认的值，那么就失去了日志的意义，因为会存在多个同样的默认值的日志，不仅仅不利于排查问题，还会影响问题的排查。","like_count":0},{"had_liked":false,"id":347767,"user_name":"邓嘉文","can_delete":false,"product_type":"c1","uid":2332845,"ip_address":"","ucode":"FCEDFABFB48055","user_header":"https://static001.geekbang.org/account/avatar/00/23/98/ad/f9d755f2.jpg","comment_is_top":false,"comment_ctime":1654407129,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654407129","product_id":100039001,"comment_content":"1.<br>我们只是要一个 trice-id 如果这个机器名称一般不重要, 我们应该使用默认值<br>如果业务中这个机器名称很重要, 那就应该抛出异常, 要符合业务场景","like_count":0},{"had_liked":false,"id":343493,"user_name":"恬毅","can_delete":false,"product_type":"c1","uid":1015240,"ip_address":"","ucode":"914ED16F3BE714","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7d/c8/e4727683.jpg","comment_is_top":false,"comment_ctime":1650875028,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650875028","product_id":100039001,"comment_content":"generate() 函数应该返回什么最合适呢？我觉得特殊id或者null都可以，不要抛异常，因为这个属于不是非常重要的功能，抛出异常会影响实际业务。特殊id或者null也能让后续能直接观察到有问题，然后进行改进","like_count":0},{"had_liked":false,"id":336131,"user_name":"woJA1wCgAAcQSG4cC0RrRLQoo4JPVq7Q","can_delete":false,"product_type":"c1","uid":2922217,"ip_address":"","ucode":"331691EB69ACB2","user_header":"","comment_is_top":false,"comment_ctime":1645949625,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645949625","product_id":100039001,"comment_content":"请问静态方法和非静态方案在设计的时候怎么考量呢？虽然做开发了几年，始终觉得没有好的准则。静态方法仅仅是不利于测试，不支持面向对象吗","like_count":0},{"had_liked":false,"id":324722,"user_name":"王智","can_delete":false,"product_type":"c1","uid":1337016,"ip_address":"","ucode":"37D2AD591C1AEC","user_header":"https://static001.geekbang.org/account/avatar/00/14/66/b8/ece79234.jpg","comment_is_top":false,"comment_ctime":1638589867,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1638589867","product_id":100039001,"comment_content":"第一题：<br>我认为不该抛出，这是工具方法，和业务解耦。如果出现异常，最多纪录日志，好定位问题即可。检测手段可以这样——系统启动时候，检测下ID生成器是否正常，如不可用，当时抛出异常，阻止程序启动即可。","like_count":0},{"had_liked":false,"id":321669,"user_name":"我是曾经那个少年","can_delete":false,"product_type":"c1","uid":1015189,"ip_address":"","ucode":"9F02F7FF147D14","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7d/95/dd73022c.jpg","comment_is_top":false,"comment_ctime":1636986180,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636986180","product_id":100039001,"comment_content":"IdGenerator 内部被吞掉了打印日志是合理的，业务中生成ID的方法报错了，也不影响业务的可用性。一些框架也是这个样子处理的。<br><br>getLastSubstrByDelimiter这种其实还好，命名能更抽象还是比具体点好一些。","like_count":0},{"had_liked":false,"id":317484,"user_name":"charmsongo","can_delete":false,"product_type":"c1","uid":1609051,"ip_address":"","ucode":"4FBEE716E93A1A","user_header":"https://static001.geekbang.org/account/avatar/00/18/8d/5b/383a49e4.jpg","comment_is_top":false,"comment_ctime":1634811471,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634811471","product_id":100039001,"comment_content":"1、第一轮重构：提高代码的可读性<br>2、第二轮重构：提高代码的可测试性<br>3、第三轮重构：编写完善的单元测试<br>4、第四轮重构：所有重构完成后添加注释","like_count":0},{"had_liked":false,"id":312343,"user_name":"渠梁","can_delete":false,"product_type":"c1","uid":1488038,"ip_address":"","ucode":"DC86BDEC63C9BC","user_header":"https://static001.geekbang.org/account/avatar/00/16/b4/a6/b6fa2562.jpg","comment_is_top":false,"comment_ctime":1631761249,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1631761249","product_id":100039001,"comment_content":"静态方法不利于单元测试","like_count":0},{"had_liked":false,"id":308397,"user_name":"满坦坦","can_delete":false,"product_type":"c1","uid":1312538,"ip_address":"","ucode":"F810B463F7B665","user_header":"","comment_is_top":false,"comment_ctime":1629599715,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629599715","product_id":100039001,"comment_content":"but the probability of duplication is very low.不感觉这句英文表达别扭吗，不是该把低概率当主要说明么","like_count":0},{"had_liked":false,"id":300198,"user_name":"为一","can_delete":false,"product_type":"c1","uid":2666371,"ip_address":"","ucode":"72BE7F7422E551","user_header":"https://static001.geekbang.org/account/avatar/00/28/af/83/f02bd98a.jpg","comment_is_top":false,"comment_ctime":1625043816,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625043816","product_id":100039001,"comment_content":"老师，单元测试测试私有方法，它通常表示不好的设计。而且在测试里又添加了google代码依赖。能不能不要把访问修饰符改为protected 保持private。我们在测试的时候可以通过反射来调用私有测试方法呢？","like_count":0},{"had_liked":false,"id":298760,"user_name":"猪蹄子🍳","can_delete":false,"product_type":"c1","uid":2649189,"ip_address":"","ucode":"3C4875114716FA","user_header":"https://static001.geekbang.org/account/avatar/00/28/6c/65/d78cceda.jpg","comment_is_top":false,"comment_ctime":1624305662,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624305662","product_id":100039001,"comment_content":"收获很大！这几节复习和实践了前面的理论知识，深入浅出，非常实用。我主要学到的有：<br>1. 魔鬼总在细节处。高质量的代码一定是可测的。<br>2. 分析和设计时考虑扩展性，写代码时考虑可读性和可测试性，测试时考虑完备性和测试的必要性<br>3. 将不可控的行为分离出来，保证可测性，减少测试代码的粒度，也提高了测试效率。","like_count":0},{"had_liked":false,"id":296749,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1623144745,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1623144745","product_id":100039001,"comment_content":"我认为获取不到主机名不能返回固定id,因为这是一个生成唯一ID的函数，如果返回固定ID有违业务要求，异常应该向外继续抛出。也可以返回null,我感觉。","like_count":0},{"had_liked":false,"id":295949,"user_name":"williamcai","can_delete":false,"product_type":"c1","uid":1158294,"ip_address":"","ucode":"B158F52C2D39BC","user_header":"https://static001.geekbang.org/account/avatar/00/11/ac/96/46b13896.jpg","comment_is_top":false,"comment_ctime":1622681437,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622681437","product_id":100039001,"comment_content":"问题1，我个人认为应该抛出异常，因为主机名属于生成id的一部分，必须有;<br>问题2，还是用第一个名称，因为就是用点来分隔的<br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473761,"discussion_content":"学了后面章节就明白了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573281298,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":293487,"user_name":"JKwar","can_delete":false,"product_type":"c1","uid":1047466,"ip_address":"","ucode":"B733CA24D5701F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/aa/01fedf6c.jpg","comment_is_top":false,"comment_ctime":1621407410,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1621407410","product_id":100039001,"comment_content":"课堂讨论1：generate函数应该返回异常，因为 generate 函数的功能是获取随机的 id。异常处理不得当，应该继续往上抛，由一个总得异常出来来捕获。<br>课堂讨论2：合理，因为命名代表要实现函数的功能，应该隐藏实现细节，避免以后修改代码还要修改函数名。","like_count":0},{"had_liked":false,"id":292985,"user_name":"瀚海","can_delete":false,"product_type":"c1","uid":2062203,"ip_address":"","ucode":"E64C22F3F6D285","user_header":"https://static001.geekbang.org/account/avatar/00/1f/77/7b/338c4617.jpg","comment_is_top":false,"comment_ctime":1621141334,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621141334","product_id":100039001,"comment_content":"内容很细致。      赞👍","like_count":0},{"had_liked":false,"id":286060,"user_name":"Geek_86eac6","can_delete":false,"product_type":"c1","uid":1787022,"ip_address":"","ucode":"8C02E398CC6A35","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI4CBQHuLDWOdicOl1elTdSicqMyY1s5JDWXiaHsSk0VSWaVe0U6CTo701ZGz9h6MvibsAGKnvVq7xxFw/132","comment_is_top":false,"comment_ctime":1617146256,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617146256","product_id":100039001,"comment_content":"这个专栏挺好的，贴合实战的场景，逐步拆解需求，实现，重构","like_count":0},{"had_liked":false,"id":286059,"user_name":"Geek_86eac6","can_delete":false,"product_type":"c1","uid":1787022,"ip_address":"","ucode":"8C02E398CC6A35","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI4CBQHuLDWOdicOl1elTdSicqMyY1s5JDWXiaHsSk0VSWaVe0U6CTo701ZGz9h6MvibsAGKnvVq7xxFw/132","comment_is_top":false,"comment_ctime":1617145364,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617145364","product_id":100039001,"comment_content":"对于问题1，我认为不仅要记录日志，还需要跑出一个自定义异常，让调用者去处理。<br>对于问题2，我认为改名称是合理的，名称不需要暴露细节，体现功能就可以了，因为名称的长度是有限制的，不可能覆盖到所有细节。","like_count":0},{"had_liked":false,"id":286012,"user_name":"星夜","can_delete":false,"product_type":"c1","uid":1128491,"ip_address":"","ucode":"3B46C09D994CEB","user_header":"https://static001.geekbang.org/account/avatar/00/11/38/2b/9db9406b.jpg","comment_is_top":false,"comment_ctime":1617104320,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617104320","product_id":100039001,"comment_content":"1.一种方式是仍然生成ID，不过生成的ID要做些标记，例如将ID第一部分扩充为四位数，其中首位数只能为1（有主机名）或2（无主机名），或者干脆将这部分功能作为配置项，可由使用者自由选择如何处理，当然无主机名的情况要做好日志，具体是否抛出异常要看场景下主机名对于Id是否必须。<br>2.方法名的替换不合理，主要实现与方法名不一致了。","like_count":0},{"had_liked":false,"id":284617,"user_name":"Maples story","can_delete":false,"product_type":"c1","uid":1229987,"ip_address":"","ucode":"83CB4DE1E707D1","user_header":"https://static001.geekbang.org/account/avatar/00/12/c4/a3/56f398f1.jpg","comment_is_top":false,"comment_ctime":1616390844,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616390844","product_id":100039001,"comment_content":"醍醐灌顶","like_count":0},{"had_liked":false,"id":284025,"user_name":"破茧成蝶","can_delete":false,"product_type":"c1","uid":1063640,"ip_address":"","ucode":"36F9F88BE949F8","user_header":"https://static001.geekbang.org/account/avatar/00/10/3a/d8/38edca17.jpg","comment_is_top":false,"comment_ctime":1616041745,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616041745","product_id":100039001,"comment_content":"@Wings 说这个栏目讲得不好的人,就好比以前有人看过Ｃ＋＋圣经说C++并不难啊,不过如此,他不知道有些东西,既是入门,也是登顶,每次去读都有不同的收获和感悟,同样这个栏目也达到了这个水准,我看过不少的设计模式的书,这个栏目是我见过讲解设计模式最好的,没有之一","like_count":0},{"had_liked":false,"id":283934,"user_name":"牧云子","can_delete":false,"product_type":"c1","uid":2344693,"ip_address":"","ucode":"02A3E715238C9E","user_header":"https://static001.geekbang.org/account/avatar/00/23/c6/f5/c7432d35.jpg","comment_is_top":false,"comment_ctime":1615988374,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1615988374","product_id":100039001,"comment_content":"为什么静态函数不可测啊，想不明白","like_count":0,"discussions":[{"author":{"id":1475866,"avatar":"https://static001.geekbang.org/account/avatar/00/16/85/1a/fc016813.jpg","nickname":"萧潇","note":"","ucode":"1FA83092845507","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":401422,"discussion_content":"无法mock 需要你自己控制入参 完全执行完才能走到你想要测试的分支","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633664402,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":282649,"user_name":"Chloe","can_delete":false,"product_type":"c1","uid":1004953,"ip_address":"","ucode":"C4848ED5B35752","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/99/4bdadfd3.jpg","comment_is_top":false,"comment_ctime":1615350111,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615350111","product_id":100039001,"comment_content":"谢谢老师，满满的实战经验，很受教。关于getLastSubstrByDelimiter(String hostName) 的命名，我认为比getLastSubstrByDot(String hostName) 好，更具通用性，但是同时delimiter就需要被传入了，否则无法得知delimiter具体是什么","like_count":0},{"had_liked":false,"id":281467,"user_name":"超超超超超帅耶🌴","can_delete":false,"product_type":"c1","uid":1266987,"ip_address":"","ucode":"931E23DC0ACB04","user_header":"https://static001.geekbang.org/account/avatar/00/13/55/2b/b7927cc4.jpg","comment_is_top":false,"comment_ctime":1614757902,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614757902","product_id":100039001,"comment_content":"我觉得如果这个hostName不重要的话其实可以直接返回一个null也没事，我觉得不能因为底层无关紧要的问题影响上层","like_count":0},{"had_liked":false,"id":275570,"user_name":"余靖","can_delete":false,"product_type":"c1","uid":1244315,"ip_address":"","ucode":"D02780B864F8BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/fc/9b/b19762eb.jpg","comment_is_top":false,"comment_ctime":1611586064,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611586064","product_id":100039001,"comment_content":"理论部分能通俗易懂，实战部分由于偏Java的业务较多，对于非Java开发的人来说，能大概看懂，但是印象不深刻，对其中的很多概念不太明白。","like_count":0},{"had_liked":false,"id":275361,"user_name":"机车","can_delete":false,"product_type":"c1","uid":1881786,"ip_address":"","ucode":"CD32A645AE310A","user_header":"https://static001.geekbang.org/account/avatar/00/1c/b6/ba/f76d996b.jpg","comment_is_top":false,"comment_ctime":1611488389,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611488389","product_id":100039001,"comment_content":"接口命名那里，LogTraceIdGenerator上抽象出 idGenerator，是为了其它业务的 xxxIdGenerator 也去继承 idGenerator 吗？那这样做抽出 idGenerator 的意义是什么呢？","like_count":0},{"had_liked":false,"id":270644,"user_name":"江南一笑","can_delete":false,"product_type":"c1","uid":2234620,"ip_address":"","ucode":"E38938A1178827","user_header":"https://static001.geekbang.org/account/avatar/00/22/18/fc/4f92ee4e.jpg","comment_is_top":false,"comment_ctime":1609205241,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609205241","product_id":100039001,"comment_content":"1. 我觉得host name获取失败的时候，应该在函数内部就地处理，比如生成长度相同的随机字符串来顶替last field of host name.  因为调用 id generator的任务就是生成唯一id，尽量不把这个异常抛到上一层去。自己的问题自己解决。<br>2，不会更合理。by dot非常直观明确、没有歧义。为什么要by delimiter. ","like_count":0},{"had_liked":false,"id":268936,"user_name":"落尘","can_delete":false,"product_type":"c1","uid":1802622,"ip_address":"","ucode":"7B76B94CA301D7","user_header":"https://static001.geekbang.org/account/avatar/00/1b/81/7e/fb688b5c.jpg","comment_is_top":false,"comment_ctime":1608437681,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608437681","product_id":100039001,"comment_content":"课堂讨论：<br>1.在log的应用场景下generate()函数应该返回null，getLastfieldOfHostName()方法上的注释很明确的表示如果没有获取到主机名则返回null。当然，这样一来在获取不到主机名的场景下，ID重复的概率就有增大了，只是对log来说应该还是可以接受的。但是如果换一种对唯一性要求更高的场景（争哥这里本来就预留了其他业务场景的接口），实现可能就应该是向上抛出异常，这样一来也要考虑到里氏替换原则，接口上的注释就需要更加泛用（争哥这里没有列出来）<br>2.getLastSubstrSplittedByDot(String hostName) 函数没有必要修改函数名，因为当前已经是最低权限的private函数（这里是protected实际上代表private）作用域小，涉及业务处理细节，而且针对主机名的处理应该只有dot的情况（这里我也不清楚，猜测）","like_count":0},{"had_liked":false,"id":265712,"user_name":"淤白","can_delete":false,"product_type":"c1","uid":1206503,"ip_address":"","ucode":"D1E65DC40DAF68","user_header":"https://static001.geekbang.org/account/avatar/00/12/68/e7/ee47d0e2.jpg","comment_is_top":false,"comment_ctime":1606988984,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606988984","product_id":100039001,"comment_content":"打卡：用Java实现了整个案例。","like_count":0},{"had_liked":false,"id":261974,"user_name":"云宝","can_delete":false,"product_type":"c1","uid":2236520,"ip_address":"","ucode":"796414E7778CD7","user_header":"https://static001.geekbang.org/account/avatar/00/22/20/68/1501829e.jpg","comment_is_top":false,"comment_ctime":1605595523,"is_pvip":false,"replies":[{"id":"96129","content":"嗯嗯，我改下","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1606701218,"ip_address":"","comment_id":261974,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1605595523","product_id":100039001,"comment_content":"generateRandomAlphameric()方法的测试用例需要改为： Assert.assertTrue((&#39;0&#39; &lt;= c &amp;&amp; c &lt;= &#39;9&#39;) || (&#39;a&#39; &lt;= c &amp;&amp; c &lt;= &#39;z&#39;) || (&#39;A&#39; &lt;= c &amp;&amp; c &lt;= &#39;Z&#39;));","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509678,"discussion_content":"嗯嗯，我改下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606701218,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":260713,"user_name":"Laughing","can_delete":false,"product_type":"c1","uid":1002134,"ip_address":"","ucode":"F68F1E000CA800","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/96/99466a06.jpg","comment_is_top":false,"comment_ctime":1605087542,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605087542","product_id":100039001,"comment_content":"1. 底层的异常应该往上抛，然后进行异常的转译，转译为上层可处理的业务异常；<br>2. 使用getLastSubstrByDelimiter替换getLastSubstrSplittedByDot是合理的，考虑到之后的扩展，可以抽象成接口方法，通过不同的实现类来实现不同的分割逻辑。","like_count":0},{"had_liked":false,"id":253844,"user_name":"当运元宝","can_delete":false,"product_type":"c1","uid":1067224,"ip_address":"","ucode":"525542C70260F8","user_header":"https://static001.geekbang.org/account/avatar/00/10/48/d8/d0e9bd80.jpg","comment_is_top":false,"comment_ctime":1602916523,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1602916523","product_id":100039001,"comment_content":"大佬们，我有个问题，为什么要写2个接口呢？LogTraceIdGenerator这个接口存在的意义是什么呢？为什么不直接用LogTraceIdGenerator去实现IdGenerator呢？","like_count":0,"discussions":[{"author":{"id":1100913,"avatar":"https://static001.geekbang.org/account/avatar/00/10/cc/71/4fcf9fd0.jpg","nickname":"Jackal","note":"","ucode":"68A48FDF086F3F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348365,"discussion_content":"按照说法：【实现类可以复用到多个业务模块中，比如前面提到的用户、订单。】确实不该存在LogTraceIdGenerator这层接口，用户、订单不是logid的子分类。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612526011,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1014665,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/89/34f2cbcc.jpg","nickname":"杨宇","note":"","ucode":"EB74DF6E269F03","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340320,"discussion_content":"上一讲有说到，LogTraceIdGenerator是为了日志追踪而生成Id，可以有多种实现：随机、递增……","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609978797,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250683,"user_name":"笨鸟","can_delete":false,"product_type":"c1","uid":1236320,"ip_address":"","ucode":"68029ADA76AA5A","user_header":"https://static001.geekbang.org/account/avatar/00/12/dd/60/a6a4f79a.jpg","comment_is_top":false,"comment_ctime":1601195214,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601195214","product_id":100039001,"comment_content":"一边看着专栏,一边反思现在写的代码,同时思考公司项目存在的问题,一边考虑重构同事代码需要注意的地方","like_count":0},{"had_liked":false,"id":246037,"user_name":"Geek_35cfdd","can_delete":false,"product_type":"c1","uid":1792214,"ip_address":"","ucode":"AD9615ABB4CA25","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoiaP1gptuBzj3AXMpY8yLTIkpuarouOVzLde4636UJ7zAgnOEZibiaAIRVAicFaO64ftH45YOn1pD3VA/132","comment_is_top":false,"comment_ctime":1599140642,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599140642","product_id":100039001,"comment_content":"对于第一点，随机生成器本省就是为了业务问题的排查，而系统出现问题的可能本身比价低，随机数获取失败的可能性也是比较低的。在这两种决策的基础上，感觉没必要向外抛出异常导致此笔业务挂掉。<br>第二点：方法名应该告诉做什么，而不是咋么做。避免内部逻辑修改时也要改方法名","like_count":0},{"had_liked":false,"id":244927,"user_name":"橙子皮","can_delete":false,"product_type":"c1","uid":1970791,"ip_address":"","ucode":"DDB6452597D9E7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ep2LFSJ3CdfXDib4G4j39uCWhhLib0ia8Y6AtlHNrYUVlwSL0MImrMToMJgTCC1Bp4AKrbyvunvJX9KA/132","comment_is_top":false,"comment_ctime":1598755285,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598755285","product_id":100039001,"comment_content":"争哥把我平时容易犯的毛病全点出来了，受益匪浅","like_count":0},{"had_liked":false,"id":244099,"user_name":"站在岸上的鱼","can_delete":false,"product_type":"c1","uid":2093578,"ip_address":"","ucode":"96C3D7B1772541","user_header":"https://static001.geekbang.org/account/avatar/00/1f/f2/0a/e10d198f.jpg","comment_is_top":false,"comment_ctime":1598402563,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1598402563","product_id":100039001,"comment_content":"不太明白为啥要抽象出来两个接口？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473322,"discussion_content":"后面会讲到，别急~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572945965,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1141612,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6b/6c/1e097d82.jpg","nickname":"donglu","note":"","ucode":"427B50B0BCC559","race_medal":2,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":43869,"discussion_content":"要有这个意识，背对着总不行吧，视而不见也不行吧？勇士敢于直面人生，就是这个意思。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572914738,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241997,"user_name":"霍霍","can_delete":false,"product_type":"c1","uid":1542586,"ip_address":"","ucode":"A483D42AD7F72D","user_header":"https://static001.geekbang.org/account/avatar/00/17/89/ba/009ee13c.jpg","comment_is_top":false,"comment_ctime":1597555375,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1597555375","product_id":100039001,"comment_content":"我觉得设计模式讲的是应用设计原则来解决实际问题，这23种是前人总结出来的经验。其实设计原则是很抽象的，很难把控，我们需要在了解设计原则的基础上，根据实际问题多做思考，才能将设计模式运用好。加油，感谢争哥","like_count":0},{"had_liked":false,"id":240572,"user_name":"algebra","can_delete":false,"product_type":"c1","uid":1010953,"ip_address":"","ucode":"89F57E4A50E04A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6d/09/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1596981088,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596981088","product_id":100039001,"comment_content":"非静态方法易于测试，在本例子中如何体现呢，比如我让getLastfieldOfHostName返回值固定，测试generateRandomAlphameric返回值是否符合预期，是不是方便mock某些入参跟出参还有mock异常的情况，我这样理解对不对","like_count":0},{"had_liked":false,"id":227740,"user_name":"Obed","can_delete":false,"product_type":"c1","uid":1399904,"ip_address":"","ucode":"8717488DD14AB4","user_header":"https://static001.geekbang.org/account/avatar/00/15/5c/60/3754399d.jpg","comment_is_top":false,"comment_ctime":1592467565,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592467565","product_id":100039001,"comment_content":"强!这个重构思路清晰，方法有章可循。感觉自己以前就是看到一个方法太长了只会想这有没有重复部分或者比较复杂的部分可以抽取出来成为一个函数。看了两次这章，感觉真的学到了。<br>另外 -》花点心思写一段高质量的代码，比写 100 段凑活能用的代码，对你的代码能力提高更有帮助。这句话有很大的共鸣","like_count":0},{"had_liked":false,"id":227091,"user_name":"JUNLONG","can_delete":false,"product_type":"c1","uid":1396741,"ip_address":"","ucode":"15C3E0B27E081C","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/05/90f1a14e.jpg","comment_is_top":false,"comment_ctime":1592281253,"is_pvip":false,"replies":[{"id":"85673","content":"嗯嗯，多谢指出，我改下","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1593910591,"ip_address":"","comment_id":227091,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1592281253","product_id":100039001,"comment_content":"测试代码中的testGenerateRandomAlphameric()函数的for循环中的前两个范围判断打错了，应为：(&#39;0&#39; &lt; c &amp;&amp; c &lt; &#39;9&#39;) || (&#39;a&#39; &lt; c &amp;&amp; c &lt; &#39;z&#39;) 。<br>RandomIdGeneratorTest()函数中的一个#打成了$","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498490,"discussion_content":"嗯嗯，多谢指出，我改下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593910591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225684,"user_name":"花花大脸猫","can_delete":false,"product_type":"c1","uid":1117318,"ip_address":"","ucode":"8ABDB3F7F4FB0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0c/86/8e52afb8.jpg","comment_is_top":false,"comment_ctime":1591834359,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1591834359","product_id":100039001,"comment_content":"1.不合理，还是需要显式的将错误信息打印出来并设计出错之后的补偿措施。<br>2.在当前的场景下，第一种更合适，但后续如果换了一种实现方式，后面一种更加通用，普适性好些","like_count":0},{"had_liked":false,"id":221534,"user_name":"scmath","can_delete":false,"product_type":"c1","uid":1149022,"ip_address":"","ucode":"641023BB246C29","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/5e/7c76f422.jpg","comment_is_top":false,"comment_ctime":1590536393,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590536393","product_id":100039001,"comment_content":"依赖关系的数据传递：<br>接口依赖-可以通过接口方法的入参传递给接口实现，接口依赖可以使用接口方法的返回的数据。<br>接口实现-使用接口入参，把数据返回给接口依赖。<br>接口装配:实例化接口依赖、接口实现，把接口实现注入到接口依赖，接口装配成了用户接口层。接口装配决定接口依赖的行为，通过把不同的实现装配到接口依赖实现功能扩展、代码复用、解耦。接口实现、接口依赖都是积木，接口装配是人，是功能的创造者。<br>","like_count":0},{"had_liked":false,"id":221528,"user_name":"scmath","can_delete":false,"product_type":"c1","uid":1149022,"ip_address":"","ucode":"641023BB246C29","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/5e/7c76f422.jpg","comment_is_top":false,"comment_ctime":1590535422,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590535422","product_id":100039001,"comment_content":"把对象分离出来后，把需要实例化另一个类、并使用类的方法的依赖关系，改为为依赖这个类的接口，这个类叫接口依赖；这个接口可以有多个实现；然后再增加一个装配层实例化接口的实现，然后注入到接口依赖。这时要考虑谁可能有多个实现，就把“谁”抽象为接口依据是谁有多个实现，谁被扩展。依赖方向可以改变。<br><br>拆分为接口、接口依赖、接口实现、接口装配(初始化接口依赖、接口实现,把接口实现注入接口依赖)。","like_count":0},{"had_liked":false,"id":221231,"user_name":"scmath","can_delete":false,"product_type":"c1","uid":1149022,"ip_address":"","ucode":"641023BB246C29","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/5e/7c76f422.jpg","comment_is_top":false,"comment_ctime":1590453053,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590453053","product_id":100039001,"comment_content":"考虑清楚谁预留扩展点，谁依赖谁，谁实现谁的扩展点，这样依赖是否合理?","like_count":0},{"had_liked":false,"id":218359,"user_name":"炫炫","can_delete":false,"product_type":"c1","uid":1358609,"ip_address":"","ucode":"FDC7A0C6E08B02","user_header":"https://static001.geekbang.org/account/avatar/00/14/bb/11/7069b8eb.jpg","comment_is_top":false,"comment_ctime":1589789009,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589789009","product_id":100039001,"comment_content":"要想提高代码质量，还是要在细节处下功夫。","like_count":0},{"had_liked":false,"id":209168,"user_name":"林子er","can_delete":false,"product_type":"c1","uid":1629256,"ip_address":"","ucode":"85637288F22CF0","user_header":"https://static001.geekbang.org/account/avatar/00/18/dc/48/9796286e.jpg","comment_is_top":false,"comment_ctime":1587516734,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587516734","product_id":100039001,"comment_content":"第一个，是否抛出异常完全取决于类的使用场景定位，就该生成器来说从命名上并没有限定一定是用在日志场景，属于较通用类，因而需要抛出，而上层日志类（生成器类的调用方）需要捕获并消化掉该异常，因为日志错误不能影响业务运行。<br>第二个，还是要看函数的预期使用范围（场景定位）。该函数本质上是private的，作用范围很小，从传参看是专门用来处理hostName的，因而命名暴露细节没问题，另外个人觉得也可以命名为getLastPartOfHostName","like_count":0},{"had_liked":false,"id":209021,"user_name":"不记年","can_delete":false,"product_type":"c1","uid":1045945,"ip_address":"","ucode":"287E40C68356DC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/b9/888fe350.jpg","comment_is_top":false,"comment_ctime":1587481102,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587481102","product_id":100039001,"comment_content":"第一个问题，要不要抛出异常，要看是否需要告知，对于这个场景，调用者只关心获取的id，处理异常属于职责之外的操作，所以我认为不应该自己解决<br>第二个问题 没有必要，私有方法本身就属于自己的，函数名太通用了反而降低可读性","like_count":0},{"had_liked":false,"id":202118,"user_name":"面向百度编程","can_delete":false,"product_type":"c1","uid":1732780,"ip_address":"","ucode":"8FE04A019D71D1","user_header":"https://static001.geekbang.org/account/avatar/00/1a/70/ac/83bc14c0.jpg","comment_is_top":false,"comment_ctime":1585904801,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585904801","product_id":100039001,"comment_content":"我总结一下那个方法，其实我们平时写代码的时候就喜欢把所有的逻辑都放在一个方法里面，耦合度比较高，功能不够单一，所以把部分逻辑更加精确，拆分，最后在组装在一起，形成组件化开发，不仅适用于方法，类，对象与对象之间，还适用于对象和模块之间，模块与模块之间","like_count":0},{"had_liked":false,"id":201259,"user_name":"mooneal","can_delete":false,"product_type":"c1","uid":1177114,"ip_address":"","ucode":"7E43AD3661BBFD","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/1F8TyS4mNfhRib2nHvLZ1azGyYQj2fjr9G1RFkOINo2Mx1JYHLN7FEU9FGg5ibictp1QAQeNUFZlTVLdb8QgkJnow/132","comment_is_top":false,"comment_ctime":1585741153,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585741153","product_id":100039001,"comment_content":"太难了，尽管这个例子很简单，但要把这些应用到实际开发中，真的需要太多的经验了。我的代码在组内已经算比较规范的了，but还远远不够。没有人review真的很难有长进","like_count":0},{"had_liked":false,"id":200955,"user_name":"愤怒的小龙打小鸟","can_delete":false,"product_type":"c1","uid":1115909,"ip_address":"","ucode":"363AF21A33CD2C","user_header":"https://static001.geekbang.org/account/avatar/00/11/07/05/0e59855d.jpg","comment_is_top":false,"comment_ctime":1585699026,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585699026","product_id":100039001,"comment_content":"获取主机名耗时的问题该如何解决呢？","like_count":0},{"had_liked":false,"id":196499,"user_name":"@%初%@","can_delete":false,"product_type":"c1","uid":1053509,"ip_address":"","ucode":"2B8A6134675ED7","user_header":"https://static001.geekbang.org/account/avatar/00/10/13/45/16c60da2.jpg","comment_is_top":false,"comment_ctime":1585286504,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585286504","product_id":100039001,"comment_content":"1.对于问题一，我觉得抛不抛异常，也需要根据具体的场景分析吧，主要看业务的容忍度，，，对于不严格的，获取失败，完全可以取一个默认值，，，对于比较严格区分的，我觉得可以抛异常，，，相对于本例来说，我倒是觉得失败，可以使用默认值处理。<br>2.我觉不需要改名，主要是参数签名的问题，，，这个方法内部已经使用了dot去分割了，改了名称，反倒没有那么清晰了，这样别的同学去用的话，还得翻代码。。。<br><br>以上，，，仅仅个人的见解。。。","like_count":0},{"had_liked":false,"id":195176,"user_name":"Bruce","can_delete":false,"product_type":"c1","uid":1876764,"ip_address":"","ucode":"BAD602A7270306","user_header":"https://static001.geekbang.org/account/avatar/00/1c/a3/1c/f947dd97.jpg","comment_is_top":false,"comment_ctime":1585143996,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585143996","product_id":100039001,"comment_content":"打卡，","like_count":0},{"had_liked":false,"id":190331,"user_name":"lcf枫","can_delete":false,"product_type":"c1","uid":1144171,"ip_address":"","ucode":"D51E8F68BD41CA","user_header":"https://static001.geekbang.org/account/avatar/00/11/75/6b/fd685164.jpg","comment_is_top":false,"comment_ctime":1584629787,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584629787","product_id":100039001,"comment_content":"getLastfieldOfHostName 函数是否考虑缓存起来","like_count":0},{"had_liked":false,"id":187280,"user_name":"空白昵称","can_delete":false,"product_type":"c1","uid":1433815,"ip_address":"","ucode":"91F50CA25102AB","user_header":"https://static001.geekbang.org/account/avatar/00/15/e0/d7/744bd8c3.jpg","comment_is_top":false,"comment_ctime":1584073674,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584073674","product_id":100039001,"comment_content":"连续看争哥的专栏大概快一个月了，收获颇多。也解决了之前项目中不少的疑惑。希望学习了数据结构和设计模式这些基础课，能找到一份干着很爽的工作。","like_count":0},{"had_liked":false,"id":184725,"user_name":"M","can_delete":false,"product_type":"c1","uid":1810576,"ip_address":"","ucode":"06F26E1D62E9C9","user_header":"https://wx.qlogo.cn/mmopen/vi_32/eLNeJNaEkwGSK7xvtamMibVLMy2MpbIqX3iaEhT7JtSnTRMRTwZ2j4HX7WAapiashbiaBDVriaXKSP0Oeic6ZAEVEXag/132","comment_is_top":false,"comment_ctime":1583391550,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583391550","product_id":100039001,"comment_content":"老师请教几个问题：<br>1.为什么要写两个接口呢，直接用IdGenerator接口，用RandomIdGenerator 和SequenceIdGenerator去实现IdGenerator，这样不是更好么？老师的代码又多了个继承接口<br><br>2.在第一次重构代码中最后一段代码LogTraceIdGenerator logTraceIdGenerator = new RandomIdGenerator();   而RandomIdGenerator是直接实现的IdGenerator接口，用IdGenerator接收和LogTraceIdGenerator接收，有什么区别么？<br><br><br><br><br>3.在第二次重构时，把一些会出现bug的代码和不会出现bug的代码（获取主机名）分割开，我可以理解成，写代码把可能会出现bug的代码拆开，方便测试;把一些不易出bug的代码放一起。这样就能提高可测试性么？<br><br>4.在获取主机名这段代码中，如果是我，我会这样写，老师帮忙看下，<br>String hostName = InetAddress.getLocalHost().getHostName();<br>                if (StringUtils.isEmpty(hostName)) {<br>                    throw new NullPointerException(&quot;hostName is null&quot;);<br>                }<br>我看老师的代码上只抓取异常了，这种场景应该怎么处理比较好呢? <br><br><br>这几个问题还是比较迷惑的，希望老师或同学能够解答！<br><br>","like_count":0},{"had_liked":false,"id":184322,"user_name":"Geek_839008","can_delete":false,"product_type":"c1","uid":1622090,"ip_address":"","ucode":"A780A0DB78C2E9","user_header":"","comment_is_top":false,"comment_ctime":1583290059,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583290059","product_id":100039001,"comment_content":"这个测试用例是不是有点问题啊？‘field1#field2$field3’和‘field1#field2#field3’两个字符串不一样-_-||。<br>    actualSubstr = idGenerator.getLastSubstrSplittedByDot(&quot;field1#field2$field3&quot;);<br>    Assert.assertEquals(&quot;field1#field2#field3&quot;, actualSubstr);","like_count":0},{"had_liked":false,"id":184146,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1583238258,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583238258","product_id":100039001,"comment_content":"对于第一个问题,我认为往上抛出异常是可行的,因为一般的项目中,都有一个顶级的异常捕获器,但是抛出了异常,会导致程序无法继续执行下去,所以我的建议是,在类中设置一个ERRORCODE,在不行的时候,返回这个错误码,方便问题的排查<br>对于第二个问题,我的建议是没必要,因为这是一个类私有的函数,并不会被其他的类去调用,符合单一职责原则,同时,也为了方便其他阅读者阅读这片代码,使用一个能够描述其实现的名字,是很好的选择<br>最后,关于我个人的代码实现:<br>https:&#47;&#47;github.com&#47;HeavenXin&#47;FirstLearn_DesignPatterns&#47;tree&#47;master&#47;IdGenerator<br>","like_count":0},{"had_liked":false,"id":183162,"user_name":"悠游","can_delete":false,"product_type":"c1","uid":1222834,"ip_address":"","ucode":"4FDDDDF29AE3F0","user_header":"https://static001.geekbang.org/account/avatar/00/12/a8/b2/998448ca.jpg","comment_is_top":false,"comment_ctime":1582964226,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582964226","product_id":100039001,"comment_content":"1、如果异常本级就能处理，且上层无需感知下层的异常，那么就应该自己处理。<br>2、返回一个特殊ID即可，因为本身不涉及业务逻辑，而且hostname也只是为了生成uuid的逻辑的一部分。","like_count":0},{"had_liked":false,"id":182208,"user_name":"程序员人生","can_delete":false,"product_type":"c1","uid":1113668,"ip_address":"","ucode":"C5C5073D89AAA2","user_header":"https://static001.geekbang.org/account/avatar/00/10/fe/44/3e3040ac.jpg","comment_is_top":false,"comment_ctime":1582729102,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582729102","product_id":100039001,"comment_content":"看来，我的代码在老师眼里也就60分","like_count":0},{"had_liked":false,"id":181569,"user_name":"花儿少年","can_delete":false,"product_type":"c1","uid":1318540,"ip_address":"","ucode":"CFE4F64243673B","user_header":"https://static001.geekbang.org/account/avatar/00/14/1e/8c/450fe5cb.jpg","comment_is_top":false,"comment_ctime":1582560932,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582560932","product_id":100039001,"comment_content":"项目里有好多byxxx的函数，有时候业务接口也使用了byxxx，我都没意识到这个问题，因为看很多别人写的代码也是这样的就跟着写了。<br>争哥的想法对我很有启发，ths~","like_count":0},{"had_liked":false,"id":181422,"user_name":"Richie","can_delete":false,"product_type":"c1","uid":1019588,"ip_address":"","ucode":"12314EF0347693","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/c4/8d1150f3.jpg","comment_is_top":false,"comment_ctime":1582537598,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582537598","product_id":100039001,"comment_content":"学这门课之前，我可能会认为做完第一轮的可读性重构，就完事了。<br>果然测试还是很重要啊，高手思考就是比较全面。","like_count":0},{"had_liked":false,"id":181420,"user_name":"Richie","can_delete":false,"product_type":"c1","uid":1019588,"ip_address":"","ucode":"12314EF0347693","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/c4/8d1150f3.jpg","comment_is_top":false,"comment_ctime":1582537453,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582537453","product_id":100039001,"comment_content":"喜欢这样的实战课。<br>这些东西自己琢磨得花多少时间，但是有高手带着，分析什么是好代码，什么是烂代码，看着好代码是怎么一步一步演变过来的，这样应该是进步最快的了。","like_count":0},{"had_liked":false,"id":181025,"user_name":"Aprilのママ","can_delete":false,"product_type":"c1","uid":1881339,"ip_address":"","ucode":"5741B413A6DE69","user_header":"https://static001.geekbang.org/account/avatar/00/1c/b4/fb/ce11376f.jpg","comment_is_top":false,"comment_ctime":1582461819,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1582461819","product_id":100039001,"comment_content":"1、Random我觉得可以用静态变量，毕竟generate ID调用也是比较频繁，每次都new一个临时对象对性能有影响。<br>2、String hostName = InetAddress.getLocalHost().getHostName();<br>这行代码每次运行想必也有性能损耗，对同一个机器结果都是一样的。也可以优化吧。<br>不知争哥怎么认为？","like_count":0,"discussions":[{"author":{"id":1087243,"avatar":"https://static001.geekbang.org/account/avatar/00/10/97/0b/a943bcb3.jpg","nickname":"zhou","note":"","ucode":"E1CE8575B3F106","race_medal":3,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285078,"discussion_content":"主机名可能会变 所以每次都重新获取。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592730979,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":180355,"user_name":"xzy","can_delete":false,"product_type":"c1","uid":1002095,"ip_address":"","ucode":"1A44368083A19E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/6f/e36b3908.jpg","comment_is_top":false,"comment_ctime":1582266722,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582266722","product_id":100039001,"comment_content":"LogTraceIdGenerator logTraceIdGenerator = new RandomIdGenerator()； 这个代码的问题，老师还是抽空改一下吧🤭","like_count":0},{"had_liked":false,"id":178811,"user_name":"楊_宵夜","can_delete":false,"product_type":"c1","uid":1019302,"ip_address":"","ucode":"7BA0CADC5F23BB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/a6/22c37c91.jpg","comment_is_top":false,"comment_ctime":1581832449,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1581832449","product_id":100039001,"comment_content":"争哥, RandomIdGeneratorTest 的代码, 即使是 new RandomIdGenerator() , 也是不能够访问 protected 方法的呀, 实测过用 JUnit框架 也不能...<br>你这个 Test 是不是放在了 RandomIdGenerator 同一个包底下了咧?","like_count":0,"discussions":[{"author":{"id":1445958,"avatar":"https://static001.geekbang.org/account/avatar/00/16/10/46/bfe02d45.jpg","nickname":"于吉鹏","note":"","ucode":"B958F864850531","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":175983,"discussion_content":"测试类的package xx.xxx.xxx;和被测试类的package 一致时(实际不在同一包中),就可以调用protected方法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582011211,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177522,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1581410086,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1581410086","product_id":100039001,"comment_content":"年后回来复工了，在家学习动力不足，赶紧在公司也抠出时间来学习。实战篇的思想是我要学习的地方，对我来说，往后针对项目需求的规划会更好。<br><br>","like_count":0},{"had_liked":false,"id":176954,"user_name":"慕容引刀","can_delete":false,"product_type":"c1","uid":1016308,"ip_address":"","ucode":"714E94AEB42D7D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/81/f4/d92c7ef5.jpg","comment_is_top":false,"comment_ctime":1581235679,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581235679","product_id":100039001,"comment_content":"个人觉得小争哥的文章还是很给力的，前边的铺垫很多是在讲解代码中可能出现的问题以及如何发现问题。一般来说在清楚代码中存在哪些的问题的情况下就会去寻找解决方案，很容易发现一些设计模式就是为了解决某些问题而存在的。同时因为清楚问题所在，就很容易了解掌握这些设计模式。","like_count":0},{"had_liked":false,"id":176912,"user_name":"一壶浊酒","can_delete":false,"product_type":"c1","uid":1145530,"ip_address":"","ucode":"5D90F8F8121BBE","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/ba/8545f2d7.jpg","comment_is_top":false,"comment_ctime":1581222110,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1581222110","product_id":100039001,"comment_content":"对于问题一，我觉得是否往上继续抛出得看情况，如果异常的时候比方说null的时候，也要有一个固定返回值例如直接返回字符串&quot;null&quot;，那就不用往上抛而是在函数里面直接返回，我觉得更加好。对于问题二，我觉得如果函数内的逻辑会经常出现变化了化，可以替换成getLastSubstrByDelimiter，不会经常变化了化应该不用改。<br>过年各种事情在学习上有点懈怠了，之前的文章也没来得及多多复习，落下了满多，得抓紧补补了，同时也不能忘了前面的复习，温故而知新嘛","like_count":0},{"had_liked":false,"id":176895,"user_name":"DullBird","can_delete":false,"product_type":"c1","uid":1110494,"ip_address":"","ucode":"80E2FD5F9687CB","user_header":"https://static001.geekbang.org/account/avatar/00/10/f1/de/3ebcbb3f.jpg","comment_is_top":false,"comment_ctime":1581217943,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581217943","product_id":100039001,"comment_content":"1. hostname不能影响业务逻辑，设置默认值，并且还有随机值可以区分。<br>2. 通用的比较合适，但是看有没有复用这个代码的必要，否则暂时不需要改动","like_count":0},{"had_liked":false,"id":176825,"user_name":"胡子高兴了","can_delete":false,"product_type":"c1","uid":1596868,"ip_address":"","ucode":"A32AE341E3683D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/YJHQDzuLavGFmwunybBiaBrrU1aOib7Siam0fJrWIaHfdT0p2GicsRT42d9bhRNO324wewDtic8RiaokAFkUyO3YRF0g/132","comment_is_top":false,"comment_ctime":1581174784,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581174784","product_id":100039001,"comment_content":"Assert.assertTrue((&#39;0&#39; &lt; c &amp;&amp; c &gt; &#39;9&#39;) || (&#39;a&#39; &lt; c &amp;&amp; c &gt; &#39;z&#39;) || (&#39;A&#39; &lt; c &amp;&amp; c &lt; &#39;Z&#39;)); <br>应该改成Assert.assertTrue((&#39;0&#39; &lt;= c &amp;&amp; c &lt;= &#39;9&#39;) || (&#39;a&#39; &lt;= c &amp;&amp; c &lt;= &#39;z&#39;) || (&#39;A&#39; &lt;= c &amp;&amp; c &lt;= &#39;Z&#39;));","like_count":0},{"had_liked":false,"id":176336,"user_name":"李小四","can_delete":false,"product_type":"c1","uid":1112747,"ip_address":"","ucode":"2A766BE16B276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","comment_is_top":false,"comment_ctime":1581038734,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581038734","product_id":100039001,"comment_content":"设计模式_35<br># 作业<br>  1. 首先逻辑要自洽：<br>    (1) 如果在函数内吞掉异常，那么函数内要处理因为异常而导致的逻辑问题，而不是只返回一个空字符串。<br>    (2) 如果不准备处理异常带来的逻辑问题，那么需要把异常抛到上一层。<br>    具体的平衡的尺度，估下一下节会讲吧。<br>  2. 我认为合理，因为前一种方法预设了一些隐藏联系(host的delimiter一定是dot)，当然这个改变的可能性不大，但是不预设多余得了联系是更好的办法。<br><br># 感想<br>看到 ```RandomIdGenerator implements IdGenerator```, 我还以为发现了我不知道的新大陆，找IDE试了一下，才发现写错了。","like_count":0},{"had_liked":false,"id":175982,"user_name":"沈康","can_delete":false,"product_type":"c1","uid":1611025,"ip_address":"","ucode":"02AFA50738AB8E","user_header":"https://static001.geekbang.org/account/avatar/00/18/95/11/eb431e52.jpg","comment_is_top":false,"comment_ctime":1580900981,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580900981","product_id":100039001,"comment_content":"1、不抛出异常吧，理由是抛出的异常需要调用出处理，这种id生成器明显需要自己处理干净否则异常处理将会暴露在各业务代码，明显增大了业务复杂度。<br>2、dot就是&quot;.&quot;,改成delimiter有什么区别，已经封装了，改不改区别不大吧。。不懂","like_count":0},{"had_liked":false,"id":175451,"user_name":"斐波那契","can_delete":false,"product_type":"c1","uid":1464006,"ip_address":"","ucode":"85E2EBC01392B1","user_header":"https://static001.geekbang.org/account/avatar/00/16/56/c6/0b449bc6.jpg","comment_is_top":false,"comment_ctime":1580723298,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1580723298","product_id":100039001,"comment_content":"对于课堂讨论第一个问题：个人比较认同的是应该不往外抛，但是相应的逻辑要处理好。为什么这么说，首先，如果说hostname获取异常往外抛的话让使用者知道虽然这么做能很快定位到问题，但是从使用者角度说使用者并不会关心这个问题(这个底下也有人讲到) 其次 从逻辑上，往上抛异常跟打日志效果是一样的 既然打了日志那我们就应该可以知道有hostname获取异常的情况(不然日志一文不值) 只是异常抛出更简单粗暴一点。其实 这个问题主要是小争哥给我们限定了范围，如果小争哥用的不是id生成器这个案例 可能抛出异常更好一点。在id 生成器中 获取hostname只是获取随机id的一种手段，并不是唯一。如果某一天把获取hostname换成别的实现逻辑(例如用一个常量来代替) 那原本写好的往外抛出异常就变得毫无意义。","like_count":0},{"had_liked":false,"id":175384,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1580700979,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1580700979","product_id":100039001,"comment_content":"关于第一问 我觉得只要注视写清楚了 返回啥都都行<br>关于第二问 我觉得在你上面已经讲过了 函数名太过具体和细节如果修改了函数内容就可能需要改函数名<br>最后总结一点 高手之间的竞争在于细节 这句话真的很不错","like_count":0,"discussions":[{"author":{"id":1611025,"avatar":"https://static001.geekbang.org/account/avatar/00/18/95/11/eb431e52.jpg","nickname":"沈康","note":"","ucode":"02AFA50738AB8E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":161446,"discussion_content":"注释写得好，怎么返回都ok~哈哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580901132,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":175144,"user_name":"弹簧人","can_delete":false,"product_type":"c1","uid":1697679,"ip_address":"","ucode":"BCB4A6FC76EA17","user_header":"https://static001.geekbang.org/account/avatar/00/19/e7/8f/56387f77.jpg","comment_is_top":false,"comment_ctime":1580570267,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580570267","product_id":100039001,"comment_content":"LogTraceIdGenerator logTraceIdGenerator = new RandomIdGenerator(); 没懂为什么有了IdGenerator还要新建一个LogTraceIdGenerator 。 直接LogTraceIdGenerator  logTraceIdGenerator = new RandomIdGenerator()不行吗？ 有人能说说为啥吗","like_count":0},{"had_liked":false,"id":174910,"user_name":"Eclipse","can_delete":false,"product_type":"c1","uid":1589989,"ip_address":"","ucode":"E7EB0BA99FA644","user_header":"https://static001.geekbang.org/account/avatar/00/18/42/e5/61cfe267.jpg","comment_is_top":false,"comment_ctime":1580455327,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580455327","product_id":100039001,"comment_content":"&#47;&#47;代码使用举例LogTraceIdGenerator logTraceIdGenerator = new RandomIdGenerator();<br><br>争哥，两个子类之间可以进行类型转换吗？","like_count":0},{"had_liked":false,"id":174663,"user_name":"早起不吃虫","can_delete":false,"product_type":"c1","uid":1369757,"ip_address":"","ucode":"13CD3B5E1F9435","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/7WkTI1IicbKvsPJng5vQh5qlrf1smbfl2zb7icHZfzcAk1k4lr8w8IDEAdrqq1NHW5XZMPXiaa1h7Jn1LGOWOCkIA/132","comment_is_top":false,"comment_ctime":1580312860,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580312860","product_id":100039001,"comment_content":"干货满满","like_count":0},{"had_liked":false,"id":174617,"user_name":"雪中亮","can_delete":false,"product_type":"c1","uid":1024341,"ip_address":"","ucode":"B294FDFF9F13E8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a1/55/cff2322c.jpg","comment_is_top":false,"comment_ctime":1580297631,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1580297631","product_id":100039001,"comment_content":"争哥好，我看到这么一句：将 generateRandomAlphameric() 和 getLastSubstrSplittedByDot() 这两个函数的访问权限设置为 protected。这样做的目的是，可以直接在单元测试中通过对象来调用两个函数进行测试。<br><br>我觉得将方法标记为默认访问级别就可以了，这样可以被同一包中的所有类访问。不需要标记为protected，即不需要提供子类的访问权限。<br><br>如果我理解的不对，还请指教。","like_count":0},{"had_liked":false,"id":174101,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1579964671,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579964671","product_id":100039001,"comment_content":"1：需要继续抛出异常，因为从使用者的角度来看，异常更便于使用者调试使用。2：替换成getLastSubstrByDelimiter(String hostName)，感觉更通用一些，","like_count":0},{"had_liked":false,"id":174056,"user_name":"L🚲🐱","can_delete":false,"product_type":"c1","uid":1577856,"ip_address":"","ucode":"08A012739614DE","user_header":"https://static001.geekbang.org/account/avatar/00/18/13/80/2c9da1b1.jpg","comment_is_top":false,"comment_ctime":1579931940,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579931940","product_id":100039001,"comment_content":"1. 获取主机名失败的时候, 返回异常, 在小王的代码实现中，获取主机名失败异常在 IdGenerator 内部被吐掉了，打印一条报警日志，并没有继续往上抛出，这样的异常处理是不恰当的, 应该要继续抛出, 在实际的业开发中, 会有对应的自动异常捕获, 抛出可以让调用者明白哪里出问题了,而不是只是简单的打印日志.<br>2. 函数名字替换看函数的逻辑是否经常变动, 如果经常变动, 那改变没有问题, 因为改动后的函数名更抽象, 后面如果根据其他符号来分隔就不需要改函数名了. 函数命名不需要暴露太多实现细节, 函数名应该足够抽象","like_count":0},{"had_liked":false,"id":173993,"user_name":"相逢是缘","can_delete":false,"product_type":"c1","uid":1060730,"ip_address":"","ucode":"CB299F53A95654","user_header":"https://static001.geekbang.org/account/avatar/00/10/2f/7a/ab6c811c.jpg","comment_is_top":false,"comment_ctime":1579856160,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579856160","product_id":100039001,"comment_content":"打卡<br>代码重构可以用循序渐进、小步快跑的方式，以下步骤可以多轮进行<br>第一轮重构：提高代码的可读性<br>抽离小的功能点为函数、去除代码中魔法数、优化一些重复代码<br>第二轮重构：提高代码的可测试性<br>静态函数尽量改为用者可以通过依赖注入的方式，在外部创建好 RandomIdGenerator 对象后注入到自己的代码中，从而解决静态函数调用影响代码可测试性的问题。<br>对不可控的组件进行隔离<br>对于只需要往里面写数据，并不读数据，不参与业务逻辑的执行，不需要进行mock<br>第三轮重构：编写完善的单元测试<br>第四轮重构：所有重构完成之后添加注释<br>做什么、为什么、怎么做、怎么用，对一些边界条件、特殊情况进行说明，以及对函数输入、输出、异常进行说明。","like_count":0},{"had_liked":false,"id":173985,"user_name":"potato00fa","can_delete":false,"product_type":"c1","uid":1307080,"ip_address":"","ucode":"D179E68D87CC50","user_header":"https://static001.geekbang.org/account/avatar/00/13/f1/c8/8e6dc340.jpg","comment_is_top":false,"comment_ctime":1579848736,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579848736","product_id":100039001,"comment_content":"妙啊","like_count":0},{"had_liked":false,"id":173927,"user_name":"黄林晴","can_delete":false,"product_type":"c1","uid":1362631,"ip_address":"","ucode":"B15C38AECDA88F","user_header":"https://static001.geekbang.org/account/avatar/00/14/ca/c7/00e544c2.jpg","comment_is_top":false,"comment_ctime":1579786479,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579786479","product_id":100039001,"comment_content":"打卡✔","like_count":0},{"had_liked":false,"id":173887,"user_name":"平风造雨","can_delete":false,"product_type":"c1","uid":1014349,"ip_address":"","ucode":"F9EE4704F31E22","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7a/4d/b0228a1a.jpg","comment_is_top":false,"comment_ctime":1579756926,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1579756926","product_id":100039001,"comment_content":"1. 吞掉这个异常很危险，导致业务数据处理出错，因为无法保证唯一，直接违反了接口想表达的设计语义。","like_count":0},{"had_liked":false,"id":173885,"user_name":"柳志焕","can_delete":false,"product_type":"c1","uid":1235940,"ip_address":"","ucode":"42375930DC2AA0","user_header":"https://static001.geekbang.org/account/avatar/00/12/db/e4/a1b45d79.jpg","comment_is_top":false,"comment_ctime":1579754283,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579754283","product_id":100039001,"comment_content":"抽丝剥茧，要多看好的代码才能成长。","like_count":0},{"had_liked":false,"id":173767,"user_name":"皮卡皮卡","can_delete":false,"product_type":"c1","uid":1216284,"ip_address":"","ucode":"D440EEC7301C76","user_header":"https://static001.geekbang.org/account/avatar/00/12/8f/1c/1c728388.jpg","comment_is_top":false,"comment_ctime":1579681342,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1579681342","product_id":100039001,"comment_content":"从开始看不懂为何是说设计模式到后来明白争哥用意，完全是一条成长捷径啊","like_count":0},{"had_liked":false,"id":173756,"user_name":"稳","can_delete":false,"product_type":"c1","uid":1284626,"ip_address":"","ucode":"BF5723E63E4115","user_header":"https://static001.geekbang.org/account/avatar/00/13/9a/12/06863960.jpg","comment_is_top":false,"comment_ctime":1579679922,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579679922","product_id":100039001,"comment_content":"1、看获取失败是否是正常现象，获取主机名失败肯定是不正常，要抛异常，由上层决定怎么处理；像数据库获取记录为空，就是可预期的现象，返回空比较好<br>2、看使用者是谁，如果不需要暴露给外部系统，原来的就挺好","like_count":0},{"had_liked":false,"id":173737,"user_name":"代码小僧","can_delete":false,"product_type":"c1","uid":1270002,"ip_address":"","ucode":"83BEA2583AC08E","user_header":"https://static001.geekbang.org/account/avatar/00/13/60/f2/c631f699.jpg","comment_is_top":false,"comment_ctime":1579673900,"is_pvip":false,"replies":[{"id":"67724","content":"可以再看看前面的28、29讲","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1580114137,"ip_address":"","comment_id":173737,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1579673900","product_id":100039001,"comment_content":"为啥说有静态函数就不好测试？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510549,"discussion_content":"饿呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606700608,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173722,"user_name":"Ken张云忠","can_delete":false,"product_type":"c1","uid":1134288,"ip_address":"","ucode":"D0BAC9FC17DE2B","user_header":"https://static001.geekbang.org/account/avatar/00/11/4e/d0/d8a5f720.jpg","comment_is_top":false,"comment_ctime":1579670095,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579670095","product_id":100039001,"comment_content":"1.获取主机名失败的时候，generate() 函数应该返回什么最合适呢？是特殊 ID、null、空字符，还是异常？在小王的代码实现中，获取主机名失败异常在 IdGenerator 内部被吐掉了，打印一条报警日志，并没有继续往上抛出，这样的异常处理是否得当？<br>获取主机名失败的时候，generate() 函数应该返回异常最合适.<br>代码实现中没有继续上抛异常不得到.异常被吞掉后,上层依赖的业务代码会继续执行,运行再次遇到问题会增加定位问题的负担,应当将异常上抛给业务调用者,让上层业务调用者来决定业务是否该要继续往下执行.<br><br>2.为了隐藏代码实现细节，我们把 getLastSubstrSplittedByDot(String hostName) 函数命名替换成 getLastSubstrByDelimiter(String hostName)，这样是否更加合理？为什么？<br>不合理.<br>因为这里是代码实现细节,应当通过名称准确表达其功能含义.假如替换成getLastSubstrByDelimiter,调用时一下子不会清楚是用什么字符来标记划分的,需要进入源码阅读,这样就增加了使用的成本.","like_count":0},{"had_liked":false,"id":173721,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1579670029,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579670029","product_id":100039001,"comment_content":"课堂讨论Answer:<br><br><br><br>1. 获取主机名失败的时候，generate() 函数应该返回什么最合适呢？是特殊 ID、null、空字符，还是异常？在小王的代码实现中，获取主机名失败异常在 IdGenerator 内部被吐掉了，打印一条报警日志，并没有继续往上抛出，这样的异常处理是否得当？<br><br>   <br><br>   返回特殊ID较为合理. <br><br>   异常处理不合理.要么向调用者抛出exception,要么放弃在方法内部使用CE,使用if(获取主机名失败) 返回特殊ID.<br><br>   以上两种是比较合理的处理方式.<br><br>   <br><br>2. 为了隐藏代码实现细节，我们把 getLastSubstrSplittedByDot(String hostName) 函数命名替换成 getLastSubstrByDelimiter(String hostName)，这样是否更加合理？为什么？<br><br><br><br>​    结论: 不合理. <br><br>​    其一: getLastSubstrSplittedByDot()方法是类内部的方法,并未暴露给外部.原方法命名不存在问题,所以不应该修改命名.    <br><br>​    其二: getLastSubstrSplittedByDot() 业务需求是以&quot;.&quot;分割,修改需求的可能性很低.原命名精准的表达了业务需求,ByDelimiter()的含义更模糊,影响代码的可读性.","like_count":0},{"had_liked":false,"id":173714,"user_name":"╭(╯ε╰)╮","can_delete":false,"product_type":"c1","uid":1440349,"ip_address":"","ucode":"4CB5FAEEE8CC5D","user_header":"https://static001.geekbang.org/account/avatar/00/15/fa/5d/735fdc76.jpg","comment_is_top":false,"comment_ctime":1579667250,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"1579667250","product_id":100039001,"comment_content":"当代码中是guardian风格的时候 我可能会用返回null的方式，比如<br>foobar(){<br>  String id = generator.genarate.();<br>  if(id==null) return;<br>  if(xxx==null) return;<br>  if(yyy==0) return;<br>  someLogic(id,xxx,yyy);<br>}<br>如果会对返回的对象调用一些接口方法，我可能会用空值对象的方式，比如<br>1.<br>Collection someData() {<br>  if(wrong) return Collection.empty()<br>  ...<br>  return ...<br>}<br>foobar() {<br>  someData().forEach();<br>}<br>2.<br>Runnable someTask() {<br>  if(wrong) return ()-&gt;{};<br>  return ...<br>}<br>foobar() {<br>  someTask().run()<br>}<br><br>偶尔我也会在项目底层做一套可读性强，使用方便的异常处理的逻辑，业务中层层抛出。但这种方式一般不被同事们接受，会被说影响性能。对这种理由，我保持意见。<br><br>说个题外话 你们知不知道泛型是否可以用在throws上面，我有个方法声明会抛出异常，但我使用的时候不想有try&#47;catch并且外面的调用方法上面也不能有throws exception的声明，怎么做比较好？<br>someMethod() throws Exception {<br>}<br>foobar() &#47;* throws Exception 这里不能声明抛异常 *&#47; {<br>  &#47;&#47; try {<br>  &#47;&#47; } catch (Exception e) {<br>  someMethod(); &#47;&#47; 别问为什么不try&#47;catch 就当是一个考题<br>  &#47;&#47; }<br>}","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510087,"discussion_content":"������","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606700857,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173704,"user_name":"沉淀的梦想","can_delete":false,"product_type":"c1","uid":1177315,"ip_address":"","ucode":"BCB7C26F9D214B","user_header":"https://static001.geekbang.org/account/avatar/00/11/f6/e3/e4bcd69e.jpg","comment_is_top":false,"comment_ctime":1579664416,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579664416","product_id":100039001,"comment_content":"getLastSubstrSplittedByDot 和 generateRandomAlphameric 可以放到专门的 StringUtil 中","like_count":0},{"had_liked":false,"id":173687,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1579660970,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579660970","product_id":100039001,"comment_content":"1.拿不到属于系统异常情况，应该上抛走异常流。当然也可以捕捉抛自定义异常，更精准的描述异常可能，规避底层调用栈，让api调用方更易排查。<br><br>2.如果是一个内部接口，那么就没必要改。当前名称语义更强。需要扩展时借用ide工具重构方法命1s钟的事。（内部接口方法命名，按需即可）。如果是一个外部接口，那命名最好还是抽象点好（尽量业务无关，内部细节无关）。因为外部接口不好做减法，也不好重构命名。所以命名时要考虑以后可能的扩展点，以涵盖这些可能的方式命名抽象的方法名，以保证以后扩展时不至于出现语义不符的窘境。（外部接口方法命名，要考虑后续扩展可能，合理抽象）","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509424,"discussion_content":"嗯嗯","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606701530,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173650,"user_name":"迷羊","can_delete":false,"product_type":"c1","uid":1286251,"ip_address":"","ucode":"85AF8CED3436C8","user_header":"https://static001.geekbang.org/account/avatar/00/13/a0/6b/0a21b2b8.jpg","comment_is_top":false,"comment_ctime":1579651594,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"233507885578","product_id":100039001,"comment_content":"1.应该需要继续抛出，因为在实际的业务开发中，会有对应的异常处理器，抛出可以让调用者明白哪出错了，而不是只是简单的打印日志。<br>2.命名getLastSubstrSplittedByDot替换成getLastSubstrByDelimiter，具体要看需求会不会经常变化，如果经常变化，替换没有任何问题，因为有可能后面根据别的符号来分割，这种情况下我个人认为getLastFiledOfHostName()函数命名应该替换成getLastFiled()，命名不应该暴露太多细节，要是以后不是根据HostName获取最后一个字段呢，之前的所有用到该命名的地方都需要替换，不然可读性不是很好。<br>如果需求不经常变化，那文中的命名就足够了。","like_count":55,"discussions":[{"author":{"id":1051470,"avatar":"https://static001.geekbang.org/account/avatar/00/10/0b/4e/fd946cb2.jpg","nickname":"allean","note":"","ucode":"A0D2DB4F219EAA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51772,"discussion_content":"优秀，","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573946246,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178559,"user_name":"马哲富","can_delete":false,"product_type":"c1","uid":1107917,"ip_address":"","ucode":"D6BDDFE3CC07ED","user_header":"https://static001.geekbang.org/account/avatar/00/10/e7/cd/08088f14.jpg","comment_is_top":false,"comment_ctime":1581744004,"is_pvip":false,"replies":[{"id":"69264","content":"哈哈，没事的，各有自己的判断，不可能让大家都觉得好，我们虚心相待，尽力而为。遇到问题，解决问题。","user_name":"编辑回复","comment_id":178559,"uid":"1000473","ip_address":"","utype":2,"ctime":1581744579,"user_name_real":"郭蕾"}],"discussion_count":7,"race_medal":0,"score":"224920043396","product_id":100039001,"comment_content":"看到有人说这个专栏写得不好，我忍不住要留个言给这个专栏叫叫好，这个专栏写得很好，非常好，只恨自己水平有限，不能完全吸收，顶这个专栏！","like_count":52,"discussions":[{"author":{"id":1000473,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/44/19/17fadc62.jpg","nickname":"郭蕾","note":"","ucode":"34F4C07D1C5FE8","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483877,"discussion_content":"哈哈，没事的，各有自己的判断，不可能让大家都觉得好，我们虚心相待，尽力而为。遇到问题，解决问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581744579,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1314724,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0f/a4/0b49469f.jpg","nickname":"木子00","note":"","ucode":"8F78CA722EB29B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277621,"discussion_content":"这个专栏，就像老歌一样，越听越有味道。看久了，才知道里面的真正的奥秘。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1591082518,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1139373,"avatar":"https://static001.geekbang.org/account/avatar/00/11/62/ad/3b780869.jpg","nickname":"Panda_High","note":"","ucode":"41A94A45ACCE1E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408377,"discussion_content":"实际上是写的一般般，说是要深入实战，实际大部分也只是泛泛而谈","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1635238092,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1622696,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c2/a8/f3f8f5d2.jpg","nickname":"一格状语","note":"","ucode":"EBA9ED5F97416D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1139373,"avatar":"https://static001.geekbang.org/account/avatar/00/11/62/ad/3b780869.jpg","nickname":"Panda_High","note":"","ucode":"41A94A45ACCE1E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413959,"discussion_content":"你该干嘛干嘛去就行了！反正我学到了很多东西","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636619435,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":408377,"ip_address":""},"score":413959,"extra":""}]},{"author":{"id":1077127,"avatar":"https://static001.geekbang.org/account/avatar/00/10/6f/87/669263b4.jpg","nickname":"陈金鑫","note":"","ucode":"609A24832CA80C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":357337,"discussion_content":"看第二遍了。希望看第三遍能掌握得差不多。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1615789091,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2475056,"avatar":"https://static001.geekbang.org/account/avatar/00/25/c4/30/711b03e5.jpg","nickname":"Geek_Candice","note":"","ucode":"0F2CBCF624F905","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":414186,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636684988,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1617369,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/FqWrN8aNrlXEfo2YeDeCRuWMZ57VzsNC0aibkEIdiaNBdUVPjlBXrg9F4Eb8uMFYckuSgmXQ49vT6SHoicAjeEGdA/132","nickname":"Geek_558387","note":"","ucode":"2EA857EBC365B5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308951,"discussion_content":"这逼装的满分啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601130705,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173661,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1579655227,"is_pvip":false,"discussion_count":8,"race_medal":1,"score":"126133706811","product_id":100039001,"comment_content":"在获取主机名失败的时候，generate函数应该能正常返回，因为是随机id，所以只要有个满足要求的id就行了，用户并不关心能不能拿到主机名字，所以在获取主机名失败的时候，可以返回一个默认的主机名，之后在拼接上时间戳和随机数也是满足需求的id，所以我认为generate函数在主机名失败的时候应该使用默认主机名正常返回。另外对于小王的异常处理我认为是可以捕获处理的，只是不能该让整个函数都返回一个空id，而是应该捕获异常时使用一个默认主机名继续后面的逻辑。<br>第二个问题：为了隐藏代码实现细节，我们把 getLastSubstrSplittedByDot(String hostName) 函数命名替换成 getLastSubstrByDelimiter(String hostName)，这样是否更加合理？为什么？<br>我认为是合理的，命名和代码的逻辑不绑定，避免了以后修改代码逻辑还要修改函数名的麻烦，比如将来可能不用点去分割hostname了，用空格分割，这时byDot函数名就不合适了，如果修改，那么所有使用到这个函数的地方都要改，大大增加了出错的概率。","like_count":30,"discussions":[{"author":{"id":1905357,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/12/cd/55e25527.jpg","nickname":"咕咕噜噜","note":"","ucode":"E9045BF11FAB7C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":221070,"discussion_content":"我觉得还是应该根据业务需求来判断，拿到的主机名为空是什么原因？会影响业务吗？如果允许主机名为空属于正常情况且不影响业务，完全不需要抛异常啥的，正常返回id就可以。但是如果主机名为空会影响业务需求那就不应该兼容这个错误，直接往上面抛异常就可以了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585970894,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2234620,"avatar":"https://static001.geekbang.org/account/avatar/00/22/18/fc/4f92ee4e.jpg","nickname":"江南一笑","note":"","ucode":"E38938A1178827","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1905357,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/12/cd/55e25527.jpg","nickname":"咕咕噜噜","note":"","ucode":"E9045BF11FAB7C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378019,"discussion_content":"即便主机名会为空影响了业务需求，也不应该有这个id generator来发现这个问题。而应该由其他相关的业务代码去发现这个问题。id generator就是用来生成id的，不应该耦合其他职责。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1623020399,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":221070,"ip_address":""},"score":378019,"extra":""}]},{"author":{"id":2076251,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/ae/5b/4bd42286.jpg","nickname":"宋计洋","note":"","ucode":"9A34E8F71C6CBD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558395,"discussion_content":"我觉得抛不抛出都是可以的，取决于写这个函数的人，我们在使用一些工具类的时候也会参考文档或注释看他会不会抛出异常。我更倾向于抛出，hostName按理只在启动时获取一次就行了，在应用启动时，没有报错，我们可以断定它运行中也不会报错，启动时报错了，这要去找原因","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648278695,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1609051,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8d/5b/383a49e4.jpg","nickname":"charmsongo","note":"","ucode":"4FBEE716E93A1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":405975,"discussion_content":"赞同","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634686462,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2347137,"avatar":"https://static001.geekbang.org/account/avatar/00/23/d0/81/d5c8e46e.jpg","nickname":"snake","note":"","ucode":"47BFFE4D048156","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":345054,"discussion_content":"是的，跟我想的差不多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611648888,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1132661,"avatar":"https://static001.geekbang.org/account/avatar/00/11/48/75/02b4366a.jpg","nickname":"乘坐Tornado的线程魔法师","note":"","ucode":"C4C9915866E769","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":159190,"discussion_content":"总体赞成，具体来说，“另外对于小王的异常处理我认为是可以捕获处理的，只是不能该让整个函数都返回一个空id，而是应该捕获异常时使用一个默认主机名继续后面的逻辑”，这就意味着不向上抛出异常，对嘛？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580656417,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1132337,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","nickname":"小晏子","note":"","ucode":"3AAA6FB5ACB6AE","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":1132661,"avatar":"https://static001.geekbang.org/account/avatar/00/11/48/75/02b4366a.jpg","nickname":"乘坐Tornado的线程魔法师","note":"","ucode":"C4C9915866E769","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":159351,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580688702,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":159190,"ip_address":""},"score":159351,"extra":""}]},{"author":{"id":1102357,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d2/15/4d43d05a.jpg","nickname":"天空只能仰望？","note":"","ucode":"D87BF6A57DAB42","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":158639,"discussion_content":"比较赞成这个观点，和我想的差不多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580610394,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173807,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1579702030,"is_pvip":true,"discussion_count":7,"race_medal":0,"score":"91774015246","product_id":100039001,"comment_content":"这两期争哥讲重构，我把Uncle Bob的《重构2》的第一章看了，大呼过瘾。自己也要操刀试一下！<br><br>他和Kent Beck强调重构时要用baby step（小步骤），什么是baby step呢？就是一次改一小点，例如改一个变量名字都需要进行 modify-build-test的步骤。<br><br>对于争哥的例子，我参考Uncle Bob书中的方法：<br>第一步、先写好测试<br>第二步、开始逐步重构（baby step）<br>第三步、修改-&gt; 测试<br><br>经过重构之后代码总计50行。重构之后代码易读，且结构清晰。<br>https:&#47;&#47;github.com&#47;gdhucoder&#47;Algorithms4&#47;blob&#47;master&#47;designpattern&#47;u35&#47;RandomLogTraceIDGenerator.java","like_count":22,"discussions":[{"author":{"id":1474356,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI3F4IdQuDZrhN8ThibP85eCiaSWTYpTrcC6QB9EoAkw3IIj6otMibb1CgrS1uzITAnJmGLXQ2tgIkAQ/132","nickname":"cugphoenix","note":"","ucode":"80101AF04C00D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":204472,"discussion_content":"看了GitHub代码，感觉formatID这个函数起名不好，从名称+参数列表看上去，并不会知道里面还会额外加上一个“时间”","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1584177326,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1474356,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI3F4IdQuDZrhN8ThibP85eCiaSWTYpTrcC6QB9EoAkw3IIj6otMibb1CgrS1uzITAnJmGLXQ2tgIkAQ/132","nickname":"cugphoenix","note":"","ucode":"80101AF04C00D3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":204480,"discussion_content":"好的，谢谢建议！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584178739,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":204472,"ip_address":""},"score":204480,"extra":""}]},{"author":{"id":1092169,"avatar":"https://static001.geekbang.org/account/avatar/00/10/aa/49/51790edb.jpg","nickname":"落尘kira","note":"","ucode":"D203B519E43F85","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":256610,"discussion_content":"重构里面有个分歧点是 究竟写多少代码才需要写/运行一次单元测试用例，有的人喜欢全部写完后补，有的人喜欢写一个就补一个；我的想法是 看项目进度：如果是时间紧张，尤其是倒排期或者紧急的需求，要保证对接方能早点联调，我们就需要先快速发布一些接口上去，早点完成部分接口可调，加快进度，这就适合前者；否则就是后者，慢慢写嘛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588503715,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":176024,"discussion_content":"你们GitHub叫啥？我 wyyl1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582015802,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":176055,"discussion_content":"get!我的gdhucoder ","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1582018738,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":176024,"ip_address":""},"score":176055,"extra":""}]},{"author":{"id":1254392,"avatar":"https://static001.geekbang.org/account/avatar/00/13/23/f8/24fcccea.jpg","nickname":"💢 星星💢","note":"","ucode":"A402B765222C35","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":174993,"discussion_content":"向辣么大 大哥 靠齐。好欣赏你，不知道咋关注你的动态。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581947676,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1254392,"avatar":"https://static001.geekbang.org/account/avatar/00/13/23/f8/24fcccea.jpg","nickname":"💢 星星💢","note":"","ucode":"A402B765222C35","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":175545,"discussion_content":"加油加油，都是普通人，哪有什么厉害的。github互相关注吧😀你叫啥？我github经常更新push代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581977905,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":174993,"ip_address":""},"score":175545,"extra":""}]}]},{"had_liked":false,"id":179497,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1582016196,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"61711558340","product_id":100039001,"comment_content":"小争哥一波英文注释，猝不及防啊","like_count":14,"discussions":[{"author":{"id":2159964,"avatar":"https://static001.geekbang.org/account/avatar/00/20/f5/5c/86e87361.jpg","nickname":"default","note":"","ucode":"21FF7DA4A8C4FF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333408,"discussion_content":"用英文注释  突然感觉代码高大上了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607514289,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173808,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1579702532,"is_pvip":true,"replies":[{"id":"67723","content":"也可以，不过尽量的缩小变量的作用域，代码可读性也好，毕竟random只会用在某个函数中，而不是用在多个函数中，放到局部函数中，也符合封装的特性，不暴露太多细节。","user_name":"作者回复","comment_id":173808,"uid":"1190123","ip_address":"","utype":1,"ctime":1580114083,"user_name_real":"王争"}],"discussion_count":3,"race_medal":0,"score":"48824342788","product_id":100039001,"comment_content":"对于在ID generator中方法里写到<br>void foo(){<br>    Random random = new Random();<br>}<br>有个疑问：<br><br>1、为什么不声明成静态变量？<br>2、能用成员变量么？而不是写成局部变量<br>","like_count":11,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482208,"discussion_content":"也可以，不过尽量的缩小变量的作用域，代码可读性也好，毕竟random只会用在某个函数中，而不是用在多个函数中，放到局部函数中，也符合封装的特性，不暴露太多细节。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1580114083,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1475866,"avatar":"https://static001.geekbang.org/account/avatar/00/16/85/1a/fc016813.jpg","nickname":"萧潇","note":"","ucode":"1FA83092845507","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":401420,"discussion_content":"。。。这玩意不是线程安全的啊 想静态就用ThreadLocalRandom","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633664172,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1220273,"avatar":"https://static001.geekbang.org/account/avatar/00/12/9e/b1/758f2fe7.jpg","nickname":"香","note":"","ucode":"121D6CECECEEC3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340254,"discussion_content":"我赞同，变量作用域尽可能小。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609938373,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":209180,"user_name":"林子er","can_delete":false,"product_type":"c1","uid":1629256,"ip_address":"","ucode":"85637288F22CF0","user_header":"https://static001.geekbang.org/account/avatar/00/18/dc/48/9796286e.jpg","comment_is_top":false,"comment_ctime":1587517511,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40242223175","product_id":100039001,"comment_content":"更正我的上一条回复。个人觉得从类名RandomIdGenerator看，并没有告知外界这里跟hostName有关，因而如果抛出hostName异常，对外界来说不是期望的异常结果：我只是要个随机数组成的id，跟hostName有何关系？更好的做法是生成器内部自动切换成其他随机算法（hostName只是众多随机策略的一种）。相反如果类名中包含了hostName字眼，则要抛出异常。","like_count":9},{"had_liked":false,"id":173681,"user_name":"evolution","can_delete":false,"product_type":"c1","uid":1088402,"ip_address":"","ucode":"105C59822BF75B","user_header":"https://static001.geekbang.org/account/avatar/00/10/9b/92/c0863297.jpg","comment_is_top":false,"comment_ctime":1579659536,"is_pvip":false,"replies":[{"id":"67726","content":"感谢认可，暂时没有呢","user_name":"作者回复","comment_id":173681,"uid":"1190123","ip_address":"","utype":1,"ctime":1580115107,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"40234365200","product_id":100039001,"comment_content":"代码的演变过程，真的是干货满满。不知道争哥有没有架构方面的演变课程？","like_count":9,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482165,"discussion_content":"感谢认可，暂时没有呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580115107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1216284,"avatar":"https://static001.geekbang.org/account/avatar/00/12/8f/1c/1c728388.jpg","nickname":"皮卡皮卡","note":"","ucode":"D440EEC7301C76","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":147943,"discussion_content":"极客时间有从零学架构的课程了，目前学习的人还挺多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579682214,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":258326,"user_name":"郑大钱","can_delete":false,"product_type":"c1","uid":1503067,"ip_address":"","ucode":"114CF48056880E","user_header":"https://static001.geekbang.org/account/avatar/00/16/ef/5b/ff28088f.jpg","comment_is_top":false,"comment_ctime":1604387421,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31669158493","product_id":100039001,"comment_content":"看到评论我很吃惊，居然还有人认为这个课程不好。调整了心态，对自己说不同人都有不同的理解。<br>感谢争哥，感谢你的分享，你的课程确实帮到了我，让我长成了一个更好的程序员。<br><br>由于客户端的模版模式，通常都是系统方法里完成业务代码，如果业务代码太多，再把业务代码抽象成函数或模块。<br>如果一开始就预见业务代码会多到需要拆分，才会应用自己浅薄的设计思路来编写代码。<br>由于代码都是根据需求“生长”出来的，所以对异常和边界的处理非常薄弱。往往是测试同学发现缺失的异常逻辑，线上用户撞出没考虑到的边界条件，这些都指出你不是一个靠谱的程序员。<br>“单元测试依赖函数的定义”提醒我要主动定义一个有边界的函数、模块。这也有助于遵循里式替换，保持函数的流程正确。","like_count":7},{"had_liked":false,"id":174184,"user_name":"javaadu","can_delete":false,"product_type":"c1","uid":1000519,"ip_address":"","ucode":"8C0B140F1C8992","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg","comment_is_top":false,"comment_ctime":1580051067,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"23054887547","product_id":100039001,"comment_content":"1. 目前习惯是抛异常，并且是包装过的业务异常，这样写代码，调用方拿到结果后不需要再处理特殊结果的情况；另外，这个问题还涉及到异常处理的思路，异常处理可以在模块的最上层做统一的捕获和转换，每层都捕获太麻烦了，也会影响代码的可读性<br>2. 这个名字目前是专门为.这种分隔符服务的，考虑到传入的参数就是主机名，如果有计划将该方法设计的更通用，那么也要将这个方法换个位置，抽取到某个字符串工具类中","like_count":5},{"had_liked":false,"id":173901,"user_name":"此鱼不得水","can_delete":false,"product_type":"c1","uid":1257453,"ip_address":"","ucode":"95268E823FB4D2","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/ed/a87bb8fa.jpg","comment_is_top":false,"comment_ctime":1579769457,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23054605937","product_id":100039001,"comment_content":"问题1：<br>首先要明白当前业务Id生成类的业务使用场景，因为是日志id（能接受部分重复），而日志又是非核心链路的业务，所以这里我认为应该在异常的时候返回一个默认值比较合适。<br>如果返回了异常信息的话，那上层业务难道要每次记录日志的时候都直接捕获异常处理吗？未必太麻烦了<br>如果当前的id生成代码是在重要的业务场景中使用的话，那就有必要抛出异常信息，让业务趁早的感知到问题。<br>问题2：<br>这里的名字已经不需要进一步修改了，已经到了业务实现的末端环节，没必要为了扩展而扩展，毕竟现在的方法名字可读性能佳。<br>","like_count":5},{"had_liked":false,"id":234280,"user_name":"HYH","can_delete":false,"product_type":"c1","uid":1103960,"ip_address":"","ucode":"F2A339CC9AC594","user_header":"https://static001.geekbang.org/account/avatar/00/10/d8/58/1f5f7aed.jpg","comment_is_top":false,"comment_ctime":1594632862,"is_pvip":false,"replies":[{"id":"86610","content":"拆出来的目的并非为了单元测试，更重要的是逻辑清晰，可读性好。之所以设置成potected的，是因为private的没法写单元测试。","user_name":"作者回复","comment_id":234280,"uid":"1190123","ip_address":"","utype":1,"ctime":1594781420,"user_name_real":"王争"}],"discussion_count":3,"race_medal":0,"score":"18774502046","product_id":100039001,"comment_content":"老師你好，想問一下有關測試的問題RandomIdGeneratorTest，為什麼不是分幾個Test Case去對generate做測試而是要拆出protected方法去做測試呢？","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501337,"discussion_content":"拆出来的目的并非为了单元测试，更重要的是逻辑清晰，可读性好。之所以设置成potected的，是因为private的没法写单元测试。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594781420,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1103960,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d8/58/1f5f7aed.jpg","nickname":"HYH","note":"","ucode":"F2A339CC9AC594","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291363,"discussion_content":"增加可读性这部分了解了，那是否我也可以拆出private方法就好，而统一透过generate去测试里面所有private的相关逻辑呢？这样的方法是否有不妥之处？\n谢谢老师的回答","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594793119,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1103960,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d8/58/1f5f7aed.jpg","nickname":"HYH","note":"","ucode":"F2A339CC9AC594","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589067,"discussion_content":"好问题啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664377997,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":291363,"ip_address":"北京"},"score":589067,"extra":""}]}]},{"had_liked":false,"id":173754,"user_name":"一颗大白菜","can_delete":false,"product_type":"c1","uid":1321226,"ip_address":"","ucode":"4A15D1CECD1853","user_header":"https://static001.geekbang.org/account/avatar/00/14/29/0a/0ba09c68.jpg","comment_is_top":false,"comment_ctime":1579679690,"is_pvip":false,"replies":[{"id":"67727","content":"好像没有吧","user_name":"作者回复","comment_id":173754,"uid":"1190123","ip_address":"","utype":1,"ctime":1580115294,"user_name_real":"王争"}],"discussion_count":5,"race_medal":0,"score":"14464581578","product_id":100039001,"comment_content":"34行代码是不是写错了？<br>Assert.assertTrue((&#39;0&#39; &lt; c &amp;&amp; c &gt; &#39;9&#39;) || (&#39;a&#39; &lt; c &amp;&amp; c &gt; &#39;z&#39;) || (&#39;A&#39; &lt; c &amp;&amp; c &lt; &#39;Z&#39;));","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482197,"discussion_content":"好像没有吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580115294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1098286,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c2/2e/c4a527d9.jpg","nickname":"blacknhole","note":"","ucode":"271682FFE28F25","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":156473,"discussion_content":"还应包含边界，也即应改为：\nAssert.assertTrue((&#39;0&#39; <= c &amp;&amp; c <= &#39;9&#39;) || (&#39;a&#39; <= c &amp;&amp; c <= &#39;z&#39;) || (&#39;A&#39; <= c &amp;&amp; c <= &#39;Z&#39;));","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1580369178,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1098286,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c2/2e/c4a527d9.jpg","nickname":"blacknhole","note":"","ucode":"271682FFE28F25","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":156468,"discussion_content":"当然错了，应该是：\nAssert.assertTrue((&#39;0&#39; < c &amp;&amp; c < &#39;9&#39;) || (&#39;a&#39; < c &amp;&amp; c < &#39;z&#39;) || (&#39;A&#39; < c &amp;&amp; c < &#39;Z&#39;));","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1580368409,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1236953,"avatar":"https://static001.geekbang.org/account/avatar/00/12/df/d9/a90b2488.jpg","nickname":"learning","note":"","ucode":"14CE94C24F9C87","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":218993,"discussion_content":"前两个都是c大于某个值，你这测试用例真的运行了么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585721379,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1596868,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/YJHQDzuLavGFmwunybBiaBrrU1aOib7Siam0fJrWIaHfdT0p2GicsRT42d9bhRNO324wewDtic8RiaokAFkUyO3YRF0g/132","nickname":"胡子高兴了","note":"","ucode":"A32AE341E3683D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":164438,"discussion_content":"要加=号","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581174714,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":291325,"user_name":"王泽","can_delete":false,"product_type":"c1","uid":1657304,"ip_address":"","ucode":"726A5F21BE7390","user_header":"https://static001.geekbang.org/account/avatar/00/19/49/d8/533b1968.jpg","comment_is_top":false,"comment_ctime":1620206954,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"10210141546","product_id":100039001,"comment_content":"看到 Delimiter 就在想，提不提倡用函数默认值呢？比如 getLastSubstrByDelimiter(hostName, delimiter = &#39;.&#39;)","like_count":2,"discussions":[{"author":{"id":1200650,"avatar":"https://static001.geekbang.org/account/avatar/00/12/52/0a/65976e95.jpg","nickname":"kougazhang","note":"","ucode":"E9AD678FCEC75D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539272,"discussion_content":"python行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639653874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":246510,"user_name":"小乙哥","can_delete":false,"product_type":"c1","uid":1063308,"ip_address":"","ucode":"C77E79BEA0C325","user_header":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","comment_is_top":false,"comment_ctime":1599384794,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10189319386","product_id":100039001,"comment_content":"1.抛出不抛出异常，关键要看使用generate的方式。如果调用generate的地方，收到异常之后，也没有办法处理，那么返回特殊ID、null、空字符串，肯定要好于抛出异常。同时，特殊ID因为是一种特殊标识，查看日志的时候，能够很快知道是因为主机名获取不到的原因，所以特殊ID要好于null和空字符串。返回null有可能造成NPE，所以空字符串要好于null。如果调用方能够处理这种异常，比如采用降级方案等，这个时候异常是绝对不能吞掉的<br>2.如果不明确函数细节，建议增加第二个参数delimiter，让调用者指定分隔符。不然明确细节的函数名会相对好一点","like_count":2},{"had_liked":false,"id":232539,"user_name":"冬渐暖","can_delete":false,"product_type":"c1","uid":1586800,"ip_address":"","ucode":"907E41AAE9A36C","user_header":"https://static001.geekbang.org/account/avatar/00/18/36/70/00122b24.jpg","comment_is_top":false,"comment_ctime":1594031093,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10183965685","product_id":100039001,"comment_content":"代码重构流程<br>●第一轮重构:提高代码的可读性。如改魔法值、提取公共方法、将不同的实现封装起来、对复杂的某一段抽成单个方法、修改命名<br>●第二轮重构:提高代码的可测试性。比如将原本private的方法改成protect(后面要改回来的，只是方便再test类可以直接调用)。将容易被外部控制或者无关的数据封装成方法(下次调的时候直接把这些数据弄成假数据来测试，那些没必要的就不用测了)<br>●第三轮重构:编写完善的单元测试。针对里面不同的方法做更细测试，但我平常都是直接debug进去，直接看这一系列方法的对应结果的。<br>●第四轮重构:所有重构完成之后添加注释。<br>","like_count":2},{"had_liked":false,"id":174021,"user_name":"牛顿的烈焰激光剑","can_delete":false,"product_type":"c1","uid":1042022,"ip_address":"","ucode":"C57018C65DAFB3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e6/66/fbbf0bb1.jpg","comment_is_top":false,"comment_ctime":1579882745,"is_pvip":false,"replies":[{"id":"67714","content":"有可能hostname会改变，你的代码就获取不到最新的hostname","user_name":"作者回复","comment_id":174021,"uid":"1190123","ip_address":"","utype":1,"ctime":1580112152,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"10169817337","product_id":100039001,"comment_content":"老师，对于获取 hostname（getLastfieldOfHostName()），我的想法是用 static 代码块，只在类加载的时候执行一次。请问这样处理的话会不会有什么坏处？","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482275,"discussion_content":"有可能hostname会改变，你的代码就获取不到最新的hostname","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580112152,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1217874,"avatar":"https://static001.geekbang.org/account/avatar/00/12/95/52/ad190682.jpg","nickname":"Mr wind","note":"","ucode":"484F02D1962239","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":152152,"discussion_content":"需要考虑的是主机名的更改，以及第一次加载有异常。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579947135,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173727,"user_name":"Ken张云忠","can_delete":false,"product_type":"c1","uid":1134288,"ip_address":"","ucode":"D0BAC9FC17DE2B","user_header":"https://static001.geekbang.org/account/avatar/00/11/4e/d0/d8a5f720.jpg","comment_is_top":false,"comment_ctime":1579670898,"is_pvip":false,"replies":[{"id":"67725","content":"我英语也不好，多花点心思优化一下，实在不行，写中文注释也是可以的","user_name":"作者回复","comment_id":173727,"uid":"1190123","ip_address":"","utype":1,"ctime":1580114185,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"10169605490","product_id":100039001,"comment_content":"读小争哥的注释就是种欣赏,小争哥的英文表达是怎么一步步积累的?<br>我认为动词和介词是英文的精髓,还有英文的语法","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482183,"discussion_content":"我英语也不好，多花点心思优化一下，实在不行，写中文注释也是可以的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580114185,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589068,"discussion_content":"小争哥在Google时不用英文交流？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664378154,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298844,"user_name":"青年祭司","can_delete":false,"product_type":"c1","uid":1259156,"ip_address":"","ucode":"C88EDAE3FF09AE","user_header":"https://static001.geekbang.org/account/avatar/00/13/36/94/0b969588.jpg","comment_is_top":false,"comment_ctime":1624344094,"is_pvip":false,"discussion_count":0,"race_medal":5,"score":"5919311390","product_id":100039001,"comment_content":"InetAddress.getLocalHost().getHostName();<br>这段获取的值是不是可以存起来，下次再请求的时候直接取就行了，不用再调用这个函数了，能优化点性能？","like_count":1},{"had_liked":false,"id":274658,"user_name":"Gabriel","can_delete":false,"product_type":"c1","uid":1437358,"ip_address":"","ucode":"714772A93E93DC","user_header":"https://static001.geekbang.org/account/avatar/00/15/ee/ae/855b7e6e.jpg","comment_is_top":false,"comment_ctime":1611113832,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5906081128","product_id":100039001,"comment_content":"要是我写这个功能估计就和小王是一样的，写一个类，然后一个方法返回就是了。可能我这就是我与大神大差距，大神在写随机生成ID的时候，会想随机生成具体是要做什么的，就像这个是要记录id，然后这个随机id要怎么写，就像这个栗子随机生成id是有三部分组成（hostname+timestamp+nonstr)这样的，然后根据一个业务三个方法，像小王写的，就没有实现单一原则。大神写代码，更加是思想往上层，而不是简单实现业务逻辑就好。学完这堂课，我希望我首先要 转变的整个思考观念和做事方法","like_count":1},{"had_liked":false,"id":256238,"user_name":"Jupiter","can_delete":false,"product_type":"c1","uid":2125382,"ip_address":"","ucode":"072E5C34CDE8AC","user_header":"https://static001.geekbang.org/account/avatar/00/20/6e/46/a612177a.jpg","comment_is_top":false,"comment_ctime":1603576041,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5898543337","product_id":100039001,"comment_content":"每一次课学完 我都会去看一下评论，因为有的评论也很精彩，有些是一些可爱的小伙伴给出的补充，有的时候针对某个细节 争哥跟我们更深入的讨论，这次看到这样一条抱怨的放到了顶部，胃里有些不舒服，所以想说几句，我觉得要抱怨，说不好，需要给出细节，你列出来，我相信争哥也会给你解释明白的。说回到这个课，从到学习到现在，有很多地方会突然领悟，有很多地方很有共鸣，前面说的各种设计原则，在没学习课程之前，我就只知道 SOLID, KISS这俩有名字的，其他的我就只是想着写的代码要考虑重用，高内聚低耦合，能抽出来就抽出来，这个课给了我一个系统的知识，这样在Review别人代码的时候 确实可以很有底气，这也是行业经验的总结，一个人的经验再多，也比不上整个行业总结出来的。另外，希望更多的人看到这些，形成一种意识，这样在Review代码的时候 每个人的心情也就会比较好。其实有时候 还是会有争论，因为我们有规范，在执行的时候 也需要一些主观判断的 例如颗粒度，什么样的是粗的 什么样的是细的。 没有银弹。","like_count":1},{"had_liked":false,"id":236150,"user_name":"流沙","can_delete":false,"product_type":"c1","uid":1040222,"ip_address":"","ucode":"D34D30A1494C63","user_header":"https://static001.geekbang.org/account/avatar/00/0f/df/5e/f709457f.jpg","comment_is_top":false,"comment_ctime":1595329567,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5890296863","product_id":100039001,"comment_content":"generateRandomAlphameric() 和 getLastSubstrSplittedByDot()这两个方法有必要写单测吗？ 我理解这两个方法并不能称之为一个逻辑单元，对它们的测试应该是包含在generate方法的测试中的。<br>换句话说，如果这两个方法存在generate中测不出来的问题，我们也并不关心。<br>而如果认为这两个方法是一个逻辑单元，那就应该是public的","like_count":1},{"had_liked":false,"id":232537,"user_name":"冬渐暖","can_delete":false,"product_type":"c1","uid":1586800,"ip_address":"","ucode":"907E41AAE9A36C","user_header":"https://static001.geekbang.org/account/avatar/00/18/36/70/00122b24.jpg","comment_is_top":false,"comment_ctime":1594030516,"is_pvip":false,"replies":[{"id":"85913","content":"一般来讲，一个单元测试类对应一个类。你说的可能更像是集成测试了。","user_name":"作者回复","comment_id":232537,"uid":"1190123","ip_address":"","utype":1,"ctime":1594112838,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"5888997812","product_id":100039001,"comment_content":"看了下您的代码，请教下 针对同一个service，有必要对各种情况都写一个@test吗？平时我都是一个接口一个test，如果有不同的条件，就直接在这个的入参上面改。 不然某个测试类的代码会很大，也没有必要对一个接口一个类，而是一个综合业务一个test类。","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500684,"discussion_content":"一般来讲，一个单元测试类对应一个类。你说的可能更像是集成测试了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594112838,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231419,"user_name":"Mew151","can_delete":false,"product_type":"c1","uid":1002201,"ip_address":"","ucode":"D4793F5874F345","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/d9/75dd7cf9.jpg","comment_is_top":false,"comment_ctime":1593672026,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5888639322","product_id":100039001,"comment_content":"个人觉得应该把现有的getLastSubstrSplittedByDot实现逻辑变为getLastSubstrByDelimiter的逻辑，然后getLastSubstrSplittedByDot再调用getLastSubstrByDelimiter，如果以后有需求使用别的分隔符，那么在新创建的函数内部也调用getLastSubstrByDelimiter就可以了。","like_count":1},{"had_liked":false,"id":223150,"user_name":"未来小娃","can_delete":false,"product_type":"c1","uid":1047329,"ip_address":"","ucode":"477D166EBB6B70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/21/d017438c.jpg","comment_is_top":false,"comment_ctime":1591009943,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5885977239","product_id":100039001,"comment_content":"【设计模式笔记35】20200601<br>功夫在诗外，细节决定质量。实现一个有特定功能的功夫是基本功，也是作为一名合格开发者的最低要求。那么代码质量的好坏到底区别在哪里呢？我觉得理解三个词：好，更好，最好。什么是好的？就是能用的代码，包括满足需求和能够对异常友好。什么是更好的？就是在好的基础上满足结构合理、具备可读性、可测试性的代码，所谓结构合理是划分清晰，没有大段的代码；所谓可读性就包括代码的命名、注释等；所谓可测试性就是要有单元测试用例，这里的用例不是为了测试而测试，而是想清楚函数具备做了什么事，在此基础上考虑异常情况。最好的指的是在更好的基础上具备扩展性，能够满足未来一定时间的迭代更新，且只需要较小的改动就能适应需求变化，更深层次讲什么是可复用的，多想想哪些是可抽象的。高手的创新很多都是创造了一种新的分类方法，多想想多实践总会有提升","like_count":1},{"had_liked":false,"id":212469,"user_name":"花生无翼","can_delete":false,"product_type":"c1","uid":1015371,"ip_address":"","ucode":"B4AED5CACD2B7A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/4b/001b7f3b.jpg","comment_is_top":false,"comment_ctime":1588129459,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5883096755","product_id":100039001,"comment_content":"做好单元测试，写好英文注释","like_count":1},{"had_liked":false,"id":202791,"user_name":"忆水寒","can_delete":false,"product_type":"c1","uid":1147453,"ip_address":"","ucode":"E3F86BD8AA8903","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","comment_is_top":false,"comment_ctime":1586069157,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5881036453","product_id":100039001,"comment_content":"如果只是通过某个固定符号分割字符，可以不改成函数名，因为这是用于特定场景的。<br>如果以后有扩展要求，支持其他类型的符号，建议改成getLastSubstrByDelimiter(String hostName)。","like_count":1},{"had_liked":false,"id":358512,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1015754,"ip_address":"北京","ucode":"00DF2FEC58D2E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","comment_is_top":false,"comment_ctime":1664378446,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1664378446","product_id":100039001,"comment_content":"个人认为在获取不到hostname时需要抛出异常。原因有2. 第一，获取不到hostname证明程序此时已经出错了，出错了就需要抛出异常，而不是隐藏这个错误；第二，如果给出默认的值，那么就失去了日志的意义，因为会存在多个同样的默认值的日志，不仅仅不利于排查问题，还会影响问题的排查。","like_count":0},{"had_liked":false,"id":347767,"user_name":"邓嘉文","can_delete":false,"product_type":"c1","uid":2332845,"ip_address":"","ucode":"FCEDFABFB48055","user_header":"https://static001.geekbang.org/account/avatar/00/23/98/ad/f9d755f2.jpg","comment_is_top":false,"comment_ctime":1654407129,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654407129","product_id":100039001,"comment_content":"1.<br>我们只是要一个 trice-id 如果这个机器名称一般不重要, 我们应该使用默认值<br>如果业务中这个机器名称很重要, 那就应该抛出异常, 要符合业务场景","like_count":0},{"had_liked":false,"id":343493,"user_name":"恬毅","can_delete":false,"product_type":"c1","uid":1015240,"ip_address":"","ucode":"914ED16F3BE714","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7d/c8/e4727683.jpg","comment_is_top":false,"comment_ctime":1650875028,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650875028","product_id":100039001,"comment_content":"generate() 函数应该返回什么最合适呢？我觉得特殊id或者null都可以，不要抛异常，因为这个属于不是非常重要的功能，抛出异常会影响实际业务。特殊id或者null也能让后续能直接观察到有问题，然后进行改进","like_count":0},{"had_liked":false,"id":336131,"user_name":"woJA1wCgAAcQSG4cC0RrRLQoo4JPVq7Q","can_delete":false,"product_type":"c1","uid":2922217,"ip_address":"","ucode":"331691EB69ACB2","user_header":"","comment_is_top":false,"comment_ctime":1645949625,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645949625","product_id":100039001,"comment_content":"请问静态方法和非静态方案在设计的时候怎么考量呢？虽然做开发了几年，始终觉得没有好的准则。静态方法仅仅是不利于测试，不支持面向对象吗","like_count":0},{"had_liked":false,"id":324722,"user_name":"王智","can_delete":false,"product_type":"c1","uid":1337016,"ip_address":"","ucode":"37D2AD591C1AEC","user_header":"https://static001.geekbang.org/account/avatar/00/14/66/b8/ece79234.jpg","comment_is_top":false,"comment_ctime":1638589867,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1638589867","product_id":100039001,"comment_content":"第一题：<br>我认为不该抛出，这是工具方法，和业务解耦。如果出现异常，最多纪录日志，好定位问题即可。检测手段可以这样——系统启动时候，检测下ID生成器是否正常，如不可用，当时抛出异常，阻止程序启动即可。","like_count":0},{"had_liked":false,"id":321669,"user_name":"我是曾经那个少年","can_delete":false,"product_type":"c1","uid":1015189,"ip_address":"","ucode":"9F02F7FF147D14","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7d/95/dd73022c.jpg","comment_is_top":false,"comment_ctime":1636986180,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636986180","product_id":100039001,"comment_content":"IdGenerator 内部被吞掉了打印日志是合理的，业务中生成ID的方法报错了，也不影响业务的可用性。一些框架也是这个样子处理的。<br><br>getLastSubstrByDelimiter这种其实还好，命名能更抽象还是比具体点好一些。","like_count":0},{"had_liked":false,"id":317484,"user_name":"charmsongo","can_delete":false,"product_type":"c1","uid":1609051,"ip_address":"","ucode":"4FBEE716E93A1A","user_header":"https://static001.geekbang.org/account/avatar/00/18/8d/5b/383a49e4.jpg","comment_is_top":false,"comment_ctime":1634811471,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634811471","product_id":100039001,"comment_content":"1、第一轮重构：提高代码的可读性<br>2、第二轮重构：提高代码的可测试性<br>3、第三轮重构：编写完善的单元测试<br>4、第四轮重构：所有重构完成后添加注释","like_count":0},{"had_liked":false,"id":312343,"user_name":"渠梁","can_delete":false,"product_type":"c1","uid":1488038,"ip_address":"","ucode":"DC86BDEC63C9BC","user_header":"https://static001.geekbang.org/account/avatar/00/16/b4/a6/b6fa2562.jpg","comment_is_top":false,"comment_ctime":1631761249,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1631761249","product_id":100039001,"comment_content":"静态方法不利于单元测试","like_count":0},{"had_liked":false,"id":308397,"user_name":"满坦坦","can_delete":false,"product_type":"c1","uid":1312538,"ip_address":"","ucode":"F810B463F7B665","user_header":"","comment_is_top":false,"comment_ctime":1629599715,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629599715","product_id":100039001,"comment_content":"but the probability of duplication is very low.不感觉这句英文表达别扭吗，不是该把低概率当主要说明么","like_count":0},{"had_liked":false,"id":300198,"user_name":"为一","can_delete":false,"product_type":"c1","uid":2666371,"ip_address":"","ucode":"72BE7F7422E551","user_header":"https://static001.geekbang.org/account/avatar/00/28/af/83/f02bd98a.jpg","comment_is_top":false,"comment_ctime":1625043816,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625043816","product_id":100039001,"comment_content":"老师，单元测试测试私有方法，它通常表示不好的设计。而且在测试里又添加了google代码依赖。能不能不要把访问修饰符改为protected 保持private。我们在测试的时候可以通过反射来调用私有测试方法呢？","like_count":0},{"had_liked":false,"id":298760,"user_name":"猪蹄子🍳","can_delete":false,"product_type":"c1","uid":2649189,"ip_address":"","ucode":"3C4875114716FA","user_header":"https://static001.geekbang.org/account/avatar/00/28/6c/65/d78cceda.jpg","comment_is_top":false,"comment_ctime":1624305662,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624305662","product_id":100039001,"comment_content":"收获很大！这几节复习和实践了前面的理论知识，深入浅出，非常实用。我主要学到的有：<br>1. 魔鬼总在细节处。高质量的代码一定是可测的。<br>2. 分析和设计时考虑扩展性，写代码时考虑可读性和可测试性，测试时考虑完备性和测试的必要性<br>3. 将不可控的行为分离出来，保证可测性，减少测试代码的粒度，也提高了测试效率。","like_count":0},{"had_liked":false,"id":296749,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1623144745,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1623144745","product_id":100039001,"comment_content":"我认为获取不到主机名不能返回固定id,因为这是一个生成唯一ID的函数，如果返回固定ID有违业务要求，异常应该向外继续抛出。也可以返回null,我感觉。","like_count":0},{"had_liked":false,"id":295949,"user_name":"williamcai","can_delete":false,"product_type":"c1","uid":1158294,"ip_address":"","ucode":"B158F52C2D39BC","user_header":"https://static001.geekbang.org/account/avatar/00/11/ac/96/46b13896.jpg","comment_is_top":false,"comment_ctime":1622681437,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622681437","product_id":100039001,"comment_content":"问题1，我个人认为应该抛出异常，因为主机名属于生成id的一部分，必须有;<br>问题2，还是用第一个名称，因为就是用点来分隔的<br>","like_count":0},{"had_liked":false,"id":293487,"user_name":"JKwar","can_delete":false,"product_type":"c1","uid":1047466,"ip_address":"","ucode":"B733CA24D5701F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/aa/01fedf6c.jpg","comment_is_top":false,"comment_ctime":1621407410,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1621407410","product_id":100039001,"comment_content":"课堂讨论1：generate函数应该返回异常，因为 generate 函数的功能是获取随机的 id。异常处理不得当，应该继续往上抛，由一个总得异常出来来捕获。<br>课堂讨论2：合理，因为命名代表要实现函数的功能，应该隐藏实现细节，避免以后修改代码还要修改函数名。","like_count":0},{"had_liked":false,"id":292985,"user_name":"瀚海","can_delete":false,"product_type":"c1","uid":2062203,"ip_address":"","ucode":"E64C22F3F6D285","user_header":"https://static001.geekbang.org/account/avatar/00/1f/77/7b/338c4617.jpg","comment_is_top":false,"comment_ctime":1621141334,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621141334","product_id":100039001,"comment_content":"内容很细致。      赞👍","like_count":0},{"had_liked":false,"id":286060,"user_name":"Geek_86eac6","can_delete":false,"product_type":"c1","uid":1787022,"ip_address":"","ucode":"8C02E398CC6A35","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI4CBQHuLDWOdicOl1elTdSicqMyY1s5JDWXiaHsSk0VSWaVe0U6CTo701ZGz9h6MvibsAGKnvVq7xxFw/132","comment_is_top":false,"comment_ctime":1617146256,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617146256","product_id":100039001,"comment_content":"这个专栏挺好的，贴合实战的场景，逐步拆解需求，实现，重构","like_count":0},{"had_liked":false,"id":286059,"user_name":"Geek_86eac6","can_delete":false,"product_type":"c1","uid":1787022,"ip_address":"","ucode":"8C02E398CC6A35","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI4CBQHuLDWOdicOl1elTdSicqMyY1s5JDWXiaHsSk0VSWaVe0U6CTo701ZGz9h6MvibsAGKnvVq7xxFw/132","comment_is_top":false,"comment_ctime":1617145364,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617145364","product_id":100039001,"comment_content":"对于问题1，我认为不仅要记录日志，还需要跑出一个自定义异常，让调用者去处理。<br>对于问题2，我认为改名称是合理的，名称不需要暴露细节，体现功能就可以了，因为名称的长度是有限制的，不可能覆盖到所有细节。","like_count":0},{"had_liked":false,"id":286012,"user_name":"星夜","can_delete":false,"product_type":"c1","uid":1128491,"ip_address":"","ucode":"3B46C09D994CEB","user_header":"https://static001.geekbang.org/account/avatar/00/11/38/2b/9db9406b.jpg","comment_is_top":false,"comment_ctime":1617104320,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617104320","product_id":100039001,"comment_content":"1.一种方式是仍然生成ID，不过生成的ID要做些标记，例如将ID第一部分扩充为四位数，其中首位数只能为1（有主机名）或2（无主机名），或者干脆将这部分功能作为配置项，可由使用者自由选择如何处理，当然无主机名的情况要做好日志，具体是否抛出异常要看场景下主机名对于Id是否必须。<br>2.方法名的替换不合理，主要实现与方法名不一致了。","like_count":0},{"had_liked":false,"id":284617,"user_name":"Maples story","can_delete":false,"product_type":"c1","uid":1229987,"ip_address":"","ucode":"83CB4DE1E707D1","user_header":"https://static001.geekbang.org/account/avatar/00/12/c4/a3/56f398f1.jpg","comment_is_top":false,"comment_ctime":1616390844,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616390844","product_id":100039001,"comment_content":"醍醐灌顶","like_count":0},{"had_liked":false,"id":284025,"user_name":"破茧成蝶","can_delete":false,"product_type":"c1","uid":1063640,"ip_address":"","ucode":"36F9F88BE949F8","user_header":"https://static001.geekbang.org/account/avatar/00/10/3a/d8/38edca17.jpg","comment_is_top":false,"comment_ctime":1616041745,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616041745","product_id":100039001,"comment_content":"@Wings 说这个栏目讲得不好的人,就好比以前有人看过Ｃ＋＋圣经说C++并不难啊,不过如此,他不知道有些东西,既是入门,也是登顶,每次去读都有不同的收获和感悟,同样这个栏目也达到了这个水准,我看过不少的设计模式的书,这个栏目是我见过讲解设计模式最好的,没有之一","like_count":0},{"had_liked":false,"id":283934,"user_name":"牧云子","can_delete":false,"product_type":"c1","uid":2344693,"ip_address":"","ucode":"02A3E715238C9E","user_header":"https://static001.geekbang.org/account/avatar/00/23/c6/f5/c7432d35.jpg","comment_is_top":false,"comment_ctime":1615988374,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1615988374","product_id":100039001,"comment_content":"为什么静态函数不可测啊，想不明白","like_count":0,"discussions":[{"author":{"id":1676247,"avatar":"https://static001.geekbang.org/account/avatar/00/19/93/d7/93c8f92a.jpg","nickname":"斜杠ing...","note":"","ucode":"C4AE866AC8B9AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":68427,"discussion_content":"大话设计真的不如看 设计模式之禅","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1575210739,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2690172,"avatar":"","nickname":"Geek_设计模式之美","note":"","ucode":"59263416E65594","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385239,"discussion_content":"大话  不错啊 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626952362,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1643349,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/MQ8YibHlGicBDWNLy4JTzmW21sHbG6pDQxyKNJR8rCfU4yF4HSdGeDodUrM2iaJdWEYNC1QFvd4rqSSUM37OOIAeA/132","nickname":"birkhoff","note":"","ucode":"8FED5E1B20C080","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":192509,"discussion_content":"大话设计模式，大话数据结构都是不错的基础书籍，很适合入门级选手，通俗易懂。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583075665,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1171829,"avatar":"https://static001.geekbang.org/account/avatar/00/11/e1/75/bbdf9052.jpg","nickname":"饭太司替可","note":"","ucode":"9A47FCA16199B0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70594,"discussion_content":"大话和HF都买了，HF先看的，看完了，大话看了一点，感觉HF更推荐看，相比于大话里面有一些有意思的元素，关于修行的，修炼内功的。看完了可以再看看大话，毕竟两本书的风格不一样，而且至少可以多接触一些设计模式的案例。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575371685,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1171829,"avatar":"https://static001.geekbang.org/account/avatar/00/11/e1/75/bbdf9052.jpg","nickname":"饭太司替可","note":"","ucode":"9A47FCA16199B0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70746,"discussion_content":"好的，谢谢建议！我也找来参考一下！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575379232,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":70594,"ip_address":""},"score":70746,"extra":""}]},{"author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":67708,"discussion_content":"当初我在《Head First设计模式》和《大话设计模式》之间选择了前者，后者我同学学过，我们学校设计模式的参考教材也是你的这本书呢，搞起来，感谢你的分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575170340,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":67747,"discussion_content":"好的，谢谢。 Head First 设计模式我也找来参考一下！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575173186,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":67708,"ip_address":""},"score":67747,"extra":""}]}]},{"had_liked":false,"id":282649,"user_name":"Chloe","can_delete":false,"product_type":"c1","uid":1004953,"ip_address":"","ucode":"C4848ED5B35752","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/99/4bdadfd3.jpg","comment_is_top":false,"comment_ctime":1615350111,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615350111","product_id":100039001,"comment_content":"谢谢老师，满满的实战经验，很受教。关于getLastSubstrByDelimiter(String hostName) 的命名，我认为比getLastSubstrByDot(String hostName) 好，更具通用性，但是同时delimiter就需要被传入了，否则无法得知delimiter具体是什么","like_count":0},{"had_liked":false,"id":281467,"user_name":"超超超超超帅耶🌴","can_delete":false,"product_type":"c1","uid":1266987,"ip_address":"","ucode":"931E23DC0ACB04","user_header":"https://static001.geekbang.org/account/avatar/00/13/55/2b/b7927cc4.jpg","comment_is_top":false,"comment_ctime":1614757902,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614757902","product_id":100039001,"comment_content":"我觉得如果这个hostName不重要的话其实可以直接返回一个null也没事，我觉得不能因为底层无关紧要的问题影响上层","like_count":0},{"had_liked":false,"id":275570,"user_name":"余靖","can_delete":false,"product_type":"c1","uid":1244315,"ip_address":"","ucode":"D02780B864F8BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/fc/9b/b19762eb.jpg","comment_is_top":false,"comment_ctime":1611586064,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611586064","product_id":100039001,"comment_content":"理论部分能通俗易懂，实战部分由于偏Java的业务较多，对于非Java开发的人来说，能大概看懂，但是印象不深刻，对其中的很多概念不太明白。","like_count":0},{"had_liked":false,"id":275361,"user_name":"机车","can_delete":false,"product_type":"c1","uid":1881786,"ip_address":"","ucode":"CD32A645AE310A","user_header":"https://static001.geekbang.org/account/avatar/00/1c/b6/ba/f76d996b.jpg","comment_is_top":false,"comment_ctime":1611488389,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611488389","product_id":100039001,"comment_content":"接口命名那里，LogTraceIdGenerator上抽象出 idGenerator，是为了其它业务的 xxxIdGenerator 也去继承 idGenerator 吗？那这样做抽出 idGenerator 的意义是什么呢？","like_count":0},{"had_liked":false,"id":270644,"user_name":"江南一笑","can_delete":false,"product_type":"c1","uid":2234620,"ip_address":"","ucode":"E38938A1178827","user_header":"https://static001.geekbang.org/account/avatar/00/22/18/fc/4f92ee4e.jpg","comment_is_top":false,"comment_ctime":1609205241,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609205241","product_id":100039001,"comment_content":"1. 我觉得host name获取失败的时候，应该在函数内部就地处理，比如生成长度相同的随机字符串来顶替last field of host name.  因为调用 id generator的任务就是生成唯一id，尽量不把这个异常抛到上一层去。自己的问题自己解决。<br>2，不会更合理。by dot非常直观明确、没有歧义。为什么要by delimiter. ","like_count":0},{"had_liked":false,"id":268936,"user_name":"落尘","can_delete":false,"product_type":"c1","uid":1802622,"ip_address":"","ucode":"7B76B94CA301D7","user_header":"https://static001.geekbang.org/account/avatar/00/1b/81/7e/fb688b5c.jpg","comment_is_top":false,"comment_ctime":1608437681,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608437681","product_id":100039001,"comment_content":"课堂讨论：<br>1.在log的应用场景下generate()函数应该返回null，getLastfieldOfHostName()方法上的注释很明确的表示如果没有获取到主机名则返回null。当然，这样一来在获取不到主机名的场景下，ID重复的概率就有增大了，只是对log来说应该还是可以接受的。但是如果换一种对唯一性要求更高的场景（争哥这里本来就预留了其他业务场景的接口），实现可能就应该是向上抛出异常，这样一来也要考虑到里氏替换原则，接口上的注释就需要更加泛用（争哥这里没有列出来）<br>2.getLastSubstrSplittedByDot(String hostName) 函数没有必要修改函数名，因为当前已经是最低权限的private函数（这里是protected实际上代表private）作用域小，涉及业务处理细节，而且针对主机名的处理应该只有dot的情况（这里我也不清楚，猜测）","like_count":0},{"had_liked":false,"id":265712,"user_name":"淤白","can_delete":false,"product_type":"c1","uid":1206503,"ip_address":"","ucode":"D1E65DC40DAF68","user_header":"https://static001.geekbang.org/account/avatar/00/12/68/e7/ee47d0e2.jpg","comment_is_top":false,"comment_ctime":1606988984,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606988984","product_id":100039001,"comment_content":"打卡：用Java实现了整个案例。","like_count":0},{"had_liked":false,"id":261974,"user_name":"云宝","can_delete":false,"product_type":"c1","uid":2236520,"ip_address":"","ucode":"796414E7778CD7","user_header":"https://static001.geekbang.org/account/avatar/00/22/20/68/1501829e.jpg","comment_is_top":false,"comment_ctime":1605595523,"is_pvip":false,"replies":[{"id":"96129","content":"嗯嗯，我改下","user_name":"作者回复","comment_id":261974,"uid":"1190123","ip_address":"","utype":1,"ctime":1606701218,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1605595523","product_id":100039001,"comment_content":"generateRandomAlphameric()方法的测试用例需要改为： Assert.assertTrue((&#39;0&#39; &lt;= c &amp;&amp; c &lt;= &#39;9&#39;) || (&#39;a&#39; &lt;= c &amp;&amp; c &lt;= &#39;z&#39;) || (&#39;A&#39; &lt;= c &amp;&amp; c &lt;= &#39;Z&#39;));","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509678,"discussion_content":"嗯嗯，我改下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606701218,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":260713,"user_name":"Laughing","can_delete":false,"product_type":"c1","uid":1002134,"ip_address":"","ucode":"F68F1E000CA800","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/96/99466a06.jpg","comment_is_top":false,"comment_ctime":1605087542,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605087542","product_id":100039001,"comment_content":"1. 底层的异常应该往上抛，然后进行异常的转译，转译为上层可处理的业务异常；<br>2. 使用getLastSubstrByDelimiter替换getLastSubstrSplittedByDot是合理的，考虑到之后的扩展，可以抽象成接口方法，通过不同的实现类来实现不同的分割逻辑。","like_count":0},{"had_liked":false,"id":253844,"user_name":"当运元宝","can_delete":false,"product_type":"c1","uid":1067224,"ip_address":"","ucode":"525542C70260F8","user_header":"https://static001.geekbang.org/account/avatar/00/10/48/d8/d0e9bd80.jpg","comment_is_top":false,"comment_ctime":1602916523,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1602916523","product_id":100039001,"comment_content":"大佬们，我有个问题，为什么要写2个接口呢？LogTraceIdGenerator这个接口存在的意义是什么呢？为什么不直接用LogTraceIdGenerator去实现IdGenerator呢？","like_count":0,"discussions":[{"author":{"id":1016905,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/84/49/47d48fd0.jpg","nickname":"观弈道人","note":"","ucode":"F3BB619A33C605","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394751,"discussion_content":"当你干几年管理，技术是最大的问题","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1632035505,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1020311,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/91/97/3762ca10.jpg","nickname":"小情绪","note":"","ucode":"92D8081DB8DB45","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":323878,"discussion_content":"吹过了 哈哈哈！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1605013146,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2181661,"avatar":"https://static001.geekbang.org/account/avatar/00/21/4a/1d/3567f117.jpg","nickname":"乔宏民","note":"","ucode":"B6A9F971E9CC96","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388383,"discussion_content":"是的，技术永远漫漫无尽头，何况，技术还一直在发展啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628740095,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1366402,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIFicK7Bn88Lqte7rURlw3Lf53oAu1jhiciaVlKLib48dlIAOAF03L7tjQcx1ia5AJI26S7HIxwx780Qzw/132","nickname":"操盘手爱德华","note":"","ucode":"CAAF3E6DC9D5FD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":72764,"discussion_content":"技术不再是问题？怕是还没写久","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575525422,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":1366402,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIFicK7Bn88Lqte7rURlw3Lf53oAu1jhiciaVlKLib48dlIAOAF03L7tjQcx1ia5AJI26S7HIxwx780Qzw/132","nickname":"操盘手爱德华","note":"","ucode":"CAAF3E6DC9D5FD","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":72768,"discussion_content":"等你管理团队的时候就知道编码规范的重要性了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575525981,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":72764,"ip_address":""},"score":72768,"extra":""},{"author":{"id":1366402,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIFicK7Bn88Lqte7rURlw3Lf53oAu1jhiciaVlKLib48dlIAOAF03L7tjQcx1ia5AJI26S7HIxwx780Qzw/132","nickname":"操盘手爱德华","note":"","ucode":"CAAF3E6DC9D5FD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":1,"user_type":1,"is_pvip":true},"discussion":{"id":131115,"discussion_content":"编程规范和设计模式的重要性不言而喻，但技术永远都是问题。这位领导请放下你的身段","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1578827918,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":72768,"ip_address":""},"score":131115,"extra":""}]}]},{"had_liked":false,"id":250683,"user_name":"笨鸟","can_delete":false,"product_type":"c1","uid":1236320,"ip_address":"","ucode":"68029ADA76AA5A","user_header":"https://static001.geekbang.org/account/avatar/00/12/dd/60/a6a4f79a.jpg","comment_is_top":false,"comment_ctime":1601195214,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601195214","product_id":100039001,"comment_content":"一边看着专栏,一边反思现在写的代码,同时思考公司项目存在的问题,一边考虑重构同事代码需要注意的地方","like_count":0},{"had_liked":false,"id":246037,"user_name":"Geek_35cfdd","can_delete":false,"product_type":"c1","uid":1792214,"ip_address":"","ucode":"AD9615ABB4CA25","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoiaP1gptuBzj3AXMpY8yLTIkpuarouOVzLde4636UJ7zAgnOEZibiaAIRVAicFaO64ftH45YOn1pD3VA/132","comment_is_top":false,"comment_ctime":1599140642,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599140642","product_id":100039001,"comment_content":"对于第一点，随机生成器本省就是为了业务问题的排查，而系统出现问题的可能本身比价低，随机数获取失败的可能性也是比较低的。在这两种决策的基础上，感觉没必要向外抛出异常导致此笔业务挂掉。<br>第二点：方法名应该告诉做什么，而不是咋么做。避免内部逻辑修改时也要改方法名","like_count":0,"discussions":[{"author":{"id":1241567,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f1/df/8ba04bec.jpg","nickname":"Joker","note":"","ucode":"C42E11098E1B38","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":68325,"discussion_content":"我感觉很多时候在开发之前都会来想想怎么设计，但是一收到开发时间时，感觉时间完全不够，又随便搞了，都是先把工作任务完成","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1575208899,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1459980,"avatar":"https://static001.geekbang.org/account/avatar/00/16/47/0c/f2f0245e.jpg","nickname":"🐶","note":"","ucode":"D9E46DDB64BA77","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350876,"discussion_content":"所以说有空就要重构一下自己写的项目","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614060884,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1228518,"avatar":"https://static001.geekbang.org/account/avatar/00/12/be/e6/7808520d.jpg","nickname":"Edward Lee","note":"","ucode":"156223F1D7E94A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":75975,"discussion_content":"嗯，感觉大部分人都一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575801944,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1202782,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5a/5e/a897cb0d.jpg","nickname":"grey927","note":"","ucode":"833E02ED835B4A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":67839,"discussion_content":"我和你一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575182793,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":67706,"discussion_content":"还是需要日积月累，一起加油","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575170279,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244927,"user_name":"橙子皮","can_delete":false,"product_type":"c1","uid":1970791,"ip_address":"","ucode":"DDB6452597D9E7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ep2LFSJ3CdfXDib4G4j39uCWhhLib0ia8Y6AtlHNrYUVlwSL0MImrMToMJgTCC1Bp4AKrbyvunvJX9KA/132","comment_is_top":false,"comment_ctime":1598755285,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598755285","product_id":100039001,"comment_content":"争哥把我平时容易犯的毛病全点出来了，受益匪浅","like_count":0},{"had_liked":false,"id":244099,"user_name":"站在岸上的鱼","can_delete":false,"product_type":"c1","uid":2093578,"ip_address":"","ucode":"96C3D7B1772541","user_header":"https://static001.geekbang.org/account/avatar/00/1f/f2/0a/e10d198f.jpg","comment_is_top":false,"comment_ctime":1598402563,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1598402563","product_id":100039001,"comment_content":"不太明白为啥要抽象出来两个接口？","like_count":0,"discussions":[{"author":{"id":1012815,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/74/4f/7975c7ee.jpg","nickname":"胡敏And","note":"","ucode":"8FA14B27F47F92","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380219,"discussion_content":"第一层结构泛化出订单ID，商品id，日志id。第二层接口泛化出随机日志id，序列随机id。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624377129,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1649057,"avatar":"https://static001.geekbang.org/account/avatar/00/19/29/a1/41607383.jpg","nickname":"hello","note":"","ucode":"4F42DAA5DB5C38","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326168,"discussion_content":"interface IdGenerator 可以供系统其它业务生成id 用；interface LogTraceIdGenerator目的是方便当前的业务使用。基于接口而非实现编程，主要的目的是为了方便后续灵活的替换实现类。这点灵活的替换实现类是指同一个业务，如你要优化实现方法的执行过程，输出结果仍然不变。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605535461,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241997,"user_name":"霍霍","can_delete":false,"product_type":"c1","uid":1542586,"ip_address":"","ucode":"A483D42AD7F72D","user_header":"https://static001.geekbang.org/account/avatar/00/17/89/ba/009ee13c.jpg","comment_is_top":false,"comment_ctime":1597555375,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1597555375","product_id":100039001,"comment_content":"我觉得设计模式讲的是应用设计原则来解决实际问题，这23种是前人总结出来的经验。其实设计原则是很抽象的，很难把控，我们需要在了解设计原则的基础上，根据实际问题多做思考，才能将设计模式运用好。加油，感谢争哥","like_count":0},{"had_liked":false,"id":240572,"user_name":"algebra","can_delete":false,"product_type":"c1","uid":1010953,"ip_address":"","ucode":"89F57E4A50E04A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6d/09/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1596981088,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596981088","product_id":100039001,"comment_content":"非静态方法易于测试，在本例子中如何体现呢，比如我让getLastfieldOfHostName返回值固定，测试generateRandomAlphameric返回值是否符合预期，是不是方便mock某些入参跟出参还有mock异常的情况，我这样理解对不对","like_count":0},{"had_liked":false,"id":227740,"user_name":"Obed","can_delete":false,"product_type":"c1","uid":1399904,"ip_address":"","ucode":"8717488DD14AB4","user_header":"https://static001.geekbang.org/account/avatar/00/15/5c/60/3754399d.jpg","comment_is_top":false,"comment_ctime":1592467565,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592467565","product_id":100039001,"comment_content":"强!这个重构思路清晰，方法有章可循。感觉自己以前就是看到一个方法太长了只会想这有没有重复部分或者比较复杂的部分可以抽取出来成为一个函数。看了两次这章，感觉真的学到了。<br>另外 -》花点心思写一段高质量的代码，比写 100 段凑活能用的代码，对你的代码能力提高更有帮助。这句话有很大的共鸣","like_count":0},{"had_liked":false,"id":227091,"user_name":"JUNLONG","can_delete":false,"product_type":"c1","uid":1396741,"ip_address":"","ucode":"15C3E0B27E081C","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/05/90f1a14e.jpg","comment_is_top":false,"comment_ctime":1592281253,"is_pvip":false,"replies":[{"id":"85673","content":"嗯嗯，多谢指出，我改下","user_name":"作者回复","comment_id":227091,"uid":"1190123","ip_address":"","utype":1,"ctime":1593910591,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1592281253","product_id":100039001,"comment_content":"测试代码中的testGenerateRandomAlphameric()函数的for循环中的前两个范围判断打错了，应为：(&#39;0&#39; &lt; c &amp;&amp; c &lt; &#39;9&#39;) || (&#39;a&#39; &lt; c &amp;&amp; c &lt; &#39;z&#39;) 。<br>RandomIdGeneratorTest()函数中的一个#打成了$","like_count":0,"discussions":[{"author":{"id":2690172,"avatar":"","nickname":"Geek_设计模式之美","note":"","ucode":"59263416E65594","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385243,"discussion_content":"有这个专栏 好吗?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626953001,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1134618,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK0wXEfsGnCiarxEUEvZz45bFEpSaWL79eK5DfUUbrNwLv6I6WDkMnmhb2fZvm2MtmIoU2yhBz7iaew/132","nickname":"舍予","note":"","ucode":"F333699D14213A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331559,"discussion_content":"程序员修炼之道从小工到专家，这一本是很好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606900203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225684,"user_name":"花花大脸猫","can_delete":false,"product_type":"c1","uid":1117318,"ip_address":"","ucode":"8ABDB3F7F4FB0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0c/86/8e52afb8.jpg","comment_is_top":false,"comment_ctime":1591834359,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1591834359","product_id":100039001,"comment_content":"1.不合理，还是需要显式的将错误信息打印出来并设计出错之后的补偿措施。<br>2.在当前的场景下，第一种更合适，但后续如果换了一种实现方式，后面一种更加通用，普适性好些","like_count":0},{"had_liked":false,"id":221534,"user_name":"scmath","can_delete":false,"product_type":"c1","uid":1149022,"ip_address":"","ucode":"641023BB246C29","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/5e/7c76f422.jpg","comment_is_top":false,"comment_ctime":1590536393,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590536393","product_id":100039001,"comment_content":"依赖关系的数据传递：<br>接口依赖-可以通过接口方法的入参传递给接口实现，接口依赖可以使用接口方法的返回的数据。<br>接口实现-使用接口入参，把数据返回给接口依赖。<br>接口装配:实例化接口依赖、接口实现，把接口实现注入到接口依赖，接口装配成了用户接口层。接口装配决定接口依赖的行为，通过把不同的实现装配到接口依赖实现功能扩展、代码复用、解耦。接口实现、接口依赖都是积木，接口装配是人，是功能的创造者。<br>","like_count":0},{"had_liked":false,"id":221528,"user_name":"scmath","can_delete":false,"product_type":"c1","uid":1149022,"ip_address":"","ucode":"641023BB246C29","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/5e/7c76f422.jpg","comment_is_top":false,"comment_ctime":1590535422,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590535422","product_id":100039001,"comment_content":"把对象分离出来后，把需要实例化另一个类、并使用类的方法的依赖关系，改为为依赖这个类的接口，这个类叫接口依赖；这个接口可以有多个实现；然后再增加一个装配层实例化接口的实现，然后注入到接口依赖。这时要考虑谁可能有多个实现，就把“谁”抽象为接口依据是谁有多个实现，谁被扩展。依赖方向可以改变。<br><br>拆分为接口、接口依赖、接口实现、接口装配(初始化接口依赖、接口实现,把接口实现注入接口依赖)。","like_count":0},{"had_liked":false,"id":221231,"user_name":"scmath","can_delete":false,"product_type":"c1","uid":1149022,"ip_address":"","ucode":"641023BB246C29","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/5e/7c76f422.jpg","comment_is_top":false,"comment_ctime":1590453053,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590453053","product_id":100039001,"comment_content":"考虑清楚谁预留扩展点，谁依赖谁，谁实现谁的扩展点，这样依赖是否合理?","like_count":0},{"had_liked":false,"id":218359,"user_name":"炫炫","can_delete":false,"product_type":"c1","uid":1358609,"ip_address":"","ucode":"FDC7A0C6E08B02","user_header":"https://static001.geekbang.org/account/avatar/00/14/bb/11/7069b8eb.jpg","comment_is_top":false,"comment_ctime":1589789009,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589789009","product_id":100039001,"comment_content":"要想提高代码质量，还是要在细节处下功夫。","like_count":0},{"had_liked":false,"id":209168,"user_name":"林子er","can_delete":false,"product_type":"c1","uid":1629256,"ip_address":"","ucode":"85637288F22CF0","user_header":"https://static001.geekbang.org/account/avatar/00/18/dc/48/9796286e.jpg","comment_is_top":false,"comment_ctime":1587516734,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587516734","product_id":100039001,"comment_content":"第一个，是否抛出异常完全取决于类的使用场景定位，就该生成器来说从命名上并没有限定一定是用在日志场景，属于较通用类，因而需要抛出，而上层日志类（生成器类的调用方）需要捕获并消化掉该异常，因为日志错误不能影响业务运行。<br>第二个，还是要看函数的预期使用范围（场景定位）。该函数本质上是private的，作用范围很小，从传参看是专门用来处理hostName的，因而命名暴露细节没问题，另外个人觉得也可以命名为getLastPartOfHostName","like_count":0},{"had_liked":false,"id":209021,"user_name":"不记年","can_delete":false,"product_type":"c1","uid":1045945,"ip_address":"","ucode":"287E40C68356DC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/b9/888fe350.jpg","comment_is_top":false,"comment_ctime":1587481102,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587481102","product_id":100039001,"comment_content":"第一个问题，要不要抛出异常，要看是否需要告知，对于这个场景，调用者只关心获取的id，处理异常属于职责之外的操作，所以我认为不应该自己解决<br>第二个问题 没有必要，私有方法本身就属于自己的，函数名太通用了反而降低可读性","like_count":0},{"had_liked":false,"id":202118,"user_name":"面向百度编程","can_delete":false,"product_type":"c1","uid":1732780,"ip_address":"","ucode":"8FE04A019D71D1","user_header":"https://static001.geekbang.org/account/avatar/00/1a/70/ac/83bc14c0.jpg","comment_is_top":false,"comment_ctime":1585904801,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585904801","product_id":100039001,"comment_content":"我总结一下那个方法，其实我们平时写代码的时候就喜欢把所有的逻辑都放在一个方法里面，耦合度比较高，功能不够单一，所以把部分逻辑更加精确，拆分，最后在组装在一起，形成组件化开发，不仅适用于方法，类，对象与对象之间，还适用于对象和模块之间，模块与模块之间","like_count":0},{"had_liked":false,"id":201259,"user_name":"mooneal","can_delete":false,"product_type":"c1","uid":1177114,"ip_address":"","ucode":"7E43AD3661BBFD","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/1F8TyS4mNfhRib2nHvLZ1azGyYQj2fjr9G1RFkOINo2Mx1JYHLN7FEU9FGg5ibictp1QAQeNUFZlTVLdb8QgkJnow/132","comment_is_top":false,"comment_ctime":1585741153,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585741153","product_id":100039001,"comment_content":"太难了，尽管这个例子很简单，但要把这些应用到实际开发中，真的需要太多的经验了。我的代码在组内已经算比较规范的了，but还远远不够。没有人review真的很难有长进","like_count":0},{"had_liked":false,"id":200955,"user_name":"愤怒的小龙打小鸟","can_delete":false,"product_type":"c1","uid":1115909,"ip_address":"","ucode":"363AF21A33CD2C","user_header":"https://static001.geekbang.org/account/avatar/00/11/07/05/0e59855d.jpg","comment_is_top":false,"comment_ctime":1585699026,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585699026","product_id":100039001,"comment_content":"获取主机名耗时的问题该如何解决呢？","like_count":0},{"had_liked":false,"id":196499,"user_name":"@%初%@","can_delete":false,"product_type":"c1","uid":1053509,"ip_address":"","ucode":"2B8A6134675ED7","user_header":"https://static001.geekbang.org/account/avatar/00/10/13/45/16c60da2.jpg","comment_is_top":false,"comment_ctime":1585286504,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585286504","product_id":100039001,"comment_content":"1.对于问题一，我觉得抛不抛异常，也需要根据具体的场景分析吧，主要看业务的容忍度，，，对于不严格的，获取失败，完全可以取一个默认值，，，对于比较严格区分的，我觉得可以抛异常，，，相对于本例来说，我倒是觉得失败，可以使用默认值处理。<br>2.我觉不需要改名，主要是参数签名的问题，，，这个方法内部已经使用了dot去分割了，改了名称，反倒没有那么清晰了，这样别的同学去用的话，还得翻代码。。。<br><br>以上，，，仅仅个人的见解。。。","like_count":0},{"had_liked":false,"id":195176,"user_name":"Bruce","can_delete":false,"product_type":"c1","uid":1876764,"ip_address":"","ucode":"BAD602A7270306","user_header":"https://static001.geekbang.org/account/avatar/00/1c/a3/1c/f947dd97.jpg","comment_is_top":false,"comment_ctime":1585143996,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585143996","product_id":100039001,"comment_content":"打卡，","like_count":0},{"had_liked":false,"id":190331,"user_name":"lcf枫","can_delete":false,"product_type":"c1","uid":1144171,"ip_address":"","ucode":"D51E8F68BD41CA","user_header":"https://static001.geekbang.org/account/avatar/00/11/75/6b/fd685164.jpg","comment_is_top":false,"comment_ctime":1584629787,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584629787","product_id":100039001,"comment_content":"getLastfieldOfHostName 函数是否考虑缓存起来","like_count":0},{"had_liked":false,"id":187280,"user_name":"空白昵称","can_delete":false,"product_type":"c1","uid":1433815,"ip_address":"","ucode":"91F50CA25102AB","user_header":"https://static001.geekbang.org/account/avatar/00/15/e0/d7/744bd8c3.jpg","comment_is_top":false,"comment_ctime":1584073674,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584073674","product_id":100039001,"comment_content":"连续看争哥的专栏大概快一个月了，收获颇多。也解决了之前项目中不少的疑惑。希望学习了数据结构和设计模式这些基础课，能找到一份干着很爽的工作。","like_count":0,"discussions":[{"author":{"id":1110039,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f0/17/796a3d20.jpg","nickname":"言十年","note":"","ucode":"67B8B49C3A3B17","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281567,"discussion_content":"是的aoe","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591766048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184725,"user_name":"M","can_delete":false,"product_type":"c1","uid":1810576,"ip_address":"","ucode":"06F26E1D62E9C9","user_header":"https://wx.qlogo.cn/mmopen/vi_32/eLNeJNaEkwGSK7xvtamMibVLMy2MpbIqX3iaEhT7JtSnTRMRTwZ2j4HX7WAapiashbiaBDVriaXKSP0Oeic6ZAEVEXag/132","comment_is_top":false,"comment_ctime":1583391550,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583391550","product_id":100039001,"comment_content":"老师请教几个问题：<br>1.为什么要写两个接口呢，直接用IdGenerator接口，用RandomIdGenerator 和SequenceIdGenerator去实现IdGenerator，这样不是更好么？老师的代码又多了个继承接口<br><br>2.在第一次重构代码中最后一段代码LogTraceIdGenerator logTraceIdGenerator = new RandomIdGenerator();   而RandomIdGenerator是直接实现的IdGenerator接口，用IdGenerator接收和LogTraceIdGenerator接收，有什么区别么？<br><br><br><br><br>3.在第二次重构时，把一些会出现bug的代码和不会出现bug的代码（获取主机名）分割开，我可以理解成，写代码把可能会出现bug的代码拆开，方便测试;把一些不易出bug的代码放一起。这样就能提高可测试性么？<br><br>4.在获取主机名这段代码中，如果是我，我会这样写，老师帮忙看下，<br>String hostName = InetAddress.getLocalHost().getHostName();<br>                if (StringUtils.isEmpty(hostName)) {<br>                    throw new NullPointerException(&quot;hostName is null&quot;);<br>                }<br>我看老师的代码上只抓取异常了，这种场景应该怎么处理比较好呢? <br><br><br>这几个问题还是比较迷惑的，希望老师或同学能够解答！<br><br>","like_count":0},{"had_liked":false,"id":184322,"user_name":"Geek_839008","can_delete":false,"product_type":"c1","uid":1622090,"ip_address":"","ucode":"A780A0DB78C2E9","user_header":"","comment_is_top":false,"comment_ctime":1583290059,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583290059","product_id":100039001,"comment_content":"这个测试用例是不是有点问题啊？‘field1#field2$field3’和‘field1#field2#field3’两个字符串不一样-_-||。<br>    actualSubstr = idGenerator.getLastSubstrSplittedByDot(&quot;field1#field2$field3&quot;);<br>    Assert.assertEquals(&quot;field1#field2#field3&quot;, actualSubstr);","like_count":0},{"had_liked":false,"id":184146,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1583238258,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583238258","product_id":100039001,"comment_content":"对于第一个问题,我认为往上抛出异常是可行的,因为一般的项目中,都有一个顶级的异常捕获器,但是抛出了异常,会导致程序无法继续执行下去,所以我的建议是,在类中设置一个ERRORCODE,在不行的时候,返回这个错误码,方便问题的排查<br>对于第二个问题,我的建议是没必要,因为这是一个类私有的函数,并不会被其他的类去调用,符合单一职责原则,同时,也为了方便其他阅读者阅读这片代码,使用一个能够描述其实现的名字,是很好的选择<br>最后,关于我个人的代码实现:<br>https:&#47;&#47;github.com&#47;HeavenXin&#47;FirstLearn_DesignPatterns&#47;tree&#47;master&#47;IdGenerator<br>","like_count":0},{"had_liked":false,"id":183162,"user_name":"悠游","can_delete":false,"product_type":"c1","uid":1222834,"ip_address":"","ucode":"4FDDDDF29AE3F0","user_header":"https://static001.geekbang.org/account/avatar/00/12/a8/b2/998448ca.jpg","comment_is_top":false,"comment_ctime":1582964226,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582964226","product_id":100039001,"comment_content":"1、如果异常本级就能处理，且上层无需感知下层的异常，那么就应该自己处理。<br>2、返回一个特殊ID即可，因为本身不涉及业务逻辑，而且hostname也只是为了生成uuid的逻辑的一部分。","like_count":0},{"had_liked":false,"id":182208,"user_name":"程序员人生","can_delete":false,"product_type":"c1","uid":1113668,"ip_address":"","ucode":"C5C5073D89AAA2","user_header":"https://static001.geekbang.org/account/avatar/00/10/fe/44/3e3040ac.jpg","comment_is_top":false,"comment_ctime":1582729102,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582729102","product_id":100039001,"comment_content":"看来，我的代码在老师眼里也就60分","like_count":0},{"had_liked":false,"id":181569,"user_name":"花儿少年","can_delete":false,"product_type":"c1","uid":1318540,"ip_address":"","ucode":"CFE4F64243673B","user_header":"https://static001.geekbang.org/account/avatar/00/14/1e/8c/450fe5cb.jpg","comment_is_top":false,"comment_ctime":1582560932,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582560932","product_id":100039001,"comment_content":"项目里有好多byxxx的函数，有时候业务接口也使用了byxxx，我都没意识到这个问题，因为看很多别人写的代码也是这样的就跟着写了。<br>争哥的想法对我很有启发，ths~","like_count":0},{"had_liked":false,"id":181422,"user_name":"Richie","can_delete":false,"product_type":"c1","uid":1019588,"ip_address":"","ucode":"12314EF0347693","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/c4/8d1150f3.jpg","comment_is_top":false,"comment_ctime":1582537598,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582537598","product_id":100039001,"comment_content":"学这门课之前，我可能会认为做完第一轮的可读性重构，就完事了。<br>果然测试还是很重要啊，高手思考就是比较全面。","like_count":0},{"had_liked":false,"id":181420,"user_name":"Richie","can_delete":false,"product_type":"c1","uid":1019588,"ip_address":"","ucode":"12314EF0347693","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/c4/8d1150f3.jpg","comment_is_top":false,"comment_ctime":1582537453,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582537453","product_id":100039001,"comment_content":"喜欢这样的实战课。<br>这些东西自己琢磨得花多少时间，但是有高手带着，分析什么是好代码，什么是烂代码，看着好代码是怎么一步一步演变过来的，这样应该是进步最快的了。","like_count":0},{"had_liked":false,"id":181025,"user_name":"Aprilのママ","can_delete":false,"product_type":"c1","uid":1881339,"ip_address":"","ucode":"5741B413A6DE69","user_header":"https://static001.geekbang.org/account/avatar/00/1c/b4/fb/ce11376f.jpg","comment_is_top":false,"comment_ctime":1582461819,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1582461819","product_id":100039001,"comment_content":"1、Random我觉得可以用静态变量，毕竟generate ID调用也是比较频繁，每次都new一个临时对象对性能有影响。<br>2、String hostName = InetAddress.getLocalHost().getHostName();<br>这行代码每次运行想必也有性能损耗，对同一个机器结果都是一样的。也可以优化吧。<br>不知争哥怎么认为？","like_count":0,"discussions":[{"author":{"id":1087243,"avatar":"https://static001.geekbang.org/account/avatar/00/10/97/0b/a943bcb3.jpg","nickname":"zhou","note":"","ucode":"E1CE8575B3F106","race_medal":3,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285078,"discussion_content":"主机名可能会变 所以每次都重新获取。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592730979,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":180355,"user_name":"xzy","can_delete":false,"product_type":"c1","uid":1002095,"ip_address":"","ucode":"1A44368083A19E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/6f/e36b3908.jpg","comment_is_top":false,"comment_ctime":1582266722,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582266722","product_id":100039001,"comment_content":"LogTraceIdGenerator logTraceIdGenerator = new RandomIdGenerator()； 这个代码的问题，老师还是抽空改一下吧🤭","like_count":0},{"had_liked":false,"id":178811,"user_name":"楊_宵夜","can_delete":false,"product_type":"c1","uid":1019302,"ip_address":"","ucode":"7BA0CADC5F23BB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/a6/22c37c91.jpg","comment_is_top":false,"comment_ctime":1581832449,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1581832449","product_id":100039001,"comment_content":"争哥, RandomIdGeneratorTest 的代码, 即使是 new RandomIdGenerator() , 也是不能够访问 protected 方法的呀, 实测过用 JUnit框架 也不能...<br>你这个 Test 是不是放在了 RandomIdGenerator 同一个包底下了咧?","like_count":0},{"had_liked":false,"id":177522,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1581410086,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1581410086","product_id":100039001,"comment_content":"年后回来复工了，在家学习动力不足，赶紧在公司也抠出时间来学习。实战篇的思想是我要学习的地方，对我来说，往后针对项目需求的规划会更好。<br><br>","like_count":0},{"had_liked":false,"id":176954,"user_name":"慕容引刀","can_delete":false,"product_type":"c1","uid":1016308,"ip_address":"","ucode":"714E94AEB42D7D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/81/f4/d92c7ef5.jpg","comment_is_top":false,"comment_ctime":1581235679,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581235679","product_id":100039001,"comment_content":"个人觉得小争哥的文章还是很给力的，前边的铺垫很多是在讲解代码中可能出现的问题以及如何发现问题。一般来说在清楚代码中存在哪些的问题的情况下就会去寻找解决方案，很容易发现一些设计模式就是为了解决某些问题而存在的。同时因为清楚问题所在，就很容易了解掌握这些设计模式。","like_count":0},{"had_liked":false,"id":176912,"user_name":"一壶浊酒","can_delete":false,"product_type":"c1","uid":1145530,"ip_address":"","ucode":"5D90F8F8121BBE","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/ba/8545f2d7.jpg","comment_is_top":false,"comment_ctime":1581222110,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1581222110","product_id":100039001,"comment_content":"对于问题一，我觉得是否往上继续抛出得看情况，如果异常的时候比方说null的时候，也要有一个固定返回值例如直接返回字符串&quot;null&quot;，那就不用往上抛而是在函数里面直接返回，我觉得更加好。对于问题二，我觉得如果函数内的逻辑会经常出现变化了化，可以替换成getLastSubstrByDelimiter，不会经常变化了化应该不用改。<br>过年各种事情在学习上有点懈怠了，之前的文章也没来得及多多复习，落下了满多，得抓紧补补了，同时也不能忘了前面的复习，温故而知新嘛","like_count":0},{"had_liked":false,"id":176895,"user_name":"DullBird","can_delete":false,"product_type":"c1","uid":1110494,"ip_address":"","ucode":"80E2FD5F9687CB","user_header":"https://static001.geekbang.org/account/avatar/00/10/f1/de/3ebcbb3f.jpg","comment_is_top":false,"comment_ctime":1581217943,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581217943","product_id":100039001,"comment_content":"1. hostname不能影响业务逻辑，设置默认值，并且还有随机值可以区分。<br>2. 通用的比较合适，但是看有没有复用这个代码的必要，否则暂时不需要改动","like_count":0},{"had_liked":false,"id":176825,"user_name":"胡子高兴了","can_delete":false,"product_type":"c1","uid":1596868,"ip_address":"","ucode":"A32AE341E3683D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/YJHQDzuLavGFmwunybBiaBrrU1aOib7Siam0fJrWIaHfdT0p2GicsRT42d9bhRNO324wewDtic8RiaokAFkUyO3YRF0g/132","comment_is_top":false,"comment_ctime":1581174784,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581174784","product_id":100039001,"comment_content":"Assert.assertTrue((&#39;0&#39; &lt; c &amp;&amp; c &gt; &#39;9&#39;) || (&#39;a&#39; &lt; c &amp;&amp; c &gt; &#39;z&#39;) || (&#39;A&#39; &lt; c &amp;&amp; c &lt; &#39;Z&#39;)); <br>应该改成Assert.assertTrue((&#39;0&#39; &lt;= c &amp;&amp; c &lt;= &#39;9&#39;) || (&#39;a&#39; &lt;= c &amp;&amp; c &lt;= &#39;z&#39;) || (&#39;A&#39; &lt;= c &amp;&amp; c &lt;= &#39;Z&#39;));","like_count":0},{"had_liked":false,"id":176336,"user_name":"李小四","can_delete":false,"product_type":"c1","uid":1112747,"ip_address":"","ucode":"2A766BE16B276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","comment_is_top":false,"comment_ctime":1581038734,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581038734","product_id":100039001,"comment_content":"设计模式_35<br># 作业<br>  1. 首先逻辑要自洽：<br>    (1) 如果在函数内吞掉异常，那么函数内要处理因为异常而导致的逻辑问题，而不是只返回一个空字符串。<br>    (2) 如果不准备处理异常带来的逻辑问题，那么需要把异常抛到上一层。<br>    具体的平衡的尺度，估下一下节会讲吧。<br>  2. 我认为合理，因为前一种方法预设了一些隐藏联系(host的delimiter一定是dot)，当然这个改变的可能性不大，但是不预设多余得了联系是更好的办法。<br><br># 感想<br>看到 ```RandomIdGenerator implements IdGenerator```, 我还以为发现了我不知道的新大陆，找IDE试了一下，才发现写错了。","like_count":0},{"had_liked":false,"id":175982,"user_name":"沈康","can_delete":false,"product_type":"c1","uid":1611025,"ip_address":"","ucode":"02AFA50738AB8E","user_header":"https://static001.geekbang.org/account/avatar/00/18/95/11/eb431e52.jpg","comment_is_top":false,"comment_ctime":1580900981,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580900981","product_id":100039001,"comment_content":"1、不抛出异常吧，理由是抛出的异常需要调用出处理，这种id生成器明显需要自己处理干净否则异常处理将会暴露在各业务代码，明显增大了业务复杂度。<br>2、dot就是&quot;.&quot;,改成delimiter有什么区别，已经封装了，改不改区别不大吧。。不懂","like_count":0},{"had_liked":false,"id":175451,"user_name":"斐波那契","can_delete":false,"product_type":"c1","uid":1464006,"ip_address":"","ucode":"85E2EBC01392B1","user_header":"https://static001.geekbang.org/account/avatar/00/16/56/c6/0b449bc6.jpg","comment_is_top":false,"comment_ctime":1580723298,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1580723298","product_id":100039001,"comment_content":"对于课堂讨论第一个问题：个人比较认同的是应该不往外抛，但是相应的逻辑要处理好。为什么这么说，首先，如果说hostname获取异常往外抛的话让使用者知道虽然这么做能很快定位到问题，但是从使用者角度说使用者并不会关心这个问题(这个底下也有人讲到) 其次 从逻辑上，往上抛异常跟打日志效果是一样的 既然打了日志那我们就应该可以知道有hostname获取异常的情况(不然日志一文不值) 只是异常抛出更简单粗暴一点。其实 这个问题主要是小争哥给我们限定了范围，如果小争哥用的不是id生成器这个案例 可能抛出异常更好一点。在id 生成器中 获取hostname只是获取随机id的一种手段，并不是唯一。如果某一天把获取hostname换成别的实现逻辑(例如用一个常量来代替) 那原本写好的往外抛出异常就变得毫无意义。","like_count":0,"discussions":[{"author":{"id":1481811,"avatar":"https://static001.geekbang.org/account/avatar/00/16/9c/53/ade0afb0.jpg","nickname":"ub8","note":"","ucode":"0D937C3EAEB781","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":69369,"discussion_content":"有个掉灵魂，平铺的更易维护","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575283637,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":175384,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1580700979,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1580700979","product_id":100039001,"comment_content":"关于第一问 我觉得只要注视写清楚了 返回啥都都行<br>关于第二问 我觉得在你上面已经讲过了 函数名太过具体和细节如果修改了函数内容就可能需要改函数名<br>最后总结一点 高手之间的竞争在于细节 这句话真的很不错","like_count":0,"discussions":[{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":67641,"discussion_content":"猪八戒宝贝媳妇，代理模式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575163346,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":175144,"user_name":"弹簧人","can_delete":false,"product_type":"c1","uid":1697679,"ip_address":"","ucode":"BCB4A6FC76EA17","user_header":"https://static001.geekbang.org/account/avatar/00/19/e7/8f/56387f77.jpg","comment_is_top":false,"comment_ctime":1580570267,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580570267","product_id":100039001,"comment_content":"LogTraceIdGenerator logTraceIdGenerator = new RandomIdGenerator(); 没懂为什么有了IdGenerator还要新建一个LogTraceIdGenerator 。 直接LogTraceIdGenerator  logTraceIdGenerator = new RandomIdGenerator()不行吗？ 有人能说说为啥吗","like_count":0},{"had_liked":false,"id":174910,"user_name":"Eclipse","can_delete":false,"product_type":"c1","uid":1589989,"ip_address":"","ucode":"E7EB0BA99FA644","user_header":"https://static001.geekbang.org/account/avatar/00/18/42/e5/61cfe267.jpg","comment_is_top":false,"comment_ctime":1580455327,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580455327","product_id":100039001,"comment_content":"&#47;&#47;代码使用举例LogTraceIdGenerator logTraceIdGenerator = new RandomIdGenerator();<br><br>争哥，两个子类之间可以进行类型转换吗？","like_count":0},{"had_liked":false,"id":174663,"user_name":"早起不吃虫","can_delete":false,"product_type":"c1","uid":1369757,"ip_address":"","ucode":"13CD3B5E1F9435","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/7WkTI1IicbKvsPJng5vQh5qlrf1smbfl2zb7icHZfzcAk1k4lr8w8IDEAdrqq1NHW5XZMPXiaa1h7Jn1LGOWOCkIA/132","comment_is_top":false,"comment_ctime":1580312860,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580312860","product_id":100039001,"comment_content":"干货满满","like_count":0},{"had_liked":false,"id":174617,"user_name":"雪中亮","can_delete":false,"product_type":"c1","uid":1024341,"ip_address":"","ucode":"B294FDFF9F13E8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a1/55/cff2322c.jpg","comment_is_top":false,"comment_ctime":1580297631,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1580297631","product_id":100039001,"comment_content":"争哥好，我看到这么一句：将 generateRandomAlphameric() 和 getLastSubstrSplittedByDot() 这两个函数的访问权限设置为 protected。这样做的目的是，可以直接在单元测试中通过对象来调用两个函数进行测试。<br><br>我觉得将方法标记为默认访问级别就可以了，这样可以被同一包中的所有类访问。不需要标记为protected，即不需要提供子类的访问权限。<br><br>如果我理解的不对，还请指教。","like_count":0},{"had_liked":false,"id":174101,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1579964671,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579964671","product_id":100039001,"comment_content":"1：需要继续抛出异常，因为从使用者的角度来看，异常更便于使用者调试使用。2：替换成getLastSubstrByDelimiter(String hostName)，感觉更通用一些，","like_count":0},{"had_liked":false,"id":174056,"user_name":"L🚲🐱","can_delete":false,"product_type":"c1","uid":1577856,"ip_address":"","ucode":"08A012739614DE","user_header":"https://static001.geekbang.org/account/avatar/00/18/13/80/2c9da1b1.jpg","comment_is_top":false,"comment_ctime":1579931940,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579931940","product_id":100039001,"comment_content":"1. 获取主机名失败的时候, 返回异常, 在小王的代码实现中，获取主机名失败异常在 IdGenerator 内部被吐掉了，打印一条报警日志，并没有继续往上抛出，这样的异常处理是不恰当的, 应该要继续抛出, 在实际的业开发中, 会有对应的自动异常捕获, 抛出可以让调用者明白哪里出问题了,而不是只是简单的打印日志.<br>2. 函数名字替换看函数的逻辑是否经常变动, 如果经常变动, 那改变没有问题, 因为改动后的函数名更抽象, 后面如果根据其他符号来分隔就不需要改函数名了. 函数命名不需要暴露太多实现细节, 函数名应该足够抽象","like_count":0},{"had_liked":false,"id":173993,"user_name":"相逢是缘","can_delete":false,"product_type":"c1","uid":1060730,"ip_address":"","ucode":"CB299F53A95654","user_header":"https://static001.geekbang.org/account/avatar/00/10/2f/7a/ab6c811c.jpg","comment_is_top":false,"comment_ctime":1579856160,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579856160","product_id":100039001,"comment_content":"打卡<br>代码重构可以用循序渐进、小步快跑的方式，以下步骤可以多轮进行<br>第一轮重构：提高代码的可读性<br>抽离小的功能点为函数、去除代码中魔法数、优化一些重复代码<br>第二轮重构：提高代码的可测试性<br>静态函数尽量改为用者可以通过依赖注入的方式，在外部创建好 RandomIdGenerator 对象后注入到自己的代码中，从而解决静态函数调用影响代码可测试性的问题。<br>对不可控的组件进行隔离<br>对于只需要往里面写数据，并不读数据，不参与业务逻辑的执行，不需要进行mock<br>第三轮重构：编写完善的单元测试<br>第四轮重构：所有重构完成之后添加注释<br>做什么、为什么、怎么做、怎么用，对一些边界条件、特殊情况进行说明，以及对函数输入、输出、异常进行说明。","like_count":0},{"had_liked":false,"id":173985,"user_name":"potato00fa","can_delete":false,"product_type":"c1","uid":1307080,"ip_address":"","ucode":"D179E68D87CC50","user_header":"https://static001.geekbang.org/account/avatar/00/13/f1/c8/8e6dc340.jpg","comment_is_top":false,"comment_ctime":1579848736,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579848736","product_id":100039001,"comment_content":"妙啊","like_count":0},{"had_liked":false,"id":173927,"user_name":"黄林晴","can_delete":false,"product_type":"c1","uid":1362631,"ip_address":"","ucode":"B15C38AECDA88F","user_header":"https://static001.geekbang.org/account/avatar/00/14/ca/c7/00e544c2.jpg","comment_is_top":false,"comment_ctime":1579786479,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579786479","product_id":100039001,"comment_content":"打卡✔","like_count":0},{"had_liked":false,"id":173887,"user_name":"平风造雨","can_delete":false,"product_type":"c1","uid":1014349,"ip_address":"","ucode":"F9EE4704F31E22","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7a/4d/b0228a1a.jpg","comment_is_top":false,"comment_ctime":1579756926,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1579756926","product_id":100039001,"comment_content":"1. 吞掉这个异常很危险，导致业务数据处理出错，因为无法保证唯一，直接违反了接口想表达的设计语义。","like_count":0},{"had_liked":false,"id":173885,"user_name":"柳志焕","can_delete":false,"product_type":"c1","uid":1235940,"ip_address":"","ucode":"42375930DC2AA0","user_header":"https://static001.geekbang.org/account/avatar/00/12/db/e4/a1b45d79.jpg","comment_is_top":false,"comment_ctime":1579754283,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579754283","product_id":100039001,"comment_content":"抽丝剥茧，要多看好的代码才能成长。","like_count":0},{"had_liked":false,"id":173767,"user_name":"皮卡皮卡","can_delete":false,"product_type":"c1","uid":1216284,"ip_address":"","ucode":"D440EEC7301C76","user_header":"https://static001.geekbang.org/account/avatar/00/12/8f/1c/1c728388.jpg","comment_is_top":false,"comment_ctime":1579681342,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1579681342","product_id":100039001,"comment_content":"从开始看不懂为何是说设计模式到后来明白争哥用意，完全是一条成长捷径啊","like_count":0},{"had_liked":false,"id":173756,"user_name":"稳","can_delete":false,"product_type":"c1","uid":1284626,"ip_address":"","ucode":"BF5723E63E4115","user_header":"https://static001.geekbang.org/account/avatar/00/13/9a/12/06863960.jpg","comment_is_top":false,"comment_ctime":1579679922,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579679922","product_id":100039001,"comment_content":"1、看获取失败是否是正常现象，获取主机名失败肯定是不正常，要抛异常，由上层决定怎么处理；像数据库获取记录为空，就是可预期的现象，返回空比较好<br>2、看使用者是谁，如果不需要暴露给外部系统，原来的就挺好","like_count":0},{"had_liked":false,"id":173737,"user_name":"代码小僧","can_delete":false,"product_type":"c1","uid":1270002,"ip_address":"","ucode":"83BEA2583AC08E","user_header":"https://static001.geekbang.org/account/avatar/00/13/60/f2/c631f699.jpg","comment_is_top":false,"comment_ctime":1579673900,"is_pvip":false,"replies":[{"id":"67724","content":"可以再看看前面的28、29讲","user_name":"作者回复","comment_id":173737,"uid":"1190123","ip_address":"","utype":1,"ctime":1580114137,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"1579673900","product_id":100039001,"comment_content":"为啥说有静态函数就不好测试？","like_count":0},{"had_liked":false,"id":173722,"user_name":"Ken张云忠","can_delete":false,"product_type":"c1","uid":1134288,"ip_address":"","ucode":"D0BAC9FC17DE2B","user_header":"https://static001.geekbang.org/account/avatar/00/11/4e/d0/d8a5f720.jpg","comment_is_top":false,"comment_ctime":1579670095,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579670095","product_id":100039001,"comment_content":"1.获取主机名失败的时候，generate() 函数应该返回什么最合适呢？是特殊 ID、null、空字符，还是异常？在小王的代码实现中，获取主机名失败异常在 IdGenerator 内部被吐掉了，打印一条报警日志，并没有继续往上抛出，这样的异常处理是否得当？<br>获取主机名失败的时候，generate() 函数应该返回异常最合适.<br>代码实现中没有继续上抛异常不得到.异常被吞掉后,上层依赖的业务代码会继续执行,运行再次遇到问题会增加定位问题的负担,应当将异常上抛给业务调用者,让上层业务调用者来决定业务是否该要继续往下执行.<br><br>2.为了隐藏代码实现细节，我们把 getLastSubstrSplittedByDot(String hostName) 函数命名替换成 getLastSubstrByDelimiter(String hostName)，这样是否更加合理？为什么？<br>不合理.<br>因为这里是代码实现细节,应当通过名称准确表达其功能含义.假如替换成getLastSubstrByDelimiter,调用时一下子不会清楚是用什么字符来标记划分的,需要进入源码阅读,这样就增加了使用的成本.","like_count":0},{"had_liked":false,"id":173721,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1579670029,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579670029","product_id":100039001,"comment_content":"课堂讨论Answer:<br><br><br><br>1. 获取主机名失败的时候，generate() 函数应该返回什么最合适呢？是特殊 ID、null、空字符，还是异常？在小王的代码实现中，获取主机名失败异常在 IdGenerator 内部被吐掉了，打印一条报警日志，并没有继续往上抛出，这样的异常处理是否得当？<br><br>   <br><br>   返回特殊ID较为合理. <br><br>   异常处理不合理.要么向调用者抛出exception,要么放弃在方法内部使用CE,使用if(获取主机名失败) 返回特殊ID.<br><br>   以上两种是比较合理的处理方式.<br><br>   <br><br>2. 为了隐藏代码实现细节，我们把 getLastSubstrSplittedByDot(String hostName) 函数命名替换成 getLastSubstrByDelimiter(String hostName)，这样是否更加合理？为什么？<br><br><br><br>​    结论: 不合理. <br><br>​    其一: getLastSubstrSplittedByDot()方法是类内部的方法,并未暴露给外部.原方法命名不存在问题,所以不应该修改命名.    <br><br>​    其二: getLastSubstrSplittedByDot() 业务需求是以&quot;.&quot;分割,修改需求的可能性很低.原命名精准的表达了业务需求,ByDelimiter()的含义更模糊,影响代码的可读性.","like_count":0},{"had_liked":false,"id":173714,"user_name":"╭(╯ε╰)╮","can_delete":false,"product_type":"c1","uid":1440349,"ip_address":"","ucode":"4CB5FAEEE8CC5D","user_header":"https://static001.geekbang.org/account/avatar/00/15/fa/5d/735fdc76.jpg","comment_is_top":false,"comment_ctime":1579667250,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"1579667250","product_id":100039001,"comment_content":"当代码中是guardian风格的时候 我可能会用返回null的方式，比如<br>foobar(){<br>  String id = generator.genarate.();<br>  if(id==null) return;<br>  if(xxx==null) return;<br>  if(yyy==0) return;<br>  someLogic(id,xxx,yyy);<br>}<br>如果会对返回的对象调用一些接口方法，我可能会用空值对象的方式，比如<br>1.<br>Collection someData() {<br>  if(wrong) return Collection.empty()<br>  ...<br>  return ...<br>}<br>foobar() {<br>  someData().forEach();<br>}<br>2.<br>Runnable someTask() {<br>  if(wrong) return ()-&gt;{};<br>  return ...<br>}<br>foobar() {<br>  someTask().run()<br>}<br><br>偶尔我也会在项目底层做一套可读性强，使用方便的异常处理的逻辑，业务中层层抛出。但这种方式一般不被同事们接受，会被说影响性能。对这种理由，我保持意见。<br><br>说个题外话 你们知不知道泛型是否可以用在throws上面，我有个方法声明会抛出异常，但我使用的时候不想有try&#47;catch并且外面的调用方法上面也不能有throws exception的声明，怎么做比较好？<br>someMethod() throws Exception {<br>}<br>foobar() &#47;* throws Exception 这里不能声明抛异常 *&#47; {<br>  &#47;&#47; try {<br>  &#47;&#47; } catch (Exception e) {<br>  someMethod(); &#47;&#47; 别问为什么不try&#47;catch 就当是一个考题<br>  &#47;&#47; }<br>}","like_count":0,"discussions":[{"author":{"id":1738326,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","nickname":"守拙","note":"","ucode":"F594B2DA3F6D4F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":147735,"discussion_content":"总之CE的问题在于你写的爽了,你的调用者食屎.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579670377,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1738326,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","nickname":"守拙","note":"","ucode":"F594B2DA3F6D4F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":147733,"discussion_content":"CE的缺陷和性能关系极小,主要问题在于你封装的module的调用者必须处理CE,让调用者非常烦.你想想,当你面对一个必须捕获的自定义CE,(例如 FormatUnsupportedEXception)你知道这个异常是什么意思?是不是还要翻module作者的源码去看?看了半天是不是还要琢磨该怎么处理异常?多层的CE就更不友好了.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579670296,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173704,"user_name":"沉淀的梦想","can_delete":false,"product_type":"c1","uid":1177315,"ip_address":"","ucode":"BCB7C26F9D214B","user_header":"https://static001.geekbang.org/account/avatar/00/11/f6/e3/e4bcd69e.jpg","comment_is_top":false,"comment_ctime":1579664416,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579664416","product_id":100039001,"comment_content":"getLastSubstrSplittedByDot 和 generateRandomAlphameric 可以放到专门的 StringUtil 中","like_count":0},{"had_liked":false,"id":173687,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1579660970,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579660970","product_id":100039001,"comment_content":"1.拿不到属于系统异常情况，应该上抛走异常流。当然也可以捕捉抛自定义异常，更精准的描述异常可能，规避底层调用栈，让api调用方更易排查。<br><br>2.如果是一个内部接口，那么就没必要改。当前名称语义更强。需要扩展时借用ide工具重构方法命1s钟的事。（内部接口方法命名，按需即可）。如果是一个外部接口，那命名最好还是抽象点好（尽量业务无关，内部细节无关）。因为外部接口不好做减法，也不好重构命名。所以命名时要考虑以后可能的扩展点，以涵盖这些可能的方式命名抽象的方法名，以保证以后扩展时不至于出现语义不符的窘境。（外部接口方法命名，要考虑后续扩展可能，合理抽象）","like_count":0}]}