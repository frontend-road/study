{"id":113569,"title":"31 | 辅助界面元素的架构设计","content":"<p>你好，我是七牛云许式伟。</p><p>我们第二章 “桌面软件开发” 今天开始进入尾声。前面我们主要围绕一个完整的桌面应用程序，从单机到 B/S 结构，我们的系统架构应该如何考虑。并且，我们通过五讲的 “画图” 程序实战，来验证我们的架构设计思路。</p><p>这个实战有点复杂。对于编码量不多的初学者，理解起来还是有点复杂性的。为了减轻理解的难度，我们从原计划的上下两讲，扩大到了五讲。尽管如此，理解上的难度仍然还是有的，后面我们做总结时，会给出一个不基于 MVC 架构的实现代码。</p><p>今天我们不谈桌面应用的架构，而是来谈谈辅助界面元素的架构设计。</p><p>辅助界面元素非常常见，它其实就是通用控件，或者我们自定义的控件。例如在我们画图程序中使用了线型选择控件（<a href=\"https://github.com/qiniu/qpaint/blob/v30/paintweb/www/accel/menu.js#L105\">menu.js#L105</a>），如下：</p><pre><code>&lt;select id=&quot;lineWidth&quot; onchange=&quot;onIntPropChanged('lineWidth')&quot;&gt;\n  &lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;\n  &lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;\n  &lt;option value=&quot;5&quot;&gt;5&lt;/option&gt;\n  &lt;option value=&quot;7&quot;&gt;7&lt;/option&gt;\n  &lt;option value=&quot;9&quot;&gt;9&lt;/option&gt;\n  &lt;option value=&quot;11&quot;&gt;11&lt;/option&gt;\n&lt;/select&gt;\n</code></pre><p>还有颜色选择控件（<a href=\"https://github.com/qiniu/qpaint/blob/v30/paintweb/www/accel/menu.js#L115\">menu.js#L115</a>），如下：</p><pre><code>&lt;select id=&quot;lineColor&quot; onchange=&quot;onPropChanged('lineColor')&quot;&gt;\n  &lt;option value=&quot;black&quot;&gt;black&lt;/option&gt;\n  &lt;option value=&quot;red&quot;&gt;red&lt;/option&gt;\n  &lt;option value=&quot;blue&quot;&gt;blue&lt;/option&gt;\n  &lt;option value=&quot;green&quot;&gt;green&lt;/option&gt;\n  &lt;option value=&quot;yellow&quot;&gt;yellow&lt;/option&gt;\n  &lt;option value=&quot;gray&quot;&gt;gray&lt;/option&gt;\n&lt;/select&gt;\n\n&lt;select id=&quot;fillColor&quot; onchange=&quot;onPropChanged('fillColor')&quot;&gt;\n  &lt;option value=&quot;white&quot;&gt;white&lt;/option&gt;\n  &lt;option value=&quot;null&quot;&gt;transparent&lt;/option&gt;\n  &lt;option value=&quot;black&quot;&gt;black&lt;/option&gt;\n  &lt;option value=&quot;red&quot;&gt;red&lt;/option&gt;\n  &lt;option value=&quot;blue&quot;&gt;blue&lt;/option&gt;\n  &lt;option value=&quot;green&quot;&gt;green&lt;/option&gt;\n  &lt;option value=&quot;yellow&quot;&gt;yellow&lt;/option&gt;\n  &lt;option value=&quot;gray&quot;&gt;gray&lt;/option&gt;\n&lt;/select&gt;\n</code></pre><p>我们统一用通用的 select 控件实现了一个线型选择器、两个颜色选择器的实例。虽然这种方式实现的颜色选择器不够美观，但是它们的确可以正常工作。</p><p>不过，产品经理很快就提出反对意见，说我们需要更加用户友好的界面。赶紧换一个更加可视化的颜色选择器吧？比如像下图这样的：</p><p><img src=\"https://static001.geekbang.org/resource/image/65/49/65ca44b08788bd03776bcd86ea3d0749.png?wh=571*268\" alt=\"\"></p><h2>辅助界面元素的框架</h2><!-- [[[read_end]]] --><p>怎么做到？</p><p>我们不妨把上面基础版本的线型选择器、颜色选择器叫做 BaseLineWidthPicker、BaseColorPicker，我们总结它们在画图程序中的使用接口如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/4c/2c/4c660159e3d632130c25614f0b0eb02c.png?wh=506*166\" alt=\"\"></p><p>我们解释一下这个表格中的各项内容。</p><p>id 是控件的 id，通过它可以获取到辅助界面元素的顶层结点。</p><p>value 是界面元素的值，其实也就是辅助界面元素的 Model 层的数据。从 MVC 架构角度来说，Model 层的数据一般是一棵 DOM 树。但是对很多辅助界面元素来说，它的 DOM 树比较简单，只是一个数值。比如线型选择器是一个 number，颜色选择器是一个 Color 值。</p><p>palette 是颜色选择器的调色板，用来指示颜色选择器可以选择哪些颜色。</p><p>blur() 方法是主动让一个界面元素失去焦点。</p><p>onchange 事件是在该界面元素的值（value）通过用户界面交互进行改变时发送的事件。需要注意的是，这个事件只在用户交互时发送。直接调用 element.value = xxx 这样的方式来修改界面元素的值是不会触发 onchange 事件的。</p><p>为了便于修改辅助界面元素，我们计划引入统一的辅助界面元素的框架。</p><p>这个框架长什么样？</p><p>首先，每个界面元素使用的时候，统一以 <code>&lt;div type=\"xxx\"&gt;</code>来表示。比如上面的一个线型选择器、两个颜色选择器的实例可以这样来表示：</p><pre><code>&lt;div type=&quot;BaseLineWidthPicker&quot; id=&quot;lineWidth&quot; onchange=&quot;onIntPropChanged('lineWidth')&quot;&gt;&lt;/div&gt;\n\n&lt;div type=&quot;BaseColorPicker&quot; id=&quot;lineColor&quot; onchange=&quot;onPropChanged('lineColor')&quot; palette=&quot;black,red,blue,green,yellow,gray&quot;&gt;&lt;/div&gt;\n\n&lt;div type=&quot;BaseColorPicker&quot; id=&quot;fillColor&quot; onchange=&quot;onPropChanged('fillColor')&quot; palette=&quot;white,null(transparent),black,red,blue,green,yellow,gray&quot;&gt;&lt;/div&gt;\n</code></pre><p>那么它是怎么被替换成前面的界面元素的？</p><p>我们引入一个全局的 qcontrols: QControls 实例，所有我们定义的控件都向它注册（register）自己。注册的代码如下：</p><pre><code>class QControls {\n  constructor() {\n    this.data = {}\n  }\n  register(type, control) {\n    this.data[type] = control\n  }\n}\n</code></pre><p>可以看出，注册的逻辑基本上没做什么，只是建立了类型（type）和控件的构建函数（control）的关联。有了这个关联表，我们就可以在适当的时候，把所有的 <code>&lt;div type=\"xxx\"&gt;</code>的div 替换为实际的控件。替换过程如下：</p><pre><code>class QControls {\n  init() {\n    let divs = document.getElementsByTagName(&quot;div&quot;)\n    let n = divs.length\n    for (let i = n-1; i &gt;= 0; i--) {\n      let div = divs[i]\n      let type = div.getAttribute(&quot;type&quot;)\n      if (type != null) {\n        let control = this.data[type]\n        if (control) {\n          control(div)\n        }\n      }\n    }\n  }\n}\n</code></pre><p>这段代码逻辑很简单，遍历文档中所有的 div，如果带 type 属性，就去查这个 type 有没有注册过，注册过就用注册时指定的构建函数去构建控件实例。</p><p>完整的辅助界面元素框架代码如下：</p><ul>\n<li><a href=\"https://github.com/qiniu/qpaint/blob/v31/paintweb/www/controls/base.js\">controls/base.js</a></li>\n</ul><p>具体构建控件的代码是怎么样的？源代码请参考这两个文件：</p><ul>\n<li><a href=\"https://github.com/qiniu/qpaint/blob/v31/paintweb/www/controls/BaseLineWidthPicker.js\">controls/BaseLineWidthPicker.js</a></li>\n<li><a href=\"https://github.com/qiniu/qpaint/blob/v31/paintweb/www/controls/BaseColorPicker.js\">controls/BaseColorPicker.js</a></li>\n</ul><p>我们拿 BaseColorPicker 作为例子看下吧：</p><pre><code>function BaseColorPicker(div) {\n  let id = div.id\n  let onchange = div.onchange\n  let palette = div.getAttribute(&quot;palette&quot;)\n  let colors = palette.split(&quot;,&quot;)\n  let options = []\n  for (let i in colors) {\n    let color = colors[i]\n    let n = color.length\n    if (color.charAt(n-1) == &quot;)&quot;) {\n      let offset = color.indexOf(&quot;(&quot;)\n      options.push(`&lt;option value=&quot;` + color.substring(0, offset) + `&quot;&gt;` + color.substring(offset+1, n-1) + `&lt;/option&gt;`)\n    } else {\n      options.push(`&lt;option value=&quot;` + color + `&quot;&gt;` + color + `&lt;/option&gt;`)\n    }\n  }\n  div.outerHTML = `&lt;select id=&quot;` + id + `&quot;&gt;` + options.join(&quot;&quot;) + `&lt;/select&gt;`\n  let elem = document.getElementById(id)\n  if (onchange) {\n    elem.onchange = onchange\n  }\n}\n\nqcontrols.register(&quot;BaseColorPicker&quot;, BaseColorPicker)\n</code></pre><p>可以看到，构建函数的代码大体分为如下三步。</p><p>第一步，从占位的 div 元素中读入所有的输入参数。这里是 id, onchange, palette。</p><p>第二步，把占位的 div 元素替换为实际的界面。也就是 div.outerHTML = <code>xxx</code> 这段代码。</p><p>第三步，如果用户对 onchange 事件感兴趣，把 onchange 响应函数安装到实际界面的 onchange 事件中。</p><h2>jQuery 颜色选择器</h2><p>接下来我们就开始考虑替换颜色选择器的实现了。新版本的颜色选择器，我们不妨命名为 ColorPicker。这个新版本的使用姿势必须和 BaseColorPicker 一样，也就是：</p><p><img src=\"https://static001.geekbang.org/resource/image/fc/f8/fc3856e8ab9aaf35c7af1611e57a47f8.png?wh=445*117\" alt=\"\"></p><p>从使用的角度来说，我们只需要把之前的 BaseColorPicker 换成 ColorPicker。如下：</p><pre><code>&lt;div type=&quot;BaseLineWidthPicker&quot; id=&quot;lineWidth&quot; onchange=&quot;onIntPropChanged('lineWidth')&quot;&gt;&lt;/div&gt;\n\n&lt;div type=&quot;ColorPicker&quot; id=&quot;lineColor&quot; onchange=&quot;onPropChanged('lineColor')&quot; palette=&quot;black,red,blue,green,yellow,gray&quot;&gt;&lt;/div&gt;\n\n&lt;div type=&quot;ColorPicker&quot; id=&quot;fillColor&quot; onchange=&quot;onPropChanged('fillColor')&quot; palette=&quot;white,null(transparent),black,red,blue,green,yellow,gray&quot;&gt;&lt;/div&gt;\n</code></pre><p>那么实现方面呢？</p><p>我们决定基于 jQuery 社区的 <a href=\"https://github.com/bgrins/spectrum\">spectrum</a> 颜色选择器。</p><p>我们的画图程序的主体并没有引用任何现成的框架代码。jQuery 是第一个被引入的。</p><p>对待 jQuery，我们可以有两种态度。一种是认为 jQuery 设计非常优良，我们很喜欢，决定将其作为团队的编程用的基础框架。</p><p>在这种态度下，我们允许 jQuery 风格的代码蔓延得到处都是，典型表现就是满屏皆是 $ 符号。</p><p>当然这种选择的风险是不低的。有一天我们不想再基于 jQuery 开发了，这意味着大量的模块需要进行调整，尤其是那些活跃的项目。</p><p>另一种态度是，认为 jQuery 并不是我们的主体框架，只是因为我们有些模块用了社区的成果，比如 <a href=\"https://github.com/bgrins/spectrum\">spectrum</a> 颜色选择器，它是基于 jQuery 实现的。这意味着我们要用 <a href=\"https://github.com/bgrins/spectrum\">spectrum</a>，就需要引入 jQuery。</p><p>这种团队下，我们会尽可能限制 jQuery 的使用范围，尽量不要让它的代码蔓延，而只是限制在颜色选择器等少量场景中。</p><p>我们这一讲假设我们的态度是后者。我们有自己的基础开发框架（虽然我们其实基本上接近裸写 JavaScript 的状态），所以不会大面积使用 jQuery。</p><p>这样我们需要包装 jQuery 组件。代码如下（参阅 <a href=\"https://github.com/qiniu/qpaint/blob/v31/paintweb/www/controls/ColorPicker.js\">controls/ColorPicker.js</a>）：</p><pre><code>function ColorPicker(div) {\n  let id = div.id\n  let onchange = div.onchange\n  let palette = div.getAttribute(&quot;palette&quot;)\n  let colors = palette.split(&quot;,&quot;)\n  let value = colors[0]\n  div.outerHTML = `&lt;input type=&quot;button&quot; id=&quot;` + id + `&quot; value=&quot;` + value + `&quot;&gt;`\n  let elem = $(&quot;#&quot; + id)\n  elem.spectrum({\n    showInitial: true,\n    showInput: true,\n    showButtons: true,\n    preferredFormat: &quot;hex6&quot;\n  })\n  if (onchange) {\n    elem.change(onchange)\n  }\n  Object.defineProperty(document.getElementById(id), &quot;value&quot;, {\n    get() {\n      return value\n    },\n    set(x) {\n      if (this.busy) {\n        return\n      }\n      value = x\n      this.busy = true\n      elem.spectrum(&quot;set&quot;, value)\n      this.busy = false\n    }\n  })\n}\n\nqcontrols.register(&quot;ColorPicker&quot;, ColorPicker)\n</code></pre><p>这里大部分代码比较常规，只有 Object.defineProperty 这一段看起来比较古怪一些。这段代码是在改写 document.getElementById(id) 这个界面元素的 value 属性的读写（get/set）函数。</p><p>为什么需要改写？</p><p>因为我们希望感知到使用者对 value 的改写。正常我们可能认为接管 onchange 就可以了，但是实际上 element.value = xxx 这样的属性改写是不会触发 onchange 事件的。所以我们只能从改写 value 属性的 set 函数来做。</p><p>set 函数收到 value 被改写后，会调用 elem.spectrum(\"set\", value) 来改变 spectrum 颜色控件的当前值。</p><p>但这里又有个细节问题：elem.spectrum(\"set\", value) 内部又会调用 element.value = value 来修改 document.getElementById(id) 这个界面元素的 value 属性，这样就出现了死循环。怎么办？我们通过引入一个 busy 标志来解决：如果当前已经处于 value 属性的 set 函数，就直接返回。</p><h2>辅助界面元素的架构设计</h2><p>到目前为止，我们实现了三个符合我们定义的控件规范的辅助界面元素。如下：</p><ul>\n<li><a href=\"https://github.com/qiniu/qpaint/blob/v31/paintweb/www/controls/BaseLineWidthPicker.js\">controls/BaseLineWidthPicker.js</a></li>\n<li><a href=\"https://github.com/qiniu/qpaint/blob/v31/paintweb/www/controls/BaseColorPicker.js\">controls/BaseColorPicker.js</a></li>\n<li><a href=\"https://github.com/qiniu/qpaint/blob/v31/paintweb/www/controls/ColorPicker.js\">controls/ColorPicker.js</a></li>\n</ul><p>观察这些辅助界面元素的代码，你会发现它们都没有基于 MVC 架构。</p><p>是因为辅助界面元素不适合用 MVC 架构来编写么？</p><p>当然不是。</p><p>更本质的原因是因为它们规模太小了。这些界面元素的特点是 DOM 都是一个 value，并不是一棵树，这样 Model 层就没什么代码了。同样的逻辑，View 层、Control 层代码量都过于短小，就没必要有那么清楚的模块划分。View 负责界面呈现，Control 负责事件响应，只是在心里有谱就好了。</p><p>但并不是所有辅助界面元素都这么简单。</p><p>举一个简单的例子。让我们给自己设定一个新目标：把我们前面实战的 “画图” 程序，改造成一个标准的辅助界面元素，这可行么？</p><p>答案当然是肯定的。</p><p>但是这意味着我们有一些假设需要修正。这些假设通常都和唯一性有关。</p><p>比如，全局有唯一的 View 对象实例 qview: QPaintView。如果我们是辅助界面元素，意味着我们可能在同一个界面出现多个实例。在多实例的情况下，View 对象显然就应该有多个。</p><p>再比如，我们画图程序的辅助界面元素（参见 <a href=\"https://github.com/qiniu/qpaint/blob/v31/paintweb/www/accel/menu.js\">accel/menu.js</a>）都是单例，具体表现为这些界面元素的 id 都是固定的。</p><p>当然，辅助界面元素的改造方案有多种可能性。一种方案是将辅助界面元素也改造为多例，使得每个 QPaint 实例都有自己的辅助界面元素。</p><p>另一种方案是继续保持单例，这意味着多个 QPaint 实例会有一个当前实例的概念。辅助界面元素根据场景，可以是操作全部实例，也可以是操作当前实例。</p><p>我们选择继续保持单例。这意味着 qview: QPaintView 这个全局变量可以继续存在，但是和之前的含义有了很大不同。之前 qview 代表的是单例，现在 qview 代表的是当前实例。</p><p>有了当前实例当然就有切换。这样就需要增加焦点相关的事件响应。</p><p>在画图程序中，很多 Controller 都是 View 实例相关的。比如：PathCreator、ShapeSelector 等。在 View 存在多例的情况下，这些 Controller 之前的 registerController 动作就需要重新考虑。</p><p>为了支持多例，我们引入了 onViewAdded、onCurrentViewChanged 事件。当一个新的 View 实例被创建时，会发送 onViewAdded 事件。Controller 可以响应该事件去完成 registerController 动作。如下：</p><pre><code>onViewAdded(function(view) {\n  view.registerController(&quot;PathCreator&quot;, function() {\n    return new QPathCreator(view, false)\n  })\n})\n</code></pre><p>原先，当前图形样式是放在 View 中的，通过 qview.style 可以访问到。这会导致多个 View 实例的当前图形样式不一样，但是我们辅助界面元素又是单例的，这就非常让人混淆。最后我们决定把 qview.style 挪到全局，改名叫 defaultStyle（参阅 <a href=\"https://github.com/qiniu/qpaint/blob/v31/paintweb/www/accel/menu.js#L42\">accel/menu.js#L42</a>）。</p><p>做完这些改造，我们的画图程序就有了成为一个标准控件的基础。具体代码如下（参阅 <a href=\"https://github.com/qiniu/qpaint/blob/v31/paintweb/www/PaintView.js\">PaintView.js</a>）：</p><pre><code>function newPaintView(drawingID) {\n  let view = new QPaintView(drawingID)\n  fireViewAdded(view)\n  return view\n}\n\nfunction initPaintView(drawingID) {\n  let view = newPaintView(drawingID)\n  setCurrentView(view)\n}\n\nfunction PaintView(div) {\n  let id = div.id\n  let width = div.getAttribute(&quot;width&quot;)\n  let height = div.getAttribute(&quot;height&quot;)\n  div.outerHTML = `&lt;canvas id=&quot;` + id + `&quot; width=&quot;` + width + `&quot; height=&quot;` + height + `&quot;&gt;你的浏览器不支持Canvas！&lt;/canvas&gt;`\n  initPaintView(id)\n}\n\nqcontrols.register(&quot;PaintView&quot;, PaintView)\n</code></pre><p>有了这个 PaintView 控件，我们就可以到处引用它了。我们做了一个 PaintView 控件的 DEMO 程序，它效果看起来是这样的（代码参阅 <a href=\"https://github.com/qiniu/qpaint/blob/v31/paintweb/www/PaintDemo.htm\">PaintDemo.htm</a>）：</p><p><img src=\"https://static001.geekbang.org/resource/image/29/52/295e17f40fa63b929a4a5175da39ae52.png?wh=1049*514\" alt=\"\"></p><p>从这个截图看，细心的你可能会留意到，还有一个问题是没有被修改的，那就是 URL 地址。我们的 QPaintView 在 load 文档后会修改 URL，这作为应用程序并没有问题。但是如果是一个控件，整个界面有好多个 PaintView，URL 中应该显示哪个文档的 ID？</p><p>显然谁都不合适。如果非要显示，可能要在 PaintView 实例附近放一个辅助界面元素来显示它。</p><p>怎么修改？</p><p>这个问题暂且留给大家。</p><h2>结语</h2><p>今天探讨了辅助界面元素，或者叫控件的架构设计。从大的实现逻辑来说，它和应用程序不应该有本质的不同。但控件总是要考虑支持多实例，这会带来一些细节上的差异。</p><p>支持多实例听起来是一项简单的工作，但是从我的观察看，对很多工程师来说实际上并不简单。不少初级工程师写代码往往容易全局变量满天飞，模块之间相互传递信息不假思索地基于全局变量来完成。这些不良习惯会导致代码极难控件化。</p><p>当然我们不见得什么桌面应用程序都要考虑把它控件化。但是我们花一些精力去思考控件化的话，会有助于你对架构设计中的一些决策提供帮助。</p><p>当然更重要的，其实是让你有机会形成更好的架构设计规范。</p><p>这一讲我们作出的修改如下：</p><ul>\n<li><a href=\"https://github.com/qiniu/qpaint/compare/v30...v31\">https://github.com/qiniu/qpaint/compare/v30...v31</a></li>\n</ul><p>这是最新版本的源代码：</p><ul>\n<li><a href=\"https://github.com/qiniu/qpaint/tree/v31\">https://github.com/qiniu/qpaint/tree/v31</a></li>\n</ul><p>如果你对今天的内容有什么思考与解读，欢迎给我留言，我们一起讨论。下一讲我们会谈谈架构设计的第二步：如何做好系统架构。</p><p>如果你觉得有所收获，也欢迎把文章分享给你的朋友。感谢你的收听，我们下期再见。</p>","comments":[{"had_liked":false,"id":124600,"user_name":"humor","can_delete":false,"product_type":"c1","uid":1181867,"ip_address":"","ucode":"9B48C4C7BEC92C","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/ab/caec7bca.jpg","comment_is_top":false,"comment_ctime":1565926038,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"83170304662","product_id":100025201,"comment_content":"膜拜大神，感觉难懂的原因是这个例子有点太大了，功能点比较多，不是一下子就能消化得了的，需要静下心来思考，尤其是不太懂js的同学。不经意看到了许老师的代码提交记录，有时候凌晨两三点，早上5点多还在为我们准备代码，认真负责的态度令人折服，许老师平时也是晚睡晚起的夜猫子类型么~","like_count":20,"discussions":[{"author":{"id":1252977,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1e/71/9dcbe6c4.jpg","nickname":"成楠Peter","note":"","ucode":"4D13E7368D8CF2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7063,"discussion_content":"说不定在国外","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567330414,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1112490,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f9/aa/3e80212e.jpg","nickname":"龙猫","note":"","ucode":"FD726CC969EF9C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1252977,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1e/71/9dcbe6c4.jpg","nickname":"成楠Peter","note":"","ucode":"4D13E7368D8CF2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382222,"discussion_content":"在杭州呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625477641,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":7063,"ip_address":""},"score":382222,"extra":""}]}]},{"had_liked":false,"id":123883,"user_name":"Taozi","can_delete":false,"product_type":"c1","uid":1021926,"ip_address":"","ucode":"DD6567A31B3E33","user_header":"","comment_is_top":false,"comment_ctime":1565776715,"is_pvip":false,"replies":[{"id":"45387","content":"多谢，我看下。<br>补充回复：今天花时间复现了该bug。严格来说不算bug，之所以出现这类情况，是因为服务端被重启后丢失数据（目前服务端是mock的），而客户端的cache里面还有这份文档。而我们在生成文档的id的时候是固定的10001开始，所以导致两份文档有相同的id，客户端对changes的判断就出现了偏差。这个问题修复的方式可以是：<br>1. 改程序。让服务端生成文档id不是10001这类，而是一个uuid。<br>2. 不改程序，不把它当bug。那么最简单的就是清空浏览器 localhost:8888 的 localStorage。这个一般浏览器的开发者工具都可以做到。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1565779537,"ip_address":"","comment_id":123883,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27335580491","product_id":100025201,"comment_content":"v31分支代码有点问题（添加第1个shape时，post上去的changes部分是空的{&quot;shapes&quot;:[&quot;1&quot;],&quot;changes&quot;:[],&quot;ver&quot;:1}），果不其然删除这个shape程序就发生异常了","like_count":7,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462867,"discussion_content":"多谢，我看下。\n补充回复：今天花时间复现了该bug。严格来说不算bug，之所以出现这类情况，是因为服务端被重启后丢失数据（目前服务端是mock的），而客户端的cache里面还有这份文档。而我们在生成文档的id的时候是固定的10001开始，所以导致两份文档有相同的id，客户端对changes的判断就出现了偏差。这个问题修复的方式可以是：\n1. 改程序。让服务端生成文档id不是10001这类，而是一个uuid。\n2. 不改程序，不把它当bug。那么最简单的就是清空浏览器 localhost:8888 的 localStorage。这个一般浏览器的开发者工具都可以做到。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565779537,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125247,"user_name":"Geek_88604f","can_delete":false,"product_type":"c1","uid":1501234,"ip_address":"","ucode":"33DD1318E53814","user_header":"","comment_is_top":false,"comment_ctime":1566130612,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10156065204","product_id":100025201,"comment_content":"这个厉害了，从来没有想过控件的开发也能和MVC架构扯上关系。看来不管多小的特性开发都要先想清楚代码的结构，麻雀虽小，五脏俱全。感谢许老师！","like_count":2},{"had_liked":false,"id":121518,"user_name":"Frank","can_delete":false,"product_type":"c1","uid":1181820,"ip_address":"","ucode":"C2AE321A085868","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/7c/a8a37ddb.jpg","comment_is_top":false,"comment_ctime":1565150377,"is_pvip":false,"replies":[{"id":"44651","content":"直接说说是哪些地方？","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1565160790,"ip_address":"","comment_id":121518,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10155084969","product_id":100025201,"comment_content":"感觉从实战开始 很多知识点都很晦涩 不好理解 ","like_count":2,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461833,"discussion_content":"直接说说是哪些地方？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565160790,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1252977,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1e/71/9dcbe6c4.jpg","nickname":"成楠Peter","note":"","ucode":"4D13E7368D8CF2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7064,"discussion_content":"我是前端，也觉得功能太大了，不易接受","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567330461,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":222247,"user_name":"被讨厌的勇气","can_delete":false,"product_type":"c1","uid":1547913,"ip_address":"","ucode":"AE3B3CA27D91A2","user_header":"https://static001.geekbang.org/account/avatar/00/17/9e/89/6e9c05d6.jpg","comment_is_top":false,"comment_ctime":1590724955,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5885692251","product_id":100025201,"comment_content":"我平时使用的C++和Qt，并不使用JS，在阅读代码的时候首先需要读懂代码，还得考虑这个如果使用Qt该怎么实现。所以心智负担比较重。","like_count":1},{"had_liked":false,"id":124287,"user_name":"MinRong.Fu","can_delete":false,"product_type":"c1","uid":1273816,"ip_address":"","ucode":"3610A45593D2C3","user_header":"https://static001.geekbang.org/account/avatar/00/13/6f/d8/852feb97.jpg","comment_is_top":false,"comment_ctime":1565853683,"is_pvip":false,"replies":[{"id":"45612","content":"我测试了 FireFox Quantum 69.0 (64 位) 版本，没有重现你的问题。考虑到这个只是demo，对于浏览器兼容性考虑不是很多，建议升级下浏览器版本。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1565860070,"ip_address":"","comment_id":124287,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5860820979","product_id":100025201,"comment_content":"使用FireFox浏览器，为什么线宽、线的颜色和填充颜色出不来？","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463099,"discussion_content":"我测试了 FireFox Quantum 69.0 (64 位) 版本，没有重现你的问题。考虑到这个只是demo，对于浏览器兼容性考虑不是很多，建议升级下浏览器版本。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565860070,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1273816,"avatar":"https://static001.geekbang.org/account/avatar/00/13/6f/d8/852feb97.jpg","nickname":"MinRong.Fu","note":"","ucode":"3610A45593D2C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6717,"discussion_content":"然后把let elem = $(&#34;#&#34; + id);  改为:let elem = document.getElementById(id);又出现了错误：TypeError: elem.spectrum is not a function","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567067079,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1273816,"avatar":"https://static001.geekbang.org/account/avatar/00/13/6f/d8/852feb97.jpg","nickname":"MinRong.Fu","note":"","ucode":"3610A45593D2C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6716,"discussion_content":"通过调试发现在ColorPicker.js:8:16 提示：ReferenceError: $ is not defined ，网上的资料大部分是反映没有加载jquery.js的原因， 但是在index.html已经加载了jquery.js，如：<script src=&#34;/base/jquery.js&#34;></script> ，这是为什么？ ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567066932,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121991,"user_name":"Geek_88604f","can_delete":false,"product_type":"c1","uid":1501234,"ip_address":"","ucode":"33DD1318E53814","user_header":"","comment_is_top":false,"comment_ctime":1565266169,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5860233465","product_id":100025201,"comment_content":"哪个获得焦点就显示哪个的URL","like_count":1,"discussions":[{"author":{"id":1501234,"avatar":"","nickname":"Geek_88604f","note":"","ucode":"33DD1318E53814","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4277,"discussion_content":"或则URL作为控件的一个属性","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1565266762,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":288665,"user_name":"不温暖啊不纯良","can_delete":false,"product_type":"c1","uid":2079117,"ip_address":"","ucode":"204474A214E00C","user_header":"https://static001.geekbang.org/account/avatar/00/1f/b9/8d/00bded19.jpg","comment_is_top":false,"comment_ctime":1618587850,"is_pvip":false,"replies":[{"id":"104803","content":"html+css是view，js作为controllers，很多人不会独立拆出model，但是实际上拆出model（dom）层是至关重要的。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1618669821,"ip_address":"","comment_id":288665,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1618587850","product_id":100025201,"comment_content":"越学越感觉自己菜，请问老师在实际业务中如果我们前端的代码设计得比较合理的话，能够应对以后的需求变化，是不是就不用去修改源代码了，view层的代码应该改动的比较大，我是这么理解的，model层的代码一旦写完之后，除非是原有的业务发生了变化，否则我们不需要去修改它，如果有新的业务需求，我们再写一个model 不就行了，而view负责调用业务，你在业务发生变化，可能会调整调用的方式，于是修改也就变多了。<br><br>在我们的实际开发中用的是vue，一个vue文件里面包含html、css、js代码，这是不是相当于没有设计，有的页面比较复杂的话，单个vue文件相对很大。<br><br>看完老师这几节实战讲解之后，我对前端的代码编写有了一个启发，就是我用js进行业务封装和解决通用问题，js看作model 层，css 看作view，html看作controller，这样代码的业务会不会更清晰一些呢？","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518700,"discussion_content":"html+css是view，js作为controllers，很多人不会独立拆出model，但是实际上拆出model（dom）层是至关重要的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618669821,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":176758,"user_name":"子杰sai","can_delete":false,"product_type":"c1","uid":1494536,"ip_address":"","ucode":"291DF79EE4D4D9","user_header":"https://static001.geekbang.org/account/avatar/00/16/ce/08/d6d6ba0d.jpg","comment_is_top":false,"comment_ctime":1581156131,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581156131","product_id":100025201,"comment_content":"由于身边没电脑，只能在脑里不断推敲，后面要在电脑里打开源码看看才行。谢谢许老师这么精彩的教学！","like_count":0},{"had_liked":false,"id":143805,"user_name":"小乙哥","can_delete":false,"product_type":"c1","uid":1063308,"ip_address":"","ucode":"C77E79BEA0C325","user_header":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","comment_is_top":false,"comment_ctime":1571794375,"is_pvip":false,"replies":[{"id":"55606","content":"前端其实比后端要简单直接，可以适当实战感悟一下就容易理解。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1571853773,"ip_address":"","comment_id":143805,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571794375","product_id":100025201,"comment_content":"做为后端同学看这几节课有点吃力，老师也什么好的建议吗？谢谢","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471696,"discussion_content":"前端其实比后端要简单直接，可以适当实战感悟一下就容易理解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571853773,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131903,"user_name":"哈哈先森","can_delete":false,"product_type":"c1","uid":1498939,"ip_address":"","ucode":"9A8967C1B2D646","user_header":"https://static001.geekbang.org/account/avatar/00/16/df/3b/2e1cb64c.jpg","comment_is_top":false,"comment_ctime":1567958289,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567958289","product_id":100025201,"comment_content":"示例程序有点大，要是有个图描述下结构，可能就容易理解一些了","like_count":0},{"had_liked":false,"id":121407,"user_name":"Aaron Cheung","can_delete":false,"product_type":"c1","uid":1079816,"ip_address":"","ucode":"03972759C53667","user_header":"https://static001.geekbang.org/account/avatar/00/10/7a/08/4d3e47dd.jpg","comment_is_top":false,"comment_ctime":1565136651,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565136651","product_id":100025201,"comment_content":"系统搞一搞js 打卡31","like_count":0}]}