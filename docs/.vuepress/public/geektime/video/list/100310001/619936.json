{"id":619936,"title":"75｜避坑指南：编写捕获异常程序时经常出现的问题","content":"<p><strong>课后习题</strong><br>\n程序员小派在调试程序时，发现程序偶尔会抛出自定义异常，但是根据异常提示无法定位异常产生的原因和产生异常的具体代码行数。作为小派的搭档，请你对该问题提出有效的代码优化方案。</p><p><strong>课程代码、课件及其他相关资料地址</strong><br>\n<a href=\"https://gitee.com/wilsonyin/zero-basics-python\">https://gitee.com/wilsonyin/zero-basics-python</a></p>","comments":[{"had_liked":false,"id":385088,"user_name":"Geek_631607","can_delete":false,"product_type":"c3","uid":3789991,"ip_address":"广东","ucode":"EAF874838F0BE4","user_header":"","comment_is_top":false,"comment_ctime":1702026376,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"在 Python 中，当异常被抛出时，可以使用 `traceback` 模块来获取详细的异常信息，包括异常的类型、异常的值以及异常的回溯（traceback）。回溯信息包含了异常发生时的调用堆栈信息，可以帮助我们定位到抛出异常的具体代码行。\n\n以下是一个例子，展示了如何在抛出异常时打印详细的回溯信息：\n\n```python\nimport traceback\n\ntry:\n    # 这里是可能会抛出异常的代码\n    pass\nexcept Exception as e:\n    traceback.print_exc()\n```\n\n在这个代码中，我们首先导入了 `traceback` 模块。然后，我们使用 `try-except` 语句来捕获可能会抛出的异常。如果有异常被抛出，我们就调用 `traceback.print_exc()` 函数来打印异常的回溯信息。\n\n这样，无论何时有异常被抛出，我们都可以立即看到详细的回溯信息，这将大大帮助我们定位和解决问题。                                                                                                   .","like_count":1,"discussions":[{"author":{"id":3838010,"avatar":"","nickname":"8000tank","note":"","ucode":"C5DC98A0EB57CE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":649285,"discussion_content":"看这描述语气，莫不是AI吧(#^.^#)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1723097472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":365720,"user_name":"Matthew","can_delete":false,"product_type":"c3","uid":2843865,"ip_address":"江苏","ucode":"96093089773740","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEKSVuNarJuDhBSvHY0giaq6yriceEBKiaKuc04wCYWOuso50noqDexaPJJibJN7PHwvcQppnzsDia1icZkw/132","comment_is_top":false,"comment_ctime":1672922343,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"对可能出问题的代码片段，增加 try-except ，捕获自定义异常，然后分析代码抛出异常的原因，进而确认代码问题所在。","like_count":1},{"had_liked":false,"id":396492,"user_name":"Geek_929ad1","can_delete":false,"product_type":"c3","uid":3732169,"ip_address":"美国","ucode":"32EBD25CC3E9EB","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/WaoJzYaQHicuvl3jUxty2SgV7UBNmCw0V6dciaXQL06fghSVeRba98eZhQxxYqcxudDjKTiaPeHc1UVMOj75ppPSnsZbJh6gCBicKVUlUudnz9E/132","comment_is_top":false,"comment_ctime":1734674980,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"初期：通过广义异常捕获 (如 Exception) 找到代码中容易引发问题的区域。\n定位：逐步缩小捕获范围，精准定位问题代码行。\n优化：设计细化的异常处理，增加用户友好提示和日志记录。\n改进：封装异常处理工具，提高代码的复用性和异常处理的一致性。","like_count":0},{"had_liked":false,"id":379402,"user_name":"Geek_Mike","can_delete":false,"product_type":"c3","uid":3196376,"ip_address":"云南","ucode":"CFA942192C3B74","user_header":"https://static001.geekbang.org/account/avatar/00/30/c5/d8/c5509b9c.jpg","comment_is_top":false,"comment_ctime":1691909512,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"1.增加异常的错误信息：在抛出异常时，可以增加更多的错误信息，例如异常产生的位置、异常的类型、异常的原因等等，这样可以帮助小派更好地理解异常产生的上下文和原因。\n\n2.使用日志记录：在程序的关键位置添加日志记录，记录程序运行的状态和变量值，当异常发生时，可以通过查看日志来了解异常产生时的程序状态，从而定位异常产生的原因和位置。\n\n3.使用调试工具：如果可能的话，可以使用一些调试工具来帮助定位异常。例如，在IDE中可以使用调试断点来暂停程序的执行，然后逐行执行程序，观察程序的运行状态和变量值，从而找到异常产生的原因和位置。\n\n4.重构代码：如果以上方法都无法解决问题，可以考虑对代码进行重构。通过将代码分解为更小的、可重用的代码块，减少代码的复杂度，提高代码的可读性和可维护性，从而降低异常的发生概率。","like_count":0},{"had_liked":false,"id":369303,"user_name":"yanyu-xin","can_delete":false,"product_type":"c3","uid":1899757,"ip_address":"广东","ucode":"3AA389F9E4C236","user_header":"","comment_is_top":false,"comment_ctime":1677379480,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"&#39;&#39;&#39;\n1. 缩小自定义异常的范围\n2. 抛出异常不要使用Exception基类\n3. 增加自定义异常的检查位置，明确提示异常捕获原因\n4. 检查自定义语句块，异常有没有交叉\n5. 在自定义异常程序中增加print,输出更多的信息\n&#39;&#39;&#39;","like_count":0}]}