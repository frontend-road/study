{"id":104265,"title":"24 | 带你解析 Python 垃圾回收机制","content":"<p>你好，我是景霄。</p><p>众所周知，我们当代的计算机都是图灵机架构。图灵机架构的本质，就是一条无限长的纸带，对应着我们今天的存储器。在工程学的演化中，逐渐出现了寄存器、易失性存储器（内存）和永久性存储器（硬盘）等产品。其实，这本身来自一个矛盾：速度越快的存储器，单位价格也越昂贵。因此，妥善利用好每一寸高速存储器的空间，永远是系统设计的一个核心。</p><p>回到 Python 应用层。</p><p>我们知道，Python 程序在运行的时候，需要在内存中开辟出一块空间，用于存放运行时产生的临时变量；计算完成后，再将结果输出到永久性存储器中。如果数据量过大，内存空间管理不善就很容易出现 OOM（out of memory），俗称爆内存，程序可能被操作系统中止。</p><p>而对于服务器，这种设计为永不中断的系统来说，内存管理则显得更为重要，不然很容易引发内存泄漏。什么是内存泄漏呢？</p><ul>\n<li>这里的泄漏，并不是说你的内存出现了信息安全问题，被恶意程序利用了，而是指程序本身没有设计好，导致程序未能释放已不再使用的内存。</li>\n<li>内存泄漏也不是指你的内存在物理上消失了，而是意味着代码在分配了某段内存后，因为设计错误，失去了对这段内存的控制，从而造成了内存的浪费。</li>\n</ul><p>那么，Python 又是怎么解决这些问题的？换句话说，对于不会再用到的内存空间，Python 是通过什么机制来回收这些空间的呢？</p><!-- [[[read_end]]] --><h2>计数引用</h2><p>我们反复提过好几次， Python 中一切皆对象。因此，你所看到的一切变量，本质上都是对象的一个指针。</p><p>那么，怎么知道一个对象，是否永远都不能被调用了呢？</p><p>我们上节课提到过的，也是非常直观的一个想法，就是当这个对象的引用计数（指针数）为 0 的时候，说明这个对象永不可达，自然它也就成为了垃圾，需要被回收。</p><p>我们来看一个例子：</p><pre><code>import os\nimport psutil\n\n# 显示当前 python 程序占用的内存大小\ndef show_memory_info(hint):\n    pid = os.getpid()\n    p = psutil.Process(pid)\n    \n    info = p.memory_full_info()\n    memory = info.uss / 1024. / 1024\n    print('{} memory used: {} MB'.format(hint, memory))\n</code></pre><pre><code>def func():\n    show_memory_info('initial')\n    a = [i for i in range(10000000)]\n    show_memory_info('after a created')\n\nfunc()\nshow_memory_info('finished')\n\n########## 输出 ##########\n\ninitial memory used: 47.19140625 MB\nafter a created memory used: 433.91015625 MB\nfinished memory used: 48.109375 MB\n</code></pre><p>通过这个示例，你可以看到，调用函数 func()，在列表 a 被创建之后，内存占用迅速增加到了 433 MB：而在函数调用结束后，内存则返回正常。</p><p>这是因为，函数内部声明的列表 a 是局部变量，在函数返回后，局部变量的引用会注销掉；此时，列表 a 所指代对象的引用数为 0，Python 便会执行垃圾回收，因此之前占用的大量内存就又回来了。</p><p>明白了这个原理后，我们稍微修改一下代码：</p><pre><code>def func():\n    show_memory_info('initial')\n    global a\n    a = [i for i in range(10000000)]\n    show_memory_info('after a created')\n\nfunc()\nshow_memory_info('finished')\n\n########## 输出 ##########\n\ninitial memory used: 48.88671875 MB\nafter a created memory used: 433.94921875 MB\nfinished memory used: 433.94921875 MB\n</code></pre><p>新的这段代码中，global a 表示将 a 声明为全局变量。那么，即使函数返回后，列表的引用依然存在，于是对象就不会被垃圾回收掉，依然占用大量内存。</p><p>同样，如果我们把生成的列表返回，然后在主程序中接收，那么引用依然存在，垃圾回收就不会被触发，大量内存仍然被占用着：</p><pre><code>def func():\n    show_memory_info('initial')\n    a = [i for i in derange(10000000)]\n    show_memory_info('after a created')\n    return a\n\na = func()\nshow_memory_info('finished')\n\n########## 输出 ##########\n\ninitial memory used: 47.96484375 MB\nafter a created memory used: 434.515625 MB\nfinished memory used: 434.515625 MB\n</code></pre><p>这是最常见的几种情况。由表及里，下面，我们深入看一下 Python 内部的引用计数机制。老规矩，先来看代码：</p><pre><code>import sys\n\na = []\n\n# 两次引用，一次来自 a，一次来自 getrefcount\nprint(sys.getrefcount(a))\n\ndef func(a):\n    # 四次引用，a，python 的函数调用栈，函数参数，和 getrefcount\n    print(sys.getrefcount(a))\n\nfunc(a)\n\n# 两次引用，一次来自 a，一次来自 getrefcount，函数 func 调用已经不存在\nprint(sys.getrefcount(a))\n\n########## 输出 ##########\n\n2\n4\n2\n</code></pre><p>简单介绍一下，sys.getrefcount() 这个函数，可以查看一个变量的引用次数。这段代码本身应该很好理解，不过别忘了，<strong>getrefcount 本身也会引入一次计数</strong>。</p><p>另一个要注意的是，在函数调用发生的时候，会产生额外的两次引用，一次来自函数栈，另一个是函数参数。</p><pre><code>import sys\n\na = []\n\nprint(sys.getrefcount(a)) # 两次\n\nb = a\n\nprint(sys.getrefcount(a)) # 三次\n\nc = b\nd = b\ne = c\nf = e\ng = d\n\nprint(sys.getrefcount(a)) # 八次\n\n########## 输出 ##########\n\n2\n3\n8\n</code></pre><p>看到这段代码，需要你稍微注意一下，a、b、c、d、e、f、g 这些变量全部指代的是同一个对象，而sys.getrefcount() 函数并不是统计一个指针，而是要统计一个对象被引用的次数，所以最后一共会有八次引用。</p><p>理解引用这个概念后，引用释放是一种非常自然和清晰的思想。相比 C 语言里，你需要使用 free 去手动释放内存，Python 的垃圾回收在这里可以说是省心省力了。</p><p>不过，我想还是会有人问，如果我偏偏想手动释放内存，应该怎么做呢？</p><p>方法同样很简单。你只需要先调用 del a 来删除对象的引用；然后强制调用 gc.collect()，清除没有引用的对象，即可手动启动垃圾回收。</p><pre><code>import gc\n\nshow_memory_info('initial')\n\na = [i for i in range(10000000)]\n\nshow_memory_info('after a created')\n\ndel a\ngc.collect()\n\nshow_memory_info('finish')\nprint(a)\n\n########## 输出 ##########\n\ninitial memory used: 48.1015625 MB\nafter a created memory used: 434.3828125 MB\nfinish memory used: 48.33203125 MB\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\n&lt;ipython-input-12-153e15063d8a&gt; in &lt;module&gt;\n     11 \n     12 show_memory_info('finish')\n---&gt; 13 print(a)\n\nNameError: name 'a' is not defined\n</code></pre><p>到这里，是不是觉得垃圾回收非常简单呀？</p><p>我想，肯定有人觉得自己都懂了，那么，如果此时有面试官问：引用次数为 0 是垃圾回收启动的充要条件吗？还有没有其他可能性呢？</p><p>这个问题，你能回答的上来吗？</p><h2>循环引用</h2><p>如果你也被困住了，别急。我们不妨小步设问，先来思考这么一个问题：如果有两个对象，它们互相引用，并且不再被别的对象所引用，那么它们应该被垃圾回收吗？</p><p>请仔细观察下面这段代码：</p><pre><code>def func():\n    show_memory_info('initial')\n    a = [i for i in range(10000000)]\n    b = [i for i in range(10000000)]\n    show_memory_info('after a, b created')\n    a.append(b)\n    b.append(a)\n\nfunc()\nshow_memory_info('finished')\n\n########## 输出 ##########\n\ninitial memory used: 47.984375 MB\nafter a, b created memory used: 822.73828125 MB\nfinished memory used: 821.73046875 MB\n</code></pre><p>这里，a 和 b 互相引用，并且，作为局部变量，在函数 func 调用结束后，a 和 b 这两个指针从程序意义上已经不存在了。但是，很明显，依然有内存占用！为什么呢？因为互相引用，导致它们的引用数都不为 0。</p><p>试想一下，如果这段代码出现在生产环境中，哪怕 a 和 b 一开始占用的空间不是很大，但经过长时间运行后，Python 所占用的内存一定会变得越来越大，最终撑爆服务器，后果不堪设想。</p><p>当然，有人可能会说，互相引用还是很容易被发现的呀，问题不大。可是，更隐蔽的情况是出现一个引用环，在工程代码比较复杂的情况下，引用环还真不一定能被轻易发现。</p><p>那么，我们应该怎么做呢？</p><p>事实上，Python 本身能够处理这种情况，我们刚刚讲过的，可以显式调用 gc.collect() ，来启动垃圾回收。</p><pre><code>import gc\n\ndef func():\n    show_memory_info('initial')\n    a = [i for i in range(10000000)]\n    b = [i for i in range(10000000)]\n    show_memory_info('after a, b created')\n    a.append(b)\n    b.append(a)\n\nfunc()\ngc.collect()\nshow_memory_info('finished')\n\n########## 输出 ##########\n\ninitial memory used: 49.51171875 MB\nafter a, b created memory used: 824.1328125 MB\nfinished memory used: 49.98046875 MB\n</code></pre><p>所以你看，Python 的垃圾回收机制并没有那么弱。</p><p>Python 使用标记清除（mark-sweep）算法和分代收集（generational），来启用针对循环引用的自动垃圾回收。你可能不太熟悉这两个词，这里我简单介绍一下。</p><p>先来看标记清除算法。我们先用图论来理解不可达的概念。对于一个有向图，如果从一个节点出发进行遍历，并标记其经过的所有节点；那么，在遍历结束后，所有没有被标记的节点，我们就称之为不可达节点。显而易见，这些节点的存在是没有任何意义的，自然的，我们就需要对它们进行垃圾回收。</p><p>当然，每次都遍历全图，对于 Python 而言是一种巨大的性能浪费。所以，在 Python 的垃圾回收实现中，mark-sweep 使用双向链表维护了一个数据结构，并且只考虑容器类的对象（只有容器类对象才有可能产生循环引用）。具体算法这里我就不再多讲了，毕竟我们的重点是关注应用。</p><p>而分代收集算法，则是另一个优化手段。</p><p>Python 将所有对象分为三代。刚刚创立的对象是第 0 代；经过一次垃圾回收后，依然存在的对象，便会依次从上一代挪到下一代。而每一代启动自动垃圾回收的阈值，则是可以单独指定的。当垃圾回收器中新增对象减去删除对象达到相应的阈值时，就会对这一代对象启动垃圾回收。</p><p>事实上，分代收集基于的思想是，新生的对象更有可能被垃圾回收，而存活更久的对象也有更高的概率继续存活。因此，通过这种做法，可以节约不少计算量，从而提高 Python 的性能。</p><p>学了这么多，刚刚面试官的问题，你应该能回答得上来了吧！没错，引用计数是其中最简单的实现，不过切记，引用计数并非充要条件，它只能算作充分非必要条件；至于其他的可能性，我们所讲的循环引用正是其中一种。</p><h2>调试内存泄漏</h2><p>不过，虽然有了自动回收机制，但这也不是万能的，难免还是会有漏网之鱼。内存泄漏是我们不想见到的，而且还会严重影响性能。有没有什么好的调试手段呢？</p><p>答案当然是肯定的，接下来我就为你介绍一个“得力助手”。</p><p>它就是objgraph，一个非常好用的可视化引用关系的包。在这个包中，我主要推荐两个函数，第一个是show_refs()，它可以生成清晰的引用关系图。</p><p>通过下面这段代码和生成的引用调用图，你能非常直观地发现，有两个 list 互相引用，说明这里极有可能引起内存泄露。这样一来，再去代码层排查就容易多了。</p><pre><code>import objgraph\n\na = [1, 2, 3]\nb = [4, 5, 6]\n\na.append(b)\nb.append(a)\n\nobjgraph.show_refs([a])\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/fc/ae/fc3b0355ecfdbac5a7b48aa014208aae.png?wh=1039*547\" alt=\"\"></p><p>而另一个非常有用的函数，是 show_backrefs()。下面同样为示例代码和生成图，你可以自己先阅读一下：</p><pre><code>import objgraph\n\na = [1, 2, 3]\nb = [4, 5, 6]\n\na.append(b)\nb.append(a)\n\nobjgraph.show_backrefs([a])\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/92/27/9228289bac4976cfa9b11e08c05a7a27.png?wh=2011*1277\" alt=\"\"></p><p>相比刚才的引用调用图，这张图显得稍微复杂一些。不过，我仍旧推荐你掌握它，因为这个 API 有很多有用的参数，比如层数限制（max_depth）、宽度限制（too_many）、输出格式控制（filename output）、节点过滤（filter, extra_ignore）等。所以，建议你使用之前，先认真看一下<a href=\"https://mg.pov.lt/objgraph/\">文档</a>。</p><h2>总结</h2><p>最后，带你来总结一下。今天这节课，我们深入了解了Python 的垃圾回收机制，我主要强调下面这几点：</p><ol>\n<li>垃圾回收是 Python 自带的机制，用于自动释放不会再用到的内存空间；</li>\n<li>引用计数是其中最简单的实现，不过切记，这只是充分非必要条件，因为循环引用需要通过不可达判定，来确定是否可以回收；</li>\n<li>Python 的自动回收算法包括标记清除和分代收集，主要针对的是循环引用的垃圾收集；</li>\n<li>调试内存泄漏方面， objgraph 是很好的可视化分析工具。</li>\n</ol><h2>思考题</h2><p>最后给你留一道思考题。你能否自己实现一个垃圾回收判定算法呢？我的要求很简单，输入是一个有向图，给定起点，表示程序入口点；给定有向边，输出不可达节点。</p><p>希望你可以认真思考这个问题，并且在留言区写下你的答案与我讨论。也欢迎你把这篇文章分享出去，我们一起交流，一起进步。</p><p></p>","neighbors":{"left":{"article_title":"23 | 你真的懂Python GIL（全局解释器锁）吗？","id":103834},"right":{"article_title":"25 | 答疑（二）：GIL与多线程是什么关系呢？","id":105083}},"comments":[{"had_liked":false,"id":110825,"user_name":"Jingxiao","can_delete":false,"product_type":"c1","uid":1259521,"ip_address":"","ucode":"EB966BB87132F6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","comment_is_top":true,"comment_ctime":1562357944,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"9.2233721758560993e+18","product_id":100026901,"comment_content":"思考题答案：<br><br>事实上算法可以写的很简单，这是个很经典的 dfs （深度优先搜索）遍历，从起点开始遍历，对遍历到的节点做个记号。遍历完成后，再对所有节点扫一遍，没有被做记号的，就是需要垃圾回收的。","like_count":33,"discussions":[{"author":{"id":1383620,"avatar":"https://static001.geekbang.org/account/avatar/00/15/1c/c4/3e593863.jpg","nickname":"cool","note":"","ucode":"254220D6E2DAE8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287975,"discussion_content":"循环引用好像不能回收","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593604772,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2403543,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ac/d7/205f55aa.jpg","nickname":"我永远喜欢甘雨","note":"","ucode":"9FC9172D63F6B6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1383620,"avatar":"https://static001.geekbang.org/account/avatar/00/15/1c/c4/3e593863.jpg","nickname":"cool","note":"","ucode":"254220D6E2DAE8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382079,"discussion_content":"我理解的标记清除是从现有的变量出发搜索到的容器对象予以保留，循环引用的话，虽然他们的引用计数不为0，但都是容器指向了容器，没有现有的变量能够搜索到这些容器。这样搜索完一遍之后是不会搜索到这些容器的","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1625406649,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":287975,"ip_address":""},"score":382079,"extra":""}]}]},{"had_liked":false,"id":111729,"user_name":"Switch","can_delete":false,"product_type":"c1","uid":1250758,"ip_address":"","ucode":"EB9FFA94D2F24B","user_header":"https://static001.geekbang.org/account/avatar/00/13/15/c6/f5c543ef.jpg","comment_is_top":false,"comment_ctime":1562590611,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"91756903827","product_id":100026901,"comment_content":"思考题：<br>from typing import Set<br><br><br>class Graph:<br>    def __init__(self, value, nodes=None):<br>        self._value = value<br>        self._nodes: list = [] if nodes is None else nodes<br><br>    @property<br>    def value(self):<br>        return self._value<br><br>    @property<br>    def nodes(self):<br>        return self._nodes<br><br>    def node_add(self, node):<br>        self._nodes.append(node)<br><br>    def node_adds(self, nodes):<br>        self._nodes.extend(nodes)<br><br>    def node_del(self, node):<br>        self._nodes.remove(node)<br><br>    def __str__(self):<br>        return &quot;Graph {} nodes {}&quot;.format(self._value, [node.value for node in self.nodes])<br><br>    def __repr__(self):<br>        return self.__str__()<br><br><br>def dfs(start: Graph, includes: Set[Graph] = None) -&gt; Set[Graph]:<br>    if includes is None:<br>        includes = set()<br>    if start in includes:<br>        return includes<br>    includes.add(start)<br>    for s in start.nodes:<br>        includes.update(dfs(s, includes))<br>    return includes<br><br><br>if __name__ == &#39;__main__&#39;:<br>    A = Graph(&#39;A&#39;)<br>    B = Graph(&#39;B&#39;)<br>    C = Graph(&#39;C&#39;)<br>    D = Graph(&#39;D&#39;)<br>    E = Graph(&#39;E&#39;)<br>    F = Graph(&#39;F&#39;)<br>    has_nodes = {A, B, C, D, E, F}<br><br>    # A-&gt;B-&gt;E<br>    #  -&gt;C-&gt;E<br>    # B-&gt;A<br>    # D-&gt;F<br>    # F-&gt;D<br>    A.node_adds([B, C])<br>    B.node_adds([A, E])<br>    C.node_adds([E])<br>    D.node_adds([F])<br>    F.node_adds([D])<br>    graph_nodes = dfs(A, set())<br>    # OUT: {Graph B nodes [&#39;A&#39;, &#39;E&#39;], Graph E nodes [], Graph C nodes [&#39;E&#39;], Graph A nodes [&#39;B&#39;, &#39;C&#39;]}<br>    print(graph_nodes)<br>    # OUT: {Graph F nodes [&#39;D&#39;], Graph D nodes [&#39;F&#39;]}<br>    print(has_nodes - graph_nodes)<br>","like_count":22,"discussions":[{"author":{"id":1239472,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e9/b0/7be55531.jpg","nickname":"尘墨","note":"","ucode":"2B46B4E5ECDF83","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1622,"discussion_content":"秀儿","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562746373,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":109798,"user_name":"陈迪","can_delete":false,"product_type":"c1","uid":1019744,"ip_address":"","ucode":"1A64122CC47337","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8f/60/be0a8805.jpg","comment_is_top":false,"comment_ctime":1562115478,"is_pvip":false,"replies":[{"id":"40292","content":"分代收集算法中每一代都有一个默认阈值，超过指定阈值之后就会启动垃圾回收。如果垃圾回收启动太频繁，会造成程序性能低下，分代收集也是为了提高性能，因此不立刻回收没关系，只要一定时间或者一定阈值之后回收都没问题。内存泄漏是这部分内存永远不再被回收，越攒越多，直到撑爆内存。","user_name":"作者回复","user_name_real":"高山流水","uid":"1513504","ctime":1562357234,"ip_address":"","comment_id":109798,"utype":1}],"discussion_count":3,"race_medal":0,"score":"78871526806","product_id":100026901,"comment_content":"1. 循环引用情况下Python不立即回收内存，如果放任不管，即不显式调用gc.collect的话，Python的垃圾回收器自己会什么时候处理？<br>2. 最后介绍了内存泄露排查工具，哪种算内存泄露呢？接问题1，不立即回收算内存泄露吗？还是有其他场景","like_count":19,"discussions":[{"author":{"id":1513504,"avatar":"https://static001.geekbang.org/account/avatar/00/17/18/20/75ea3b20.jpg","nickname":"高山流水","note":"","ucode":"71E513B5937481","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456576,"discussion_content":"分代收集算法中每一代都有一个默认阈值，超过指定阈值之后就会启动垃圾回收。如果垃圾回收启动太频繁，会造成程序性能低下，分代收集也是为了提高性能，因此不立刻回收没关系，只要一定时间或者一定阈值之后回收都没问题。内存泄漏是这部分内存永远不再被回收，越攒越多，直到撑爆内存。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1562357234,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1071316,"avatar":"https://static001.geekbang.org/account/avatar/00/10/58/d4/c52f9f6d.jpg","nickname":"芝士老爹","note":"","ucode":"5F2935967574D0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3606,"discussion_content":"我理解“内存泄漏”这里面的“泄漏”是管理权限上的泄漏，也就是这段内存已经脱离python的管理了，永远不会被回收了；只要还有可能被gc机制回收，就是处于可控的状态，就不算泄漏。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564630106,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1013200,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/75/d0/0053c9ba.jpg","nickname":"铁皮","note":"","ucode":"E20FB02D9ABD20","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":845,"discussion_content":"1. Python的gc是当达到自动回收垃圾的阀值时，就会启动垃圾回收器去处理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562120624,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232580,"user_name":"youaresherlock","can_delete":false,"product_type":"c1","uid":1281550,"ip_address":"","ucode":"B4D379C6B50DD4","user_header":"https://static001.geekbang.org/account/avatar/00/13/8e/0e/3fbc418d.jpg","comment_is_top":false,"comment_ctime":1594043363,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"31658814435","product_id":100026901,"comment_content":"四次引用，a，python 的函数调用栈，函数参数，和 getrefcount<br>不理解这里的函数调用栈、函数参数为什么增加了2次，这里有什么区别？他们两个不是一样的吗，函数参数在函数调用栈里，应该是一次啊","like_count":8,"discussions":[{"author":{"id":2585152,"avatar":"https://static001.geekbang.org/account/avatar/00/27/72/40/450ab188.jpg","nickname":"阿茂m丶","note":"","ucode":"ABA705797D521F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383878,"discussion_content":"第一次: a = []，第二次：func(a)， 第三次：def func(a)，第四次：print(sys.getrefcount(a))","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626265816,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":109797,"user_name":"天凉好个秋","can_delete":false,"product_type":"c1","uid":1136145,"ip_address":"","ucode":"E11B5F990A4000","user_header":"https://static001.geekbang.org/account/avatar/00/11/56/11/5d113d5c.jpg","comment_is_top":false,"comment_ctime":1562115450,"is_pvip":false,"replies":[{"id":"40293","content":"程序语言设计的时候肯定会有互相参考，Java 中的 gc 就很丰富了，程序员可以根据需要配置适合自己应用的 gc 算法，甚至在 OpenJDK 开源后，可以在更深的层次上对本来不对用户开放的细节进行深入配置。python 则并不希望编写者们对这里有过深入了解，拿来开箱即用就行了，这也是 python 设计哲学的一部分，牺牲一定性能换取方便性。","user_name":"作者回复","user_name_real":"高山流水","uid":"1513504","ctime":1562357533,"ip_address":"","comment_id":109797,"utype":1}],"discussion_count":3,"race_medal":0,"score":"27331919226","product_id":100026901,"comment_content":"本文讲的垃圾回收算法在Java中也都有，当初在设计的时候是不是参考了Java？而且，Java中还有标记整理算法，可以解决回收内存不连续的问题，这个在Python中有没有考虑呢？","like_count":7,"discussions":[{"author":{"id":1513504,"avatar":"https://static001.geekbang.org/account/avatar/00/17/18/20/75ea3b20.jpg","nickname":"高山流水","note":"","ucode":"71E513B5937481","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456575,"discussion_content":"程序语言设计的时候肯定会有互相参考，Java 中的 gc 就很丰富了，程序员可以根据需要配置适合自己应用的 gc 算法，甚至在 OpenJDK 开源后，可以在更深的层次上对本来不对用户开放的细节进行深入配置。python 则并不希望编写者们对这里有过深入了解，拿来开箱即用就行了，这也是 python 设计哲学的一部分，牺牲一定性能换取方便性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562357533,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1444483,"avatar":"https://static001.geekbang.org/account/avatar/00/16/0a/83/f916f903.jpg","nickname":"风","note":"","ucode":"E1CE0825AAF805","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350925,"discussion_content":"标记整理，那是解决内存碎片的问题。内存泄露和内存碎片，这是两个问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614074463,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1065272,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/38/4f89095b.jpg","nickname":"写点啥呢","note":"","ucode":"C19032CF1C41BA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":844,"discussion_content":"Java的内存整理算法是因为java的heap分配完全是jvm自己控制的，需要自己解决内存内碎片和外碎片问题。python如果用的是系统内存分配机制，那依赖os的整理机制就可以了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562120148,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":109870,"user_name":"程序员人生","can_delete":false,"product_type":"c1","uid":1113668,"ip_address":"","ucode":"C5C5073D89AAA2","user_header":"https://static001.geekbang.org/account/avatar/00/10/fe/44/3e3040ac.jpg","comment_is_top":false,"comment_ctime":1562123412,"is_pvip":false,"discussion_count":10,"race_medal":0,"score":"23036959892","product_id":100026901,"comment_content":"请问一下，老师<br>执行关于objgraph代码，出现如下错误：<br>Graph viewer (xdot) and image renderer (dot) not found, not doing anything else<br>是不是还要安装什么软件？","like_count":5,"discussions":[{"author":{"id":1017781,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/87/b5/dd0353f4.jpg","nickname":"三水","note":"","ucode":"11837CF38FD9BB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":896,"discussion_content":"如果是 macOS 的话：\nbrew install graphviz\n\n# Convert dot to png via graphviz\ndot -Tpng filename.dot -o filename.png\n\n# Convert dot to svg via graphviz\ndot -Tsvg filename.dot -o filename.svg\n\n# Convert dot to eps via graphviz\ndot -Tps filename.dot -o filename.eps","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1562143010,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1566610,"avatar":"","nickname":"庞亮","note":"","ucode":"E2FFB00F2ED229","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572559,"discussion_content":"用这个网址中的方法已解决  https://blog.csdn.net/HNUCSEE_LJK/article/details/86772806","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652856108,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1803215,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/83/cf/1f3b5b17.jpg","nickname":"Jaden~お張嘉楽","note":"","ucode":"FA2737D6A1D2C9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373847,"discussion_content":"１．　sudo apt-get install graphviz\n２．　sudo apt-get -f install\n然后运行程序后，生成的图片在/tmp 目录下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620892874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1087879,"avatar":"https://static001.geekbang.org/account/avatar/00/10/99/87/98ebb20e.jpg","nickname":"dao","note":"","ucode":"4181FB270462CF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328715,"discussion_content":"pip install xdot","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606216057,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1060987,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKVUskibDnhMtzXwqfgQcwYtMnIuOBuj8uw24cH3qURPOnjemAMgSJPoian3akOt5icsicXWQibqq7e97A/132","nickname":"cosin","note":"","ucode":"AAEC0731EC7CD2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1796,"discussion_content":"1、Install windows package from: \nhttps://graphviz.gitlab.io/_pages/Download/Download_windows.html\n2、Install python graphviz package\n3、Add C:\\Program Files (x86)\\Graphviz2.38\\bin to User/Syste path","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562915918,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1524154,"avatar":"https://static001.geekbang.org/account/avatar/00/17/41/ba/ae028565.jpg","nickname":"YqY","note":"","ucode":"73FB936045DCB9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1060987,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKVUskibDnhMtzXwqfgQcwYtMnIuOBuj8uw24cH3qURPOnjemAMgSJPoian3akOt5icsicXWQibqq7e97A/132","nickname":"cosin","note":"","ucode":"AAEC0731EC7CD2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5278,"discussion_content":"Graph written to C:\\Users\\ADMINI~1\\AppData\\Local\\Temp\\objgraph-8xhhgr_o.dot (8 nodes)\nSpawning graph viewer (xdot)\n运行后是这样的，还是没图形出来啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566131119,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":1796,"ip_address":""},"score":5278,"extra":""},{"author":{"id":1524154,"avatar":"https://static001.geekbang.org/account/avatar/00/17/41/ba/ae028565.jpg","nickname":"YqY","note":"","ucode":"73FB936045DCB9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1060987,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKVUskibDnhMtzXwqfgQcwYtMnIuOBuj8uw24cH3qURPOnjemAMgSJPoian3akOt5icsicXWQibqq7e97A/132","nickname":"cosin","note":"","ucode":"AAEC0731EC7CD2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5280,"discussion_content":"进入bin目录后要运行这个可执行文件gvedit.exe，然后打开dot文件就看到了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1566132344,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":1796,"ip_address":""},"score":5280,"extra":""},{"author":{"id":2043891,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/2f/f3/3a3cc6a1.jpg","nickname":"xiaochuan","note":"","ucode":"FF720EEB4B4EA7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1524154,"avatar":"https://static001.geekbang.org/account/avatar/00/17/41/ba/ae028565.jpg","nickname":"YqY","note":"","ucode":"73FB936045DCB9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292051,"discussion_content":"使用相对路径或者绝对路径生成dot文件后，打开dot文件，使用graphviz转化为pdf，直接在浏览器中view\n\nimport objgraph\nimport graphviz\n\na = [1, 2, 3]\nb = [4, 5, 6]\n\na.append(b)\nb.append(a)\n\nfilename = &#39;test.dot&#39;\nobj = objgraph.show_refs([a], filename=filename)\n\nwith open(filename) as f:\n    dot_graph = f.read()\ndot = graphviz.Source(dot_graph)\ndot.view()","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1595063097,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":5280,"ip_address":""},"score":292051,"extra":""}]},{"author":{"id":1218173,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/7d/c7e8cd34.jpg","nickname":"干布球","note":"","ucode":"048ABC199D89B9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":873,"discussion_content":"把graphviz的安装目录下的bin目录加到系统的环境变量就可以了，这个报错是指找不到dot这个命令","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562132927,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1158611,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ercic1LB9N9P1lWftkyyNqjILPAedlbRqvJl2KNTrDFCboiakKoTHPBTF3ufaIsdcLb9uXU8hFlptuw/132","nickname":"liuyyy","note":"","ucode":"AAA3922482E4F7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1218173,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/7d/c7e8cd34.jpg","nickname":"干布球","note":"","ucode":"048ABC199D89B9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":939,"discussion_content":"graphviz安装目录下没有bin目录，直接添加graphviz也不行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562160286,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":873,"ip_address":""},"score":939,"extra":""}]}]},{"had_liked":false,"id":231186,"user_name":"cool","can_delete":false,"product_type":"c1","uid":1383620,"ip_address":"","ucode":"254220D6E2DAE8","user_header":"https://static001.geekbang.org/account/avatar/00/15/1c/c4/3e593863.jpg","comment_is_top":false,"comment_ctime":1593604693,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14478506581","product_id":100026901,"comment_content":"Python 的自动回收算法包括标记清除 ，标记清除怎么来解决循环引用垃圾回收的，专栏中讲解的没听懂，循环引用 能在图中遍历到","like_count":3,"discussions":[{"author":{"id":1919541,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/4a/35/66caeed9.jpg","nickname":"完美坚持","note":"","ucode":"AE0261D8DDEF64","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310445,"discussion_content":"可以看一下维基百科 https://en.wikipedia.org/wiki/Tracing_garbage_collection \n下面的 Naïve mark-and-sweep 有张图非常形象直观，希望对你有帮助","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601858342,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174951,"user_name":"微风漂过","can_delete":false,"product_type":"c1","uid":1509168,"ip_address":"","ucode":"4F3E37C1E2FFF5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/JGPabHDickBjMJwVoJ7ZRGiaT21BibxvCJ9DR9Gvn3G1iazHQPTJQtkWwfFssYfGJsPahEB7sOnXScibkrsr4gx6LeA/132","comment_is_top":false,"comment_ctime":1580474481,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14465376369","product_id":100026901,"comment_content":"开头的代码<br>运行出错：ModuleNotFoundError: No module named &#39;psutil&#39;<br>安装出错：<br>pip install --upgrade psutil<br>Collecting psutil<br>  Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by &#39;ReadTimeoutError(&quot;HTTPSConnectionPool(host=&#39;pypi.org&#39;, port=443): Read timed out. (read timeout=15)&quot;)&#39;: &#47;simple&#47;psutil&#47;<br>  Could not find a version that satisfies the requirement psutil (from versions: )<br>No matching distribution found for psutil<br>请问这是什么原因？","like_count":3},{"had_liked":false,"id":110335,"user_name":"　　星豪","can_delete":false,"product_type":"c1","uid":1545903,"ip_address":"","ucode":"31C3FEA16F7BE8","user_header":"https://static001.geekbang.org/account/avatar/00/17/96/af/da8fd6ed.jpg","comment_is_top":false,"comment_ctime":1562231971,"is_pvip":false,"replies":[{"id":"40294","content":"1. 谢谢<br>2. 新增对象指代你创建一个对象，删除对象指代对象被释放，例如手动调用 del，从函数中返回临时变量的释放等，对这两者进行计数统计，然后相减。","user_name":"作者回复","user_name_real":"高山流水","uid":"1513504","ctime":1562357759,"ip_address":"","comment_id":110335,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14447133859","product_id":100026901,"comment_content":"1. 在读文章的时候找了一个可能是错别字的地方，在循环引用那一节中，第四段试想一下，如果这段代码出现在生产环境中...但经过长时间运行“候”...。这一侯应该是后来的后吧？<br>2. 当垃圾回收器中新增对象减去删除对象达到相应的阈值时，就会对这一代对象启动垃圾回收。这一句话不是很明白，新增对象我理解的是新创建的对象或者是从上一代挪过来的对象，那么删除对象指的是哪些呢？或者说是如何进行指定哪些是应该被删除的对象呢？","like_count":4,"discussions":[{"author":{"id":1513504,"avatar":"https://static001.geekbang.org/account/avatar/00/17/18/20/75ea3b20.jpg","nickname":"高山流水","note":"","ucode":"71E513B5937481","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456824,"discussion_content":"1. 谢谢\n2. 新增对象指代你创建一个对象，删除对象指代对象被释放，例如手动调用 del，从函数中返回临时变量的释放等，对这两者进行计数统计，然后相减。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562357759,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":283893,"user_name":"你说呢","can_delete":false,"product_type":"c1","uid":2320032,"ip_address":"","ucode":"860F6FED5EFF15","user_header":"https://static001.geekbang.org/account/avatar/00/23/66/a0/c00fb984.jpg","comment_is_top":false,"comment_ctime":1615973686,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10205908278","product_id":100026901,"comment_content":"可以这样理解么：python的垃圾回收机制，以引用计数算法为主、标记-删除算法为辅 来确定内存中哪些对象可以回收；而分代回收算法确定了垃圾是什么时候被回收。<br>","like_count":3},{"had_liked":false,"id":218585,"user_name":"MirkoWei","can_delete":false,"product_type":"c1","uid":1157364,"ip_address":"","ucode":"901C436D359CD3","user_header":"https://static001.geekbang.org/account/avatar/00/11/a8/f4/2abb4a4c.jpg","comment_is_top":false,"comment_ctime":1589822646,"is_pvip":false,"replies":[{"id":"84948","content":"很建议从一开始就尝试用 linux 学习编程，而不是花费大量时间解决 windows 下环境配置的问题。","user_name":"作者回复","user_name_real":"高山流水","uid":"1513504","ctime":1593301687,"ip_address":"","comment_id":218585,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10179757238","product_id":100026901,"comment_content":"windows下使用objgraph遇到个问题：<br>`failed to execute [&#39;dot&#39;, &#39;-Tpdf&#39;], make sure the Graphviz executables are on your systems&#39; path`<br><br>安装objgraph的时候，需要的前置条件graphviz、xdot都安装了，系统环境变量也添加了，仍然找不到路径<br><br>之后通过stackoverflow得到解决办法，就是每次使用的时候，需要在代码前面手动添加环境变量<br>```<br>import os<br><br>os.environ[&quot;PATH&quot;] += os.pathsep + &#39;xxx&#47;Graphviz2.38&#47;bin&#47;&#39;<br>```<br>问题是解决了，但是每次都需要手动添加环境变量也太麻烦了，不知道是否有更好的解决办法","like_count":2,"discussions":[{"author":{"id":1513504,"avatar":"https://static001.geekbang.org/account/avatar/00/17/18/20/75ea3b20.jpg","nickname":"高山流水","note":"","ucode":"71E513B5937481","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495514,"discussion_content":"很建议从一开始就尝试用 linux 学习编程，而不是花费大量时间解决 windows 下环境配置的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593301687,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":109990,"user_name":"响雨","can_delete":false,"product_type":"c1","uid":1581705,"ip_address":"","ucode":"C5FB3A3BC68F92","user_header":"https://static001.geekbang.org/account/avatar/00/18/22/89/73397ccb.jpg","comment_is_top":false,"comment_ctime":1562146575,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10152081167","product_id":100026901,"comment_content":"思考题看的我一脸蒙蔽，无从下手","like_count":2},{"had_liked":false,"id":110033,"user_name":"瞌睡的咸鱼","can_delete":false,"product_type":"c1","uid":1059784,"ip_address":"","ucode":"6D1C8D4B417B1A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJRCtuJkpyy2I29LxUsXwZGjicyzDAb3lo76KLX8gxUfawgSeNdQOibjibF0VNXEv7t2DiaIrBU4KcHyQ/132","comment_is_top":false,"comment_ctime":1562154208,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5857121504","product_id":100026901,"comment_content":"思考题——通过有向图的拓扑排序可以求出（可以参考《算法导论》去理解）","like_count":1},{"had_liked":false,"id":109858,"user_name":"干布球","can_delete":false,"product_type":"c1","uid":1218173,"ip_address":"","ucode":"048ABC199D89B9","user_header":"https://static001.geekbang.org/account/avatar/00/12/96/7d/c7e8cd34.jpg","comment_is_top":false,"comment_ctime":1562122323,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5857089619","product_id":100026901,"comment_content":"请问老师，问什么多次调用print(sys.getrefcount(a))，只有第一次会增加a的计数呢？","like_count":1,"discussions":[{"author":{"id":1260182,"avatar":"https://static001.geekbang.org/account/avatar/00/13/3a/96/9fddfb4a.jpg","nickname":"赵鹏举","note":"","ucode":"B3785788D6176C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1366,"discussion_content":"函数调用结束就减1了","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1562582273,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1504671,"avatar":"https://static001.geekbang.org/account/avatar/00/16/f5/9f/1509d389.jpg","nickname":"栾~龟虽寿！","note":"","ucode":"219B38C08979FE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2580,"discussion_content":"先加一，调用结束后，减一","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1563777025,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":315122,"user_name":"小匚","can_delete":false,"product_type":"c1","uid":1611663,"ip_address":"","ucode":"78E800B23C457A","user_header":"https://static001.geekbang.org/account/avatar/00/18/97/8f/ccce7df1.jpg","comment_is_top":false,"comment_ctime":1633694744,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633694744","product_id":100026901,"comment_content":"想到了Java的内存回收机制，也是类似的，引用计数和引用不可达法。","like_count":0},{"had_liked":false,"id":284353,"user_name":"Boom clap!!!","can_delete":false,"product_type":"c1","uid":2443427,"ip_address":"","ucode":"E9AF8ECB963239","user_header":"https://static001.geekbang.org/account/avatar/00/25/48/a3/2df11999.jpg","comment_is_top":false,"comment_ctime":1616208691,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1616208691","product_id":100026901,"comment_content":"windows 使用 objgraph时候报错Spawning graph viewer (xdot)，怎么办啊 老师","like_count":0},{"had_liked":false,"id":251799,"user_name":"完美坚持","can_delete":false,"product_type":"c1","uid":1919541,"ip_address":"","ucode":"AE0261D8DDEF64","user_header":"https://static001.geekbang.org/account/avatar/00/1d/4a/35/66caeed9.jpg","comment_is_top":false,"comment_ctime":1601881526,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601881526","product_id":100026901,"comment_content":"老师是用linux重装的系统吗，因为我记得老师是用的苹果电脑","like_count":0},{"had_liked":false,"id":231492,"user_name":"王坤祥","can_delete":false,"product_type":"c1","uid":1003327,"ip_address":"","ucode":"FB988B9F381A33","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4f/3f/6f62f982.jpg","comment_is_top":false,"comment_ctime":1593687345,"is_pvip":false,"replies":[{"id":"87204","content":"加油！","user_name":"作者回复","user_name_real":"高山流水","uid":"1513504","ctime":1595310694,"ip_address":"","comment_id":231492,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1593687345","product_id":100026901,"comment_content":"课程越往后越有意思，发现了很多知识点盲区，这门课很值！","like_count":0,"discussions":[{"author":{"id":1513504,"avatar":"https://static001.geekbang.org/account/avatar/00/17/18/20/75ea3b20.jpg","nickname":"高山流水","note":"","ucode":"71E513B5937481","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500316,"discussion_content":"加油！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595310694,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":203847,"user_name":"Geek_04e22a","can_delete":false,"product_type":"c1","uid":1184505,"ip_address":"","ucode":"B64FF12EA28BA6","user_header":"https://static001.geekbang.org/account/avatar/00/12/12/f9/7e6e3ac6.jpg","comment_is_top":false,"comment_ctime":1586273907,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586273907","product_id":100026901,"comment_content":"class ListNode(object):<br>    &quot;&quot;&quot;<br>    节点数据结构<br>    val： 值<br>    node：有向边终点列表集合<br>    &quot;&quot;&quot;<br><br>    def __init__(self, x):<br>        self.val = x<br>        self.node = list()<br><br><br>def deep_list(a):<br>    &quot;&quot;&quot;<br>    深度优先遍历<br>    :param a:<br>    :return:<br>    &quot;&quot;&quot;<br><br>    if len(a.node) == 0:<br>        return<br><br>    for node in a.node:<br>        print(node.val)<br>        deep_list(node)<br><br><br>a = ListNode(&#39;a&#39;)<br>b = ListNode(&#39;b&#39;)<br>c = ListNode(&#39;c&#39;)<br>d = ListNode(&#39;d&#39;)<br>e = ListNode(&#39;e&#39;)<br>f = ListNode(&#39;f&#39;)<br><br>a.node = [b, c]<br>c.node = [e]<br><br><br>deep_list(a)","like_count":0},{"had_liked":false,"id":158470,"user_name":"wnz27","can_delete":false,"product_type":"c1","uid":1130122,"ip_address":"","ucode":"BC9ACB6B7C6FD9","user_header":"https://static001.geekbang.org/account/avatar/00/11/3e/8a/891b0e58.jpg","comment_is_top":false,"comment_ctime":1575378904,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1575378904","product_id":100026901,"comment_content":"gc.collect()，不是清除没有引用的对象吗，为什么循环引用代码里没有del a和del b可以垃圾回收呢？是老师手误吗？","like_count":0,"discussions":[{"author":{"id":1014665,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/89/34f2cbcc.jpg","nickname":"杨宇","note":"","ucode":"EB74DF6E269F03","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531773,"discussion_content":"回收的目标，不光是引用计数为0的对象，还包括那些只有循环引用的对象。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637412914,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146938,"user_name":"建强","can_delete":false,"product_type":"c1","uid":1397126,"ip_address":"","ucode":"62B03D0E0C64EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/86/b5fd8dd8.jpg","comment_is_top":false,"comment_ctime":1572708778,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572708778","product_id":100026901,"comment_content":"简单写了一个有向图的遍历程序，说明：<br>(1)有向图采用邻接链表存储<br>(2)有向图采用递归算法进行深度优先遍历<br>#邻接链表节点定义<br>class LinkNode:<br>    def __init__(self,data):<br>        self.data = data<br>        self.next = None<br>\t<br>#邻接链表定义<br>class AdjoinList:<br>    def __init__(self):<br>        self.adjlist = {}  #存贮节点间的邻接关系<br>        self.vistlist = {} #存贮节点是否被访问，初始所有节点都是False<br>\t<br>    #建立结点x1和x2的连接关系，其中，x1指向x2<br>    def addNode(self,x1,x2):<br><br>        #建立链接<br>        point = self.adjlist.setdefault(x1, None)<br>        lnode = LinkNode(x2)<br>        lnode.next = point<br>        self.adjlist[x1] = lnode<br>        self.adjlist.setdefault(x2, None)<br><br>        #初始化访问列表        <br>        self.vistlist.setdefault(x1,False)<br>        self.vistlist.setdefault(x2,False)<br><br>    #遍历图中所有结点<br>    def visitNode(self,nodevalue):<br>        if nodevalue is not None:<br>            self.vistlist[nodevalue] = True<br>            print(&#39;visist:&#39;, nodevalue)<br>            nextnode = self.adjlist[nodevalue]<br>                <br>            while nextnode is not None:<br><br>                if not self.vistlist[nextnode.data]:<br>                    self.visitNode(nextnode.data)<br>                <br>                nextnode = nextnode.next<br><br><br>    #输出未被访问的结点<br>    def showUnvistedNode(self):<br>        print(&#39;UnvistedNode:&#39;, &#39;,&#39;.join([x for x in self.vistlist if not self.vistlist[x]]))<br><br>#主程序<br>def main():<br>#BEGIN<br><br>    adlist = AdjoinList()<br><br>    #创建有向图，有向图简单示意如下：<br>    &#39;&#39;&#39;<br>    a--&gt;b--&gt;c<br>    |<br>    |<br>    d--&gt;e--&gt;f<br><br>    g--&gt;h--&gt;j<br>    <br>    &#39;&#39;&#39;<br>    adlist.addNode(&#39;a&#39;,&#39;b&#39;)<br>    adlist.addNode(&#39;a&#39;,&#39;d&#39;)<br>    adlist.addNode(&#39;b&#39;,&#39;c&#39;)<br>    adlist.addNode(&#39;d&#39;,&#39;e&#39;)<br>    adlist.addNode(&#39;e&#39;,&#39;f&#39;)<br>    adlist.addNode(&#39;g&#39;,&#39;h&#39;)<br>    adlist.addNode(&#39;h&#39;,&#39;j&#39;)<br><br>    #从a节点开始遍历有向图<br>    adlist.visitNode(&#39;a&#39;)<br><br>    #输出未访问的节点<br>    adlist.showUnvistedNode()<br><br>#END<br><br>if __name__ == &#39;__main__&#39;:<br>    main()","like_count":0},{"had_liked":false,"id":142177,"user_name":"自由民","can_delete":false,"product_type":"c1","uid":1346236,"ip_address":"","ucode":"435C67531697F1","user_header":"https://static001.geekbang.org/account/avatar/00/14/8a/bc/cb39ed38.jpg","comment_is_top":false,"comment_ctime":1571304034,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571304034","product_id":100026901,"comment_content":"思考题，就是图的遍历算法，深度优先或广度优先算法，标记每个节点，遍历后，没标记过的就是可以回收的垃圾。","like_count":0},{"had_liked":false,"id":131447,"user_name":"夏尔","can_delete":false,"product_type":"c1","uid":1321836,"ip_address":"","ucode":"64BCEADCF5EE61","user_header":"https://static001.geekbang.org/account/avatar/00/14/2b/6c/a2d3fe36.jpg","comment_is_top":false,"comment_ctime":1567755037,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567755037","product_id":100026901,"comment_content":"def func():<br>    show_memory_info(&#39;initial&#39;)<br>    a = [i for i in derange(10000000)]<br>    show_memory_info(&#39;after a created&#39;)<br>    return a<br><br>a = func()<br>show_memory_info(&#39;finished&#39;)<br><br>########## 输出 ##########<br><br>initial memory used: 47.96484375 MB<br>after a created memory used: 434.515625 MB<br>finished memory used: 434.515625 MB<br><br>这是本文第四个代码块，for i in range；多了de，变成了derange；","like_count":0},{"had_liked":false,"id":111122,"user_name":"小侠龙旋风","can_delete":false,"product_type":"c1","uid":1126441,"ip_address":"","ucode":"073F3924A99835","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/29/d6816ebf.jpg","comment_is_top":false,"comment_ctime":1562481670,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562481670","product_id":100026901,"comment_content":"老师，请问：除了循环引用，还有哪些错误的程序设计会造成内存泄漏，需要强制调用gc.collect()来垃圾回收？","like_count":0},{"had_liked":false,"id":110849,"user_name":"陈迪","can_delete":false,"product_type":"c1","uid":1019744,"ip_address":"","ucode":"1A64122CC47337","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8f/60/be0a8805.jpg","comment_is_top":false,"comment_ctime":1562376546,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562376546","product_id":100026901,"comment_content":"可否给一个内存泄露的实例，逃脱了gc的“法眼”？","like_count":0},{"had_liked":false,"id":110280,"user_name":"KaitoShy","can_delete":false,"product_type":"c1","uid":1038415,"ip_address":"","ucode":"E2E2E9BD3F5048","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d8/4f/65abc6f0.jpg","comment_is_top":false,"comment_ctime":1562221303,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1562221303","product_id":100026901,"comment_content":"请问一下，老师：<br>import sys<br><br>a= [1]<br><br>print(sys.getrefcount(a))<br><br>b = a<br>print(sys.getrefcount(a))<br><br>c,d,e,f,g,h = b,b,c,e,d,a<br>print(g)<br>print(sys.getrefcount(a))<br>-------<br><br><br>import sys...<br>2<br>3<br>[1]<br>6<br>为什么最后一次是6次？而g的值是正常的呢？","like_count":0,"discussions":[{"author":{"id":1127175,"avatar":"https://static001.geekbang.org/account/avatar/00/11/33/07/8f351609.jpg","nickname":"JustDoDT","note":"","ucode":"6AF0B80F00EAEF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2826,"discussion_content":"你这个语句是错的\nc,d,e,f,g,h = b,b,c,e,d,a\nNameError: name &#39;c&#39; is not defined","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1563958633,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":109763,"user_name":"舒服","can_delete":false,"product_type":"c1","uid":1378263,"ip_address":"","ucode":"9E81D1268D63B0","user_header":"https://static001.geekbang.org/account/avatar/00/15/07/d7/7702a7e4.jpg","comment_is_top":false,"comment_ctime":1562112312,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562112312","product_id":100026901,"comment_content":"什么是函数调用栈","like_count":0},{"had_liked":false,"id":109758,"user_name":"ikimiy","can_delete":false,"product_type":"c1","uid":1067295,"ip_address":"","ucode":"CC67E87B99EE3C","user_header":"https://static001.geekbang.org/account/avatar/00/10/49/1f/37e18877.jpg","comment_is_top":false,"comment_ctime":1562109678,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1562109678","product_id":100026901,"comment_content":"python的垃圾回收相对于Java来说是不是简单很多，Java 的垃圾回收好像不再使用引用计数了是吗？Java 有很多种垃圾收集器，比如G1，CMS等，python的垃圾收集器也分很多种的么！","like_count":0,"discussions":[{"author":{"id":1065272,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/38/4f89095b.jpg","nickname":"写点啥呢","note":"","ucode":"C19032CF1C41BA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":843,"discussion_content":"Java的GC触发是依赖allocation failure，因为java GC有STW，跟踪所有对象的引用频繁GC很伤性能。java的多种收集器是历史原因，一点点改进来的多种算法，实际生产用的最多的也就是分代回收，G1本质也是一种分代+加分治的算法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562120008,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}