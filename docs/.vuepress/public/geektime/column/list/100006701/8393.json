{"id":8393,"title":"第12讲 | Java有几种文件拷贝方式？哪一种最高效？","content":"<p>我在专栏上一讲提到，NIO不止是多路复用，NIO 2也不只是异步IO，今天我们来看看Java IO体系中，其他不可忽略的部分。</p>\n<p>今天我要问你的问题是，<span class=\"orange\">Java有几种文件拷贝方式？哪一种最高效？</span></p>\n<h2>典型回答</h2>\n<p>Java有多种比较典型的文件拷贝实现方式，比如：</p>\n<p>利用java.io类库，直接为源文件构建一个FileInputStream读取，然后再为目标文件构建一个FileOutputStream，完成写入工作。</p>\n<pre><code>public static void copyFileByStream(File source, File dest) throws\n        IOException {\n    try (InputStream is = new FileInputStream(source);\n         OutputStream os = new FileOutputStream(dest);){\n        byte[] buffer = new byte[1024];\n        int length;\n        while ((length = is.read(buffer)) &gt; 0) {\n            os.write(buffer, 0, length);\n        }\n    }\n }\n\n</code></pre>\n<p>或者，利用java.nio类库提供的transferTo或transferFrom方法实现。</p>\n<pre><code>public static void copyFileByChannel(File source, File dest) throws\n        IOException {\n    try (FileChannel sourceChannel = new FileInputStream(source)\n            .getChannel();\n         FileChannel targetChannel = new FileOutputStream(dest).getChannel\n                 ();){\n        for (long count = sourceChannel.size() ;count&gt;0 ;) {\n            long transferred = sourceChannel.transferTo(\n                    sourceChannel.position(), count, targetChannel);            sourceChannel.position(sourceChannel.position() + transferred);\n            count -= transferred;\n        }\n    }\n }\n\n</code></pre>\n<p>当然，Java标准类库本身已经提供了几种Files.copy的实现。</p>\n<p>对于Copy的效率，这个其实与操作系统和配置等情况相关，总体上来说，NIO transferTo/From的方式<strong>可能更快</strong>，因为它更能利用现代操作系统底层机制，避免不必要拷贝和上下文切换。</p>\n<h2>考点分析</h2>\n<p>今天这个问题，从面试的角度来看，确实是一个面试考察的点，针对我上面的典型回答，面试官还可能会从实践角度，或者IO底层实现机制等方面进一步提问。这一讲的内容从面试题出发，主要还是为了让你进一步加深对Java IO类库设计和实现的了解。</p>\n<!-- [[[read_end]]] -->\n<p>从实践角度，我前面并没有明确说NIO transfer的方案一定最快，真实情况也确实未必如此。我们可以根据理论分析给出可行的推断，保持合理的怀疑，给出验证结论的思路，有时候面试官考察的就是如何将猜测变成可验证的结论，思考方式远比记住结论重要。</p>\n<p>从技术角度展开，下面这些方面值得注意：</p>\n<ul>\n<li>\n<p>不同的copy方式，底层机制有什么区别？</p>\n</li>\n<li>\n<p>为什么零拷贝（zero-copy）可能有性能优势？</p>\n</li>\n<li>\n<p>Buffer分类与使用。</p>\n</li>\n<li>\n<p>Direct Buffer对垃圾收集等方面的影响与实践选择。</p>\n</li>\n</ul>\n<p>接下来，我们一起来分析一下吧。</p>\n<h2>知识扩展</h2>\n<p>1.拷贝实现机制分析</p>\n<p>先来理解一下，前面实现的不同拷贝方法，本质上有什么明显的区别。</p>\n<p>首先，你需要理解用户态空间（User Space）和内核态空间（Kernel Space），这是操作系统层面的基本概念，操作系统内核、硬件驱动等运行在内核态空间，具有相对高的特权；而用户态空间，则是给普通应用和服务使用。你可以参考：<a href=\"https://en.wikipedia.org/wiki/User_space\">https://en.wikipedia.org/wiki/User_space</a>。</p>\n<p>当我们使用输入输出流进行读写时，实际上是进行了多次上下文切换，比如应用读取数据时，先在内核态将数据从磁盘读取到内核缓存，再切换到用户态将数据从内核缓存读取到用户缓存。</p>\n<p>写入操作也是类似，仅仅是步骤相反，你可以参考下面这张图。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/6d/85/6d2368424431f1b0d2b935386324b585.png?wh=672*497\" alt=\"\" /></p>\n<p>所以，这种方式会带来一定的额外开销，可能会降低IO效率。</p>\n<p>而基于NIO transferTo的实现方式，在Linux和Unix上，则会使用到零拷贝技术，数据传输并不需要用户态参与，省去了上下文切换的开销和不必要的内存拷贝，进而可能提高应用拷贝性能。注意，transferTo不仅仅是可以用在文件拷贝中，与其类似的，例如读取磁盘文件，然后进行Socket发送，同样可以享受这种机制带来的性能和扩展性提高。</p>\n<p>transferTo的传输过程是：</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/b0/ea/b0c8226992bb97adda5ad84fe25372ea.png?wh=630*518\" alt=\"\" /></p>\n<p>2.Java IO/NIO源码结构</p>\n<p>前面我在典型回答中提了第三种方式，即Java标准库也提供了文件拷贝方法（java.nio.file.Files.copy）。如果你这样回答，就一定要小心了，因为很少有问题的答案是仅仅调用某个方法。从面试的角度，面试官往往会追问：既然你提到了标准库，那么它是怎么实现的呢？有的公司面试官以喜欢追问而出名，直到追问到你说不知道。</p>\n<p>其实，这个问题的答案还真不是那么直观，因为实际上有几个不同的copy方法。</p>\n<pre><code>public static Path copy(Path source, Path target, CopyOption... options)\n    throws IOException\n</code></pre>\n<pre><code>public static long copy(InputStream in, Path target, CopyOption... options)\n    throws IOException\n</code></pre>\n<pre><code>public static long copy(Path source, OutputStream out) \nthrows IOException\n\n</code></pre>\n<p>可以看到，copy不仅仅是支持文件之间操作，没有人限定输入输出流一定是针对文件的，这是两个很实用的工具方法。</p>\n<p>后面两种copy实现，能够在方法实现里直接看到使用的是InputStream.transferTo()，你可以直接看源码，其内部实现其实是stream在用户态的读写；而对于第一种方法的分析过程要相对麻烦一些，可以参考下面片段。简单起见，我只分析同类型文件系统拷贝过程。</p>\n<pre><code>public static Path copy(Path source, Path target, CopyOption... options)\n    throws IOException\n {\n    FileSystemProvider provider = provider(source);\n    if (provider(target) == provider) {\n        // same provider\n        provider.copy(source, target, options);//这是本文分析的路径\n    } else {\n        // different providers\n        CopyMoveHelper.copyToForeignTarget(source, target, options);\n    }\n    return target;\n}\n</code></pre>\n<p>我把源码分析过程简单记录如下，JDK的源代码中，内部实现和公共API定义也不是可以能够简单关联上的，NIO部分代码甚至是定义为模板而不是Java源文件，在build过程自动生成源码，下面顺便介绍一下部分JDK代码机制和如何绕过隐藏障碍。</p>\n<ul>\n<li>\n<p>首先，直接跟踪，发现FileSystemProvider只是个抽象类，阅读它的<a href=\"http://hg.openjdk.java.net/jdk/jdk/file/f84ae8aa5d88/src/java.base/share/classes/java/nio/file/spi/FileSystemProvider.java\">源码</a>能够理解到，原来文件系统实际逻辑存在于JDK内部实现里，公共API其实是通过ServiceLoader机制加载一系列文件系统实现，然后提供服务。</p>\n</li>\n<li>\n<p>我们可以在JDK源码里搜索FileSystemProvider和nio，可以定位到<a href=\"http://hg.openjdk.java.net/jdk/jdk/file/f84ae8aa5d88/src/java.base/share/classes/sun/nio/fs\">sun/nio/fs</a>，我们知道NIO底层是和操作系统紧密相关的，所以每个平台都有自己的部分特有文件系统逻辑。</p>\n</li>\n</ul>\n<p><img src=\"https://static001.geekbang.org/resource/image/5e/f7/5e0bf3130dffa8e56f398f0856eb76f7.png?wh=574*411\" alt=\"\" /></p>\n<ul>\n<li>\n<p>省略掉一些细节，最后我们一步步定位到UnixFileSystemProvider  → UnixCopyFile.Transfer，发现这是个本地方法。</p>\n</li>\n<li>\n<p>最后，明确定位到<a href=\"http://hg.openjdk.java.net/jdk/jdk/file/f84ae8aa5d88/src/java.base/unix/native/libnio/fs/UnixCopyFile.c\">UnixCopyFile.c</a>，其内部实现清楚说明竟然只是简单的用户态空间拷贝！</p>\n</li>\n</ul>\n<p>所以，我们明确这个最常见的copy方法其实不是利用transferTo，而是本地技术实现的用户态拷贝。</p>\n<p>前面谈了不少机制和源码，我简单从实践角度总结一下，如何提高类似拷贝等IO操作的性能，有一些宽泛的原则：</p>\n<ul>\n<li>\n<p>在程序中，使用缓存等机制，合理减少IO次数（在网络通信中，如TCP传输，window大小也可以看作是类似思路）。</p>\n</li>\n<li>\n<p>使用transferTo等机制，减少上下文切换和额外IO操作。</p>\n</li>\n<li>\n<p>尽量减少不必要的转换过程，比如编解码；对象序列化和反序列化，比如操作文本文件或者网络通信，如果不是过程中需要使用文本信息，可以考虑不要将二进制信息转换成字符串，直接传输二进制信息。</p>\n</li>\n</ul>\n<p>3.掌握NIO Buffer</p>\n<p>我在上一讲提到Buffer是NIO操作数据的基本工具，Java为每种原始数据类型都提供了相应的Buffer实现（布尔除外），所以掌握和使用Buffer是十分必要的，尤其是涉及Direct  Buffer等使用，因为其在垃圾收集等方面的特殊性，更要重点掌握。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/52/6e/5220029e92bc21e99920937a8210276e.png?wh=594*470\" alt=\"\" /></p>\n<p>Buffer有几个基本属性：</p>\n<ul>\n<li>\n<p>capacity，它反映这个Buffer到底有多大，也就是数组的长度。</p>\n</li>\n<li>\n<p>position，要操作的数据起始位置。</p>\n</li>\n<li>\n<p>limit，相当于操作的限额。在读取或者写入时，limit的意义很明显是不一样的。比如，读取操作时，很可能将limit设置到所容纳数据的上限；而在写入时，则会设置容量或容量以下的可写限度。</p>\n</li>\n<li>\n<p>mark，记录上一次postion的位置，默认是0，算是一个便利性的考虑，往往不是必须的。</p>\n</li>\n</ul>\n<p>前面三个是我们日常使用最频繁的，我简单梳理下Buffer的基本操作：</p>\n<ul>\n<li>\n<p>我们创建了一个ByteBuffer，准备放入数据，capacity当然就是缓冲区大小，而position就是0，limit默认就是capacity的大小。</p>\n</li>\n<li>\n<p>当我们写入几个字节的数据时，position就会跟着水涨船高，但是它不可能超过limit的大小。</p>\n</li>\n<li>\n<p>如果我们想把前面写入的数据读出来，需要调用flip方法，将position设置为0，limit设置为以前的position那里。</p>\n</li>\n<li>\n<p>如果还想从头再读一遍，可以调用rewind，让limit不变，position再次设置为0。</p>\n</li>\n</ul>\n<p>更进一步的详细使用，我建议参考相关<a href=\"http://tutorials.jenkov.com/java-nio/buffers.html\">教程</a>。</p>\n<p>4.Direct Buffer和垃圾收集</p>\n<p>我这里重点介绍两种特别的Buffer。</p>\n<ul>\n<li>\n<p>Direct Buffer：如果我们看Buffer的方法定义，你会发现它定义了isDirect()方法，返回当前Buffer是否是Direct类型。这是因为Java提供了堆内和堆外（Direct）Buffer，我们可以以它的allocate或者allocateDirect方法直接创建。</p>\n</li>\n<li>\n<p>MappedByteBuffer：它将文件按照指定大小直接映射为内存区域，当程序访问这个内存区域时将直接操作这块儿文件数据，省去了将数据从内核空间向用户空间传输的损耗。我们可以使用<a href=\"https://docs.oracle.com/javase/9/docs/api/java/nio/channels/FileChannel.html#map-java.nio.channels.FileChannel.MapMode-long-long-\">FileChannel.map</a>创建MappedByteBuffer，它本质上也是种Direct Buffer。</p>\n</li>\n</ul>\n<p>在实际使用中，Java会尽量对Direct Buffer仅做本地IO操作，对于很多大数据量的IO密集操作，可能会带来非常大的性能优势，因为：</p>\n<ul>\n<li>\n<p>Direct Buffer生命周期内内存地址都不会再发生更改，进而内核可以安全地对其进行访问，很多IO操作会很高效。</p>\n</li>\n<li>\n<p>减少了堆内对象存储的可能额外维护工作，所以访问效率可能有所提高。</p>\n</li>\n</ul>\n<p>但是请注意，Direct Buffer创建和销毁过程中，都会比一般的堆内Buffer增加部分开销，所以通常都建议用于长期使用、数据较大的场景。</p>\n<p>使用Direct Buffer，我们需要清楚它对内存和JVM参数的影响。首先，因为它不在堆上，所以Xmx之类参数，其实并不能影响Direct Buffer等堆外成员所使用的内存额度，我们可以使用下面参数设置大小：</p>\n<pre><code>-XX:MaxDirectMemorySize=512M\n</code></pre>\n<p>从参数设置和内存问题排查角度来看，这意味着我们在计算Java可以使用的内存大小的时候，不能只考虑堆的需要，还有Direct Buffer等一系列堆外因素。如果出现内存不足，堆外内存占用也是一种可能性。</p>\n<p>另外，大多数垃圾收集过程中，都不会主动收集Direct Buffer，它的垃圾收集过程，就是基于我在专栏前面所介绍的Cleaner（一个内部实现）和幻象引用（PhantomReference）机制，其本身不是public类型，内部实现了一个Deallocator负责销毁的逻辑。对它的销毁往往要拖到full GC的时候，所以使用不当很容易导致OutOfMemoryError。</p>\n<p>对于Direct Buffer的回收，我有几个建议：</p>\n<ul>\n<li>\n<p>在应用程序中，显式地调用System.gc()来强制触发。</p>\n</li>\n<li>\n<p>另外一种思路是，在大量使用Direct Buffer的部分框架中，框架会自己在程序中调用释放方法，Netty就是这么做的，有兴趣可以参考其实现（PlatformDependent0）。</p>\n</li>\n<li>\n<p>重复使用Direct Buffer。</p>\n</li>\n</ul>\n<p>5.跟踪和诊断Direct Buffer内存占用？</p>\n<p>因为通常的垃圾收集日志等记录，并不包含Direct Buffer等信息，所以Direct Buffer内存诊断也是个比较头疼的事情。幸好，在JDK 8之后的版本，我们可以方便地使用Native Memory Tracking（NMT）特性来进行诊断，你可以在程序启动时加上下面参数：</p>\n<pre><code>-XX:NativeMemoryTracking={summary|detail}\n</code></pre>\n<p>注意，激活NMT通常都会导致JVM出现5%~10%的性能下降，请谨慎考虑。</p>\n<p>运行时，可以采用下面命令进行交互式对比：</p>\n<pre><code>// 打印NMT信息\njcmd &lt;pid&gt; VM.native_memory detail \n\n// 进行baseline，以对比分配内存变化\njcmd &lt;pid&gt; VM.native_memory baseline\n\n// 进行baseline，以对比分配内存变化\njcmd &lt;pid&gt; VM.native_memory detail.diff\n</code></pre>\n<p>我们可以在Internal部分发现Direct Buffer内存使用的信息，这是因为其底层实际是利用unsafe_allocatememory。严格说，这不是JVM内部使用的内存，所以在JDK 11以后，其实它是归类在other部分里。</p>\n<p>JDK 9的输出片段如下，“+”表示的就是diff命令发现的分配变化：</p>\n<pre><code>-Internal (reserved=679KB +4KB, committed=679KB +4KB)\n              (malloc=615KB +4KB #1571 +4)\n              (mmap: reserved=64KB, committed=64KB)\n\n</code></pre>\n<p><strong>注意</strong>：JVM的堆外内存远不止Direct Buffer，NMT输出的信息当然也远不止这些，我在专栏后面有综合分析更加具体的内存结构的主题。</p>\n<p>今天我分析了Java IO/NIO底层文件操作数据的机制，以及如何实现零拷贝的高性能操作，梳理了Buffer的使用和类型，并针对Direct Buffer的生命周期管理和诊断进行了较详细的分析。</p>\n<h2>一课一练</h2>\n<p>关于今天我们讨论的题目你做到心中有数了吗？你可以思考下，如果我们需要在channel读取的过程中，将不同片段写入到相应的Buffer里面（类似二进制消息分拆成消息头、消息体等），可以采用NIO的什么机制做到呢？</p>\n<p>请你在留言区写写你对这个问题的思考，我会选出经过认真思考的留言，送给你一份学习鼓励金，欢迎你与我一起讨论。</p>\n<p>你的朋友是不是也在准备面试呢？你可以“请朋友读”，把今天的题目分享给好友，或许你能帮到他。</p>\n<p></p>\n","neighbors":{"left":{"article_title":"第11讲 | Java提供了哪些IO方式？ NIO如何实现多路复用？","id":8369},"right":{"article_title":"第13讲 | 谈谈接口和抽象类有什么区别？","id":8471}},"comments":[{"had_liked":false,"id":10803,"user_name":"13576788017","can_delete":false,"product_type":"c1","uid":1141771,"ip_address":"","ucode":"5EBFCBBC06CD47","user_header":"","comment_is_top":false,"comment_ctime":1527724728,"is_pvip":false,"replies":[{"id":"3462","content":"非常抱歉，具体哪几篇？公司对一年经验的工程师要求应该也不一样的","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1527760656,"ip_address":"","comment_id":10803,"utype":1}],"discussion_count":18,"race_medal":0,"score":"534103669432","product_id":100006701,"comment_content":"杨老师，想问一下，一般要几年java经验才能达到看懂你文章的地步？？我将近一年经验。。我发现我好几篇都看不懂。。底层完全不懂。。是我太菜了吗。。","like_count":125,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418601,"discussion_content":"非常抱歉，具体哪几篇？公司对一年经验的工程师要求应该也不一样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1527760656,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005200,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/56/90/be01bb8d.jpg","nickname":"Asanz","note":"","ucode":"430AB7ED59EE3F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":10889,"discussion_content":"都是知识点的罗列，不明白也很正常","likes_number":11,"is_delete":false,"is_hidden":false,"ctime":1568335073,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1324314,"avatar":"https://static001.geekbang.org/account/avatar/00/14/35/1a/9fa38dc9.jpg","nickname":"子瞻","note":"","ucode":"5C26FF10934534","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1005200,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/56/90/be01bb8d.jpg","nickname":"Asanz","note":"","ucode":"430AB7ED59EE3F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350906,"discussion_content":"+1不深入","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614070196,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":10889,"ip_address":""},"score":350906,"extra":""}]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":130059,"discussion_content":"我工作十几年了，也有看不懂的。只要少玩游戏，多学习，都可以看懂。三刷路过。如果你感觉这个看不懂，可以对比算法学习，这个看起来就是放松。","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1578749849,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2744868,"avatar":"","nickname":"麻花","note":"","ucode":"FCCD929A8B47DC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392035,"discussion_content":"工作四十多年了，也才刚刚看懂","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1630777435,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1124853,"avatar":"https://static001.geekbang.org/account/avatar/00/11/29/f5/b19dd1d4.jpg","nickname":"雪未央","note":"","ucode":"E6AEFCD77ED6C0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2744868,"avatar":"","nickname":"麻花","note":"","ucode":"FCCD929A8B47DC","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393656,"discussion_content":"40多年？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1631536237,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":392035,"ip_address":""},"score":393656,"extra":""}]},{"author":{"id":1479923,"avatar":"https://static001.geekbang.org/account/avatar/00/16/94/f3/4f88b0e6.jpg","nickname":"Hardy","note":"","ucode":"A4599A50D2573F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306904,"discussion_content":"确实比较乱，我觉就讲了两点，io效率与用户态和内核态，直接io的使用","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1600415471,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1185140,"avatar":"https://static001.geekbang.org/account/avatar/00/12/15/74/a3ad7af7.jpg","nickname":"sunshine","note":"","ucode":"2B1B3967311D64","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":250509,"discussion_content":"这是在假设你知识储备比较全面的前提下的一种总结，拓展和复习","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1588004937,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1368300,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK4oYJbBD32UxU7TYichgZXoWGcmSxW1WlWH7U6d3UwG6SybkVt9lojbB3llQ8Lu8lhC6WibEuDLOIA/132","nickname":"分隔符","note":"","ucode":"D0826C8FA18A67","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539110,"discussion_content":"我都当了好几年面试官了我都看不懂，写的太零散，知识点没有形成树，反正读着很累","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1639614455,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1546361,"avatar":"https://static001.geekbang.org/account/avatar/00/17/98/79/c7760938.jpg","nickname":"Dvelpro","note":"","ucode":"77D83752BC90A4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303625,"discussion_content":"20年面试买的没看完 准备21年跳槽。从新看遍 直接在回忆一样","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1599316767,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2763179,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/29/ab/59a6e437.jpg","nickname":"Kevin","note":"","ucode":"3588850B3370C8","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551717,"discussion_content":"有点操作系统的知识，看起来会简单很多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645094189,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2396891,"avatar":"","nickname":"Geek_84e87d","note":"","ucode":"FE05CD5BA2822F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352136,"discussion_content":"我感觉看不懂不至于吧~~看不懂再谢谢api，就是堆api的解释","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614607785,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2059155,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/6b/93/bfda2d1c.jpg","nickname":"梦江","note":"","ucode":"B5FD2835863460","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307710,"discussion_content":"nio的channel的read方法，可以传入一个bytebuffer数组，至于半包问题需要应用层解决","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600740539,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2187480,"avatar":"https://static001.geekbang.org/account/avatar/00/21/60/d8/e45b846c.jpg","nickname":"桂圆","note":"","ucode":"337EECA94775E4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307101,"discussion_content":"哈哈哈哈，看起来有点吃力","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600497485,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1144504,"avatar":"https://static001.geekbang.org/account/avatar/00/11/76/b8/e4cd7997.jpg","nickname":"KAGEMUSHA","note":"","ucode":"DFC05BE62A9C10","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304645,"discussion_content":"还是得有点功底的来看，每次看我都有不同的收获；这个专栏并不是学习扩展，与其说拔高倒不如说是总结归纳梳理下逻辑，所以得先自己会些才能理解全面。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599633706,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005661,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/58/5d/8de7f8dc.jpg","nickname":"爱新觉罗老流氓","note":"","ucode":"B13AC4DA358C15","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290724,"discussion_content":"知识点罗列，比较乱，需要你强大的功底才能看懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594584260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2052476,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Qq6oLfOTgKzjiculoUDicdv7WoY1iabPfOTumibWeInVP2Mnod9XVPrNSClvIiaLbvtDlIjRnWUNaXcYwREGzlcaDog/132","nickname":"Geek_在下蟑螂王","note":"","ucode":"E1F5BBB5BC5962","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289501,"discussion_content":"跟着多混混自然能混懂了。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594125719,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1902882,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/09/22/76b82dd7.jpg","nickname":"Geek_zhao","note":"","ucode":"2A6B6A315BB740","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":213965,"discussion_content":"我没有工作经验，看起来也很困难","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585138717,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":10806,"user_name":"行者","can_delete":false,"product_type":"c1","uid":1063734,"ip_address":"","ucode":"EA31201A7C5AE1","user_header":"https://static001.geekbang.org/account/avatar/00/10/3b/36/2d61e080.jpg","comment_is_top":false,"comment_ctime":1527725226,"is_pvip":false,"replies":[{"id":"3459","content":"赞","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1527759818,"ip_address":"","comment_id":10806,"utype":1}],"discussion_count":3,"race_medal":0,"score":"521218768042","product_id":100006701,"comment_content":"可以利用NIO分散-scatter机制来写入不同buffer。<br>Code:<br>ByteBuffer header = ByteBuffer.allocate(128);<br>ByteBuffer body   = ByteBuffer.allocate(1024);<br>ByteBuffer[] bufferArray = {header, body};<br>channel.read(bufferArray);<br>注意:该方法适用于请求头长度固定。","like_count":122,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418603,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1527759818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2059155,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/6b/93/bfda2d1c.jpg","nickname":"梦江","note":"","ucode":"B5FD2835863460","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307711,"discussion_content":"聚集写，分散读","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600740574,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1317333,"avatar":"","nickname":"someboss","note":"","ucode":"C6A1BF8683A68F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":280118,"discussion_content":"如果是长度不固定的呢?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591498286,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":10998,"user_name":"乘风破浪","can_delete":false,"product_type":"c1","uid":1121926,"ip_address":"","ucode":"8EB4F3EF6D16F1","user_header":"https://static001.geekbang.org/account/avatar/00/11/1e/86/0de33451.jpg","comment_is_top":false,"comment_ctime":1527779408,"is_pvip":false,"replies":[{"id":"3530","content":"嗯","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1527839764,"ip_address":"","comment_id":10998,"utype":1}],"discussion_count":1,"race_medal":0,"score":"194801307728","product_id":100006701,"comment_content":"零拷贝是不是可以理解为内核态空间与磁盘之间的数据传输，不需要再经过用户态空间？","like_count":46,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418668,"discussion_content":"嗯","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1527839764,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":10825,"user_name":"夏洛克的救赎","can_delete":false,"product_type":"c1","uid":1021334,"ip_address":"","ucode":"44453DD27A3216","user_header":"https://static001.geekbang.org/account/avatar/00/0f/95/96/0020bd67.jpg","comment_is_top":false,"comment_ctime":1527726664,"is_pvip":false,"replies":[{"id":"3463","content":"是的，目前lead的团队主要是QE职责","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1527760784,"ip_address":"","comment_id":10825,"utype":1}],"discussion_count":1,"race_medal":0,"score":"83132105288","product_id":100006701,"comment_content":"请问老师您有参与jdk的开发吗","like_count":20,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418609,"discussion_content":"是的，目前lead的团队主要是QE职责","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1527760784,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":11803,"user_name":"CC","can_delete":false,"product_type":"c1","uid":1113515,"ip_address":"","ucode":"87202DE7F708C1","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/ab/867fa111.jpg","comment_is_top":false,"comment_ctime":1528366094,"is_pvip":false,"replies":[{"id":"3866","content":"不用担心，是理解有难度吗？","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1528380185,"ip_address":"","comment_id":11803,"utype":1}],"discussion_count":1,"race_medal":0,"score":"65952875534","product_id":100006701,"comment_content":"我Nio从没接触过，很难受，两年开发的","like_count":16,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419008,"discussion_content":"不用担心，是理解有难度吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1528380185,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":11640,"user_name":"闭门造车","can_delete":false,"product_type":"c1","uid":1125278,"ip_address":"","ucode":"8EBB8083D2A6CB","user_header":"https://static001.geekbang.org/account/avatar/00/11/2b/9e/821c75f9.jpg","comment_is_top":false,"comment_ctime":1528256158,"is_pvip":false,"discussion_count":7,"race_medal":0,"score":"65952765598","product_id":100006701,"comment_content":"你好，我查看jdk8中的源码，看到您说的关于Files.copy其中两种是依靠transferto实现的，但是我翻看源码觉得跟您的理解不同，特来求证，源码如下:    public static long copy(Path source, OutputStream out) throws IOException {<br>        Objects.requireNonNull(out);<br>        try (InputStream in = newInputStream(source)) {<br>            return copy(in, out);<br>        }<br>    }<br>        private static long copy(InputStream source, OutputStream sink)<br>        throws IOException<br>    {<br>        long nread = 0L;<br>        byte[] buf = new byte[BUFFER_SIZE];<br>        int n;<br>        while ((n = source.read(buf)) &gt; 0) {<br>            sink.write(buf, 0, n);<br>            nread += n;<br>        }<br>        return nread;<br>    }","like_count":16,"discussions":[{"author":{"id":2160920,"avatar":"","nickname":"李懿轩","note":"","ucode":"0DF060079BA331","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318222,"discussion_content":"两年了，不知道你还能不能看到。transferTo是jdk9增加的方法。实现原理没变，只是增加了一层包装。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1603681421,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1395798,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKcGBqEZQKHjq3XaSZRLmxrCykMEotI0yKWX7RbbPZh6xTdmNRsum2YxtHv33zHGFdVqxic1pIEn8Q/132","nickname":"yzh","note":"","ucode":"B6C06FEB731BDC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4703,"discussion_content":"apache的file工具类使用的是transfer零拷贝机制，可以看看org.apache.commons.io.FileUtils","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1565678544,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1103292,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/2m49Z7YV3PGMA15rXTubL3psY8X9bdpd4Xe4qnv7iaVBQjnt5YWicBP2icQCpSYphricllXDLzm8KfZHK3GUOLZBNg/132","nickname":"Ngzhilin","note":"","ucode":"F8EFEC2ACD08A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287117,"discussion_content":"估计是作者笔误","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1593364560,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1133233,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4a/b1/f71ebde8.jpg","nickname":"陈帅","note":"","ucode":"523E6FC83AFAFF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":21872,"discussion_content":"确实，没发现使用transferto","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1569549533,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1479923,"avatar":"https://static001.geekbang.org/account/avatar/00/16/94/f3/4f88b0e6.jpg","nickname":"Hardy","note":"","ucode":"A4599A50D2573F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306909,"discussion_content":"写错了，后面说了是“内部实现其实是 stream 在用户态的读写“，transferTo才是内核态直接读写","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600416084,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1144504,"avatar":"https://static001.geekbang.org/account/avatar/00/11/76/b8/e4cd7997.jpg","nickname":"KAGEMUSHA","note":"","ucode":"DFC05BE62A9C10","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304651,"discussion_content":"明显的笔误，他应该是想写“使用的是 InputStream/OutputStream”后面也说了是“内部实现其实是 stream 在用户态的读写”，根本没有提transferTo","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599635153,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1063091,"avatar":"https://static001.geekbang.org/account/avatar/00/10/38/b3/66ae68b8.jpg","nickname":"Vz","note":"","ucode":"6669D1A4682E5C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1891,"discussion_content":"我看了的也是jdk8的源码，有同样的困惑。 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563041772,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":11070,"user_name":"vash_ace","can_delete":false,"product_type":"c1","uid":1128044,"ip_address":"","ucode":"057B4EC8850187","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqmEvxVYib6zYId0bUFdt7ogolM4blZllpzaU1HIju63ib4cut4xHdm4ibTxG8vPoEJEwq5KwBdpkKibw/132","comment_is_top":false,"comment_ctime":1527819551,"is_pvip":false,"replies":[{"id":"3534","content":"对，检测不够时会尝试调system.gc，记得老版本有并发分配bug，会出oom；netty，文中提到了，它是hack到内部自己释放...","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1527840142,"ip_address":"","comment_id":11070,"utype":1}],"discussion_count":3,"race_medal":0,"score":"61657361695","product_id":100006701,"comment_content":"其实在初始化 DirectByteBuffer对象时，如果当前堆外内存的条件很苛刻时，会主动调用 System.gc()强制执行FGC。所以一般建议在使用netty时开启XX:+DisableExplicitGC","like_count":15,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418704,"discussion_content":"对，检测不够时会尝试调system.gc，记得老版本有并发分配bug，会出oom；netty，文中提到了，它是hack到内部自己释放...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1527840142,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1036468,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/d0/b4/a6c27fd0.jpg","nickname":"John","note":"","ucode":"449164FE4255CB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6330,"discussion_content":"关闭这个参数，那不就分配不了堆在内存？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566833888,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1128044,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqmEvxVYib6zYId0bUFdt7ogolM4blZllpzaU1HIju63ib4cut4xHdm4ibTxG8vPoEJEwq5KwBdpkKibw/132","nickname":"vash_ace","note":"","ucode":"057B4EC8850187","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1036468,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/d0/b4/a6c27fd0.jpg","nickname":"John","note":"","ucode":"449164FE4255CB","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":34281,"discussion_content":"仍旧会分配的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571190187,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":6330,"ip_address":""},"score":34281,"extra":""}]}]},{"had_liked":false,"id":10902,"user_name":"mongo","can_delete":false,"product_type":"c1","uid":1113124,"ip_address":"","ucode":"F39FE783793A17","user_header":"https://static001.geekbang.org/account/avatar/00/10/fc/24/7d43d807.jpg","comment_is_top":false,"comment_ctime":1527734257,"is_pvip":false,"replies":[{"id":"3453","content":"我觉得思路不错，结合实践是非常好的；我自身也仅仅是理论上理解，并没有在大规模实践中踩坑，实践中遇到细节的“坑”其实是宝贝，所以你有更多优势；本文从基础角度出发，也是希望对其原理有个整体印象，至少被面试刨根问底时，可以有所准备，毕竟看问题的角度是不同的","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1527752994,"ip_address":"","comment_id":10902,"utype":1}],"discussion_count":1,"race_medal":0,"score":"53067341809","product_id":100006701,"comment_content":"杨老师，我也想请教，目前为止您的其他文章都理解的很好，到了上次专栏的NIO我理解的不是很好，今天的这篇可以说懵圈了。到了这一步想突破，应该往哪个方向？我自己感觉是因为基于这两个底层原理的上层应用使用的时候观察的不够深入，对原理反应的现象没有深刻感受，就是所谓还没有摸清楚人家长什么样。所以接下来我会认真在使用基于这些原理实现的上层应用过程中不断深挖和观察，比如认真学习dubbo框架（底层使用到了netty，netty的底层使用了NIO）来帮助我理解NIO。在这个过程中促进对dubbo的掌握，以此良性循环。不知道方向对不对？老师的学习方法是什么？请老师指点避坑。学习方法不对的话时间成本太可怕。","like_count":13,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418634,"discussion_content":"我觉得思路不错，结合实践是非常好的；我自身也仅仅是理论上理解，并没有在大规模实践中踩坑，实践中遇到细节的“坑”其实是宝贝，所以你有更多优势；本文从基础角度出发，也是希望对其原理有个整体印象，至少被面试刨根问底时，可以有所准备，毕竟看问题的角度是不同的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1527752994,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":10846,"user_name":"石头狮子","can_delete":false,"product_type":"c1","uid":1118031,"ip_address":"","ucode":"3BABB93E552022","user_header":"https://static001.geekbang.org/account/avatar/00/11/0f/4f/c75c4889.jpg","comment_is_top":false,"comment_ctime":1527727940,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35887466308","product_id":100006701,"comment_content":"若使用非 directbuffer 操作相关 api 的话，jdk 会将其复制为 ditrctbuff。并且在线程内部缓存该directbuffer。jdk 对这个缓存的大小并没有限制。<br>之前遇到缓存的 directbuffer 过多，导致oom的情况。后续 jdk 版本加入了对该缓存的限制。<br>额外一点是尽量不要使用堆内的 bytebuffer 操作 channel 类 api。","like_count":9},{"had_liked":false,"id":67966,"user_name":"老陈板","can_delete":false,"product_type":"c1","uid":1220415,"ip_address":"","ucode":"E0AFA9CDAD41D6","user_header":"https://static001.geekbang.org/account/avatar/00/12/9f/3f/f4666faa.jpg","comment_is_top":false,"comment_ctime":1550371784,"is_pvip":false,"replies":[{"id":"24415","content":"一个常见例子是，创建了一堆线程，实际占用内存（RSS）远比堆本身大","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1550594088,"ip_address":"","comment_id":67966,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31615142856","product_id":100006701,"comment_content":"本篇文章有恍然大悟的感觉，前面段时间有一家面试问了个这样的问题，我们发现服务器内存使用得特别高，但是堆内存也比较稳定，这种场景是你你会怎么排查？这里就涉及到堆外内存相关的问题！以前不知道有NMT这个工具，然后当时没答好，导致工资少了好多，早点读这篇文章多好。另外注意，sysyem.gc不一定会立即触发fgc，有个权值","like_count":8,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":439446,"discussion_content":"一个常见例子是，创建了一堆线程，实际占用内存（RSS）远比堆本身大","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550594088,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":10871,"user_name":"Len","can_delete":false,"product_type":"c1","uid":1022767,"ip_address":"","ucode":"53C623CE17973F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/2f/b7a3625e.jpg","comment_is_top":false,"comment_ctime":1527729807,"is_pvip":true,"replies":[{"id":"3457","content":"1，一般不是，那东西有个默认大小的，metaspace codecache等等都会占用，后面有章节仔细分析<br>2，不是，它是利用sun.misc.Cleaner, 实际表现有瑕疵，经常要更依赖system gc去触发引用处理，9和8u有改进，我会有详解","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1527759415,"ip_address":"","comment_id":10871,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31592500879","product_id":100006701,"comment_content":"请教老师:<br>1. 经常看到 Java 进程的 RES 大小远超过设置的 Xmx，可以认为这就是 Direct Memory 的原因吗？如果是的话，可以简单的用堆实际占用的大小减去 RES 就是 Direct Memory 的大小吗？<br><br>2.可以认为 Direct Memory 不论在什么情况下都不会引起 Full GC，Direct Memory 的回收只是在 Full GC (或调用 System.gc())的时候顺带着回收下，是吗？","like_count":8,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418619,"discussion_content":"1，一般不是，那东西有个默认大小的，metaspace codecache等等都会占用，后面有章节仔细分析\n2，不是，它是利用sun.misc.Cleaner, 实际表现有瑕疵，经常要更依赖system gc去触发引用处理，9和8u有改进，我会有详解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1527759415,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":36568,"user_name":"皮蛋","can_delete":false,"product_type":"c1","uid":1202619,"ip_address":"","ucode":"8384CC338549EB","user_header":"https://static001.geekbang.org/account/avatar/00/12/59/bb/caf2b06c.jpg","comment_is_top":false,"comment_ctime":1541152483,"is_pvip":false,"replies":[{"id":"13669","content":"可以看看《深入理解计算机系统》，如果有精力，再找本linux内核并配合实验，会很有用","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1541906343,"ip_address":"","comment_id":36568,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27310956259","product_id":100006701,"comment_content":"杨老师，想问下如果想学操作系统的知识，阅读什么书比较适合，初学者","like_count":7,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427914,"discussion_content":"可以看看《深入理解计算机系统》，如果有精力，再找本linux内核并配合实验，会很有用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541906343,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":10959,"user_name":"灰飞灰猪不会灰飞.烟灭","can_delete":false,"product_type":"c1","uid":1127314,"ip_address":"","ucode":"FF9FB4C902D1F5","user_header":"https://static001.geekbang.org/account/avatar/00/11/33/92/99530cee.jpg","comment_is_top":false,"comment_ctime":1527764460,"is_pvip":false,"replies":[{"id":"3472","content":"嗯，文中提到过，不能一概而论，性能通常是特定场景下的比较才有意义","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1527793542,"ip_address":"","comment_id":10959,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27297568236","product_id":100006701,"comment_content":"老师，带缓冲区的io流比nio哪一个性能更好？","like_count":6,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418657,"discussion_content":"嗯，文中提到过，不能一概而论，性能通常是特定场景下的比较才有意义","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1527793542,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156044,"user_name":"天王","can_delete":false,"product_type":"c1","uid":1239337,"ip_address":"","ucode":"C074B2F9A5F007","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/29/629d9bb0.jpg","comment_is_top":false,"comment_ctime":1574815369,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23049651849","product_id":100006701,"comment_content":"12 java java有几种文件拷贝方式，1 利用Java.io，FileInputStream和FileOutputStream， 2 nio的transferTo和transferFrom，2比1快的原因，是操作系统分用户态和内核态，先在内核态把文件拷贝到内存，再从内核态拷贝到用户态，多了拷贝的过程和上下文切换，3 拷贝的底层实现 操作系统分内核空间和用户空间，操作系统内核和硬盘驱动等在内核空间，用户态在用户空间，文件读取是先从内核态读取磁盘数据到内核缓存中，再切换到用户态，从内核态空间读取到用户态缓存，nio的transferTo不会经用户态，直接在内核态做相应处理 4 Java Java.nio.files.Files.copy，java标准类库提供的copy方法transferTo，底层是调用了InputStream.transferTo，底层调用了用户态的拷贝方法，5 提高拷贝方法 利用缓存，尽量减少io次数，减少内核态到用户态的切换，减少切换开销，减少不必要的转换过程，比如编解码，序列化和反序列化，6 Buffer NIO为每个数据类型提供了各自的Buffer，ByteBuffer，IntBuffer，FloatBuffer，7 DirectBuffer，java提供了堆内和堆外Buffer(DirectBiffer)，MappedByteBuffer，将文件大小直接映射为内存区域，程序访问时直接访问，省去了用户态和内核态的空间转换，java尽量对DirectBuffer仅做本地操作，生命周期内的内存地址不修改，内核可以安全访问，可以更高效，同时减少了堆内对象的维护工作。","like_count":6},{"had_liked":false,"id":81543,"user_name":"美国的华莱士","can_delete":false,"product_type":"c1","uid":1217699,"ip_address":"","ucode":"879C4FD53C72C5","user_header":"https://static001.geekbang.org/account/avatar/00/12/94/a3/c8bcb28b.jpg","comment_is_top":false,"comment_ctime":1553939389,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"23028775869","product_id":100006701,"comment_content":"国外的这遍文章写的还不错，偏基础的可以参考下：<br>https:&#47;&#47;www.journaldev.com&#47;861&#47;java-copy-file","like_count":5,"discussions":[{"author":{"id":1128318,"avatar":"https://static001.geekbang.org/account/avatar/00/11/37/7e/219dd994.jpg","nickname":"liuyong","note":"","ucode":"D68555E8057F6E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":316520,"discussion_content":"这篇文章最后的统计结果略坑，一般来说，使用 stream 是最慢的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603420793,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1554995,"avatar":"https://static001.geekbang.org/account/avatar/00/17/ba/33/2d83d174.jpg","nickname":"时光守护者-基兰","note":"","ucode":"F0B0887B1979D2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1128318,"avatar":"https://static001.geekbang.org/account/avatar/00/11/37/7e/219dd994.jpg","nickname":"liuyong","note":"","ucode":"D68555E8057F6E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375086,"discussion_content":"对，用了四种拷贝方式拷贝1G文件（文件大小一样，其他不一样），得出stream方式是最快的。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621478551,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":316520,"ip_address":""},"score":375086,"extra":""}]},{"author":{"id":1110662,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f2/86/d689f77e.jpg","nickname":"Hank_Yan","note":"","ucode":"86899B561C502B","race_medal":3,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285434,"discussion_content":"先m后看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592835707,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":130062,"discussion_content":"看起来很厉害的样子","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578749997,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":10883,"user_name":"Cui","can_delete":false,"product_type":"c1","uid":1106775,"ip_address":"","ucode":"169F6EEEEE7E5E","user_header":"https://static001.geekbang.org/account/avatar/00/10/e3/57/e5de0216.jpg","comment_is_top":false,"comment_ctime":1527731449,"is_pvip":false,"replies":[{"id":"3455","content":"我理解不是锁的问题，寻址简单，才好更直接","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1527753120,"ip_address":"","comment_id":10883,"utype":1}],"discussion_count":1,"race_medal":1,"score":"18707600633","product_id":100006701,"comment_content":"Direct Buffer 生命周期内内存地址都不会再发生更改，进而内核可以安全地对其进行访问—这里能提高性能的原因 是因为内存地址不变，没有锁争用吗？能否详细解答下？","like_count":4,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418625,"discussion_content":"我理解不是锁的问题，寻址简单，才好更直接","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1527753120,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":10928,"user_name":"灰飞灰猪不会灰飞.烟灭","can_delete":false,"product_type":"c1","uid":1127314,"ip_address":"","ucode":"FF9FB4C902D1F5","user_header":"https://static001.geekbang.org/account/avatar/00/11/33/92/99530cee.jpg","comment_is_top":false,"comment_ctime":1527745415,"is_pvip":false,"replies":[{"id":"3473","content":"有个建议，工程师在沟通故障时，可以收集下：出错信息；客户端、服务端配置；网络情况，比如是否有代理，等等。<br>至于思路，能否找到程序异常信息之类，做过哪些尝试将问题缩小范围？<br>定位问题通常就是个不断缩小范围，排除不可能的过程。","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1527794257,"ip_address":"","comment_id":10928,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14412647303","product_id":100006701,"comment_content":"杨老师 我刚刚做个项目，上传文件到文件服务器，文件大概10M，经常上传失败。假如我上传的文件改成1M，就没这问题了。不知道什么原因，能提供个思路吗？谢谢","like_count":3,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418647,"discussion_content":"有个建议，工程师在沟通故障时，可以收集下：出错信息；客户端、服务端配置；网络情况，比如是否有代理，等等。\n至于思路，能否找到程序异常信息之类，做过哪些尝试将问题缩小范围？\n定位问题通常就是个不断缩小范围，排除不可能的过程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1527794257,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1609469,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8e/fd/279d9cbf.jpg","nickname":"花生 ","note":"","ucode":"1C3ECDA4AE1287","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349129,"discussion_content":"我遇到过类似的，要看请求链路，我的是php上传，先经过了nginx，再到php-fpm，在nginx和fpm都可以限制传输文件大小的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612921885,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":58507,"user_name":"罗飞","can_delete":false,"product_type":"c1","uid":1032310,"ip_address":"","ucode":"DA28B6D24A583E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c0/76/12203657.jpg","comment_is_top":false,"comment_ctime":1547096269,"is_pvip":false,"replies":[{"id":"23321","content":"谢谢，建议搜索下Java DMA或者相关的RDMA;<br>实时上这是个一直在发展的领域，虽然因为种种原因应用场景有限，最新的API发展如RDMA相关，可以了解下 http:&#47;&#47;openjdk.java.net&#47;jeps&#47;337","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1549808647,"ip_address":"","comment_id":58507,"utype":1}],"discussion_count":4,"race_medal":0,"score":"10137030861","product_id":100006701,"comment_content":"零拷贝，是DMA 数据传输，完全由硬件实现的，内核只是起到控制设置作用，不要误人子弟好么","like_count":2,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436099,"discussion_content":"谢谢，建议搜索下Java DMA或者相关的RDMA;\n实时上这是个一直在发展的领域，虽然因为种种原因应用场景有限，最新的API发展如RDMA相关，可以了解下 http://openjdk.java.net/jeps/337","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549808647,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2744868,"avatar":"","nickname":"麻花","note":"","ucode":"FCCD929A8B47DC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392029,"discussion_content":"就喜欢看菜鸡互啄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630771591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1126267,"avatar":"https://static001.geekbang.org/account/avatar/00/11/2f/7b/88b7dbff.jpg","nickname":"建飞","note":"","ucode":"F960202ED03294","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332275,"discussion_content":"不认同楼主说的，零拷贝是没有经过CPU的拷贝","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607142039,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1175430,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ef/86/12f95d66.jpg","nickname":"FATMAN89","note":"","ucode":"48A67FB47B3C5D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1126267,"avatar":"https://static001.geekbang.org/account/avatar/00/11/2f/7b/88b7dbff.jpg","nickname":"建飞","note":"","ucode":"F960202ED03294","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334140,"discussion_content":"零拷贝并不是没有经过cpu，零拷贝的概念是比较宽泛的。比如在linux中的零拷贝一般指的是三个理念。1、减少甚至避免操作系统内核和用户程序地址空间这两者之间进行数据拷贝，这一般是需要操作系统提供的系统调用实现的，比如mmap（）、splice（）等等，可以这样做事因为很多应用程序并不需要处理数据，只需要将磁盘中的静态数据比如文件转发到另外一个服务器上。2、内核旁路，也就是最大可能的让用户态的程序可以直接与设备进行通信，绕开内核的直接io，这种情况有时候也需要内核进行一定的辅助参与到控制其中，但核心理念是能够让数据不经过内核缓冲区，可以从设备直接到达用户，这种实现方式一般需要定制的硬件网卡才行。通常云数据库上会采取这种技术来加速数据的提取。3、内核缓冲区和用户缓冲区之间的传输优化。所以零拷贝的概念是比较宽泛的，并不是完全不经过cpu。很多时候也需要cpu进行辅助控制。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1607749985,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":332275,"ip_address":""},"score":334140,"extra":""}]}]},{"had_liked":false,"id":19101,"user_name":"Quincy","can_delete":false,"product_type":"c1","uid":1194412,"ip_address":"","ucode":"FFFBB9FFCB98A4","user_header":"https://static001.geekbang.org/account/avatar/00/12/39/ac/76beadf1.jpg","comment_is_top":false,"comment_ctime":1533685529,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10123620121","product_id":100006701,"comment_content":"老师，我想问下，transferto是怎么实现的零拷贝，而避免了用户态和内核态之间转换的开销","like_count":3,"discussions":[{"author":{"id":1326590,"avatar":"https://static001.geekbang.org/account/avatar/00/14/3d/fe/a108b92e.jpg","nickname":"桑榆非晚7","note":"","ucode":"D762564A0284AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6852,"discussion_content":"我知道的有两种，mmap+write方式，sendfile方式，这些都是操作系统底层的东西，需要看操作系统组成这类书籍吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1567142159,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":14026,"user_name":"玲玲爱学习","can_delete":false,"product_type":"c1","uid":1136925,"ip_address":"","ucode":"7D998AEC8A7D06","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKzqI6QDsTCeYhrBsLo5YFQ0NMMbKKU5JD1xvnlBHcxc7GomeRaoHF1ic3gC6c355PgVjBOica6ibO4g/132","comment_is_top":false,"comment_ctime":1530146946,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10120081538","product_id":100006701,"comment_content":"堆外缓存是否与内核缓存是同一个东西？","like_count":2,"discussions":[{"author":{"id":2350246,"avatar":"https://static001.geekbang.org/account/avatar/00/23/dc/a6/6c2728b9.jpg","nickname":"乔克叔叔","note":"","ucode":"31F524DC1E1498","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572190,"discussion_content":"可以这样理解 pagecache是堆外缓存的一种","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652629567,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":270939,"user_name":"随心而至","can_delete":false,"product_type":"c1","uid":1097836,"ip_address":"","ucode":"31866865255101","user_header":"https://static001.geekbang.org/account/avatar/00/10/c0/6c/29be1864.jpg","comment_is_top":false,"comment_ctime":1609323385,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5904290681","product_id":100006701,"comment_content":"https:&#47;&#47;shawn-xu.medium.com&#47;its-all-about-buffers-zero-copy-mmap-and-java-nio-50f2a1bfc05c<br>可以对照这篇文章看看，说明了write,read; sendfile; mmap等系统调用的过程","like_count":1},{"had_liked":false,"id":60471,"user_name":"linco_66","can_delete":false,"product_type":"c1","uid":1332200,"ip_address":"","ucode":"8C79B1605F7720","user_header":"https://static001.geekbang.org/account/avatar/00/14/53/e8/137a75f5.jpg","comment_is_top":false,"comment_ctime":1547476403,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5842443699","product_id":100006701,"comment_content":"按照老师的说法，上下文切换可以理解成用户态和内核态之间的切换。这样理解对吗？","like_count":1},{"had_liked":false,"id":50079,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1544860905,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5839828201","product_id":100006701,"comment_content":"有同感，Java IO这块学起来坡度明显陡峭了，上午看各种IO就有点不在状态，估计更偏向操作系统层面了吧！<br>不过我又回头看了漫画编程上关于Java IO的文章，感觉轻松自在很多，理解同步，异步，阻塞，非阻塞，各种IO的特点丝毫不费劲，估计是漫画和更通俗的原因吧！<br>老师，讲文件拷贝最快的方式有数据依据吗？还是就是推论？感觉不是很确定，需要依据具体情况来定？","like_count":1},{"had_liked":false,"id":49504,"user_name":"帅子","can_delete":false,"product_type":"c1","uid":1141038,"ip_address":"","ucode":"0EB71EDD105761","user_header":"https://static001.geekbang.org/account/avatar/00/11/69/2e/34b98f8a.jpg","comment_is_top":false,"comment_ctime":1544700931,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5839668227","product_id":100006701,"comment_content":"我是做安卓开发的，对于深入理解您的文章，是否对安卓开发有帮助呢？","like_count":1,"discussions":[{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":130067,"discussion_content":"有，即使现在用了kotlin、Flutter、React Native等，文章中的实现原理都是智慧的结晶，可以学到很多解决方案。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578750199,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":10981,"user_name":"I am a psycho","can_delete":false,"product_type":"c1","uid":1103501,"ip_address":"","ucode":"0B65ECADB378C5","user_header":"https://static001.geekbang.org/account/avatar/00/10/d6/8d/7db04ad3.jpg","comment_is_top":false,"comment_ctime":1527775136,"is_pvip":false,"replies":[{"id":"3532","content":"哦，现在机场，我平时工作在最新版本，现在是jdk11...","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1527839919,"ip_address":"","comment_id":10981,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5822742432","product_id":100006701,"comment_content":"杨老师，我看1.8的源码中，files.copy共重载了4个方法，其中有三个调用的都是bio，有一个是您讲的native调用，而没有nio的transferTo。请问这是jdk9变成nio的吗？","like_count":1,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418665,"discussion_content":"哦，现在机场，我平时工作在最新版本，现在是jdk11...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1527839919,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":10886,"user_name":"crazyone","can_delete":false,"product_type":"c1","uid":1115042,"ip_address":"","ucode":"705E34642E41F5","user_header":"https://static001.geekbang.org/account/avatar/00/11/03/a2/ceb37046.jpg","comment_is_top":false,"comment_ctime":1527731755,"is_pvip":false,"replies":[{"id":"3454","content":"找个普通笔记本试试，stream那个往往更快...","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1527753050,"ip_address":"","comment_id":10886,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5822699051","product_id":100006701,"comment_content":"杨老师，Nio transfer 不一定快的场景是否有案例场景说明下？ 还有你说MappedByteBuffer本质上也是一个Direct  Buffer ,那它设计的目的和意义是什么？","like_count":2,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418628,"discussion_content":"找个普通笔记本试试，stream那个往往更快...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1527753050,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":10818,"user_name":"沈老师","can_delete":false,"product_type":"c1","uid":1124296,"ip_address":"","ucode":"7870DDE5005648","user_header":"https://static001.geekbang.org/account/avatar/00/11/27/c8/3addd7b7.jpg","comment_is_top":false,"comment_ctime":1527726446,"is_pvip":false,"replies":[{"id":"3458","content":"抱歉，这得问Mark R，不清楚历史原因；我理解大部分工作其实是需要用户态的，transfer是特定场景而非通用场景","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1527759801,"ip_address":"","comment_id":10818,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5822693742","product_id":100006701,"comment_content":"上面有两张说明普通copy和nio下的transfer，我理解大致意思就是后者省去了切换到用户态的开销，但想问一下前者为什么要设计这样的切换呢?是不是和你copy的数据类型有关?还望详释，谢谢！","like_count":1,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418607,"discussion_content":"抱歉，这得问Mark R，不清楚历史原因；我理解大部分工作其实是需要用户态的，transfer是特定场景而非通用场景","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1527759801,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2753914,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/05/7a/29ee6300.jpg","nickname":"不吃辣","note":"","ucode":"1E1B7C86355AF8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394499,"discussion_content":"组提交机制把","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631925759,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337527,"user_name":"枫林血舞","can_delete":false,"product_type":"c1","uid":2809867,"ip_address":"","ucode":"EE7F6DA78D21EA","user_header":"https://static001.geekbang.org/account/avatar/00/2a/e0/0b/6f667b2c.jpg","comment_is_top":false,"comment_ctime":1646880137,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1646880137","product_id":100006701,"comment_content":"所谓的醍醐灌顶，也不过就是读完这篇文章后的感觉吧！","like_count":0},{"had_liked":false,"id":335610,"user_name":"咚咚锵","can_delete":false,"product_type":"c1","uid":2067707,"ip_address":"","ucode":"18AF93583F1AA2","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/ibkpYrUHO9pQeM1Uk0NUTkX9UztrWS2KBqgNd7WjWiaSl3MzicU71fdzWz2XKFYAvpnIYlfDs6sYLzWbjav7DLwoQ/132","comment_is_top":false,"comment_ctime":1645603391,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1645603391","product_id":100006701,"comment_content":"System.gc() 应该不会回收Derect buffer memory","like_count":0},{"had_liked":false,"id":318179,"user_name":"余佩_陆离","can_delete":false,"product_type":"c1","uid":2063648,"ip_address":"","ucode":"7E01AFB60849BC","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/dkNyaOofGyMDKKdicwia0mgYnWWzQ0siaIwqSQPd6g75j6f43QWZmzicd83SM8kpibNg5RnEjU2VJ6iaichfGh4Nper3g/132","comment_is_top":false,"comment_ctime":1635173443,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635173443","product_id":100006701,"comment_content":"这个老师的文章需要一定的基础，也是我太菜了，有点吃力看着","like_count":0},{"had_liked":false,"id":299157,"user_name":"_关旭_","can_delete":false,"product_type":"c1","uid":1009052,"ip_address":"","ucode":"ADEB7BBC54035B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/65/9c/5c94692c.jpg","comment_is_top":false,"comment_ctime":1624495293,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624495293","product_id":100006701,"comment_content":"像数据库中间件这种适合用堆外内存","like_count":0},{"had_liked":false,"id":281456,"user_name":"前方的灯有点弱","can_delete":false,"product_type":"c1","uid":2058455,"ip_address":"","ucode":"5CEDBCF3DDC991","user_header":"https://static001.geekbang.org/account/avatar/00/1f/68/d7/29025f1f.jpg","comment_is_top":false,"comment_ctime":1614754708,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614754708","product_id":100006701,"comment_content":"4.Direct Buffer 和垃圾收集 之下的就看不懂了 w","like_count":0},{"had_liked":false,"id":280928,"user_name":"poordickey","can_delete":false,"product_type":"c1","uid":1810156,"ip_address":"","ucode":"2A436EC813AF97","user_header":"","comment_is_top":false,"comment_ctime":1614493433,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614493433","product_id":100006701,"comment_content":"这节课的知识容量好大啊 ","like_count":0},{"had_liked":false,"id":278378,"user_name":"花生 ","can_delete":false,"product_type":"c1","uid":1609469,"ip_address":"","ucode":"1C3ECDA4AE1287","user_header":"https://static001.geekbang.org/account/avatar/00/18/8e/fd/279d9cbf.jpg","comment_is_top":false,"comment_ctime":1612922193,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612922193","product_id":100006701,"comment_content":"对于MappedByteBuffer有个疑问，既然这种方式读取文件的效率比FileInputStream的方式高，那么为什么还设计FileInputStream，不如都用MappedByteBuffer好了，我想应该是哪里还有限制的，不然也不会说MappedByteBuffer适用于大文件读取的场景，谢谢老师解答一下","like_count":0},{"had_liked":false,"id":258507,"user_name":"xcoder","can_delete":false,"product_type":"c1","uid":1207135,"ip_address":"","ucode":"2C70ED36B4AC8E","user_header":"https://static001.geekbang.org/account/avatar/00/12/6b/5f/cec1e980.jpg","comment_is_top":false,"comment_ctime":1604468372,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604468372","product_id":100006701,"comment_content":"老师啊，没太看懂，NIO的buffer操作数据使用的是堆外内存吗？而且这块内存是属于内核态空间的？所以所谓NIO的文件拷贝方式是属于零拷贝？NIO只需要在内核态空间的内存中读写数据就可以了，这样就比原来传统的IO读写性能要好了？我这样理解对吗?","like_count":0},{"had_liked":false,"id":236789,"user_name":"业余爱好者","can_delete":false,"product_type":"c1","uid":1482915,"ip_address":"","ucode":"A890935A982988","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg","comment_is_top":false,"comment_ctime":1595551156,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1595551156","product_id":100006701,"comment_content":"内核态拷贝到用户态是在用户态进行吗，不是os做的吗?","like_count":0,"discussions":[{"author":{"id":1261959,"avatar":"https://static001.geekbang.org/account/avatar/00/13/41/87/46d7e1c2.jpg","nickname":"Better me","note":"","ucode":"CADF08D357489A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386875,"discussion_content":"应用程序通过OS提供的read系统调用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627871883,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147797,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1572899993,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572899993","product_id":100006701,"comment_content":"高效的文件拷贝是让读写合一，让内核态内存直接读写硬盘以避免内核态内存和用户态内存的拷贝，不然代码能直接操作的内存只能是用户态内存。","like_count":0},{"had_liked":false,"id":132711,"user_name":"苦行僧","can_delete":false,"product_type":"c1","uid":1055334,"ip_address":"","ucode":"726024A9A9CF44","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","comment_is_top":false,"comment_ctime":1568199006,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568199006","product_id":100006701,"comment_content":"大文件的拷贝 使用哪种方式比较好？","like_count":0},{"had_liked":false,"id":128516,"user_name":"Silicon_Valley","can_delete":false,"product_type":"c1","uid":1138537,"ip_address":"","ucode":"29AFFD44164866","user_header":"https://static001.geekbang.org/account/avatar/00/11/5f/69/5609580b.jpg","comment_is_top":false,"comment_ctime":1566892676,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566892676","product_id":100006701,"comment_content":"-XX:NativeMemoryTracking={summ... 老师，我想问这些参数到底是怎么配置的，配置在什么地方，能说下么，做移动端的对这个一点都不熟悉，感觉好菜","like_count":0},{"had_liked":false,"id":122097,"user_name":"windcaller","can_delete":false,"product_type":"c1","uid":1514157,"ip_address":"","ucode":"1CA3E849805770","user_header":"https://static001.geekbang.org/account/avatar/00/17/1a/ad/faf1bf19.jpg","comment_is_top":false,"comment_ctime":1565288044,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565288044","product_id":100006701,"comment_content":"有的公司面试官以喜欢追问而出名，直到追问到你说不知道。<br>啊哈哈，不知道不可怕，我最喜欢说不知道","like_count":0},{"had_liked":false,"id":90934,"user_name":"核桃","can_delete":false,"product_type":"c1","uid":1385204,"ip_address":"","ucode":"7AB05270CBCCCB","user_header":"https://static001.geekbang.org/account/avatar/00/15/22/f4/9fd6f8f0.jpg","comment_is_top":false,"comment_ctime":1556737437,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556737437","product_id":100006701,"comment_content":"老师你好，看了文章一直没搞懂一个问题，为什么以前不用NIO的时候需要用户态和系统态之间来回切换呢？而现在用NIO Buffer就不用呢？这个切换的作用在哪里呢？","like_count":0},{"had_liked":false,"id":88085,"user_name":"原","can_delete":false,"product_type":"c1","uid":1507054,"ip_address":"","ucode":"4FB88322A5F080","user_header":"https://static001.geekbang.org/account/avatar/00/16/fe/ee/42738eaa.jpg","comment_is_top":false,"comment_ctime":1555841826,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555841826","product_id":100006701,"comment_content":"我发现杨老师你真的花了很多精力回答问题，这个课真的很值呀😄","like_count":0},{"had_liked":false,"id":83098,"user_name":"senekis","can_delete":false,"product_type":"c1","uid":1446025,"ip_address":"","ucode":"CD88681F0278FD","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erTlRJ6skf7iawAeqNfIT1PPgjD7swUdRIRkX1iczjj97GNrxnsnn3QuOhkVbCLgFYAm7sMZficNTSbA/132","comment_is_top":false,"comment_ctime":1554420387,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1554420387","product_id":100006701,"comment_content":"以前虽然看过NIO相关的使用，但是一直没有弄懂filp和rewind方法的使用，老师讲的简单易懂，我也算终于知道怎么用这两个方法了！","like_count":0},{"had_liked":false,"id":77118,"user_name":"自主","can_delete":false,"product_type":"c1","uid":1074940,"ip_address":"","ucode":"E66649583EE7C4","user_header":"https://static001.geekbang.org/account/avatar/00/10/66/fc/11c7eb80.jpg","comment_is_top":false,"comment_ctime":1552838666,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552838666","product_id":100006701,"comment_content":"杨老师，我一直有个比较菜的问题没懂，为什么读文件和写文件之间要有Buffer,而且设定为1024，为什么不直接边读边写，读的速度和写的速度如何控制?","like_count":0},{"had_liked":false,"id":74654,"user_name":"刘胜","can_delete":false,"product_type":"c1","uid":1251625,"ip_address":"","ucode":"487374D72543E3","user_header":"https://static001.geekbang.org/account/avatar/00/13/19/29/f9490983.jpg","comment_is_top":false,"comment_ctime":1552273588,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552273588","product_id":100006701,"comment_content":"之前的文章都看不怎么懂，就到IO这里看懂了一些。之前是做协议适配的，感觉讲流这种东西最好用类比的方式去讲。不要用水流，而用溪流做比喻，清澈溪流潺潺流淌，就是一个tcp的长连接，然后通过socket去获取inputstream，然后得到各个字段，再用事件分发去驱动。这都是应用层的描述了。我觉得就算是底层也是有设计考虑的，应该讲的更人性化一点😊","like_count":0},{"had_liked":false,"id":71797,"user_name":"Cain","can_delete":false,"product_type":"c1","uid":1005926,"ip_address":"","ucode":"82BDECC530E27C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/66/39eeb3f9.jpg","comment_is_top":false,"comment_ctime":1551436077,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1551436077","product_id":100006701,"comment_content":"老师，可以举例说明nio比io慢的场景吗？","like_count":1,"discussions":[{"author":{"id":1512904,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJDdmHm6txEViaZhicyZDx9ficldib38hMyjJic2QzBt2iaiaeNX2ibJ6rSExiahoNGo9bkhlyc66yJanqdlYg/132","nickname":"pierre","note":"","ucode":"9FBD6CF017B409","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581267,"discussion_content":"好奇+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658676917,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":69954,"user_name":"雨幕下的稻田","can_delete":false,"product_type":"c1","uid":1388799,"ip_address":"","ucode":"1FBFF3187AE9C4","user_header":"https://static001.geekbang.org/account/avatar/00/15/30/ff/b3e54147.jpg","comment_is_top":false,"comment_ctime":1550915565,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550915565","product_id":100006701,"comment_content":"MappedByteBuffer这种可以用来实现几个jvm之间共享内存吗，会比redis高效吗","like_count":0},{"had_liked":false,"id":69399,"user_name":"镰仓","can_delete":false,"product_type":"c1","uid":1011300,"ip_address":"","ucode":"0548B222E194C7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6e/64/456c280d.jpg","comment_is_top":false,"comment_ctime":1550735026,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550735026","product_id":100006701,"comment_content":"所以，这种方式会带来一定的额外开销，可能会降低 IO 效率。<br><br>这句话可以麻烦杨老师在解释一下原因吗？","like_count":0},{"had_liked":false,"id":54077,"user_name":"苦行僧","can_delete":false,"product_type":"c1","uid":1055334,"ip_address":"","ucode":"726024A9A9CF44","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","comment_is_top":false,"comment_ctime":1545791915,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545791915","product_id":100006701,"comment_content":"我们的应用是视频网站，每天都要下载生产线的视频，写到本地的磁盘，请问这个写入要使用nio吗？","like_count":0},{"had_liked":false,"id":48523,"user_name":"fantastic","can_delete":false,"product_type":"c1","uid":1084027,"ip_address":"","ucode":"F2C16695EB1A78","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM4CicVSVufx9qpLDticF6dIA0fFQwsgOG3kR8qPZYTIicicbfwPfgK62xZaIzIbsjNglSpGuc4cqQMibcw/132","comment_is_top":false,"comment_ctime":1544462821,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544462821","product_id":100006701,"comment_content":"关于文中说的nio的transferTo，在linux下应该是调用sendfile进行拷贝，高版本的linux应该可以省去一次内核态到内核态的拷贝@作者","like_count":0},{"had_liked":false,"id":32179,"user_name":"吴浩","can_delete":false,"product_type":"c1","uid":1142224,"ip_address":"","ucode":"EA91647FF05EA7","user_header":"https://static001.geekbang.org/account/avatar/00/11/6d/d0/6c2b8877.jpg","comment_is_top":false,"comment_ctime":1539479691,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1539479691","product_id":100006701,"comment_content":"Nio transfer不需要切换到用户态，那么用户态是怎么获取到数据了，大致意思能懂，这个地方感觉不清楚。没有上一个讲的清楚，比如读取，先从内核读取到内核缓存，切换到用户态在从内核缓存读取。","like_count":0},{"had_liked":false,"id":11824,"user_name":"Miaozhe","can_delete":false,"product_type":"c1","uid":1113660,"ip_address":"","ucode":"62872E8C138B67","user_header":"https://static001.geekbang.org/account/avatar/00/10/fe/3c/13175251.jpg","comment_is_top":false,"comment_ctime":1528376479,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1528376479","product_id":100006701,"comment_content":"杨老师再问个问题，DirectByteBffer类为什么不能使用？看代码它是继承自MappedBufferByte.","like_count":0},{"had_liked":false,"id":11798,"user_name":"Miaozhe","can_delete":false,"product_type":"c1","uid":1113660,"ip_address":"","ucode":"62872E8C138B67","user_header":"https://static001.geekbang.org/account/avatar/00/10/fe/3c/13175251.jpg","comment_is_top":false,"comment_ctime":1528359464,"is_pvip":false,"replies":[{"id":"3864","content":"你的bytebuffer怎么分配的？allocate？试试allocateDirect。<br>那段话我理解就是说 不是这个就是那个吧","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1528379991,"ip_address":"","comment_id":11798,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1528359464","product_id":100006701,"comment_content":"再问个问题，在Java 8中，对Byte Buffer有这样的描述，a byte buffer is either or non-direct。<br>我有点晕乎了，在代码调试中isDirect是False 。","like_count":0,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419005,"discussion_content":"你的bytebuffer怎么分配的？allocate？试试allocateDirect。\n那段话我理解就是说 不是这个就是那个吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1528379991,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1756181,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/cc/15/35622b02.jpg","nickname":"Jason","note":"","ucode":"B2765DD1D90B0C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":242250,"discussion_content":"难道还有第三种？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587472379,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":11796,"user_name":"Miaozhe","can_delete":false,"product_type":"c1","uid":1113660,"ip_address":"","ucode":"62872E8C138B67","user_header":"https://static001.geekbang.org/account/avatar/00/10/fe/3c/13175251.jpg","comment_is_top":false,"comment_ctime":1528358472,"is_pvip":false,"replies":[{"id":"3863","content":"依赖于cleaner，具体时候不好预测，在快满时会被调用system.gc触发ref处理，后续版本有所改进，至少不会出现，明明有空间，但并发分配会oom的问题","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1528379693,"ip_address":"","comment_id":11796,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1528358472","product_id":100006701,"comment_content":"杨老师，问个问题，Byte Buffer对象什么时候被垃圾回收？","like_count":0,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419003,"discussion_content":"依赖于cleaner，具体时候不好预测，在快满时会被调用system.gc触发ref处理，后续版本有所改进，至少不会出现，明明有空间，但并发分配会oom的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1528379693,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":10991,"user_name":"jacky","can_delete":false,"product_type":"c1","uid":1043375,"ip_address":"","ucode":"CA680B02320539","user_header":"https://static001.geekbang.org/account/avatar/00/0f/eb/af/b893c7e2.jpg","comment_is_top":false,"comment_ctime":1527778187,"is_pvip":false,"replies":[{"id":"3531","content":"肯定有副作用","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1527839806,"ip_address":"","comment_id":10991,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1527778187","product_id":100006701,"comment_content":"杨老师，如果显示调用system.gc会不会导致堆空间充足，但fullgc频繁的现象呢？导致应用经常停顿？","like_count":0,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418666,"discussion_content":"肯定有副作用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1527839806,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":10963,"user_name":"正是那朵玫瑰","can_delete":false,"product_type":"c1","uid":1048261,"ip_address":"","ucode":"73D630B654573F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fe/c5/3467cf94.jpg","comment_is_top":false,"comment_ctime":1527766469,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1527766469","product_id":100006701,"comment_content":"可以具体讲一下MappedByteBuffer的原理和使用技巧么？","like_count":0}]}