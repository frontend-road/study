{"id":129823,"title":"44 | 记一次双十一抢购性能瓶颈调优","content":"<p>你好，我是刘超。今天我们来聊聊双十一的那些事儿，由于场景比较复杂，这一讲的出发点主要是盘点各个业务中高频出现的性能瓶颈，给出相应的优化方案，但优化方案并没有一一展开，深度讲解其具体实现。你可以结合自己在这个专栏的所学和日常积累，有针对性地在留言区提问，我会一一解答。下面切入正题。</p><p>每年的双十一都是很多研发部门最头痛的节日，由于这个节日比较特殊，公司一般都会准备大量的抢购活动，相应的瞬时高并发请求对系统来说是个不小的考验。</p><p>还记得我们公司商城第一次做双十一抢购活动，优惠力度特别大，购买量也很大，提交订单的接口TPS一度达到了10W。在首波抢购时，后台服务监控就已经显示服务器的各项指标都超过了70%，CPU更是一直处于400%（4核CPU），数据库磁盘I/O一直处于100%状态。由于瞬时写入日志量非常大，导致我们的后台服务监控在短时间内，无法实时获取到最新的请求监控数据，此时后台开始出现一系列的异常报警。</p><p>更严重的系统问题是出现在第二波的抢购活动中，由于第一波抢购时我们发现后台服务的压力比较大，于是就横向扩容了服务，但却没能缓解服务的压力，反而在第二波抢购中，我们的系统很快就出现了宕机。</p><p><span class=\"orange\">这次活动暴露出来的问题很多。</span>首先，由于没有限流，超过预期的请求量导致了系统卡顿；其次，我们是基于Redis实现了一个分布式锁分发抢购名额的功能，但这个功能抛出了大量异常；再次，就是我们误判了横向扩容服务可以起到的作用，其实第一波抢购的性能瓶颈是在数据库，横向扩容服务反而又增加了数据库的压力，起到了反作用；最后，就是在服务挂掉的情况下，丢失了异步处理的业务请求。</p><!-- [[[read_end]]] --><p>接下来我会以上面的这个案例为背景，重点讲解抢购业务中的性能瓶颈该如何调优。</p><h2>抢购业务流程</h2><p>在进行具体的性能问题讨论之前，我们不妨先来了解下一个常规的抢购业务流程，这样方便我们更好地理解一个抢购系统的性能瓶颈以及调优过程。</p><ul>\n<li>用户登录后会进入到商品详情页面，此时商品购买处于倒计时状态，购买按钮处于置灰状态。</li>\n<li>当购买倒计时间结束后，用户点击购买商品，此时用户需要排队等待获取购买资格，如果没有获取到购买资格，抢购活动结束，反之，则进入提交页面。</li>\n<li>用户完善订单信息，点击提交订单，此时校验库存，并创建订单，进入锁定库存状态，之后，用户支付订单款。</li>\n<li>当用户支付成功后，第三方支付平台将产生支付回调，系统通过回调更新订单状态，并扣除数据库的实际库存，通知用户购买成功。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/e4/e0/e47d6d3c0bcd5aa455252a045c9f52e0.jpg?wh=994*1444\" alt=\"\"></p><h2>抢购系统中的性能瓶颈</h2><p>熟悉了一个常规的抢购业务流程之后，我们再来看看抢购中都有哪些业务会出现性能瓶颈。</p><h3>1. 商品详情页面</h3><p>如果你有过抢购商品的经验，相信你遇到过这样一种情况，在抢购马上到来的时候，商品详情页面几乎是无法打开的。</p><p>这是因为大部分用户在抢购开始之前，会一直疯狂刷新抢购商品页面，尤其是倒计时一分钟内，查看商品详情页面的请求量会猛增。此时如果商品详情页面没有做好，就很容易成为整个抢购系统中的第一个性能瓶颈。</p><p>类似这种问题，我们通常的做法是提前将整个抢购商品页面生成为一个静态页面，并push到CDN节点，并且在浏览器端缓存该页面的静态资源文件，通过 CDN 和浏览器本地缓存这两种缓存静态页面的方式来实现商品详情页面的优化。</p><h3>2. 抢购倒计时</h3><p>在商品详情页面中，存在一个抢购倒计时，这个倒计时是服务端时间的，初始化时间需要从服务端获取，并且在用户点击购买时，还需要服务端判断抢购时间是否已经到了。</p><p>如果商品详情每次刷新都去后端请求最新的时间，这无疑将会把整个后端服务拖垮。我们可以改成初始化时间从客户端获取，每隔一段时间主动去服务端刷新同步一次倒计时，这个时间段是随机时间，避免集中请求服务端。这种方式可以避免用户主动刷新服务端的同步时间接口。</p><h3>3. 获取购买资格</h3><p>可能你会好奇，在抢购中我们已经通过库存数量限制用户了，那为什么会出现一个获取购买资格的环节呢？</p><p>我们知道，进入订单详情页面后，需要填写相关的订单信息，例如收货地址、联系方式等，在这样一个过程中，很多用户可能还会犹豫，甚至放弃购买。如果把这个环节设定为一定能购买成功，那我们就只能让同等库存的用户进来，一旦用户放弃购买，这些商品可能无法再次被其他用户抢购，会大大降低商品的抢购销量。</p><p>增加购买资格的环节，选择让超过库存的用户量进来提交订单页面，这样就可以保证有足够提交订单的用户量，确保抢购活动中商品的销量最大化。</p><p>获取购买资格这步的并发量会非常大，还是基于分布式的，通常我们可以通过Redis分布式锁来控制购买资格的发放。</p><h3>4. 提交订单</h3><p>由于抢购入口的请求量会非常大，可能会占用大量带宽，为了不影响提交订单的请求，我建议将提交订单的子域名与抢购子域名区分开，分别绑定不同网络的服务器。</p><p>用户点击提交订单，需要先校验库存，库存足够时，用户先扣除缓存中的库存，再生成订单。如果校验库存和扣除库存都是基于数据库实现的，那么每次都去操作数据库，瞬时的并发量就会非常大，对数据库来说会存在一定的压力，从而会产生性能瓶颈。与获取购买资格一样，我们同样可以通过分布式锁来优化扣除消耗库存的设计。</p><p>由于我们已经缓存了库存，所以在提交订单时，库存的查询和冻结并不会给数据库带来性能瓶颈。但在这之后，还有一个订单的幂等校验，为了提高系统性能，我们同样可以使用分布式锁来优化。</p><p>而保存订单信息一般都是基于数据库表来实现的，在单表单库的情况下，碰到大量请求，特别是在瞬时高并发的情况下，磁盘I/O、数据库请求连接数以及带宽等资源都可能会出现性能瓶颈。此时我们可以考虑对订单表进行分库分表，通常我们可以基于userid字段来进行hash取模，实现分库分表，从而提高系统的并发能力。</p><h3>5. 支付回调业务操作</h3><p>在用户支付订单完成之后，一般会有第三方支付平台回调我们的接口，更新订单状态。</p><p>除此之外，还可能存在扣减数据库库存的需求。如果我们的库存是基于缓存来实现查询和扣减，那提交订单时的扣除库存就只是扣除缓存中的库存，为了减少数据库的并发量，我们会在用户付款之后，在支付回调的时候去选择扣除数据库中的库存。</p><p>此外，还有订单购买成功的短信通知服务，一些商城还提供了累计积分的服务。</p><p>在支付回调之后，我们可以通过异步提交的方式，实现订单更新之外的其它业务处理，例如库存扣减、积分累计以及短信通知等。通常我们可以基于MQ实现业务的异步提交。</p><h2>性能瓶颈调优</h2><p>了解了各个业务流程中可能存在的性能瓶颈，我们再来讨论下，完成了常规的优化设计之后，商城还可能出现的一些性能问题，我们又该如何做进一步调优。</p><h3>1. 限流实现优化</h3><p>限流是我们常用的兜底策略，无论是倒计时请求接口，还是抢购入口，系统都应该对它们设置最大并发访问数量，防止超出预期的请求集中进入系统，导致系统异常。</p><p>通常我们是在网关层实现高并发请求接口的限流，如果我们使用了Nginx做反向代理的话，就可以在Nginx配置限流算法。Nginx是基于漏桶算法实现的限流，这样做的好处是能够保证请求的实时处理速度。</p><p>Nginx中包含了两个限流模块：<a href=\"http://nginx.org/en/docs/http/ngx_http_limit_conn_module.html\">ngx_http_limit_conn_module</a> 和 <a href=\"http://nginx.org/en/docs/http/ngx_http_limit_req_module.html\">ngx_http_limit_req_module</a>，前者是用于限制单个IP单位时间内的请求数量，后者是用来限制单位时间内所有IP的请求数量。以下分别是两个限流的配置：</p><pre><code>limit_conn_zone $binary_remote_addr zone=addr:10m;\n\nserver {\n    location / {\n        limit_conn addr 1;\n    }\n</code></pre><pre><code>http {\n    limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;\n    server {\n        location / {\n            limit_req zone=one burst=5 nodelay;\n        }\n} \n</code></pre><p>在网关层，我们还可以通过Lua编写OpenResty来实现一套限流功能，也可以通过现成的Kong安装插件来实现。除了网关层的限流之外，我们还可以基于服务层实现接口的限流，通过Zuul RateLimit或Guava RateLimiter实现。</p><h3>2. 流量削峰</h3><p>瞬间有大量请求进入到系统后台服务之后，首先是要通过Redis分布式锁获取购买资格，这个时候我们看到了大量的“JedisConnectionException Could not get connection from pool”异常。</p><p>这个异常是一个Redis连接异常，由于我们当时的Redis集群是基于哨兵模式部署的，哨兵模式部署的Redis也是一种主从模式，我们在写Redis的时候都是基于主库来实现的，在高并发操作一个Redis实例就很容易出现性能瓶颈。</p><p>你可能会想到使用集群分片的方式来实现，但对于分布式锁来说，集群分片的实现只会增加性能消耗，这是因为我们需要基于Redission的红锁算法实现，需要对集群的每个实例进行加锁。</p><p>后来我们使用Redission插件替换Jedis插件，由于Jedis的读写I/O操作还是阻塞式的，方法调用都是基于同步实现，而Redission底层是基于Netty框架实现的，读写I/O是非阻塞I/O操作，且方法调用是基于异步实现。</p><p>但在瞬时并发非常大的情况下，依然会出现类似问题，此时，我们可以考虑在分布式锁前面新增一个等待队列，减缓抢购出现的集中式请求，相当于一个流量削峰。当请求的key值放入到队列中，请求线程进入阻塞状态，当线程从队列中获取到请求线程的key值时，就会唤醒请求线程获取购买资格。</p><h3>3. 数据丢失问题</h3><p>无论是服务宕机，还是异步发送给MQ，都存在请求数据丢失的可能。例如，当第三方支付回调系统时，写入订单成功了，此时通过异步来扣减库存和累计积分，如果应用服务刚好挂掉了，MQ还没有存储到该消息，那即使我们重启服务，这条请求数据也将无法还原。</p><p>重试机制是还原丢失消息的一种解决方案。在以上的回调案例中，我们可以在写入订单时，同时在数据库写入一条异步消息状态，之后再返回第三方支付操作成功结果。在异步业务处理请求成功之后，更新该数据库表中的异步消息状态。</p><p>假设我们重启服务，那么系统就会在重启时去数据库中查询是否有未更新的异步消息，如果有，则重新生成MQ业务处理消息，供各个业务方消费处理丢失的请求数据。</p><h2>总结</h2><p><span class=\"orange\">减少抢购中操作数据库的次数，缩短抢购流程，是抢购系统设计和优化的核心点。</span></p><p>抢购系统的性能瓶颈主要是在数据库，即使我们对服务进行了横向扩容，当流量瞬间进来，数据库依然无法同时响应处理这么多的请求操作。我们可以对抢购业务表进行分库分表，通过提高数据库的处理能力，来提升系统的并发处理能力。</p><p>除此之外，我们还可以分散瞬时的高并发请求，流量削峰是最常用的方式，用一个队列，让请求排队等待，然后有序且有限地进入到后端服务，最终进行数据库操作。当我们的队列满了之后，可以将溢出的请求放弃，这就是限流了。通过限流和削峰，可以有效地保证系统不宕机，确保系统的稳定性。</p><h2>思考题</h2><p>在提交了订单之后会进入到支付阶段，此时系统是冻结了库存的，一般我们会给用户一定的等待时间，这样就很容易出现一些用户恶意锁库存，导致抢到商品的用户没办法去支付购买该商品。你觉得该怎么优化设计这个业务操作呢？</p><p>期待在留言区看到你的答案。也欢迎你点击“请朋友读”，把今天的内容分享给身边的朋友，邀请他一起讨论。</p><p><img src=\"https://static001.geekbang.org/resource/image/bb/67/bbe343640d6b708832c4133ec53ed967.jpg?wh=1110*659\" alt=\"unpreview\"><span class=\"reference\"></span></p>","neighbors":{"left":{"article_title":"43 | 如何使用缓存优化系统性能？","id":128481},"right":{"article_title":"结束语 | 栉风沐雨，砥砺前行！","id":130677}},"comments":[{"had_liked":false,"id":145006,"user_name":"zk_207","can_delete":false,"product_type":"c1","uid":1183552,"ip_address":"","ucode":"196D92ECC8540D","user_header":"https://static001.geekbang.org/account/avatar/00/12/0f/40/e838871e.jpg","comment_is_top":false,"comment_ctime":1572158654,"is_pvip":false,"replies":[{"id":"56517","content":"我们是放在mq中去实现的，rabbitmq中有一个延时队列，当过期时间到了，就会被放到死信队列中，只要去死信队列中实时消费就好了。<br><br>定时任务也是一种实现方式，在分布式部署定时任务时，要实现分布式定时任务。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1572518839,"ip_address":"","comment_id":145006,"utype":1}],"discussion_count":3,"race_medal":0,"score":"61701700798","product_id":100028001,"comment_content":"超哥，你们订单超时是基于定时任务去做的吗？比如我订单是3min有效，怎么保证3min没支付就取消？<br>","like_count":14,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472209,"discussion_content":"我们是放在mq中去实现的，rabbitmq中有一个延时队列，当过期时间到了，就会被放到死信队列中，只要去死信队列中实时消费就好了。\n\n定时任务也是一种实现方式，在分布式部署定时任务时，要实现分布式定时任务。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572518839,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1130275,"avatar":"https://static001.geekbang.org/account/avatar/00/11/3f/23/8ff389d2.jpg","nickname":"郁方林","note":"","ucode":"8ABEAFDA815DDE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332880,"discussion_content":"我们用redis，监听过期key，订单规则匹配","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1607385786,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1142335,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6e/3f/49e5079f.jpg","nickname":"楞伽山人","note":"","ucode":"5859C06DAC790D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542766,"discussion_content":"也就是说下完订单之后生成一个延时消息 然后在这给定的时间后 检查订单状态是否为待支付 如果为待支付 就取消订单 回退占用的库存","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640838059,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129684,"user_name":"-W.LI-","can_delete":false,"product_type":"c1","uid":1210699,"ip_address":"","ucode":"3556786538664F","user_header":"https://static001.geekbang.org/account/avatar/00/12/79/4b/740f91ca.jpg","comment_is_top":false,"comment_ctime":1567219457,"is_pvip":false,"replies":[{"id":"48421","content":"不是预扣库存多放开，是在预扣库存前设置一个购买资格，购买资格是300，预扣库存还是100不变。不会出现商品超卖的问题。<br><br>问答题回答思路很好。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1567298686,"ip_address":"","comment_id":129684,"utype":1}],"discussion_count":3,"race_medal":0,"score":"44516892417","product_id":100028001,"comment_content":"课后思考题:<br>文中老师讲了预扣库存可以多放开一点。比如实际只有100件商品，允许预扣300。支付成功后扣去真实库存。之前某包买东西，就遇见过了几天客服联系说没货了退款这种。我之前做过一个是支付完真实库存扣件失败，直接退款回滚数据的。<br>恶意用户刷单的话可以对用户进行封号处理，在redis中缓存用户待带支付的订单数，每次进入带支付前校验下待支付的集合里有多少(金额数目都可)。判定为恶意刷单的直接黑名单。某东用的好像是黑名单。","like_count":10,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465602,"discussion_content":"不是预扣库存多放开，是在预扣库存前设置一个购买资格，购买资格是300，预扣库存还是100不变。不会出现商品超卖的问题。\n\n问答题回答思路很好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567298686,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1006789,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5c/c5/1231d633.jpg","nickname":"梁中华","note":"","ucode":"52FE40242CBAD0","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7367,"discussion_content":"预扣库存不就是锁库存吗？如果锁了库存的订单不去支付还是解决不了这个问题啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567501704,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1210699,"avatar":"https://static001.geekbang.org/account/avatar/00/12/79/4b/740f91ca.jpg","nickname":"-W.LI-","note":"","ucode":"3556786538664F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1006789,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5c/c5/1231d633.jpg","nickname":"梁中华","note":"","ucode":"52FE40242CBAD0","race_medal":1,"user_type":1,"is_pvip":true},"discussion":{"id":7513,"discussion_content":"可以看下老师在别的同学下的答复。没有直接解决的帮法只能尽量减少","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567522909,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":7367,"ip_address":""},"score":7513,"extra":""}]}]},{"had_liked":false,"id":188022,"user_name":"阿卧","can_delete":false,"product_type":"c1","uid":1229566,"ip_address":"","ucode":"68C0CC25E57707","user_header":"https://static001.geekbang.org/account/avatar/00/12/c2/fe/038a076e.jpg","comment_is_top":false,"comment_ctime":1584313816,"is_pvip":false,"replies":[{"id":"73033","content":"使用更优的分布式锁，以及细化锁粒度，例如将一个库存分为多个库存等","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1584534019,"ip_address":"","comment_id":188022,"utype":1}],"discussion_count":2,"race_medal":0,"score":"31649084888","product_id":100028001,"comment_content":"扣件库存用分布式锁，性能瓶颈就在分布式锁上。那么如何优化提高下单的qps呢？","like_count":7,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487318,"discussion_content":"使用更优的分布式锁，以及细化锁粒度，例如将一个库存分为多个库存等","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584534019,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1434913,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqWa00uqgukb0sPD16VkHAlP7KibaChCmBIA7y9LficdWv7yguibJeicV2dwQakIQbI7RuqzpdHNQjriaw/132","nickname":"jackiesteed","note":"","ucode":"78C374E8A53E29","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":581745,"discussion_content":"多个库存带来的问题也比较多，比如A库存售罄，但是B库存一个都没卖，还需要设计库存共享的逻辑。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658969022,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":487318,"ip_address":""},"score":581745,"extra":""}]}]},{"had_liked":false,"id":152754,"user_name":"王三好","can_delete":false,"product_type":"c1","uid":1439903,"ip_address":"","ucode":"7528CB2B1EFA4B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKw8ictgYcqf6kicJ4RlmicgKvCAGLTQFmmvCWwGzGJeY5SJ8KxXNtNh12FI0IzJNYfUx1PbJcHriadbA/132","comment_is_top":false,"comment_ctime":1574075747,"is_pvip":false,"replies":[{"id":"58826","content":"有界队列LinkedBlockingQueue或者Disruptor实现队列","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1574164727,"ip_address":"","comment_id":152754,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31638846819","product_id":100028001,"comment_content":"队列使用什么实现的","like_count":7,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474926,"discussion_content":"有界队列LinkedBlockingQueue或者Disruptor实现队列","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574164727,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129661,"user_name":"超威丶","can_delete":false,"product_type":"c1","uid":1180753,"ip_address":"","ucode":"1A18DE885D3C44","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/51/da465a93.jpg","comment_is_top":false,"comment_ctime":1567210620,"is_pvip":false,"replies":[{"id":"48420","content":"没有直接的解决方案，但是我们可以通过间接的方案来减少这种恶意锁单的问题。建立信用以及黑名单机制，首先在获取购买资格时将黑名单用户过滤掉，其次在获取购买资格后，信用级别高的用户优先获取到库存。用户一旦恶意锁单就会被加入到黑名单。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1567298469,"ip_address":"","comment_id":129661,"utype":1}],"discussion_count":2,"race_medal":0,"score":"31631981692","product_id":100028001,"comment_content":"没有比较好的办法，如果等到付款才扣减库存，可能会出现超卖！一般好的办法限制一个账户买同个商品的数量，减少损失","like_count":7,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465590,"discussion_content":"没有直接的解决方案，但是我们可以通过间接的方案来减少这种恶意锁单的问题。建立信用以及黑名单机制，首先在获取购买资格时将黑名单用户过滤掉，其次在获取购买资格后，信用级别高的用户优先获取到库存。用户一旦恶意锁单就会被加入到黑名单。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567298469,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1006789,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5c/c5/1231d633.jpg","nickname":"梁中华","note":"","ucode":"52FE40242CBAD0","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7371,"discussion_content":"如果黑产买了很多黑IP来攻击你的话黑名单也控制不住，这种只能通过快速过期，或者出比较难的验证码问题，防止机器刷单。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1567501891,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144394,"user_name":"zk_207","can_delete":false,"product_type":"c1","uid":1183552,"ip_address":"","ucode":"196D92ECC8540D","user_header":"https://static001.geekbang.org/account/avatar/00/12/0f/40/e838871e.jpg","comment_is_top":false,"comment_ctime":1571910500,"is_pvip":false,"replies":[{"id":"55860","content":"通过分布式锁来控制的，在下单时，以缓存中的库存为准，不会修改DB中的库存，只有在支付完成之后，回调时去数据库中扣除库存，严格上来说，只要业务操作没有bug，两者的库存就是一致的","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1572081138,"ip_address":"","comment_id":144394,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23046746980","product_id":100028001,"comment_content":"您好，请问本文中说的订单幂等性校验如何控制吗？还有就是库存放在缓存中，DB和缓存如何保证一致性？能说下解决方案吗？","like_count":5,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471917,"discussion_content":"通过分布式锁来控制的，在下单时，以缓存中的库存为准，不会修改DB中的库存，只有在支付完成之后，回调时去数据库中扣除库存，严格上来说，只要业务操作没有bug，两者的库存就是一致的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572081138,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129682,"user_name":"-W.LI-","can_delete":false,"product_type":"c1","uid":1210699,"ip_address":"","ucode":"3556786538664F","user_header":"https://static001.geekbang.org/account/avatar/00/12/79/4b/740f91ca.jpg","comment_is_top":false,"comment_ctime":1567218943,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23042055423","product_id":100028001,"comment_content":"当请求的 key 值放入到队列中，请求线程进入阻塞状态，当线程从队列中获取到请求线程的 key 值时，就会唤醒请求线程获取购买资格。<br>老师好!能讲下写读请求使用队列缓存的原理么?<br>之前有看过servlet3.0的和这个是不是有点像。客户端的链接是阻塞的，服务端通过队列缓存，处理完以后通过之前的链接把数据写回给客户端。<br>servlet3.0是servlet规范，我现在基本用的都会spring自带的dispa***。如果要实现这总异步IO需要我们自己实现servlet是么？<br>IO方面的知识很薄弱，netty好像很经典可是从来没看过，一方面觉得自己菜，领一方面就是工作中没用上，我从下手。希望老师给点学习指南谢谢。<br>依依不舍(´..)❤","like_count":5},{"had_liked":false,"id":144585,"user_name":"zk_207","can_delete":false,"product_type":"c1","uid":1183552,"ip_address":"","ucode":"196D92ECC8540D","user_header":"https://static001.geekbang.org/account/avatar/00/12/0f/40/e838871e.jpg","comment_is_top":false,"comment_ctime":1571973440,"is_pvip":false,"replies":[{"id":"55858","content":"我们是通过一个生产者消费者的方式实现缓存库存的添加和删除，并且通过分布式锁来保证原子性","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1572080741,"ip_address":"","comment_id":144585,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18751842624","product_id":100028001,"comment_content":"超哥，请教个问题，就是秒杀的时候我们一般是下单预扣减库存，比如10分钟之后如果没有支付的话库存回流，这时候怎么保证库存准确性与系统性能呢？","like_count":4,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472016,"discussion_content":"我们是通过一个生产者消费者的方式实现缓存库存的添加和删除，并且通过分布式锁来保证原子性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572080741,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":256686,"user_name":"torres","can_delete":false,"product_type":"c1","uid":1108761,"ip_address":"","ucode":"34DABCFC7B74EA","user_header":"https://static001.geekbang.org/account/avatar/00/10/eb/19/76b0b98c.jpg","comment_is_top":false,"comment_ctime":1603706424,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14488608312","product_id":100028001,"comment_content":"性能调优黄金法则<br><br>缓存<br>限流<br>异步<br>解耦<br>补偿","like_count":3},{"had_liked":false,"id":132999,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1568296683,"is_pvip":false,"replies":[{"id":"50984","content":"是的","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1568423094,"ip_address":"","comment_id":132999,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14453198571","product_id":100028001,"comment_content":"课后思考及问题<br><br>1：在提交了订单之后会进入到支付阶段，此时系统是冻结了库存的，一般我们会给用户一定的等待时间，这样就很容易出现一些用户恶意锁库存，导致抢到商品的用户没办法去支付购买该商品。<br><br>首先，感觉老师的问题有点奇怪，没明白“某些用户恶意锁库存，导致抢到商品的用户没办法去支付购买该商品的”——我的理解，300个人抢到了抢购的商品，实际只有100个，如果是先款订单，谁先付款谁就先实际抢购到对应的商品呗！如果担心付款后，不要了要求退货，这就是另外的事情了，一般而言待抢购的商品都是物超所值的，需要担心的应该是多抢。<br><br>如果是要控制有购买资格的人数，可以利用大数据用户画像的方式，将级别高信用好的用户优先放过去，当然，黑名单也用起来过滤掉恶意用户，再者就是限制用户购买的商品数量。","like_count":3,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467208,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568423094,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174711,"user_name":"asura","can_delete":false,"product_type":"c1","uid":1105148,"ip_address":"","ucode":"4AF66C19B4AE65","user_header":"https://static001.geekbang.org/account/avatar/00/10/dc/fc/5c3ad841.jpg","comment_is_top":false,"comment_ctime":1580358372,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10170292964","product_id":100028001,"comment_content":"课后思考题:设置黑名单来防止恶意锁库存。<br>下单前会有很多检验性的判断，而且会经常变动，可以采用责任链模式，动态添加检验逻辑。在链头判断用户是不是黑名单，是的话就直接结束请求，不是走下一个链。","like_count":2},{"had_liked":false,"id":130989,"user_name":"拒绝","can_delete":false,"product_type":"c1","uid":1335155,"ip_address":"","ucode":"CB0264C4D3FE17","user_header":"https://static001.geekbang.org/account/avatar/00/14/5f/73/bb3dc468.jpg","comment_is_top":false,"comment_ctime":1567590761,"is_pvip":false,"replies":[{"id":"49123","content":"相当于线程池中的阻塞队列","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1567595963,"ip_address":"","comment_id":130989,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10157525353","product_id":100028001,"comment_content":"我们可以考虑在分布式锁前面新增一个等待队列，减缓抢购出现的集中式请求，相当于一个流量削峰。当请求的 key 值放入到队列中，请求线程进入阻塞状态，当线程从队列中获取到请求线程的 key 值时，就会唤醒请求线程获取购买资格。<br>老师这里不太理解！","like_count":2,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466230,"discussion_content":"相当于线程池中的阻塞队列","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567595963,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1876212,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/a0/f4/7e122a67.jpg","nickname":"之渊","note":"","ucode":"02B9299DBB4881","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299627,"discussion_content":"我觉得这里可以用限流算法比如漏桶法来限制获取redis锁的速度即可。那不是更简单高效","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597754519,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130653,"user_name":"梁中华","can_delete":false,"product_type":"c1","uid":1006789,"ip_address":"","ucode":"52FE40242CBAD0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/c5/1231d633.jpg","comment_is_top":false,"comment_ctime":1567502117,"is_pvip":true,"replies":[{"id":"53310","content":"是的，可以参考下官方的使用文档，在单机且运用服务的CPU核数比较小的环境下，可能测试性能效果没有很大差别，如果想要效果更明显，可以在redis集群环境且应用服务的CPU核数在16以上的环境下进行性能压测，效果会更明显。<br><br>https:&#47;&#47;github.com&#47;redisson&#47;redisson&#47;wiki&#47;2.-配置方法#21-程序化配置方法","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1570346792,"ip_address":"","comment_id":130653,"utype":1}],"discussion_count":1,"race_medal":1,"score":"10157436709","product_id":100028001,"comment_content":"我们上次把redis客户端从jedis改成redission后，会有部分查询请求出现延迟几十毫秒的现象，换回jedis里面好了，不知道老师有没有遇到过这种情况，是不是netty的很么参数设置的不对？","like_count":2,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466050,"discussion_content":"是的，可以参考下官方的使用文档，在单机且运用服务的CPU核数比较小的环境下，可能测试性能效果没有很大差别，如果想要效果更明显，可以在redis集群环境且应用服务的CPU核数在16以上的环境下进行性能压测，效果会更明显。\n\nhttps://github.com/redisson/redisson/wiki/2.-配置方法#21-程序化配置方法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570346792,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":139197,"user_name":"Mr.Strive.Z.H.L","can_delete":false,"product_type":"c1","uid":1030198,"ip_address":"","ucode":"6D97E159E2EECD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b8/36/542c96bf.jpg","comment_is_top":false,"comment_ctime":1570585708,"is_pvip":false,"replies":[{"id":"54277","content":"扣除缓存中的库存也需要分布式锁，订单超时被取消会增加库存。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1570957067,"ip_address":"","comment_id":139197,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5865553004","product_id":100028001,"comment_content":"老师你文中提到的 锁库存，我理解就是缓存中扣减库存，因为没有涉及到db，所以没有实际的上锁。是这样吧？ 如果用户迟迟没付款，订单超时后会增加缓存的库存吗？","like_count":1,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469839,"discussion_content":"扣除缓存中的库存也需要分布式锁，订单超时被取消会增加库存。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570957067,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130024,"user_name":"晓杰","can_delete":false,"product_type":"c1","uid":1441546,"ip_address":"","ucode":"1174C88EEBF8A6","user_header":"https://static001.geekbang.org/account/avatar/00/15/ff/0a/12faa44e.jpg","comment_is_top":false,"comment_ctime":1567353198,"is_pvip":false,"replies":[{"id":"48608","content":"到了支付界面，我们已经锁定库存了，所以即使增大购买资格，也没法解决这个问题。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1567424097,"ip_address":"","comment_id":130024,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5862320494","product_id":100028001,"comment_content":"问答题：在获取购买资格这一步，可以适当加大购买资格的数量","like_count":1,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465768,"discussion_content":"到了支付界面，我们已经锁定库存了，所以即使增大购买资格，也没法解决这个问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567424097,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130022,"user_name":"晓杰","can_delete":false,"product_type":"c1","uid":1441546,"ip_address":"","ucode":"1174C88EEBF8A6","user_header":"https://static001.geekbang.org/account/avatar/00/15/ff/0a/12faa44e.jpg","comment_is_top":false,"comment_ctime":1567353116,"is_pvip":false,"replies":[{"id":"48607","content":"对的","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1567424024,"ip_address":"","comment_id":130022,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5862320412","product_id":100028001,"comment_content":"请问老师，在提交订单的时候加上订单的幂等校验是为了防止同一个用户重复提交订单吗","like_count":1,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465766,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567424024,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129747,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1567238949,"is_pvip":false,"replies":[{"id":"48422","content":"嗯，黑名单机制是一个方向","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1567298788,"ip_address":"","comment_id":129747,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5862206245","product_id":100028001,"comment_content":"期待老师的思考题解答。","like_count":1,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465626,"discussion_content":"嗯，黑名单机制是一个方向","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567298788,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359947,"user_name":"really","can_delete":false,"product_type":"c1","uid":1192593,"ip_address":"广东","ucode":"BA25BF86FF2297","user_header":"https://static001.geekbang.org/account/avatar/00/12/32/91/1caeeec1.jpg","comment_is_top":false,"comment_ctime":1666086416,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1666086416","product_id":100028001,"comment_content":"把库存放到redis，redis不能保证数据不丢失，如果出现了主从切换，那会超卖的","like_count":0},{"had_liked":false,"id":311468,"user_name":"书策稠浊","can_delete":false,"product_type":"c1","uid":1307497,"ip_address":"","ucode":"A29875CE15FDA3","user_header":"https://static001.geekbang.org/account/avatar/00/13/f3/69/7039d03f.jpg","comment_is_top":false,"comment_ctime":1631245588,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631245588","product_id":100028001,"comment_content":"提交订单前不是有一个获取资格的过程吗，有资格的用户数就那么多，所以口库存的时候流量其实不会很大。<br>比如只有1000库存，那就发2000个资格，只有2000个用户可以进入到提交订单的页面","like_count":0},{"had_liked":false,"id":301930,"user_name":"平民人之助","can_delete":false,"product_type":"c1","uid":2658705,"ip_address":"","ucode":"5CCEC0BAC08AEC","user_header":"https://static001.geekbang.org/account/avatar/00/28/91/91/428a27a3.jpg","comment_is_top":false,"comment_ctime":1625978690,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625978690","product_id":100028001,"comment_content":"我是航司的架构，这种方案航司那边是有退票扣费的操作，避免买特价票了不坐。只能从业务上去限制，就像你打开门做生意，做不做都得让别人进来吧，进来不做的走导致有人买不到，那就不是技术问题了。","like_count":0},{"had_liked":false,"id":301929,"user_name":"平民人之助","can_delete":false,"product_type":"c1","uid":2658705,"ip_address":"","ucode":"5CCEC0BAC08AEC","user_header":"https://static001.geekbang.org/account/avatar/00/28/91/91/428a27a3.jpg","comment_is_top":false,"comment_ctime":1625978289,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625978289","product_id":100028001,"comment_content":"为什么不直接上延时队列，进行定时批量数据提交","like_count":0},{"had_liked":false,"id":291798,"user_name":"null","can_delete":false,"product_type":"c1","uid":1024294,"ip_address":"","ucode":"F9039EFED6B55D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","comment_is_top":false,"comment_ctime":1620490815,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620490815","product_id":100028001,"comment_content":"原文：<br>当请求的 key 值放入到队列中，请求线程进入阻塞状态，当线程从队列中获取到请求线程的 key 值时，就会唤醒请求线程获取购买资格。<br><br>问题：<br>这个如何实现分布式环境下的唤醒？不可能使用 JVM 本地队列吧。当使用分布式队列时，请求线程在 A 机器，主动唤醒请求线程的线程在 B 机器，如何唤醒？<br><br>原文：<br>我们可以在写入订单时，同时在数据库写入一条异步消息状态，之后再返回第三方支付操作成功结果。在异步业务处理请求成功之后，更新该数据库表中的异步消息状态。<br><br>问题：<br>异步处理的业务，扣数据库库存，加积分，优惠券，短信，这四个业务处于不同项目，异步消息对这四个业务项目是跨 DB 的，谁去更新，如何更新异步消息的状态。<br><br>谢谢老师！","like_count":0},{"had_liked":false,"id":246572,"user_name":"GeekAmI","can_delete":false,"product_type":"c1","uid":1005030,"ip_address":"","ucode":"232C0B6DFB9F56","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/e6/87197b10.jpg","comment_is_top":false,"comment_ctime":1599408013,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599408013","product_id":100028001,"comment_content":"超哥  提交订单这步，代码顺序是:1、幂等校验、2、加分布式锁扣库存、3、save订单到MySQL  是这个顺序吧?<br><br>假如第2步成功，第3步失败了怎么办呢?","like_count":0},{"had_liked":false,"id":238221,"user_name":"沧海一声笑哈哈","can_delete":false,"product_type":"c1","uid":1345064,"ip_address":"","ucode":"4086BD04D68673","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ericCme76GR5tsxktQjbJgIurEvjqpsia58HqagibrhaGshiaMvvTMKqBh6XWQdwBoJTV2oB4enYjBsCw/132","comment_is_top":false,"comment_ctime":1596096907,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1596096907","product_id":100028001,"comment_content":"为什么要用分布式锁获取购买资格，用一个队列里面push 300个数字，每次pop一个数字，获取购买资格可以吗","like_count":0,"discussions":[{"author":{"id":1049208,"avatar":"https://static001.geekbang.org/account/avatar/00/10/02/78/23c56bce.jpg","nickname":"james","note":"","ucode":"5701899403917C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320366,"discussion_content":"你这个性能更好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604329690,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133227,"user_name":"张德","can_delete":false,"product_type":"c1","uid":1101929,"ip_address":"","ucode":"31FE63E8725EFC","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/69/5dbdc245.jpg","comment_is_top":false,"comment_ctime":1568452706,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568452706","product_id":100028001,"comment_content":"可以减少支付的预留时间  比如说就五分钟 剩下的告诉他还有机会 可以等等看","like_count":0},{"had_liked":false,"id":130626,"user_name":"钱彬彬","can_delete":false,"product_type":"c1","uid":1108171,"ip_address":"","ucode":"218C6814E73C16","user_header":"https://static001.geekbang.org/account/avatar/00/10/e8/cb/be4388db.jpg","comment_is_top":false,"comment_ctime":1567496634,"is_pvip":false,"replies":[{"id":"49146","content":"通过分布式锁可以保证不超卖，具体回顾之前41讲的分布式锁设计。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1567596784,"ip_address":"","comment_id":130626,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567496634","product_id":100028001,"comment_content":"老师，库存使用redis进行预热缓存，如何保证不超卖呢？老师说用分布式锁，这里可以说的详细点么？","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466037,"discussion_content":"通过分布式锁可以保证不超卖，具体回顾之前41讲的分布式锁设计。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567596784,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130025,"user_name":"晓杰","can_delete":false,"product_type":"c1","uid":1441546,"ip_address":"","ucode":"1174C88EEBF8A6","user_header":"https://static001.geekbang.org/account/avatar/00/15/ff/0a/12faa44e.jpg","comment_is_top":false,"comment_ctime":1567353306,"is_pvip":false,"replies":[{"id":"48609","content":"由于请求量比较大，我们可以使用其他脚本语言+redis实现一个中间代理来做排队等待，减少Java应用的内存压力。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1567424190,"ip_address":"","comment_id":130025,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1567353306","product_id":100028001,"comment_content":"请问老师，流量削峰使用等待队列的话，是使用jdk自带的队列吗","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465769,"discussion_content":"由于请求量比较大，我们可以使用其他脚本语言+redis实现一个中间代理来做排队等待，减少Java应用的内存压力。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567424190,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1006789,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5c/c5/1231d633.jpg","nickname":"梁中华","note":"","ucode":"52FE40242CBAD0","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7369,"discussion_content":"使用redis的队列功能吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567501769,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130015,"user_name":"晓杰","can_delete":false,"product_type":"c1","uid":1441546,"ip_address":"","ucode":"1174C88EEBF8A6","user_header":"https://static001.geekbang.org/account/avatar/00/15/ff/0a/12faa44e.jpg","comment_is_top":false,"comment_ctime":1567351812,"is_pvip":false,"replies":[{"id":"48599","content":"是的","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1567423347,"ip_address":"","comment_id":130015,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1567351812","product_id":100028001,"comment_content":"请问老师，在提交订单时，缓存中库存的查询和扣减是不是应该做成一步操作","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465764,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567423347,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1542987,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8b/4b/fa52d222.jpg","nickname":"行则将至","note":"","ucode":"DB972F2DF059C4","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":21821,"discussion_content":"一步操作，是不是就是原子操作？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569544804,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129878,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1119593,"ip_address":"","ucode":"94656FE4A6C378","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","comment_is_top":false,"comment_ctime":1567311044,"is_pvip":true,"replies":[{"id":"50248","content":"设置黑名单是一种常用的解决方案","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1567827943,"ip_address":"","comment_id":129878,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1567311044","product_id":100028001,"comment_content":"1，IP限流<br>2，缩短锁库存时间(抢购场景就是抢，应该不会太担心用户只是为了下订单而不付款的情况)<br>3，相同用户限制最大购买数量(数据放到缓存中用于抢购期间校验就行，不需要落DB)<br>4，期待老师的解决方法<br>","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465691,"discussion_content":"设置黑名单是一种常用的解决方案","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567827943,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1006789,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5c/c5/1231d633.jpg","nickname":"梁中华","note":"","ucode":"52FE40242CBAD0","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7372,"discussion_content":"牛逼的验证码也行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567502145,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129814,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1567266050,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567266050","product_id":100028001,"comment_content":"1.容忍超卖现象，实际售卖的库存得比网页库存大些，支付成功之后扣去真实库存，就算超卖严重，也可以后期补货或者选择退款结束订单；<br>2.尽量缩短用户支付等待时间，加快被锁库存的释放；<br>3.抢购活动支持同一用户限购次数。","like_count":0},{"had_liked":false,"id":129788,"user_name":"撒旦的堕落","can_delete":false,"product_type":"c1","uid":1116864,"ip_address":"","ucode":"15F6AA41EE556F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0a/c0/401c240e.jpg","comment_is_top":false,"comment_ctime":1567250855,"is_pvip":false,"replies":[{"id":"50259","content":"锁的是购买资格。如果是使用redis作为队列，我们需要增加一个中间代理来实现，中间代理是一个单点服务。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1567828232,"ip_address":"","comment_id":129788,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567250855","product_id":100028001,"comment_content":"老师能具体说说会员获取购买资格流程么 分布式锁 锁的是什么 用redission替换jedis后 增加的队列  在分布式环境下是如何唤醒等待线程的 ","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465650,"discussion_content":"锁的是购买资格。如果是使用redis作为队列，我们需要增加一个中间代理来实现，中间代理是一个单点服务。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567828232,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129770,"user_name":"满力","can_delete":false,"product_type":"c1","uid":1048149,"ip_address":"","ucode":"397F18F1473D0F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fe/55/424faed7.jpg","comment_is_top":false,"comment_ctime":1567245753,"is_pvip":true,"replies":[{"id":"48423","content":"是的，数据库中的库存可以通过支付回调来扣减","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1567298956,"ip_address":"","comment_id":129770,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1567245753","product_id":100028001,"comment_content":"老师，我觉得支付成功后在扣减数据库库存，在并发时会存在先下单的顾客可能支付回调比较慢，导致后下单的顾客支付成功买到商品了","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465637,"discussion_content":"是的，数据库中的库存可以通过支付回调来扣减","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567298956,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1542987,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8b/4b/fa52d222.jpg","nickname":"行则将至","note":"","ucode":"DB972F2DF059C4","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":21824,"discussion_content":"咱们的目的就是卖货。先下单后得到数据的情况，用户不知道。应该无所谓吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569544993,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}