{"id":137453,"title":"11 | 期中实战：动手写一个简易版的IM系统","content":"<p>你好，我是袁武林。</p><p>到上一讲为止，IM的相关课程已经进行过半，在前面的课程中，我们讨论的大部分内容都比较偏理论，你理解起来可能会比较抽象。为了让你对前面讲到的知识有更深入的理解，今天我们就来回顾、梳理近期学习的内容，一起尝试搭建一个简单的IM聊天系统。</p><p><strong>在开始之前呢，我先来说明一下IM课程的期中、期末实战的课程计划和设计思路。</strong></p><p>期中和期末实战是希望你以自己动手实现为主，提供的Demo主要作为参考，在设计层面上，并不能让你直接用于线上使用。</p><p>本次期中实战Demo的主要关注点是：消息的存储、未读数的设计，并以“短轮询”的方式来实现消息的实时触达。希望你能从用户的使用场景出发，来理解消息存储设计的思路，以及未读数独立两套存储的必要性。</p><p>另外，在期末实战中，我会从“短轮询”方式调整为WebSocket长连接的方式，并且加上ACK机制、应用层心跳等特性。希望你能在两次实战中，通过对比，真正理解长连接方式相比“短轮询”方式的优势，并且通过ACK机制和应用层心跳，真正理解为什么它们能够解决“数据丢失”和“连接可靠性”的问题。</p><p>OK，下面我们说回本次实战。</p><p>这个聊天系统要求并不复杂，只需要构建简单的Web界面（没有界面通过命令行能实现也行）。我在这里写了一个简易版的Demo，供你参考。</p><!-- [[[read_end]]] --><p>示例代码你可以在<a href=\"https://github.com/coldwalker/Sample\">GitHub</a>上下载。</p><h2>需求梳理</h2><p>这个简易聊天系统的大概要求有以下几点：</p><ul>\n<li>支持用户登录；</li>\n<li>双方支持简单的文本聊天；</li>\n<li>支持消息未读数（包括总未读和会话未读）；</li>\n<li>支持联系人页和未读数有新消息的自动更新；</li>\n<li>支持聊天页有新消息时自动更新。</li>\n</ul><h2>需求分析</h2><p>我们先来分析一下整体需求。</p><p><strong>首先，要支持用户登录，先要有“用户”</strong>。对应的数据底层需要有一个用户表，用户表的设计可以比较简单，能够支持唯一的UID和密码用于登录即可。当然，如果有用户头像信息，聊天时的体验会更好，所以这里我们也加一下。简单的库表设计可以是这样的：</p><pre><code>CREATE TABLE IM_USER (\nuid INT PRIMARY KEY,\nusername VARCHAR(500) NOT NULL,\npassword VARCHAR(500) NOT NULL,\nemail VARCHAR(250) DEFAULT NULL,\navatar VARCHAR(500) NOT NULL\n);\n</code></pre><p>对应的实体类User字段和库表一致，这里就不罗列了，我们需要设计用户通过邮箱和密码来登录。因为课程主要是涉及IM相关的知识，所以这里对用户信息的维护可以不做要求，启动时内置几个默认用户即可。</p><p><strong>有了用户后，接下来就是互动了，这一期我们只需要关注简单的文本聊天即可</strong>。在设计中，我们需要对具体的聊天消息进行存储，便于在Web端使用，因此可以简单地按照“<a href=\"https://time.geekbang.org/column/article/127978\">02 | 消息收发架构：为你的App，加上实时通信功能</a>”中讲到的消息存储来实现此项功能。</p><p>消息的存储大概分为消息内容表、消息索引表、联系人列表，这里我用最基础的字段来给你演示一下。单库单表的设计如下：</p><pre><code>消息内容表：\n\nCREATE TABLE IM_MSG_CONTENT (\nmid INT AUTO_INCREMENT  PRIMARY KEY,\ncontent VARCHAR(1000) NOT NULL,\nsender_id INT NOT NULL,\nrecipient_id INT NOT NULL,\nmsg_type INT NOT NULL,\ncreate_time TIMESTAMP NOT NUll\n);\n</code></pre><pre><code>消息索引表：\n\nCREATE TABLE IM_MSG_RELATION (\nowner_uid INT NOT NULL,\nother_uid INT NOT NULL,\nmid INT NOT NULL,\ntype INT NOT NULL,\ncreate_time TIMESTAMP NOT NULL,\nPRIMARY KEY (`owner_uid`,`mid`)\n);\nCREATE INDEX `idx_owneruid_otheruid_msgid` ON  IM_MSG_RELATION(`owner_uid`,`other_uid`,`mid`);\n</code></pre><pre><code>联系人列表：\n\nCREATE TABLE IM_MSG_CONTACT (\nowner_uid INT NOT NULL,\nother_uid INT NOT NULL,\nmid INT NOT NULL,\ntype INT NOT NULL,\ncreate_time TIMESTAMP NOT NULL,\nPRIMARY KEY (`owner_uid`,`other_uid`)\n);\n</code></pre><ul>\n<li><strong>消息内容表</strong>：由于只是单库单表，消息ID采用自增主键，主要包括消息ID和消息内容。</li>\n<li><strong>消息索引表</strong>：使用了索引“归属人”和消息ID作为联合主键，可以避免重复写入，并增加了“归属人”和“关联人”及消息ID的索引，用于查询加速。</li>\n<li><strong>联系人列表</strong>：字段和索引表一致，不同点在于采用“归属人”和“关联人”作为主键，可以避免同一个会话有超过一条的联系人记录。</li>\n</ul><p>消息相关实体层类的数据结构和库表的字段基本一致，这里不再列出，需要注意的是：为了演示的简单方便，这里并没有采用分库分表的设计，所以分库的Sharding规则你需要结合用户消息收发和查看的场景，多加考虑一下库表的设计。</p><p><strong>OK，有了用户和消息存储功能，现在来看如何支持消息未读数。</strong></p><p>在“<a href=\"https://time.geekbang.org/column/article/132598\">07 | 分布式锁和原子性：你看到的未读消息提醒是真的吗？</a>”一讲中，我讲到了消息未读数在聊天场景中的重要性，这里我们也把未读数相关的功能加上来。</p><p>未读数分为总未读和会话未读，总未读虽然是会话未读之和，但由于使用频率很高，会话很多时候聚合起来性能比较差，所以冗余了总未读来单独存储。比如，你可以采用Redis来进行存储，总未读可以使用简单的K-V（Key-Value）结构存储，会话未读使用Hash结构存储。大概的存储格式如下：</p><pre><code>总未读：\nowneruid_T, 2\n\n会话未读：\nowneruid_C, otheruid1, 1\nowneruid_C, otheruid2, 1\n</code></pre><p><strong>最后，我们一起来看看如何支持消息和未读自动更新。</strong></p><p>在“<a href=\"https://time.geekbang.org/column/article/128942\">03 | 轮询与长连接：如何解决消息的实时到达问题？</a>”一讲中，我讲到了保证消息实时性的三种常见方式：短轮询、长轮询、长连接。对于消息和未读的自动更新的设计，你可以采用其中任意一种，我实现的简版代码里就是采用的“短轮询”来在联系人页面和聊天页面轮询未读和新消息的。实现上比较简单，Web端核心代码和服务端核心代码如下。</p><pre><code>Web端核心代码：\n\nnewMsgLoop = setInterval(queryNewcomingMsg, 3000);\n$.get(\n    '/queryMsgSinceMid',\n    {\n        ownerUid: ownerUid,\n        otherUid: otherUid,\n        lastMid: lastMid\n    },\n    function (msgsJson) {\n        var jsonarray = $.parseJSON(msgsJson);\n        var ul_pane = $('.chat-thread');\n        var owner_uid_avatar, other_uid_avatar;\n        $.each(jsonarray, function (i, msg) {\n            var relation_type = msg.type;\n            owner_uid_avatar = msg.ownerUidAvatar;\n            other_uid_avatar = msg.otherUidAvatar;\n\n\n            var ul_pane = $('.chat-thread');\n            var li_current = $('&lt;li&gt;&lt;/li&gt;');//创建一个li\n            li_current.text(msg.content);\n            ul_pane.append(li_current);\n        });\n    });\n)；\n</code></pre><pre><code>服务端核心代码：\n\nList&lt;MessageVO&gt; msgList = Lists.newArrayList();\nList&lt;MessageRelation&gt; relationList =    relationRepository.findAllByOwnerUidAndOtherUidAndMidIsGreaterThanOrderByMidAsc(ownerUid, otherUid, fromMid);\n\n/** 先拼接消息索引和内容 */\nUser self = userRepository.findOne(ownerUid);\nUser other = userRepository.findOne(otherUid);\nrelationList.stream().forEach(relation -&gt; {\n    Long mid = relation.getMid();\n    MessageContent contentVO = contentRepository.findOne(mid);\n    if (null != contentVO) {\n        String content = contentVO.getContent();\n        MessageVO messageVO = new MessageVO(mid, content,   relation.getOwnerUid(), relation.getType(), relation.getOtherUid(), relation.getCreateTime(), self.getAvatar(), other.getAvatar());\n    msgList.add(messageVO);\n    }\n});\n\n/** 再变更未读 */\nObject convUnreadObj = redisTemplate.opsForHash().get(ownerUid + Constants.CONVERSION_UNREAD_SUFFIX, otherUid);\nif (null != convUnreadObj) {\n    long convUnread = Long.parseLong((String) convUnreadObj);\n    redisTemplate.opsForHash().delete(ownerUid +    Constants.CONVERSION_UNREAD_SUFFIX, otherUid);\n    long afterCleanUnread =     redisTemplate.opsForValue().increment(ownerUid +    Constants.TOTAL_UNREAD_SUFFIX, -convUnread);\n\n/** 修正总未读 */\nif (afterCleanUnread &lt;= 0) {\n    redisTemplate.delete(ownerUid + Constants.TOTAL_UNREAD_SUFFIX);\n}\nreturn msgList;\n</code></pre><p><strong>这里需要注意两个地方：</strong></p><ul>\n<li>其一，由于业务上使用的“消息对象”和存储层并不是一一对应关系，所以一般遇到这种情况，你可以为展现层在实体层基础上创建一些VO对象来承接展示需要的数据。比如，我在这里创建了一个用于消息展现的VO对象MessageVO。</li>\n<li>其二，在未读数的实现上，由于只是演示，这里并没有做到两个未读的原子变更，所以可能存在两个未读不一致的情况，因此上方代码最后部分我简单对总未读做了一个为负后的修正。</li>\n</ul><h2>其他实现上的注意点</h2><p>前面我们从需求梳理出发，把这个简易聊天系统核心部分的设计思路和核心代码讲了一下，也强调了一下这套代码实现中容易出现问题的地方。除此之外，我希望在代码实现中，你还能考虑以下这些问题，虽然这些不是IM系统实现中的核心问题，但对于代码的整洁和设计的习惯培养也是作为一个程序员非常重要的要求。</p><h3>代码分层</h3><p>首先是代码分层方面，我们在代码实现上，应该尽量让表现层、业务层和持久化层能分离清楚，做到每一层的职责清晰明确，也隔离了每一层的实现细节，便于多人协作开发。</p><p>表现层控制数据输入和输出的校验和格式，不涉及业务处理；业务层不涉及展现相关的代码，只负责业务逻辑的组合；持久化层负责和底层资源的交互，只负责数据的写入、变更和获取，不涉及具体的业务逻辑。</p><h3>依赖资源</h3><p>另外，对于代码中使用到的Web服务器、DB资源、Redis资源等，我们尽量通过Embedding的方式来提供，这样便于在IDE中执行和代码的迁移使用。</p><h2>小结</h2><p>这一节课主要是安排一次实战测试，让你来实现一个简易的聊天系统，涉及的IM相关知识包括：消息存储的设计、消息未读的设计、消息实时性的具体实现，等等。</p><p>在实现过程中，希望你能做到合理的代码分层规划，通过Embedding方式提升代码对IDE的友好性及代码的可迁移性。相信通过这一次理论与实践相结合的动手实战，能够帮助你进一步加深对IM系统核心技术的理解。</p><p>千里之行，积于跬步。通过脚踏实地的代码实现，将理论知识变成真正可用的系统，你的成就感也是会倍增的。</p><p>期中实战的演示代码并没有完全覆盖之前课程讲到的内容，所以如果你有兴趣，也非常欢迎你在代码实现时加入更多的特性，比如长连接、心跳、ACK机制、未读原子化变更等。如果你对今天的内容有什么思考与解读，欢迎给我留言，我们一起讨论。感谢你的收听，我们下期再见。</p><p></p>","comments":[{"had_liked":false,"id":141936,"user_name":"王蒙","can_delete":false,"product_type":"c1","uid":1642579,"ip_address":"","ucode":"AF623B848877AD","user_header":"https://static001.geekbang.org/account/avatar/00/19/10/53/2230bf9d.jpg","comment_is_top":false,"comment_ctime":1571272075,"is_pvip":false,"replies":[{"id":"54994","content":"就是嵌入到jvm里的一些中间件和db，web容器这些，随着jvm启动也能跟着一起run起来，用起来比较方便。","user_name":"作者回复","user_name_real":"coldwalker","uid":"1297490","ctime":1571403701,"ip_address":"","comment_id":141936,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27341075851","product_id":100034901,"comment_content":"Embedding方式是什么意思","like_count":6,"discussions":[{"author":{"id":1297490,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epK1zyWib7IKYCoRSxIa6dDjrcyBqObGfj1lDVia1pOrSVxyltKI7RfGekdXPQNObwaBQg3gwvarlQA/132","nickname":"coldwalker","note":"","ucode":"AF9AF257A745C9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470935,"discussion_content":"就是嵌入到jvm里的一些中间件和db，web容器这些，随着jvm启动也能跟着一起run起来，用起来比较方便。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571403701,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144231,"user_name":"Ricky Fung","can_delete":false,"product_type":"c1","uid":1051363,"ip_address":"","ucode":"7AEA1F8EC4A088","user_header":"https://static001.geekbang.org/account/avatar/00/10/0a/e3/9637bfdb.jpg","comment_is_top":false,"comment_ctime":1571881107,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14456782995","product_id":100034901,"comment_content":"建议 期中 和 期末考试作业 代码可以分两个分支，这样大家看起来更直观。","like_count":4},{"had_liked":false,"id":134823,"user_name":"燃着的半支烟","can_delete":false,"product_type":"c1","uid":1230837,"ip_address":"","ucode":"23C7B588F400A7","user_header":"https://static001.geekbang.org/account/avatar/00/12/c7/f5/4e9a82e9.jpg","comment_is_top":false,"comment_ctime":1568939829,"is_pvip":false,"replies":[{"id":"51739","content":"期中实战只是个简易版demo哈，期末的实战会基于目前轮询的方式进行长连接改造，再加上ack和心跳等功能，这样也让大家能对“消息推送实时性”的实现方案有一个比对。<br>另外，实战的目的是让大家自己尝试结合课程前面的内容来练手加深对知识的理解，所以提供的demo并不具备线上可用性，只是一个简单的参考。","user_name":"作者回复","user_name_real":"coldwalker","uid":"1297490","ctime":1568953596,"ip_address":"","comment_id":134823,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14453841717","product_id":100034901,"comment_content":"只是基于redis吗？没用到netty吗？","like_count":3,"discussions":[{"author":{"id":1297490,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epK1zyWib7IKYCoRSxIa6dDjrcyBqObGfj1lDVia1pOrSVxyltKI7RfGekdXPQNObwaBQg3gwvarlQA/132","nickname":"coldwalker","note":"","ucode":"AF9AF257A745C9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467910,"discussion_content":"期中实战只是个简易版demo哈，期末的实战会基于目前轮询的方式进行长连接改造，再加上ack和心跳等功能，这样也让大家能对“消息推送实时性”的实现方案有一个比对。\n另外，实战的目的是让大家自己尝试结合课程前面的内容来练手加深对知识的理解，所以提供的demo并不具备线上可用性，只是一个简单的参考。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568953596,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":186904,"user_name":"kamida","can_delete":false,"product_type":"c1","uid":1904146,"ip_address":"","ucode":"16D7CA59870AC0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/jXbwicoDwia7ooDfwBTRyvNYQkefnVwF1CMicMS8FqKfuFAdvVZo2pqc4ic0R9kSdHTIxaE6YyqxwX8BdNGv5PqSIw/132","comment_is_top":false,"comment_ctime":1583956783,"is_pvip":false,"replies":[{"id":"72297","content":"这个查询需求是存在的，但由于一般我们都是分页查询，所以针对某一页的消息内容进行multi get的并发查询实际上性能上也是可以接受的。","user_name":"作者回复","user_name_real":"coldwalker","uid":"1297490","ctime":1584086257,"ip_address":"","comment_id":186904,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5878924079","product_id":100034901,"comment_content":"老师 我想问一下 分库分表的问题 如果MSG_CONTENT的partition是mid 而MSG_RELATION的partition key 是onwer id 那么如果我们要查询两个用户之间所有的msg及其内容的话 我们需要去每一个DB shard去查找msg_content table 这样会不会很慢 或者这个查询需求是不必要的？","like_count":1,"discussions":[{"author":{"id":1297490,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epK1zyWib7IKYCoRSxIa6dDjrcyBqObGfj1lDVia1pOrSVxyltKI7RfGekdXPQNObwaBQg3gwvarlQA/132","nickname":"coldwalker","note":"","ucode":"AF9AF257A745C9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486911,"discussion_content":"这个查询需求是存在的，但由于一般我们都是分页查询，所以针对某一页的消息内容进行multi get的并发查询实际上性能上也是可以接受的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584086257,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135440,"user_name":"飞翔","can_delete":false,"product_type":"c1","uid":1068571,"ip_address":"","ucode":"65AF6AF292DAD6","user_header":"https://static001.geekbang.org/account/avatar/00/10/4e/1b/f4b786b9.jpg","comment_is_top":false,"comment_ctime":1569160603,"is_pvip":true,"replies":[{"id":"52015","content":"分页的时候会用到。比如：<br>select msgid from IM_MSG_RELATION where owner_uid=? and other_uid=? and  mid &lt;= ? order by mid desc limit ?,?","user_name":"作者回复","user_name_real":"coldwalker","uid":"1297490","ctime":1569237338,"ip_address":"","comment_id":135440,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5864127899","product_id":100034901,"comment_content":"<br>CREATE INDEX `idx_owneruid_otheruid_msgid` ON  IM_MSG_RELATION(`owner_uid`,`other_uid`,`mid`);<br>老师 消息索引表中 为什么要创作(`owner_uid`,`other_uid`,`mid`); 这三个的联合索引  呀","like_count":1,"discussions":[{"author":{"id":1297490,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epK1zyWib7IKYCoRSxIa6dDjrcyBqObGfj1lDVia1pOrSVxyltKI7RfGekdXPQNObwaBQg3gwvarlQA/132","nickname":"coldwalker","note":"","ucode":"AF9AF257A745C9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468195,"discussion_content":"分页的时候会用到。比如：\nselect msgid from IM_MSG_RELATION where owner_uid=? and other_uid=? and  mid &amp;lt;= ? order by mid desc limit ?,?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569237338,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135435,"user_name":"飞翔","can_delete":false,"product_type":"c1","uid":1068571,"ip_address":"","ucode":"65AF6AF292DAD6","user_header":"https://static001.geekbang.org/account/avatar/00/10/4e/1b/f4b786b9.jpg","comment_is_top":false,"comment_ctime":1569159947,"is_pvip":true,"replies":[{"id":"52013","content":"嗯，是冗余了一下，主要是方便离线统计和后台使用，业务上可以不需要。","user_name":"作者回复","user_name_real":"coldwalker","uid":"1297490","ctime":1569236930,"ip_address":"","comment_id":135435,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5864127243","product_id":100034901,"comment_content":"消息内容表：<br><br>CREATE TABLE IM_MSG_CONTENT (<br>mid INT AUTO_INCREMENT  PRIMARY KEY,<br>content VARCHAR(1000) NOT NULL,<br>sender_id INT NOT NULL,<br>recipient_id INT NOT NULL,<br>msg_type INT NOT NULL,<br>create_time TIMESTAMP NOT NUll<br>);<br><br><br>老师 消息内容表中的sender_id INT NOT NULL,<br>recipient_id INT NOT NULL, 这两个字段是不是有些多余？","like_count":1,"discussions":[{"author":{"id":1297490,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epK1zyWib7IKYCoRSxIa6dDjrcyBqObGfj1lDVia1pOrSVxyltKI7RfGekdXPQNObwaBQg3gwvarlQA/132","nickname":"coldwalker","note":"","ucode":"AF9AF257A745C9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468192,"discussion_content":"嗯，是冗余了一下，主要是方便离线统计和后台使用，业务上可以不需要。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569236930,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135158,"user_name":"山头","can_delete":false,"product_type":"c1","uid":1610142,"ip_address":"","ucode":"9CD45A7966F37E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/1R7lHGBvwPTVfb3BAQrPX3AhsYWnXyicbUJUYDgWagWxMGTnsNFvKibzeJ8v7fF2vJLQGf2EY9dV07rnn5Mhv9Uw/132","comment_is_top":false,"comment_ctime":1569047413,"is_pvip":false,"replies":[{"id":"52011","content":"会存两条，咱们课程2里面有讲过的哦","user_name":"作者回复","user_name_real":"coldwalker","uid":"1297490","ctime":1569236795,"ip_address":"","comment_id":135158,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5864014709","product_id":100034901,"comment_content":"消息索引表：<br><br>CREATE TABLE IM_MSG_RELATION (<br>owner_uid INT NOT NULL,<br>other_uid INT NOT NULL,<br>mid INT NOT NULL,<br>type INT NOT NULL,<br>create_time TIMESTAMP NOT NULL,<br>PRIMARY KEY (`owner_uid`,`mid`)<br>);<br>CREATE INDEX `idx_owneruid_otheruid_msgid` ON  IM_MSG_RELATION(`owner_uid`,`other_uid`,`mid`);<br>ownerid otherid是什么意思？张三给李四发一条消息，在这个表里存几条数据呢","like_count":1,"discussions":[{"author":{"id":1297490,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epK1zyWib7IKYCoRSxIa6dDjrcyBqObGfj1lDVia1pOrSVxyltKI7RfGekdXPQNObwaBQg3gwvarlQA/132","nickname":"coldwalker","note":"","ucode":"AF9AF257A745C9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468073,"discussion_content":"会存两条，咱们课程2里面有讲过的哦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569236795,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316463,"user_name":"ahack","can_delete":false,"product_type":"c1","uid":1684003,"ip_address":"","ucode":"6852925FD86234","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epDpMJ1onECmHCzwCV8ULMqnocLC2ZRXtp0LqktWUaAIvOwrTQeavZnaFMMeZAKOAxPhsIZhOuHTw/132","comment_is_top":false,"comment_ctime":1634315053,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1634315053","product_id":100034901,"comment_content":"新手，redis这个表看不懂要怎么建，有没有大佬jies一下呢","like_count":0},{"had_liked":false,"id":259600,"user_name":"DeenJun","can_delete":false,"product_type":"c1","uid":1026010,"ip_address":"","ucode":"6D40BA39A33C9D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a7/da/f057374c.jpg","comment_is_top":false,"comment_ctime":1604765141,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1604765141","product_id":100034901,"comment_content":"请教个问题：之前讲的IM服务划分为业务逻辑和连接层两部分，连接层负责维护连接和编解码消息。并且看之前课程讲，一般各厂都设计了一套私有协议而没有用MQTT，但是这部分讲得比较略。我的问题是，长连接的两端发送请求都是oneway的吗？有req-resp模型吗？比如说客户端通过长连接发送了一个请求A，这时候服务端又推送了一条消息，然后再发送请求A对应的response。客户端就必须要能够区分哪个包是对应哪个请求的resp还是仅仅是服务端主动推送的。服务端也同理。一般是怎么做呢？长连接的协议需要设计成 oneway + req-resp都支持这种模式，还是说就仅仅是oneway这种模式，推了就完事儿，需要resp的请求走另外的服务不走长连接？如果在协议中支持，有推荐的开源协议吗？一般长连接的私有协议需要考虑连接的多路复用吗？问题有点多，期待老师的回答…","like_count":0,"discussions":[{"author":{"id":1507215,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJOpltlRkCJVWiba5nG0KHticdlp2E95bwepumSquAR2eTibFotGcRkWj5amllmgq4ia7bicEEML9EF5hA/132","nickname":"running+","note":"","ucode":"CAD81A0AC89ABD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368656,"discussion_content":"我觉得长连接这类的最好是只用来消息的收发，像restcall的这类api请求是完全可以用短轮询的方式处理，你说的req-response和推送的前后顺序他们有对应reqid这个应该是能区分出来的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618794225,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151426,"user_name":"Geek_908e99","can_delete":false,"product_type":"c1","uid":1724843,"ip_address":"","ucode":"5E7C4D317F0C73","user_header":"","comment_is_top":false,"comment_ctime":1573717605,"is_pvip":false,"replies":[{"id":"58813","content":"嗯，这个demo没有用lua来保障原子性，所以是会存在并发更新的一致性问题，有兴趣的话可以尝试来优化改造试试哈，核心lua代码在文章中有。","user_name":"作者回复","user_name_real":"coldwalker","uid":"1297490","ctime":1574149372,"ip_address":"","comment_id":151426,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1573717605","product_id":100034901,"comment_content":"老师我看更新未读数的逻辑并没有用到redis事务，我看到的就是下面两行，这个实现不能保证原子性吧：<br><br>&#47;**更未读更新 *&#47;<br>redisTemplate.opsForValue().increment(recipientUid + &quot;_T&quot;, 1); &#47;&#47;加总未读<br>redisTemplate.opsForHash().increment(recipientUid + &quot;_C&quot;, senderUid, 1); &#47;&#47;加会话未读","like_count":0,"discussions":[{"author":{"id":1297490,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epK1zyWib7IKYCoRSxIa6dDjrcyBqObGfj1lDVia1pOrSVxyltKI7RfGekdXPQNObwaBQg3gwvarlQA/132","nickname":"coldwalker","note":"","ucode":"AF9AF257A745C9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474470,"discussion_content":"嗯，这个demo没有用lua来保障原子性，所以是会存在并发更新的一致性问题，有兴趣的话可以尝试来优化改造试试哈，核心lua代码在文章中有。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574149372,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142787,"user_name":"五点半先生","can_delete":false,"product_type":"c1","uid":1408320,"ip_address":"","ucode":"CE820DFE00D0AB","user_header":"https://static001.geekbang.org/account/avatar/00/15/7d/40/2a0ac40f.jpg","comment_is_top":false,"comment_ctime":1571529010,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571529010","product_id":100034901,"comment_content":"搬运，https:&#47;&#47;github.com&#47;coldwalker&#47;Sample","like_count":0},{"had_liked":false,"id":142489,"user_name":"Geek_defa2f","can_delete":false,"product_type":"c1","uid":1642714,"ip_address":"","ucode":"FDE59E4CF07725","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJY8V36aWLibUQiaoNIGibDGFQickZficggiaXPO0ejPNnGvYPQ3iciarMn0BnOCRG2kbOON98KwiafWQsNxpw/132","comment_is_top":false,"comment_ctime":1571379176,"is_pvip":false,"replies":[{"id":"55011","content":"期末的代码基本没有覆盖期中的哈，都是独立的功能和实现，页面也都是独立的。","user_name":"作者回复","user_name_real":"coldwalker","uid":"1297490","ctime":1571405450,"ip_address":"","comment_id":142489,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571379176","product_id":100034901,"comment_content":"能不能期中期末实战的代码分开部署在github上，现在才学到，发现期中的代码被期末的代码覆盖了。。。","like_count":0,"discussions":[{"author":{"id":1297490,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epK1zyWib7IKYCoRSxIa6dDjrcyBqObGfj1lDVia1pOrSVxyltKI7RfGekdXPQNObwaBQg3gwvarlQA/132","nickname":"coldwalker","note":"","ucode":"AF9AF257A745C9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471146,"discussion_content":"期末的代码基本没有覆盖期中的哈，都是独立的功能和实现，页面也都是独立的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571405450,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":138474,"user_name":"yic","can_delete":false,"product_type":"c1","uid":1201577,"ip_address":"","ucode":"C8DC471B7C28B8","user_header":"https://static001.geekbang.org/account/avatar/00/12/55/a9/5282a560.jpg","comment_is_top":false,"comment_ctime":1570264412,"is_pvip":false,"replies":[{"id":"53732","content":"群发消息qps很高的话就不要用mysql这种关系型数据库啦，另外也不需要发件人维度的消息存储，可以考虑采用hbase这类nosql数据库来存储索引。","user_name":"作者回复","user_name_real":"coldwalker","uid":"1297490","ctime":1570625582,"ip_address":"","comment_id":138474,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1570264412","product_id":100034901,"comment_content":"消息索引表：<br><br>CREATE TABLE IM_MSG_RELATION (<br>owner_uid INT NOT NULL,<br>other_uid INT NOT NULL,<br>mid INT NOT NULL,<br>type INT NOT NULL,<br>create_time TIMESTAMP NOT NULL,<br>PRIMARY KEY (`owner_uid`,`mid`)<br>);<br>CREATE INDEX `idx_owneruid_otheruid_msgid` ON IM_MSG_RELATION(`owner_uid`,`other_uid`,`mid`);<br>老师，消息索引表这么创建，请教一下群发（500人群）消息，是不是要插入500条记录？ 如果是插库的话，性能能保证吗？","like_count":0,"discussions":[{"author":{"id":1297490,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epK1zyWib7IKYCoRSxIa6dDjrcyBqObGfj1lDVia1pOrSVxyltKI7RfGekdXPQNObwaBQg3gwvarlQA/132","nickname":"coldwalker","note":"","ucode":"AF9AF257A745C9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469532,"discussion_content":"群发消息qps很高的话就不要用mysql这种关系型数据库啦，另外也不需要发件人维度的消息存储，可以考虑采用hbase这类nosql数据库来存储索引。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570625582,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1011156,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/L8Hia5sfiafASmBa3eTLMH8C25gMCHLTXddMkIiaCb0ky48FowibUrLQ9WSeTxSIS3prFsSjiaarwbRp1kTXDbug9eQ/132","nickname":"黄海","note":"","ucode":"AC45303035622E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":27162,"discussion_content":"请问老师, 针对群发几百人消息的场景, 保存消息索引, 除了 hbase , 还有其他 nosql 数据库推荐吗?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570632561,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":136085,"user_name":"王棕生","can_delete":false,"product_type":"c1","uid":1337944,"ip_address":"","ucode":"901BD0447A871E","user_header":"https://static001.geekbang.org/account/avatar/00/14/6a/58/f2c6d65b.jpg","comment_is_top":false,"comment_ctime":1569341360,"is_pvip":false,"replies":[{"id":"52230","content":"😺 谢谢","user_name":"作者回复","user_name_real":"coldwalker","uid":"1297490","ctime":1569411762,"ip_address":"","comment_id":136085,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1569341360","product_id":100034901,"comment_content":"感谢老师的总结和源码分享！","like_count":0,"discussions":[{"author":{"id":1297490,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epK1zyWib7IKYCoRSxIa6dDjrcyBqObGfj1lDVia1pOrSVxyltKI7RfGekdXPQNObwaBQg3gwvarlQA/132","nickname":"coldwalker","note":"","ucode":"AF9AF257A745C9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468451,"discussion_content":"😺 谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569411762,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":136082,"user_name":"YidWang","can_delete":false,"product_type":"c1","uid":1619756,"ip_address":"","ucode":"C91A9117EC3540","user_header":"https://static001.geekbang.org/account/avatar/00/18/b7/2c/e1682683.jpg","comment_is_top":false,"comment_ctime":1569340626,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569340626","product_id":100034901,"comment_content":"消息 没有重复 设计","like_count":0},{"had_liked":false,"id":135932,"user_name":"Geek_发现","can_delete":false,"product_type":"c1","uid":1643741,"ip_address":"","ucode":"39C23F2D574A09","user_header":"https://static001.geekbang.org/account/avatar/00/19/14/dd/17892edc.jpg","comment_is_top":false,"comment_ctime":1569306845,"is_pvip":false,"replies":[{"id":"52223","content":"还有其他报错吗？比如“This redis server instance is already running...”或者“Failed to start Redis instance”。可以断点跟进到start方法里去看看。","user_name":"作者回复","user_name_real":"coldwalker","uid":"1297490","ctime":1569410942,"ip_address":"","comment_id":135932,"utype":1}],"discussion_count":6,"race_medal":0,"score":"1569306845","product_id":100034901,"comment_content":"老师你好，我启动项目报错org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#39;embededRedis&#39;: Invocation of init method failed; nested exception is java.lang.RuntimeException: Can&#39;t start redis server. Check logs for details.<br>我redis是启动了的，端口号也是6379，怎么回事呢？","like_count":0,"discussions":[{"author":{"id":1297490,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epK1zyWib7IKYCoRSxIa6dDjrcyBqObGfj1lDVia1pOrSVxyltKI7RfGekdXPQNObwaBQg3gwvarlQA/132","nickname":"coldwalker","note":"","ucode":"AF9AF257A745C9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468389,"discussion_content":"还有其他报错吗？比如“This redis server instance is already running...”或者“Failed to start Redis instance”。可以断点跟进到start方法里去看看。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569410942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1320902,"avatar":"https://static001.geekbang.org/account/avatar/00/14/27/c6/8b411cd6.jpg","nickname":"付 sir","note":"","ucode":"2037A063183003","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545040,"discussion_content":" redisServer = RedisServer.builder().setting(&#34;maxheap 500m&#34;).port(6379).setting(&#34;bind localhost&#34;).build();","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1641812321,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1647924,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/INc61dATFS9XQ2Hoy1bdNjZZZ18mulDJibF8kib2ZNpX5gdxYjNpWZYePHl6PHea7bTeMkicNBryCkT5ghic4yoSMw/132","nickname":"when","note":"","ucode":"1416E57E1C1531","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":21409,"discussion_content":"RedisService创建时指定maxheap可以解决问题。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1569479895,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1501138,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/d2/00470175.jpg","nickname":"zyz","note":"","ucode":"9E6B063F856F4D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1647924,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/INc61dATFS9XQ2Hoy1bdNjZZZ18mulDJibF8kib2ZNpX5gdxYjNpWZYePHl6PHea7bTeMkicNBryCkT5ghic4yoSMw/132","nickname":"when","note":"","ucode":"1416E57E1C1531","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":42073,"discussion_content":"指定多大咧，我指定过50，100，200，500，1000m都不行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572580727,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":21409,"ip_address":""},"score":42073,"extra":""}]},{"author":{"id":1272628,"avatar":"https://static001.geekbang.org/account/avatar/00/13/6b/34/0590865d.jpg","nickname":"threedr3am","note":"","ucode":"9F464BBDCC116D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":30853,"discussion_content":"换个端口，项目用的内置redis，你外部redis和这个冲突了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570865356,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1643741,"avatar":"https://static001.geekbang.org/account/avatar/00/19/14/dd/17892edc.jpg","nickname":"Geek_发现","note":"","ucode":"39C23F2D574A09","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":23393,"discussion_content":"感谢你解决了我的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569811600,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135567,"user_name":"给我点阳光就灿烂","can_delete":false,"product_type":"c1","uid":1462209,"ip_address":"","ucode":"F3B0439BE0D062","user_header":"https://static001.geekbang.org/account/avatar/00/16/4f/c1/7f596aba.jpg","comment_is_top":false,"comment_ctime":1569215025,"is_pvip":true,"replies":[{"id":"52021","content":"存消息队列的问题在于你需不需要按会话维度啥的来进行查询，分页等等。如果不需要，可以只根据uid维度来暂存消息和信令。","user_name":"作者回复","user_name_real":"coldwalker","uid":"1297490","ctime":1569238420,"ip_address":"","comment_id":135567,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1569215025","product_id":100034901,"comment_content":"即使通讯的消息可不可以不存在数据库中而已消息队列的形式代替呢","like_count":0,"discussions":[{"author":{"id":1297490,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epK1zyWib7IKYCoRSxIa6dDjrcyBqObGfj1lDVia1pOrSVxyltKI7RfGekdXPQNObwaBQg3gwvarlQA/132","nickname":"coldwalker","note":"","ucode":"AF9AF257A745C9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468250,"discussion_content":"存消息队列的问题在于你需不需要按会话维度啥的来进行查询，分页等等。如果不需要，可以只根据uid维度来暂存消息和信令。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569238420,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135541,"user_name":"leslie","can_delete":false,"product_type":"c1","uid":1324255,"ip_address":"","ucode":"798E7C1CC98CC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg","comment_is_top":false,"comment_ctime":1569207546,"is_pvip":false,"replies":[{"id":"52020","content":"建议还是动手写一写，一码胜千言~","user_name":"作者回复","user_name_real":"coldwalker","uid":"1297490","ctime":1569238311,"ip_address":"","comment_id":135541,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1569207546","product_id":100034901,"comment_content":"     期中考试 、、、还是等期末考试的时候一起做吧，看的懂写不来，出去的都是伪代码：忙起来就发现写这个东西自己的Coding太差了，被Coding能力拖后腿了：谁让这是DBA和OPS的通病呢、、、","like_count":0,"discussions":[{"author":{"id":1297490,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epK1zyWib7IKYCoRSxIa6dDjrcyBqObGfj1lDVia1pOrSVxyltKI7RfGekdXPQNObwaBQg3gwvarlQA/132","nickname":"coldwalker","note":"","ucode":"AF9AF257A745C9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468240,"discussion_content":"建议还是动手写一写，一码胜千言~","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1569238311,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135469,"user_name":"飞翔","can_delete":false,"product_type":"c1","uid":1068571,"ip_address":"","ucode":"65AF6AF292DAD6","user_header":"https://static001.geekbang.org/account/avatar/00/10/4e/1b/f4b786b9.jpg","comment_is_top":false,"comment_ctime":1569181686,"is_pvip":true,"replies":[{"id":"52016","content":"是的，redis的事务只保证这些命令原子执行，执行过程中就算有命令失败，队列中的其他命令也会被执行，所以调用方需要根据返回结果来进行二次处理。","user_name":"作者回复","user_name_real":"coldwalker","uid":"1297490","ctime":1569237813,"ip_address":"","comment_id":135469,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1569181686","product_id":100034901,"comment_content":"老师  有一个问题<br>对于redis 事务<br>        redisTemplate.multi();<br>        redisTemplate.opsForValue().increment(recipientUid + &quot;_T&quot;, 1); &#47;&#47;加总未读<br>        redisTemplate.opsForHash().increment(recipientUid + &quot;_C&quot;, senderUid, 1); &#47;&#47;加会话未读<br>        redisTemplate.exec();<br><br>假设第一个加总未读失败， 事务并不会停止，而是继续进行，第二个加会话未读， 这样不也是数据就不一致了嘛， redis 事务完全和没有一样呀？","like_count":0,"discussions":[{"author":{"id":1297490,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epK1zyWib7IKYCoRSxIa6dDjrcyBqObGfj1lDVia1pOrSVxyltKI7RfGekdXPQNObwaBQg3gwvarlQA/132","nickname":"coldwalker","note":"","ucode":"AF9AF257A745C9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468206,"discussion_content":"是的，redis的事务只保证这些命令原子执行，执行过程中就算有命令失败，队列中的其他命令也会被执行，所以调用方需要根据返回结果来进行二次处理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569237813,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}