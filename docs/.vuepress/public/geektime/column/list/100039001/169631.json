{"id":169631,"title":"12 | 实战一（下）：如何利用基于充血模型的DDD开发一个虚拟钱包系统？","content":"<p>上一节课，我们做了一些理论知识的铺垫性讲解，讲到了两种开发模式，基于贫血模型的传统开发模式，以及基于充血模型的DDD开发模式。今天，我们正式进入实战环节，看如何分别用这两种开发模式，设计实现一个钱包系统。</p><p>话不多说，让我们正式开始今天的学习吧！</p><h2>钱包业务背景介绍</h2><p>很多具有支付、购买功能的应用（比如淘宝、滴滴出行、极客时间等）都支持钱包的功能。应用为每个用户开设一个系统内的虚拟钱包账户，支持用户充值、提现、支付、冻结、透支、转赠、查询账户余额、查询交易流水等操作。下图是一张典型的钱包功能界面，你可以直观地感受一下。</p><p><img src=\"https://static001.geekbang.org/resource/image/9e/4a/9e91377602ef154eaf866c7e9263a64a.jpg?wh=2023*1423\" alt=\"\"></p><p>一般来讲，每个虚拟钱包账户都会对应用户的一个真实的支付账户，有可能是银行卡账户，也有可能是三方支付账户（比如支付宝、微信钱包）。为了方便后续的讲解，我们限定钱包暂时只支持充值、提现、支付、查询余额、查询交易流水这五个核心的功能，其他比如冻结、透支、转赠等不常用的功能，我们暂不考虑。为了让你理解这五个核心功能是如何工作的，接下来，我们来一块儿看下它们的业务实现流程。</p><h3>1.充值</h3><p>用户通过三方支付渠道，把自己银行卡账户内的钱，充值到虚拟钱包账号中。这整个过程，我们可以分解为三个主要的操作流程：第一个操作是从用户的银行卡账户转账到应用的公共银行卡账户；第二个操作是将用户的充值金额加到虚拟钱包余额上；第三个操作是记录刚刚这笔交易流水。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/39/14/3915a6544403854d35678c81fe65f014.jpg?wh=1336*664\" alt=\"\"></p><h3>2.支付</h3><p>用户用钱包内的余额，支付购买应用内的商品。实际上，支付的过程就是一个转账的过程，从用户的虚拟钱包账户划钱到商家的虚拟钱包账户上。除此之外，我们也需要记录这笔支付的交易流水信息。</p><p><img src=\"https://static001.geekbang.org/resource/image/7e/5e/7eb44e2f8661d1c3debde85f79fb2c5e.jpg?wh=1697*653\" alt=\"\"></p><h3>3.提现</h3><p>除了充值、支付之外，用户还可以将虚拟钱包中的余额，提现到自己的银行卡中。这个过程实际上就是扣减用户虚拟钱包中的余额，并且触发真正的银行转账操作，从应用的公共银行账户转钱到用户的银行账户。同样，我们也需要记录这笔提现的交易流水信息。</p><p><img src=\"https://static001.geekbang.org/resource/image/66/43/66ede1de93d29b86a9194ea0f80d1e43.jpg?wh=1276*592\" alt=\"\"></p><h3>4.查询余额</h3><p>查询余额功能比较简单，我们看一下虚拟钱包中的余额数字即可。</p><h3>5.查询交易流水</h3><p>查询交易流水也比较简单。我们只支持三种类型的交易流水：充值、支付、提现。在用户充值、支付、提现的时候，我们会记录相应的交易信息。在需要查询的时候，我们只需要将之前记录的交易流水，按照时间、类型等条件过滤之后，显示出来即可。</p><h2>钱包系统的设计思路</h2><p>根据刚刚讲的业务实现流程和数据流转图，我们可以把整个钱包系统的业务划分为两部分，其中一部分单纯跟应用内的虚拟钱包账户打交道，另一部分单纯跟银行账户打交道。我们基于这样一个业务划分，给系统解耦，将整个钱包系统拆分为两个子系统：虚拟钱包系统和三方支付系统。</p><p><img src=\"https://static001.geekbang.org/resource/image/60/62/60d3cfec73986b52e3a6ef4fe147e562.jpg?wh=1783*1393\" alt=\"\"></p><p>为了能在有限的篇幅内，将今天的内容讲透彻，我们接来下只聚焦于虚拟钱包系统的设计与实现。对于三方支付系统以及整个钱包系统的设计与实现，我们不做讲解。你可以自己思考下。</p><p><strong>现在我们来看下，如果要支持钱包的这五个核心功能，虚拟钱包系统需要对应实现哪些操作。</strong>我画了一张图，列出了这五个功能都会对应虚拟钱包的哪些操作。注意，交易流水的记录和查询，我暂时在图中打了个问号，那是因为这块比较特殊，我们待会再讲。</p><p><img src=\"https://static001.geekbang.org/resource/image/d1/30/d1a9aeb6642404f80a62293ab2e45630.jpg?wh=1303*958\" alt=\"\"></p><p>从图中我们可以看出，虚拟钱包系统要支持的操作非常简单，就是余额的加加减减。其中，充值、提现、查询余额三个功能，只涉及一个账户余额的加减操作，而支付功能涉及两个账户的余额加减操作：一个账户减余额，另一个账户加余额。</p><p><strong>现在，我们再来看一下图中问号的那部分，也就是交易流水该如何记录和查询？</strong>我们先来看一下，交易流水都需要包含哪些信息。我觉得下面这几个信息是必须包含的。</p><p><img src=\"https://static001.geekbang.org/resource/image/38/68/38b56bd1981d8b40ececa4d638e4a968.jpg?wh=2263*583\" alt=\"\"></p><p>从图中我们可以发现，交易流水的数据格式包含两个钱包账号，一个是入账钱包账号，一个是出账钱包账号。为什么要有两个账号信息呢？这主要是为了兼容支付这种涉及两个账户的交易类型。不过，对于充值、提现这两种交易类型来说，我们只需要记录一个钱包账户信息就够了。</p><p>整个虚拟钱包的设计思路到此讲完了。接下来，我们来看一下，如何分别用基于贫血模型的传统开发模式和基于充血模型的DDD开发模式，来实现这样一个虚拟钱包系统？</p><h2>基于贫血模型的传统开发模式</h2><p>实际上，如果你有一定Web项目的开发经验，并且听明白了我刚刚讲的设计思路，那对你来说，利用基于贫血模型的传统开发模式来实现这样一个系统，应该是一件挺简单的事情。不过，为了对比两种开发模式，我还是带你一块儿来实现一遍。</p><p>这是一个典型的Web后端项目的三层结构。其中，Controller和VO负责暴露接口，具体的代码实现如下所示。注意，Controller中，接口实现比较简单，主要就是调用Service的方法，所以，我省略了具体的代码实现。</p><pre><code>public class VirtualWalletController {\n  // 通过构造函数或者IOC框架注入\n  private VirtualWalletService virtualWalletService;\n  \n  public BigDecimal getBalance(Long walletId) { ... } //查询余额\n  public void debit(Long walletId, BigDecimal amount) { ... } //出账\n  public void credit(Long walletId, BigDecimal amount) { ... } //入账\n  public void transfer(Long fromWalletId, Long toWalletId, BigDecimal amount) { ...} //转账\n  //省略查询transaction的接口\n}\n</code></pre><p>Service和BO负责核心业务逻辑，Repository和Entity负责数据存取。Repository这一层的代码实现比较简单，不是我们讲解的重点，所以我也省略掉了。Service层的代码如下所示。注意，这里我省略了一些不重要的校验代码，比如，对amount是否小于0、钱包是否存在的校验等等。</p><pre><code>public class VirtualWalletBo {//省略getter/setter/constructor方法\n  private Long id;\n  private Long createTime;\n  private BigDecimal balance;\n}\n\npublic Enum TransactionType {\n  DEBIT,\n  CREDIT,\n  TRANSFER;\n}\n\npublic class VirtualWalletService {\n  // 通过构造函数或者IOC框架注入\n  private VirtualWalletRepository walletRepo;\n  private VirtualWalletTransactionRepository transactionRepo;\n  \n  public VirtualWalletBo getVirtualWallet(Long walletId) {\n    VirtualWalletEntity walletEntity = walletRepo.getWalletEntity(walletId);\n    VirtualWalletBo walletBo = convert(walletEntity);\n    return walletBo;\n  }\n  \n  public BigDecimal getBalance(Long walletId) {\n    return walletRepo.getBalance(walletId);\n  }\n\n  @Transactional\n  public void debit(Long walletId, BigDecimal amount) {\n    VirtualWalletEntity walletEntity = walletRepo.getWalletEntity(walletId);\n    BigDecimal balance = walletEntity.getBalance();\n    if (balance.compareTo(amount) &lt; 0) {\n      throw new NoSufficientBalanceException(...);\n    }\n    VirtualWalletTransactionEntity transactionEntity = new VirtualWalletTransactionEntity();\n    transactionEntity.setAmount(amount);\n    transactionEntity.setCreateTime(System.currentTimeMillis());\n    transactionEntity.setType(TransactionType.DEBIT);\n    transactionEntity.setFromWalletId(walletId);\n    transactionRepo.saveTransaction(transactionEntity);\n    walletRepo.updateBalance(walletId, balance.subtract(amount));\n  }\n\n  @Transactional\n  public void credit(Long walletId, BigDecimal amount) {\n    VirtualWalletTransactionEntity transactionEntity = new VirtualWalletTransactionEntity();\n    transactionEntity.setAmount(amount);\n    transactionEntity.setCreateTime(System.currentTimeMillis());\n    transactionEntity.setType(TransactionType.CREDIT);\n    transactionEntity.setFromWalletId(walletId);\n    transactionRepo.saveTransaction(transactionEntity);\n    VirtualWalletEntity walletEntity = walletRepo.getWalletEntity(walletId);\n    BigDecimal balance = walletEntity.getBalance();\n    walletRepo.updateBalance(walletId, balance.add(amount));\n  }\n\n  @Transactional\n  public void transfer(Long fromWalletId, Long toWalletId, BigDecimal amount) {\n    VirtualWalletTransactionEntity transactionEntity = new VirtualWalletTransactionEntity();\n    transactionEntity.setAmount(amount);\n    transactionEntity.setCreateTime(System.currentTimeMillis());\n    transactionEntity.setType(TransactionType.TRANSFER);\n    transactionEntity.setFromWalletId(fromWalletId);\n    transactionEntity.setToWalletId(toWalletId);\n    transactionRepo.saveTransaction(transactionEntity);\n    debit(fromWalletId, amount);\n    credit(toWalletId, amount);\n  }\n}\n</code></pre><h2>基于充血模型的DDD开发模式</h2><p>刚刚讲了如何利用基于贫血模型的传统开发模式来实现虚拟钱包系统，现在，我们再来看一下，如何利用基于充血模型的DDD开发模式来实现这个系统？</p><p>在上一节课中，我们讲到，基于充血模型的DDD开发模式，跟基于贫血模型的传统开发模式的主要区别就在Service层，Controller层和Repository层的代码基本上相同。所以，我们重点看一下，Service层按照基于充血模型的DDD开发模式该如何来实现。</p><p>在这种开发模式下，我们把虚拟钱包VirtualWallet类设计成一个充血的Domain领域模型，并且将原来在Service类中的部分业务逻辑移动到VirtualWallet类中，让Service类的实现依赖VirtualWallet类。具体的代码实现如下所示：</p><pre><code>public class VirtualWallet { // Domain领域模型(充血模型)\n  private Long id;\n  private Long createTime = System.currentTimeMillis();;\n  private BigDecimal balance = BigDecimal.ZERO;\n  \n  public VirtualWallet(Long preAllocatedId) {\n    this.id = preAllocatedId;\n  }\n  \n  public BigDecimal balance() {\n    return this.balance;\n  }\n  \n  public void debit(BigDecimal amount) {\n    if (this.balance.compareTo(amount) &lt; 0) {\n      throw new InsufficientBalanceException(...);\n    }\n    this.balance = this.balance.subtract(amount);\n  }\n  \n  public void credit(BigDecimal amount) {\n    if (amount.compareTo(BigDecimal.ZERO) &lt; 0) {\n      throw new InvalidAmountException(...);\n    }\n    this.balance = this.balance.add(amount);\n  }\n}\n\npublic class VirtualWalletService {\n  // 通过构造函数或者IOC框架注入\n  private VirtualWalletRepository walletRepo;\n  private VirtualWalletTransactionRepository transactionRepo;\n  \n  public VirtualWallet getVirtualWallet(Long walletId) {\n    VirtualWalletEntity walletEntity = walletRepo.getWalletEntity(walletId);\n    VirtualWallet wallet = convert(walletEntity);\n    return wallet;\n  }\n  \n  public BigDecimal getBalance(Long walletId) {\n    return walletRepo.getBalance(walletId);\n  }\n  \n  @Transactional\n  public void debit(Long walletId, BigDecimal amount) {\n    VirtualWalletEntity walletEntity = walletRepo.getWalletEntity(walletId);\n    VirtualWallet wallet = convert(walletEntity);\n    wallet.debit(amount);\n    VirtualWalletTransactionEntity transactionEntity = new VirtualWalletTransactionEntity();\n    transactionEntity.setAmount(amount);\n    transactionEntity.setCreateTime(System.currentTimeMillis());\n    transactionEntity.setType(TransactionType.DEBIT);\n    transactionEntity.setFromWalletId(walletId);\n    transactionRepo.saveTransaction(transactionEntity);\n    walletRepo.updateBalance(walletId, wallet.balance());\n  }\n  \n  @Transactional\n  public void credit(Long walletId, BigDecimal amount) {\n    VirtualWalletEntity walletEntity = walletRepo.getWalletEntity(walletId);\n    VirtualWallet wallet = convert(walletEntity);\n    wallet.credit(amount);\n    VirtualWalletTransactionEntity transactionEntity = new VirtualWalletTransactionEntity();\n    transactionEntity.setAmount(amount);\n    transactionEntity.setCreateTime(System.currentTimeMillis());\n    transactionEntity.setType(TransactionType.CREDIT);\n    transactionEntity.setFromWalletId(walletId);\n    transactionRepo.saveTransaction(transactionEntity);\n    walletRepo.updateBalance(walletId, wallet.balance());\n  }\n\n  @Transactional\n  public void transfer(Long fromWalletId, Long toWalletId, BigDecimal amount) {\n    //...跟基于贫血模型的传统开发模式的代码一样...\n  }\n}\n\n</code></pre><p>看了上面的代码，你可能会说，领域模型VirtualWallet类很单薄，包含的业务逻辑很简单。相对于原来的贫血模型的设计思路，这种充血模型的设计思路，貌似并没有太大优势。你说得没错！这也是大部分业务系统都使用基于贫血模型开发的原因。不过，如果虚拟钱包系统需要支持更复杂的业务逻辑，那充血模型的优势就显现出来了。比如，我们要支持透支一定额度和冻结部分余额的功能。这个时候，我们重新来看一下VirtualWallet类的实现代码。</p><pre><code>public class VirtualWallet {\n  private Long id;\n  private Long createTime = System.currentTimeMillis();;\n  private BigDecimal balance = BigDecimal.ZERO;\n  private boolean isAllowedOverdraft = true;\n  private BigDecimal overdraftAmount = BigDecimal.ZERO;\n  private BigDecimal frozenAmount = BigDecimal.ZERO;\n  \n  public VirtualWallet(Long preAllocatedId) {\n    this.id = preAllocatedId;\n  }\n  \n  public void freeze(BigDecimal amount) { ... }\n  public void unfreeze(BigDecimal amount) { ...}\n  public void increaseOverdraftAmount(BigDecimal amount) { ... }\n  public void decreaseOverdraftAmount(BigDecimal amount) { ... }\n  public void closeOverdraft() { ... }\n  public void openOverdraft() { ... }\n  \n  public BigDecimal balance() {\n    return this.balance;\n  }\n  \n  public BigDecimal getAvaliableBalance() {\n    BigDecimal totalAvaliableBalance = this.balance.subtract(this.frozenAmount);\n    if (isAllowedOverdraft) {\n      totalAvaliableBalance += this.overdraftAmount;\n    }\n    return totalAvaliableBalance;\n  }\n  \n  public void debit(BigDecimal amount) {\n    BigDecimal totalAvaliableBalance = getAvaliableBalance();\n    if (totoalAvaliableBalance.compareTo(amount) &lt; 0) {\n      throw new InsufficientBalanceException(...);\n    }\n    this.balance = this.balance.subtract(amount);\n  }\n  \n  public void credit(BigDecimal amount) {\n    if (amount.compareTo(BigDecimal.ZERO) &lt; 0) {\n      throw new InvalidAmountException(...);\n    }\n    this.balance = this.balance.add(amount);\n  }\n}\n\n</code></pre><p>领域模型VirtualWallet类添加了简单的冻结和透支逻辑之后，功能看起来就丰富了很多，代码也没那么单薄了。如果功能继续演进，我们可以增加更加细化的冻结策略、透支策略、支持钱包账号（VirtualWallet id字段）自动生成的逻辑（不是通过构造函数经外部传入ID，而是通过分布式ID生成算法来自动生成ID）等等。VirtualWallet类的业务逻辑会变得越来越复杂，也就很值得设计成充血模型了。</p><h2>辩证思考与灵活应用</h2><p>对于虚拟钱包系统的设计与两种开发模式的代码实现，我想你应该有个比较清晰的了解了。不过，我觉得还有两个问题值得讨论一下。</p><p><strong>第一个要讨论的问题是：在基于充血模型的DDD开发模式中，将业务逻辑移动到Domain中，Service类变得很薄，但在我们的代码设计与实现中，并没有完全将Service类去掉，这是为什么？或者说，Service类在这种情况下担当的职责是什么？哪些功能逻辑会放到Service类中？</strong></p><p>区别于Domain的职责，Service类主要有下面这样几个职责。</p><p>1.Service类负责与Repository交流。在我的设计与代码实现中，VirtualWalletService类负责与Repository层打交道，调用Respository类的方法，获取数据库中的数据，转化成领域模型VirtualWallet，然后由领域模型VirtualWallet来完成业务逻辑，最后调用Repository类的方法，将数据存回数据库。</p><p>这里我再稍微解释一下，之所以让VirtualWalletService类与Repository打交道，而不是让领域模型VirtualWallet与Repository打交道，那是因为我们想保持领域模型的独立性，不与任何其他层的代码（Repository层的代码）或开发框架（比如Spring、MyBatis）耦合在一起，将流程性的代码逻辑（比如从DB中取数据、映射数据）与领域模型的业务逻辑解耦，让领域模型更加可复用。</p><p>2.Service类负责跨领域模型的业务聚合功能。VirtualWalletService类中的transfer()转账函数会涉及两个钱包的操作，因此这部分业务逻辑无法放到VirtualWallet类中，所以，我们暂且把转账业务放到VirtualWalletService类中了。当然，虽然功能演进，使得转账业务变得复杂起来之后，我们也可以将转账业务抽取出来，设计成一个独立的领域模型。</p><p>3.Service类负责一些非功能性及与三方系统交互的工作。比如幂等、事务、发邮件、发消息、记录日志、调用其他系统的RPC接口等，都可以放到Service类中。</p><p><strong>第二个要讨论问题是：在基于充血模型的DDD开发模式中，尽管Service层被改造成了充血模型，但是Controller层和Repository层还是贫血模型，是否有必要也进行充血领域建模呢？</strong></p><p>答案是没有必要。Controller层主要负责接口的暴露，Repository层主要负责与数据库打交道，这两层包含的业务逻辑并不多，前面我们也提到了，如果业务逻辑比较简单，就没必要做充血建模，即便设计成充血模型，类也非常单薄，看起来也很奇怪。</p><p>尽管这样的设计是一种面向过程的编程风格，但我们只要控制好面向过程编程风格的副作用，照样可以开发出优秀的软件。那这里的副作用怎么控制呢？</p><p>就拿Repository的Entity来说，即便它被设计成贫血模型，违反面向对象编程的封装特性，有被任意代码修改数据的风险，但Entity的生命周期是有限的。一般来讲，我们把它传递到Service层之后，就会转化成BO或者Domain来继续后面的业务逻辑。Entity的生命周期到此就结束了，所以也并不会被到处任意修改。</p><p>我们再来说说Controller层的VO。实际上VO是一种DTO（Data Transfer Object，数据传输对象）。它主要是作为接口的数据传输承载体，将数据发送给其他系统。从功能上来讲，它理应不包含业务逻辑、只包含数据。所以，我们将它设计成贫血模型也是比较合理的。</p><h2>重点回顾</h2><p>今天的内容到此就讲完了。我们一块来总结回顾一下，你应该重点掌握的知识点。</p><p>基于充血模型的DDD开发模式跟基于贫血模型的传统开发模式相比，主要区别在Service层。在基于充血模型的开发模式下，我们将部分原来在Service类中的业务逻辑移动到了一个充血的Domain领域模型中，让Service类的实现依赖这个Domain类。</p><p>在基于充血模型的DDD开发模式下，Service类并不会完全移除，而是负责一些不适合放在Domain类中的功能。比如，负责与Repository层打交道、跨领域模型的业务聚合功能、幂等事务等非功能性的工作。</p><p>基于充血模型的DDD开发模式跟基于贫血模型的传统开发模式相比，Controller层和Repository层的代码基本上相同。这是因为，Repository层的Entity生命周期有限，Controller层的VO只是单纯作为一种DTO。两部分的业务逻辑都不会太复杂。业务逻辑主要集中在Service层。所以，Repository层和Controller层继续沿用贫血模型的设计思路是没有问题的。</p><h2>课堂讨论</h2><p>这两节课中对于DDD的讲解，都是我的个人主观看法，你可能会有不同看法。</p><p>欢迎在留言区说一说你对DDD的看法。如果觉得有帮助，你也可以把这篇文章分享给你的朋友。</p>","neighbors":{"left":{"article_title":"11 | 实战一（上）：业务开发常用的基于贫血模型的MVC架构违背OOP吗？","id":169600},"right":{"article_title":"13 | 实战二（上）：如何对接口鉴权这样一个功能开发做面向对象分析？","id":171760}},"comments":[{"had_liked":false,"id":156941,"user_name":"potato00fa","can_delete":false,"product_type":"c1","uid":1307080,"ip_address":"","ucode":"D179E68D87CC50","user_header":"https://static001.geekbang.org/account/avatar/00/13/f1/c8/8e6dc340.jpg","comment_is_top":false,"comment_ctime":1574999281,"is_pvip":false,"discussion_count":32,"race_medal":0,"score":"2574260409585","product_id":100039001,"comment_content":"我对DDD的看法就是，它可以把原来最重的service逻辑拆分并且转移一部分逻辑，可以使得代码可读性略微提高，另一个比较重要的点是使得模型充血以后，基于模型的业务抽象在不断的迭代之后会越来越明确，业务的细节会越来越精准，通过阅读模型的充血行为代码，能够极快的了解系统的业务，对于开发来说能说明显的提升开发效率。<br>在维护性上来说，如果项目新进了开发人员，如果是贫血模型的service代码，无论代码如何清晰，注释如何完备，代码结构设计得如何优雅，都没有办法第一时间理解系统的核心业务逻辑，但是如果是充血模型，直接阅读充血模型的行为方法，起码能够很快理解70%左右的业务逻辑，因为充血模型可以说是业务的精准抽象，我想，这就是领域模型驱动能够达到&quot;驱动&quot;效果的由来吧","like_count":600,"discussions":[{"author":{"id":1026637,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/4d/c7df89bf.jpg","nickname":"宝宝疯","note":"","ucode":"D86F5A645FE61B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":71105,"discussion_content":"在一个大家都只会使用贫血模型的环境里编写充血模型的代码，估计会被鄙视的😂","likes_number":23,"is_delete":false,"is_hidden":false,"ctime":1575386465,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1693576,"avatar":"https://static001.geekbang.org/account/avatar/00/19/d7/88/7dcde249.jpg","nickname":"庄周梦蝶","note":"","ucode":"7878ED3EB11E97","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":359291,"discussion_content":"如果充血模型中的模型没设计好，有冗余属性，要想完全吃透业务，最终还是要看底层存储层的设计。\n从另一个方面说，存储层结构的设计，决定了项目的底子。DDD玩出花样还是得向底层存储低头，很多时候的难点不是模型的设计，而是各种技术的结合使问题。用，性能问题，效率问题。","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1616158777,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1611025,"avatar":"https://static001.geekbang.org/account/avatar/00/18/95/11/eb431e52.jpg","nickname":"沈康","note":"","ucode":"02AFA50738AB8E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":68011,"discussion_content":"同意，现贫血模型的一条链路的业务代码到处都是，最坑的地方就是多个业务类存在抽取公共的部分复用，导致完全没有业务领域的概念。\nddd的我理解就是把业务逻辑[方法]封装在一个领域内,而不关注业务数据来源[字段],统一由业务层负责组装[与data层交互]","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1575195314,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1139367,"avatar":"https://static001.geekbang.org/account/avatar/00/11/62/a7/3e6fee86.jpg","nickname":"K战神","note":"","ucode":"527E6BB26BB766","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320812,"discussion_content":"想起了马丁福乐的一个观点，如果要用DDD，那就先习惯用充血模型吧。很多业务逻辑在抽离到模型中，会有一些思考，这个属不属于他？这个会不会公用？伴随着这些思考，会让模型边界越来越明显，职责也越来越清晰，自己的代码描述也会越来越优雅。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1604483714,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1132356,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/44/964aa665.jpg","nickname":"秋风画扇","note":"","ucode":"5BCBC1422C51EC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":210876,"discussion_content":"抽象模型使得业务逻辑高内聚，看起来更完整。关于其他交互则由service实现，从代码结构设计上也是很清晰","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1584786610,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1270902,"avatar":"https://static001.geekbang.org/account/avatar/00/13/64/76/05049c2f.jpg","nickname":"山下小妖","note":"","ucode":"57FEBC09216A36","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":82001,"discussion_content":"充血模型是业务的精确抽象，说的太好了。在该抽象的地方用充血模型来处理，在不需要抽象只需要数据传递的地方用贫血模型来处理。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1576308111,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1055334,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","nickname":"苦行僧","note":"","ucode":"726024A9A9CF44","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1270902,"avatar":"https://static001.geekbang.org/account/avatar/00/13/64/76/05049c2f.jpg","nickname":"山下小妖","note":"","ucode":"57FEBC09216A36","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":100430,"discussion_content":"充血模型是业务的精确抽象，说的太好了, 我也非常赞同","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577259606,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":82001,"ip_address":""},"score":100430,"extra":""}]},{"author":{"id":1903190,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/0a/56/eee89103.jpg","nickname":"罗ྂ杰ྂ","note":"","ucode":"3277C09D7D38C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":203204,"discussion_content":"充血模型是业务的精确抽象。赞","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1584009590,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1334583,"avatar":"https://static001.geekbang.org/account/avatar/00/14/5d/37/061e7fac.jpg","nickname":"小苗晓雪","note":"","ucode":"B15FDF455853D2","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540784,"discussion_content":"完全同意您的看法 , 充血模型说到底就是极致的收敛业务逻辑到该业务逻辑真正该处于的那块业务模型中 , 让每一层每一个 bean 都活起来! 如果一个人真正用心读代码读进去了 , 不可能喜欢那种大块堆叠到service 层的代码 , 那种代码只是你当时读起来比较顺 , service 层方法一多起来 , 你看代码根本捋不过来 , 我看完文章后觉得自己一定要有这种收敛封装的意识 , 各司其职 , 单一职责都要体现出来 , 不能总是向写业务那样一通写 , 那样的代码毫无质量 , 整个人也毫无成就感!","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1640166798,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1067933,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4b/9d/e2059bce.jpg","nickname":"时间道","note":"","ucode":"6A8279F2087135","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308206,"discussion_content":"贫血模型中service层如果按照use case的方式实现，也还是很好了解业务的，毕竟case就那么多","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1600869312,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020529,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/92/71/9fd7cd7a.jpg","nickname":"Daniel","note":"","ucode":"282E09B3146501","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1067933,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4b/9d/e2059bce.jpg","nickname":"时间道","note":"","ucode":"6A8279F2087135","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":364848,"discussion_content":"后期要在service层中，加个幂等性，缓存，RPC... 的一些附加功能，代码就不这么简洁了，可读性会特别差","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617628806,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":308206,"ip_address":""},"score":364848,"extra":""}]},{"author":{"id":1386315,"avatar":"https://static001.geekbang.org/account/avatar/00/15/27/4b/e49c82d0.jpg","nickname":"Rover","note":"","ucode":"7575EC91F45B99","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548688,"discussion_content":"业务内聚由领域服务转移到了领域模型中","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1643332333,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1999235,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/81/83/f93b1e62.jpg","nickname":"peaceForce","note":"","ucode":"98A318930DDC9A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374757,"discussion_content":"写得很好, 思路清晰","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621336828,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135528,"avatar":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","nickname":"return","note":"","ucode":"42B8A3380DF04B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341099,"discussion_content":"有道理\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610289647,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1242401,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f5/21/17814610.jpg","nickname":"山东哥哥帅","note":"","ucode":"6BBEA84359262F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327800,"discussion_content":"总结的太到位了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605954758,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1443201,"avatar":"https://static001.geekbang.org/account/avatar/00/16/05/81/9d3907f4.jpg","nickname":"Rhinos HiL.","note":"","ucode":"F5EFF01D7ED7A2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305338,"discussion_content":"有道理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599882982,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1112490,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f9/aa/3e80212e.jpg","nickname":"龙猫","note":"","ucode":"FD726CC969EF9C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296467,"discussion_content":"确实","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596550197,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1130590,"avatar":"https://static001.geekbang.org/account/avatar/00/11/40/5e/b8fada94.jpg","nickname":"Ryoma","note":"","ucode":"7F692369239692","race_medal":2,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296152,"discussion_content":"这个思路很棒","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596461739,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1400902,"avatar":"https://static001.geekbang.org/account/avatar/00/15/60/46/711336e6.jpg","nickname":"莫墨默","note":"","ucode":"6E1171B260A4AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295620,"discussion_content":"“精准抽象”，总结精准","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596264512,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1021539,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/96/63/7eb32c9b.jpg","nickname":"捞鱼的搬砖奇","note":"","ucode":"2FD194C4DA26E5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294078,"discussion_content":"感谢总结，学习了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595775773,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1526428,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epMicvN0PDCMibmBvwAyoScCjjgfLBWaQwGic9ialXObicxKib9X0T0gx02gL4jqvibEr1FRzMaiaicN8cgEBg/132","nickname":"Geek_ac4080","note":"","ucode":"E2C480962E6CEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293769,"discussion_content":"good","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595663338,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1937062,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/8e/a6/c3286b61.jpg","nickname":"Java垒墙工程师","note":"","ucode":"E76AE44A9C76AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287666,"discussion_content":"Redis？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593505563,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1937062,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/8e/a6/c3286b61.jpg","nickname":"Java垒墙工程师","note":"","ucode":"E76AE44A9C76AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287660,"discussion_content":"请问虚拟钱包系统，不直接和数据库等媒介交互，虚拟钱包的载体在什么地方呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593505181,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1004264,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/e8/92a2e66d.jpg","nickname":"第二少","note":"","ucode":"4A09D1E7589F67","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1937062,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/8e/a6/c3286b61.jpg","nickname":"Java垒墙工程师","note":"","ucode":"E76AE44A9C76AE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301892,"discussion_content":"只在内存中","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598699900,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":287660,"ip_address":""},"score":301892,"extra":""}]},{"author":{"id":1049703,"avatar":"https://static001.geekbang.org/account/avatar/00/10/04/67/b31afa12.jpg","nickname":"wakie","note":"","ucode":"0533AE496ADFB4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281340,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591714284,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1311947,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/xysT7OH4SrD4sv944ndDv5tnJOk5na37Gxd5owGWsE7ON7AVW0ibnYGNRoZd0ibLWhFVXLLjOB5QFxwjo0EGIkoQ/132","nickname":"雨下不停","note":"","ucode":"0893B9C249E48A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":234575,"discussion_content":"有见识","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586966618,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1321016,"avatar":"https://static001.geekbang.org/account/avatar/00/14/28/38/d93928e0.jpg","nickname":"yh","note":"","ucode":"64FFFB8A5DB979","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":215829,"discussion_content":"\n精准抽象解释的非常到位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585388238,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1922242,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/54/c2/17512f7a.jpg","nickname":"banxiaobu","note":"","ucode":"0FC00E5E90ACB8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":213260,"discussion_content":"总结到位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585061942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1622209,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c0/c1/414d5d1b.jpg","nickname":"_yh葱","note":"","ucode":"FA899711E91113","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":202121,"discussion_content":"精准抽象解释的非常好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583864810,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1224708,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLZpzZqvib4bzgfFb6Wt7fP2k4wefKYaoPwza1L19UGalddjREELPd6zAjyibdHJ7jxB2xtZmSuJjuA/132","nickname":"seele","note":"","ucode":"1824AA95FF1DF1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":177320,"discussion_content":"谢谢带佬指点一波","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582094373,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1194535,"avatar":"https://static001.geekbang.org/account/avatar/00/12/3a/27/6bb0bb01.jpg","nickname":"随机的","note":"","ucode":"D8319136F27CBA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":71937,"discussion_content":"说的很好，我想试一试","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575466033,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1134861,"avatar":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","nickname":"James","note":"","ucode":"48B0F2A334D1C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66765,"discussion_content":"mark,说的很好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575105413,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156816,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1574979779,"is_pvip":true,"discussion_count":15,"race_medal":0,"score":"443956611267","product_id":100039001,"comment_content":"理解OOP，我们就不难理解DDD：<br>DDD第一原则：将数据和操作结合。（贫血模型将数据和操作分离，违反OOP的原则。）<br>DDD第二原则：界限上下文。这是将“单一指责”应用于我们的领域模型。<br><br>DDD is nothing more than OOP applied to business models. DDD其实就是把OOP应用于业务模型。<br><br>实现：<br>1、使用通用语言（Ubiquitous Language）：类、方法、字段的命名，要符合业务。使用业务语言命名，以后在和客户或者其他团队交流时能够更顺畅。<br><br>2、理解系统业务：例如做一个理财系统，要亲自去和银行卖理财产品的人聊聊或者买个理财产品之后，那些数据库中对你来说毫无意义的字段才变得有血有肉。<br><br>介绍一篇博客吧：DDD101 https:&#47;&#47;medium.com&#47;the-coding-matrix&#47;ddd-101-the-5-minute-tour-7a3037cf53b8<br><br>最后，是时候祭出大杀器了：《领域驱动设计》Eric Evans （反正我也没看）<br>","like_count":104,"discussions":[{"author":{"id":1392431,"avatar":"https://static001.geekbang.org/account/avatar/00/15/3f/2f/8513c4d3.jpg","nickname":"a(๑≖ิټ≖ิ)✌","note":"","ucode":"AEF9B5CA1605DF","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298774,"discussion_content":"之前是做财务系统的，为了了解业务买了讲财务指标的书，看完书后去炒股赔了好几万","likes_number":18,"is_delete":false,"is_hidden":false,"ctime":1597395949,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2244729,"avatar":"","nickname":"Geek_1945","note":"","ucode":"1362B92FB5B946","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1392431,"avatar":"https://static001.geekbang.org/account/avatar/00/15/3f/2f/8513c4d3.jpg","nickname":"a(๑≖ิټ≖ิ)✌","note":"","ucode":"AEF9B5CA1605DF","race_medal":1,"user_type":1,"is_pvip":false},"discussion":{"id":321430,"discussion_content":"了解财务指标和实操炒股之间要跨好几个领域呢。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604579790,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298774,"ip_address":""},"score":321430,"extra":""}]},{"author":{"id":1237588,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e2/54/f836054a.jpg","nickname":"耿斌","note":"","ucode":"6535D0B012D78E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":314927,"discussion_content":"没看过的书也敢推荐，此处应该有差评功能，哈哈哈哈哈","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1603209167,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1098720,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c3/e0/3db22579.jpg","nickname":"技术骨干","note":"","ucode":"8FCF8DE6D29201","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":223033,"discussion_content":"公司买了，然而没人看。是不是很浪费","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1586183891,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1058015,"avatar":"https://static001.geekbang.org/account/avatar/00/10/24/df/645f8087.jpg","nickname":"Yayu","note":"","ucode":"5E7842458D8229","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65471,"discussion_content":"&#34;DDD is nothing more than OOP applied to business models. DDD其实就是把OOP应用于业务模型&#34; 提纲挈领。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575004318,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1004264,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/e8/92a2e66d.jpg","nickname":"第二少","note":"","ucode":"4A09D1E7589F67","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301893,"discussion_content":"《实现领域驱动设计》更具实操性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598699994,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1321016,"avatar":"https://static001.geekbang.org/account/avatar/00/14/28/38/d93928e0.jpg","nickname":"yh","note":"","ucode":"64FFFB8A5DB979","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":215830,"discussion_content":"感谢大佬分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585388399,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1398824,"avatar":"https://static001.geekbang.org/account/avatar/00/15/58/28/c86340ca.jpg","nickname":"达文西","note":"","ucode":"01C1063F23D634","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66473,"discussion_content":"666哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575074392,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1506974,"avatar":"https://static001.geekbang.org/account/avatar/00/16/fe/9e/8165b0a0.jpg","nickname":"路伴友行","note":"","ucode":"96B54B7EEAEDAD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66225,"discussion_content":"给的博客地址貌似进不去","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575041245,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1506974,"avatar":"https://static001.geekbang.org/account/avatar/00/16/fe/9e/8165b0a0.jpg","nickname":"路伴友行","note":"","ucode":"96B54B7EEAEDAD","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66276,"discussion_content":"明天我下载下来分享给你","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575042035,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":66225,"ip_address":""},"score":66276,"extra":""},{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1506974,"avatar":"https://static001.geekbang.org/account/avatar/00/16/fe/9e/8165b0a0.jpg","nickname":"路伴友行","note":"","ucode":"96B54B7EEAEDAD","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66427,"discussion_content":"我转成了pdf：https://github.com/gdhucoder/Algorithms4/blob/master/designpattern/pic/DDD%20101%20%E2%80%94%20The%205-Minute%20Tour%20-%20The%20Coding%20Matrix%20-%20Medium.pdf","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1575063531,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":66225,"ip_address":""},"score":66427,"extra":""}]},{"author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65514,"discussion_content":"大杀器无疑了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575008484,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1322880,"avatar":"","nickname":"小畅","note":"","ucode":"D031CC07CD564E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65497,"discussion_content":"啊哈哈 反正我也没看\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575006275,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1698258,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIx7FdRzUuQf4Fopr7DOXEHZyCFfH4GQViaqo7bymf1qaANcOvuEhHyTNwOOUFW7psxEeSQ5k9uXWw/132","nickname":"阿顺","note":"","ucode":"36F2AD6F980B11","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65391,"discussion_content":"最后括号建议去掉，不然前面说得挺逼格，后面一下子就拉了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574999786,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1698258,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIx7FdRzUuQf4Fopr7DOXEHZyCFfH4GQViaqo7bymf1qaANcOvuEhHyTNwOOUFW7psxEeSQ5k9uXWw/132","nickname":"阿顺","note":"","ucode":"36F2AD6F980B11","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65404,"discussion_content":"好的，谢谢建议！当时前面的内容基于看过的资料整理出来的。后面建议的书籍，我没看过，想着找时间看看。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575000675,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":65391,"ip_address":""},"score":65404,"extra":""}]}]},{"had_liked":false,"id":157226,"user_name":"join","can_delete":false,"product_type":"c1","uid":1130132,"ip_address":"","ucode":"C097D89F7BA3EF","user_header":"https://static001.geekbang.org/account/avatar/00/11/3e/94/c6460883.jpg","comment_is_top":false,"comment_ctime":1575089047,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"319402668951","product_id":100039001,"comment_content":"看到这里，感觉才真正理解充血模型的作用：<br><br>    真正的业务逻辑都放在充血的领域对象中，与具体使用什么框架（比如Spring，MyBatis），具体使用什么数据库无关。这样有利于保护领域对象中的数据，比如钱包中的余额，当有入账和出账操作时，余额在领域对象中自动执行加减操作，而不是将余额暴露在Service中直接操作（这样很容易出错可能导致帐不平衡，余额应该封装保护起来），当然“余额自动增减”这只是一个简单的业务逻辑例子，业务逻辑越复杂就越应该封装到领域对象中。<br><br>1. Service层只是一个中间层，起到连接和组合作用。<br>用于支持领域模型层和Repository层的交互（连接作用），利用各种领域对象执行业务逻辑（组合作用）。<br>比如通过Repository查出数据，将数据转换为领域模型对象，利用领域模型对象执行业务逻辑（核心），然后调用Repository更新领域模型中的数据。<br><br>2. Service类还负责一些非功能性及与三方系统交互的工作。<br>比如幂等、事务、发邮件、发消息、记录日志、调用其他系统的 RPC 接口等。<br><br>    不允许Service中的逻辑过于复杂，如果Service中的组合的业务逻辑过于复杂，我们就要将这业务逻辑抽取出一个新的领域对象进行封装，通过调用这个领域对象来进行这些复杂的操作。<br><br>    由于controller和Repository层中本身没有什么业务逻辑，controller中的Vo对象实际上只是传输数据使用（数据从系统传输数据到外部调用方），Repository中的Entity本质上也只是传输数据（数据从数据库中传输数据到系统），所以用贫血模型不会带来副作用，是没有问题的。<br>","like_count":74,"discussions":[{"author":{"id":2935759,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/cb/cf/fc97de76.jpg","nickname":"Geektimer","note":"","ucode":"13746813BA173A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555741,"discussion_content":"解释的很棒","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647055116,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1930698,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/75/ca/4c127da3.jpg","nickname":"Emma","note":"","ucode":"C2D31142AF7288","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543894,"discussion_content":"差不多就是这个意思吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641348838,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1021539,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/96/63/7eb32c9b.jpg","nickname":"捞鱼的搬砖奇","note":"","ucode":"2FD194C4DA26E5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294080,"discussion_content":"Repository本身就是 DDD 的叫法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595775930,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1622209,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c0/c1/414d5d1b.jpg","nickname":"_yh葱","note":"","ucode":"FA899711E91113","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":202122,"discussion_content":"对老师知识补充的更加好理解😀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583865501,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156831,"user_name":"miracle","can_delete":false,"product_type":"c1","uid":1276137,"ip_address":"","ucode":"FD7074F1062AE9","user_header":"https://static001.geekbang.org/account/avatar/00/13/78/e9/9d807269.jpg","comment_is_top":false,"comment_ctime":1574986580,"is_pvip":false,"replies":[{"id":"60237","content":"好的，我把完整代码抽空整理好放到github上<br>https:&#47;&#47;github.com&#47;wangzheng0822","user_name":"作者回复","comment_id":156831,"uid":"1190123","ip_address":"","utype":1,"ctime":1575015591,"user_name_real":"王争"}],"discussion_count":20,"race_medal":0,"score":"302222697300","product_id":100039001,"comment_content":"建议将完整一些的代码放到 github 上 然后感兴趣的话可以自行去github 上研究或者提 pr","like_count":71,"discussions":[{"author":{"id":2411555,"avatar":"","nickname":"Geek_08733c","note":"","ucode":"9EE5A78C35DBB1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341288,"discussion_content":"花了钱的，能不能让我的money有所价值","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1610368610,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1134861,"avatar":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","nickname":"James","note":"","ucode":"48B0F2A334D1C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66754,"discussion_content":"代码还没放上去= =","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1575104590,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1603271,"avatar":"","nickname":"Geek_f3a3d1","note":"","ucode":"E15FA1C3AB3174","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1134861,"avatar":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","nickname":"James","note":"","ucode":"48B0F2A334D1C1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":112883,"discussion_content":"现在也没","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1577886172,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":66754,"ip_address":""},"score":112883,"extra":""}]},{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476246,"discussion_content":"好的，我把完整代码抽空整理好放到github上\nhttps://github.com/wangzheng0822","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575015591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1042444,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e8/0c/870d2de4.jpg","nickname":"敲代码的老王","note":"","ucode":"B641FB945F0C04","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":532988,"discussion_content":"2021年11月24日了，还是没看到代码。。。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1637747860,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":476246,"ip_address":""},"score":532988,"extra":"{\"user_type\":1}"}]},{"author":{"id":1586169,"avatar":"https://static001.geekbang.org/account/avatar/00/18/33/f9/658f5bd2.jpg","nickname":"torchlight","note":"","ucode":"1E05FD0360BEF3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379889,"discussion_content":"2021年6月依然没有","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1624205138,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1656956,"avatar":"https://static001.geekbang.org/account/avatar/00/19/48/7c/2aaf50e5.jpg","nickname":"coder","note":"","ucode":"3A0940EBF94577","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307794,"discussion_content":"现在还是没有","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1600761130,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1008793,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/64/99/c22d82a1.jpg","nickname":"陈高健","note":"","ucode":"9EABC500EA924F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":210965,"discussion_content":"代码确实没找到... 口头答应确实...","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1584795906,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1058015,"avatar":"https://static001.geekbang.org/account/avatar/00/10/24/df/645f8087.jpg","nickname":"Yayu","note":"","ucode":"5E7842458D8229","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65467,"discussion_content":"补充一点，可以创建多个语言版本的目录，以供各个不同语言的开发人员研究或者提 PR","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575004139,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1370705,"avatar":"https://static001.geekbang.org/account/avatar/00/14/ea/51/9132e9cc.jpg","nickname":"土豆哪里挖","note":"","ucode":"F27B3BA0477050","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1058015,"avatar":"https://static001.geekbang.org/account/avatar/00/10/24/df/645f8087.jpg","nickname":"Yayu","note":"","ucode":"5E7842458D8229","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65511,"discussion_content":"附议","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575008067,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":65467,"ip_address":""},"score":65511,"extra":""},{"author":{"id":1164531,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c4/f3/92f654f1.jpg","nickname":"Bug? Feature!","note":"","ucode":"F8FA8A0094FBA0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1058015,"avatar":"https://static001.geekbang.org/account/avatar/00/10/24/df/645f8087.jpg","nickname":"Yayu","note":"","ucode":"5E7842458D8229","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65633,"discussion_content":"一直都是这样，之前的数据结构与算法就是这样","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575017124,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":65467,"ip_address":""},"score":65633,"extra":""}]},{"author":{"id":1250730,"avatar":"https://static001.geekbang.org/account/avatar/00/13/15/aa/b45d1f44.jpg","nickname":"大黄蜂=_=","note":"","ucode":"17E9EB8F524967","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591226,"discussion_content":"2022年了 还是没有代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666411852,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2821088,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/0b/e0/06031ed5.jpg","nickname":"梅里埃","note":"","ucode":"5AFC7F8875750D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532797,"discussion_content":"talk cheap show me your code！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637704808,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2663785,"avatar":"https://static001.geekbang.org/account/avatar/00/28/a5/69/1fc6fc4b.jpg","nickname":"张海翔","note":"","ucode":"3A331DAA59FC2E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385702,"discussion_content":"我觉得没有也好，正好自己操作一遍，映像更为深刻。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627218054,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1115232,"avatar":"https://static001.geekbang.org/account/avatar/00/11/04/60/64d166b6.jpg","nickname":"Fan","note":"","ucode":"3BF28670FD9407","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380810,"discussion_content":"请问下，代码在哪里呢？在github没有找到。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624709500,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1167430,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d0/46/7f9af8de.jpg","nickname":"寻","note":"","ucode":"473B2CC14158A7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373619,"discussion_content":"还是没有","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620800893,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1152145,"avatar":"https://static001.geekbang.org/account/avatar/00/11/94/91/6d6ca42f.jpg","nickname":"怀草诗","note":"","ucode":"78F8B9B4628F15","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348686,"discussion_content":"我还以为真有代码呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612679631,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2107466,"avatar":"https://static001.geekbang.org/account/avatar/00/20/28/4a/36d07533.jpg","nickname":"crossover  of   AI","note":"","ucode":"8EE3289947808F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344275,"discussion_content":"代码呢，我可不想只看你说的，代码代码代码代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611382379,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1042793,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e9/69/779b48c2.jpg","nickname":"苏忆","note":"","ucode":"B8BE78280CCB99","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299701,"discussion_content":"到目前为止依然没有","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597770078,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1264061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/49/bd/ae37990b.jpg","nickname":"geeklyc","note":"","ucode":"F25441AB6433B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281015,"discussion_content":"找了半天没找到，尴尬","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591662820,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157231,"user_name":"风之射手座","can_delete":false,"product_type":"c1","uid":1128993,"ip_address":"","ucode":"41701B012716AC","user_header":"https://static001.geekbang.org/account/avatar/00/11/3a/21/caa40d0f.jpg","comment_is_top":false,"comment_ctime":1575091377,"is_pvip":false,"discussion_count":14,"race_medal":0,"score":"126129142961","product_id":100039001,"comment_content":"第2步支付处理流程感觉有点问题:<br>从用户的虚拟钱包转90到商家虚拟钱包应该就完了，不应该再从应用公共银行卡再划钱到商家银行卡。如果要即时划转到商家银行卡，就要记得把商家的虚拟钱包减少90。<br>好像是这样吧？","like_count":29,"discussions":[{"author":{"id":1236325,"avatar":"https://static001.geekbang.org/account/avatar/00/12/dd/65/575a3b8d.jpg","nickname":"🎵粉墨","note":"","ucode":"559647560612F0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299856,"discussion_content":"看来做金融合规的公司还是少啊,资金监管需要,要做合规的金融业务,所有的资金必须被银行监管,公司会给每一个用户在对应监管银行去开一个虚拟银行卡.所以转账的时候会有对应的操作.","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1597840145,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1390286,"avatar":"https://static001.geekbang.org/account/avatar/00/15/36/ce/5c958ff9.jpg","nickname":"Just do it","note":"","ucode":"70C3F8F9707325","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":73728,"discussion_content":"不过， 这个流程应该是， 用户虚拟钱包-90， 商家钱包+90， 商家体现，公共银行账户转账90到行家银行账户。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1575592764,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1398577,"avatar":"https://static001.geekbang.org/account/avatar/00/15/57/31/6772744d.jpg","nickname":"ちよくん","note":"","ucode":"B71E9B16E4408F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1390286,"avatar":"https://static001.geekbang.org/account/avatar/00/15/36/ce/5c958ff9.jpg","nickname":"Just do it","note":"","ucode":"70C3F8F9707325","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":107629,"discussion_content":"+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577594537,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":73728,"ip_address":""},"score":107629,"extra":""}]},{"author":{"id":1390286,"avatar":"https://static001.geekbang.org/account/avatar/00/15/36/ce/5c958ff9.jpg","nickname":"Just do it","note":"","ucode":"70C3F8F9707325","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":73724,"discussion_content":"我理解虚拟钱包，只显示个数字，用户存入应用的钱都在应该的公共银行账户中，所以这里第一步是虚拟钱包金额减90，然后是银行发生真正的转账操作。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1575592594,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1536075,"avatar":"https://static001.geekbang.org/account/avatar/00/17/70/4b/6b028f2a.jpg","nickname":"Hooray","note":"","ucode":"39A62F7619C5D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":218166,"discussion_content":"因为有个提现的功能啊，转账的两个用户都是虚拟的钱存在虚拟钱包，实际的钱都是在公共的银行卡上，这个就不需要转来转去了，而只有商家要去提现的时候，才会有实际的钱从公共的银行卡到商户的银行卡啊","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585627346,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1104279,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d9/97/0cc8cfac.jpg","nickname":"计二高岑","note":"","ucode":"991CDC1255023D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":363496,"discussion_content":"请教下各位。公共帐户在数据库上如何设计。一个系统只有一个公共帐号。所用户的提现都会对公共帐号进行余额减少。如何解决并发问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617203724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1268264,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5a/28/732d3f2f.jpg","nickname":"GEEKBANG_6638780","note":"","ucode":"952194E56FD8C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1104279,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d9/97/0cc8cfac.jpg","nickname":"计二高岑","note":"","ucode":"991CDC1255023D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382785,"discussion_content":"这个在数据库中叫热点数据，竞争一般是行锁。知道了根源以后就好处理了。 首先为什么行锁竞争激烈，因为大家都想针对该行读写。 分而治之，把热点行拆分成多行，汇总的时候统计所有的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1625724100,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":363496,"ip_address":""},"score":382785,"extra":""}]},{"author":{"id":1612910,"avatar":"https://static001.geekbang.org/account/avatar/00/18/9c/6e/01b4d5d2.jpg","nickname":"liupan","note":"","ucode":"C6C7C48BCCAE12","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332211,"discussion_content":"虚拟钱包的余额只是用于记账和显示，实际应该都是公共账户与用户，商家的钱发生转账","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607094662,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1249981,"avatar":"https://static001.geekbang.org/account/avatar/00/13/12/bd/54987d4b.jpg","nickname":"vince","note":"","ucode":"90DC7EA30D34B2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":79171,"discussion_content":"+1，我也一开始觉得奇怪了。然后个人观点是：只有充值和提现涉及到公共银行卡和用户银行卡之间的操作。转账步骤应该仅仅是虚拟钱包之间的操作。(转账也可能老师考虑的是从A用户虚拟钱包直接转到了B用户的银行卡中，这操作有点迷...)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576064823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1507189,"avatar":"https://static001.geekbang.org/account/avatar/00/16/ff/75/9c1b2ece.jpg","nickname":"wind","note":"","ucode":"5EC77AEB18130E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":73982,"discussion_content":"我看的时候误解商家虚拟钱包是不同的系统。同意你的说法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575619393,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1325816,"avatar":"https://static001.geekbang.org/account/avatar/00/14/3a/f8/c1a939e7.jpg","nickname":"君哥聊技术","note":"","ucode":"2C9A22BCE4C79E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":73083,"discussion_content":"不应该吧，虚拟钱包和银行卡相当于是两套帐啊\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575552226,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1132661,"avatar":"https://static001.geekbang.org/account/avatar/00/11/48/75/02b4366a.jpg","nickname":"乘坐Tornado的线程魔法师","note":"","ucode":"C4C9915866E769","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":69898,"discussion_content":"同意。另一个办法就是直接从应用公共账户转账到商家账户。但是不给商家加虚拟钱包余额。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575300707,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1109940,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ef/b4/61fb4dba.jpg","nickname":"胡家鹏","note":"","ucode":"1636F84062948B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":69449,"discussion_content":"同意","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575288426,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1236484,"avatar":"https://static001.geekbang.org/account/avatar/00/12/de/04/a597d056.jpg","nickname":"蓝心","note":"","ucode":"2230EB2DEB6DF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66871,"discussion_content":"同意","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575113263,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157929,"user_name":"邹佳敏","can_delete":false,"product_type":"c1","uid":1328215,"ip_address":"","ucode":"377E2194CE6E64","user_header":"https://static001.geekbang.org/account/avatar/00/14/44/57/b0f3eeb5.jpg","comment_is_top":false,"comment_ctime":1575284138,"is_pvip":false,"replies":[{"id":"60711","content":"是有这个问题 我改下 ","user_name":"作者回复","comment_id":157929,"uid":"1190123","ip_address":"","utype":1,"ctime":1575428793,"user_name_real":"王争"}],"discussion_count":18,"race_medal":0,"score":"113244433834","product_id":100039001,"comment_content":"看了一圈评论，好像没有人和我有同样的疑惑？ <br>争哥说了很多交易流水表的设计，明明已经详细介绍了字段冗余的表1要明显优于表2，但为何在虚拟钱包的交易流水表的设计里，使用的又是字段紧凑的表2呢？<br>那么，在底层虚拟钱包的交易流水表里，同样会存在数据不一致的情况呀？A转出被记录下来了，B转入失败。","like_count":26,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476580,"discussion_content":"是有这个问题 我改下 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575428793,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1173894,"avatar":"https://static001.geekbang.org/account/avatar/00/11/e9/86/d34800a4.jpg","nickname":"heyman","note":"","ucode":"92EF9EF1B1B1B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":210858,"discussion_content":"假如发起一次站内转账，A转账给B。按照文章里的设计，能保证金额数据一致性，但是只有一笔帐单。如果A和B都需要看到这一笔转账记录，这要怎么设计呢？有人来讨论一下吗？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1584783930,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1064149,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/2PtNr4sjKLYNnibicnwWcZicmQbTguUK9ZaCVBLYmiaSYFRjRrUP08jHO9N7KB2adDw87ywccexMJh8yCQ84q5gEzg/132","nickname":"阿固","note":"","ucode":"F16B99FED58993","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1173894,"avatar":"https://static001.geekbang.org/account/avatar/00/11/e9/86/d34800a4.jpg","nickname":"heyman","note":"","ucode":"92EF9EF1B1B1B3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":264895,"discussion_content":"AND（fromWalletId = walletId OR toWalletId = walletId）这样收付帐户都能查到这条记录，如果要分类再加 AND type = ?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589356611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":210858,"ip_address":""},"score":264895,"extra":""}]},{"author":{"id":1266233,"avatar":"https://static001.geekbang.org/account/avatar/00/13/52/39/2211b1a2.jpg","nickname":"Z-ll","note":"","ucode":"68A75A53D1455E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":87204,"discussion_content":"我也想问，目前的是改过的吗？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576652273,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1283998,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/9e/bea3530a.jpg","nickname":"︶ㄣж孤月☆┑oоО","note":"","ucode":"B0518642880348","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":72765,"discussion_content":"虚拟钱包的交易流水表  改好了吗？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575525562,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1282715,"avatar":"https://static001.geekbang.org/account/avatar/00/13/92/9b/65f98192.jpg","nickname":"Wh1","note":"","ucode":"6D28506B99A285","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1283998,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/9e/bea3530a.jpg","nickname":"︶ㄣж孤月☆┑oоО","note":"","ucode":"B0518642880348","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":193602,"discussion_content":"并没有","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583158413,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":72765,"ip_address":""},"score":193602,"extra":""}]},{"author":{"id":1098720,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c3/e0/3db22579.jpg","nickname":"技术骨干","note":"","ucode":"8FCF8DE6D29201","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544246,"discussion_content":"现在是已经删除表1了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641448357,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2339329,"avatar":"https://static001.geekbang.org/account/avatar/00/23/b2/01/c6ecebb6.jpg","nickname":"Hyzwh","note":"","ucode":"6F30C77F8E5B1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392361,"discussion_content":"看他怎么耍就好了，不一定全是对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630981904,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1537865,"avatar":"https://static001.geekbang.org/account/avatar/00/17/77/49/445eea2d.jpg","nickname":"SochiLee","note":"","ucode":"47596594EDF4D7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":353682,"discussion_content":"好像作者修改的结果是：两种表设计方案比较和实现最终一致性的部分直接被删除了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615189108,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1202465,"avatar":"https://static001.geekbang.org/account/avatar/00/12/59/21/d2efde18.jpg","nickname":"布凡","note":"","ucode":"346FCD332F8BFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1537865,"avatar":"https://static001.geekbang.org/account/avatar/00/17/77/49/445eea2d.jpg","nickname":"SochiLee","note":"","ucode":"47596594EDF4D7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371227,"discussion_content":"没有看到之前的方案，好像现在意思表达还比较直观","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619688322,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":353682,"ip_address":""},"score":371227,"extra":""}]},{"author":{"id":1031734,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/be/36/abb7bfe3.jpg","nickname":"xenoblade3","note":"","ucode":"620DD0491EEFF3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":263124,"discussion_content":"我也有这个疑问，这里的repository命名为transaction，那看来就是要把上层流水和底层虚拟钱包流水做原子操作，即便底层增加一种类型表示转账，那也不是存储一条记录，涉及之前说的分布式事务问题。还有先记录流水，打上未执行完标志，对钱包账号进行操作，如果钱包操作失败抛出异常，这时候已经成功的钱包操作的数据库记录回滚也会有分布式事务问题？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589176082,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1087243,"avatar":"https://static001.geekbang.org/account/avatar/00/10/97/0b/a943bcb3.jpg","nickname":"zhou","note":"","ucode":"E1CE8575B3F106","race_medal":3,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":257737,"discussion_content":"嗯，感觉这个有点自相矛盾了，希望争哥尽快修复","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588602430,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1239462,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e9/a6/69907ec1.jpg","nickname":"李伟","note":"","ucode":"F0EF60EB250B20","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":231995,"discussion_content":"其实这个问题不影响观感，在代码里可以体现from...和to...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586844607,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005381,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/45/c418ea5c.jpg","nickname":"指尖流逝","note":"","ucode":"417009F674FAF1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":208724,"discussion_content":"我也有这个疑问，目前的图好像还没改？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584578294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1272492,"avatar":"https://static001.geekbang.org/account/avatar/00/13/6a/ac/e9e2e880.jpg","nickname":"ろろ💫","note":"","ucode":"7E683E8DE17B6D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":204722,"discussion_content":"如果这里要改的话，虚拟钱包交易流水应该怎么改呢？把一个虚拟钱包账号改成入账钱包账号和出账钱包账号吗？这样的话算不算底层虚拟钱包感知到了交易类型呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584200737,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1023980,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/9f/ec/97c0f68c.jpg","nickname":"所长是我小李","note":"","ucode":"0764C0BDC710F6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":193693,"discussion_content":"从这一节开始凌乱","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583160205,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1063308,"avatar":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","nickname":"小乙哥","note":"","ucode":"C77E79BEA0C325","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":116144,"discussion_content":"我和你一样有种断层感，前后对应的不紧凑。不过，关于贫血、充血模型的思考还是很有启发的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578055010,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1730626,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJvm1JYIDcS74s4cEYxA1PXMqjortVXEjUKyGQcPvibNJ4EAuksIa6uoHgr6G1yRqAM2KtP3yicKgTA/132","nickname":"小妖","note":"","ucode":"49C01DBFADF101","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":87365,"discussion_content":"我也有疑问，看到那个地方的表设计当时就蒙圈了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576664481,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156800,"user_name":"丿淡忘","can_delete":false,"product_type":"c1","uid":1139645,"ip_address":"","ucode":"604AE01961A026","user_header":"https://static001.geekbang.org/account/avatar/00/11/63/bd/80f587ad.jpg","comment_is_top":false,"comment_ctime":1574959804,"is_pvip":false,"discussion_count":9,"race_medal":1,"score":"96064240316","product_id":100039001,"comment_content":"这两天一直在思考ddd，就等课程更新，这样一说就理解了，domain模型使用充血模型设计，使之具备独立性，而业务无关的vo，po就可以使用贫血模型进行设计，因为不涉及具体复杂业务，如果control层需要调用多个领域模型，则把相关的领域服务组合在一起，这里有个小问题，就是do转为dto这个过程，应该是在应用层完成还是领域层完成，如果在应用层完成，好像属于把领域模型暴露出去了，希望老师可以在指点一下","like_count":22,"discussions":[{"author":{"id":1119593,"avatar":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","nickname":"南山","note":"","ucode":"94656FE4A6C378","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":67268,"discussion_content":"个人理解是可以在应用层有对应的assember，由他来做do和dto之间的转换，do可以在领域服务内部完善其他不需要暴露出去的信息，进一步执行业务逻辑，再由assember 转成dto给到用户接口层","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1575126019,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1738326,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","nickname":"守拙","note":"","ucode":"F594B2DA3F6D4F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65667,"discussion_content":"这里有个小问题，就是do转为dto这个过程，应该是在应用层完成还是领域层完成\n\n这里应该是po(persist object) --> bo(business object)的过程吧,个人认为应该放在应用层完成,Domain层仅专注自身业务.","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575019501,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1139645,"avatar":"https://static001.geekbang.org/account/avatar/00/11/63/bd/80f587ad.jpg","nickname":"丿淡忘","note":"","ucode":"604AE01961A026","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":1738326,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","nickname":"守拙","note":"","ucode":"F594B2DA3F6D4F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66518,"discussion_content":"。。。ddd里面没有bo  领域模型  po和do的的转换是在领域服务里面实现，这样保证了do的解耦可移植性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575080683,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":65667,"ip_address":""},"score":66518,"extra":""},{"author":{"id":1236163,"avatar":"https://static001.geekbang.org/account/avatar/00/12/dc/c3/e4ba51d5.jpg","nickname":"Flash","note":"","ucode":"E285075C9E0B02","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1139645,"avatar":"https://static001.geekbang.org/account/avatar/00/11/63/bd/80f587ad.jpg","nickname":"丿淡忘","note":"","ucode":"604AE01961A026","race_medal":1,"user_type":1,"is_pvip":false},"discussion":{"id":72466,"discussion_content":"意思是do和po转换放在do里面吗？那do也只是说跟service多解耦了一个covert函数，do还要依赖po，这样做有必要吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575475762,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":66518,"ip_address":""},"score":72466,"extra":""},{"author":{"id":1139645,"avatar":"https://static001.geekbang.org/account/avatar/00/11/63/bd/80f587ad.jpg","nickname":"丿淡忘","note":"","ucode":"604AE01961A026","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":1236163,"avatar":"https://static001.geekbang.org/account/avatar/00/12/dc/c3/e4ba51d5.jpg","nickname":"Flash","note":"","ucode":"E285075C9E0B02","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":72525,"discussion_content":"不是呀，在domainservice转换，domain model 是独立的 处理自身业务","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575500989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":72466,"ip_address":""},"score":72525,"extra":""}]},{"author":{"id":1620113,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b8/91/8a5c3ec6.jpg","nickname":"王一之","note":"","ucode":"7E13332BAEC2F8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":72685,"discussion_content":"这里重点应该是充血模型","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575515705,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1077406,"avatar":"https://static001.geekbang.org/account/avatar/00/10/70/9e/5095f881.jpg","nickname":"jaryoung","note":"","ucode":"6E72D107DB7E51","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":68976,"discussion_content":"ddd课程也不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575249190,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1139645,"avatar":"https://static001.geekbang.org/account/avatar/00/11/63/bd/80f587ad.jpg","nickname":"丿淡忘","note":"","ucode":"604AE01961A026","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":1077406,"avatar":"https://static001.geekbang.org/account/avatar/00/10/70/9e/5095f881.jpg","nickname":"jaryoung","note":"","ucode":"6E72D107DB7E51","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70491,"discussion_content":"不瞒你说  我也看了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575361713,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":68976,"ip_address":""},"score":70491,"extra":""}]},{"author":{"id":1746026,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJgXIicettSIeIDpL2zt39Zb0fdBwOlibdia5AjWITYQZCWPGDPdFKKe9UiahgROkAyoES7niaobZatvQA/132","nickname":"乐观的鹏程","note":"","ucode":"FA527FA2C4204B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65532,"discussion_content":"同希望老师指点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575009761,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157382,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1119593,"ip_address":"","ucode":"94656FE4A6C378","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","comment_is_top":false,"comment_ctime":1575126725,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"83179505349","product_id":100039001,"comment_content":"DDD真正的价值在于战略设计，对业务模型到领域模型的建模时需要重点关注的有哪些，比如确定核心服务（核心域、通用域、支撑域）、微服务边界（领域、子域）、领域边界（限界上下文），功能归类（聚合）等等。而战略设计最终的目的仍然是说过来说过去的那些，高内聚、低耦合、面向对象设计、职责单一、易扩展、易维护、易拆分、易演进。<br>DDD战术设计是一种实施的方法论，但是因为他是看的见、摸得着（有真正所谓的代码结构可以参考）的，吸引了更多的关注点，如果没有背后的战略设计的思想，生搬硬套，甚至可能会适得其反。<br>DDD最重要的还是设计思想，也就是战略设计，而不是他的模式或者分层方式，也就是战术设计！","like_count":19},{"had_liked":false,"id":156821,"user_name":"Cy23","can_delete":false,"product_type":"c1","uid":1591293,"ip_address":"","ucode":"8DC561C5151758","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/fd/895f0c27.jpg","comment_is_top":false,"comment_ctime":1574984164,"is_pvip":false,"discussion_count":16,"race_medal":0,"score":"74589428196","product_id":100039001,"comment_content":"听完一遍，看来我需要在听一遍，php视乎要理解JAVA的有点差异啊","like_count":17,"discussions":[{"author":{"id":1131687,"avatar":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","nickname":"啦啦啦","note":"","ucode":"6B12EC90A62525","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65389,"discussion_content":"我也是这种感觉,我们项目只有controller,model,repository，业务逻辑写在repository里面，好像没有bo,vo这些\n\n","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1574999628,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1190718,"avatar":"https://static001.geekbang.org/account/avatar/00/12/2b/3e/7ef8f24c.jpg","nickname":"howdyli","note":"","ucode":"DD949639D29F5E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":71362,"discussion_content":"获益匪浅，打通二脉的感觉。看了很多书籍，一直没有理解DDD。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1575416413,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1286435,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a1/23/2b527dc4.jpg","nickname":"逐风随想","note":"","ucode":"A91C191EE82FCA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":158939,"discussion_content":"作者回复： 设计模式落实到具体的编程语言代码实现的时候，必然有个适配的过程，没法保证每种语言的实现思路都一模一样。Java是一种静态语言，那一些设计模式实现从Java搬到静态语言，比如C# C++是相对比较容易的，但是搬到动态语言，比如PHP，可能就要做些调整。同理，面向过程、面向对象、函数式编程中，设计模式也都有不同的实现方式。\n编程语言有自成一体的设计，会阉割掉很多它觉得不重要的语法，加强它看重的语法，这就导致有些设计思想、原则、模式，并不能很容易地在这种语言下实现。\nPHP更多的偏向网站开发，而且像facebook 用php可能更偏向于网站后端中的前端部分的开发。从应用场景上来说 可能面向过程更合适些，而设计模式的应用场景更多的是面向对象的设计，这也是为什么 《设计模式》一书的副标题提到面向对象的原因。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1580640936,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1254875,"avatar":"https://static001.geekbang.org/account/avatar/00/13/25/db/7c71ef4b.jpg","nickname":"青阳魂","note":"","ucode":"4F04ADAB6D870A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66665,"discussion_content":"其实没有的 php可以看看yii2和Laravel的源码 会看到完全两种不同的设计模式","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575096382,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1859572,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/5f/f4/811c8d6f.jpg","nickname":"绝版小饭团","note":"","ucode":"B24813D98B49EC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580690,"discussion_content":"如果你用laravel或者hyperf就容易多了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658320032,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1905357,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/12/cd/55e25527.jpg","nickname":"咕咕噜噜","note":"","ucode":"E9045BF11FAB7C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":213932,"discussion_content":"因为php一个array就搞定了，没有那么多条条框框","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585135439,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1193298,"avatar":"https://static001.geekbang.org/account/avatar/00/12/35/52/bc63d1ef.jpg","nickname":"nick","note":"","ucode":"12A522100DE574","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91386,"discussion_content":"同感。。phper","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576831280,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1173894,"avatar":"https://static001.geekbang.org/account/avatar/00/11/e9/86/d34800a4.jpg","nickname":"heyman","note":"","ucode":"92EF9EF1B1B1B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66715,"discussion_content":"同感，我是用Thinkphp的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575100888,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1134761,"avatar":"https://static001.geekbang.org/account/avatar/00/11/50/a9/3f8c7418.jpg","nickname":"冰糕不冰","note":"","ucode":"B754FE464BA426","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66654,"discussion_content":"其实php和java语法比较相似。gokang才是完全不一样的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575095284,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65513,"discussion_content":"哈哈，Java稍微了解下，对这门课的学习会有帮助的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575008283,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1322880,"avatar":"","nickname":"小畅","note":"","ucode":"D031CC07CD564E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65490,"discussion_content":"手机上看代码都一脸懵逼 只能到打开电脑端看了 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575006008,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1131687,"avatar":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","nickname":"啦啦啦","note":"","ucode":"6B12EC90A62525","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65392,"discussion_content":"https://www.cnblogs.com/lyjin/p/6389349.html可以看下这个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574999830,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1591293,"avatar":"https://static001.geekbang.org/account/avatar/00/18/47/fd/895f0c27.jpg","nickname":"Cy23","note":"","ucode":"8DC561C5151758","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1131687,"avatar":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","nickname":"啦啦啦","note":"","ucode":"6B12EC90A62525","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":67341,"discussion_content":"谢啦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575127451,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":65392,"ip_address":""},"score":67341,"extra":""}]},{"author":{"id":1370705,"avatar":"https://static001.geekbang.org/account/avatar/00/14/ea/51/9132e9cc.jpg","nickname":"土豆哪里挖","note":"","ucode":"F27B3BA0477050","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65280,"discussion_content":"看到上篇的 bo vo的时候 一脸蒙蔽。。。phper太难了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574993082,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1370705,"avatar":"https://static001.geekbang.org/account/avatar/00/14/ea/51/9132e9cc.jpg","nickname":"土豆哪里挖","note":"","ucode":"F27B3BA0477050","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":74889,"discussion_content":"同是一脸懵逼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575702305,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":65280,"ip_address":""},"score":74889,"extra":""}]},{"author":{"id":1245531,"avatar":"https://static001.geekbang.org/account/avatar/00/13/01/5b/56e4d28e.jpg","nickname":"愿星～","note":"","ucode":"92F6C85CCEB2BA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65236,"discussion_content":"我也是这种感觉\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574990710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159332,"user_name":"随机的","can_delete":false,"product_type":"c1","uid":1194535,"ip_address":"","ucode":"D8319136F27CBA","user_header":"https://static001.geekbang.org/account/avatar/00/12/3a/27/6bb0bb01.jpg","comment_is_top":false,"comment_ctime":1575600610,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"57410175458","product_id":100039001,"comment_content":"请教一下老师，以及各位同学，销售单、进货单、调拨单、入库单、出库单之类的单据类型是否适合使用ddd，单据的操作一般是新增编辑删除，还有状态的变化，以最复杂的调拨单为例，调拨单有新增、编辑、删除、查找操作，还有状态操作，比如从草稿到待审核，待审核到已审核，待审核到拒绝，审核通过之后还要在出库仓库生成待发货的出库单，入库仓库生成待收货的入库单，出库单入库单又有各自的状态操作，出库单确认发货，出库单变成已发货状态，同步修改调拨单和入库单的状态为已发货，入库仓库收到货，确认收货后，入库单变成已收货，同步修改调拨单和出库单的状态为已收货，这已经是简化的流程，我当前的实现中还涉及到仓库与总部的结算，仓库部分发货，部分收货等操作，结算还支持部分结算，就更复杂了，这种情况下，适合使用ddd吗？若适合，该怎么使用，仿照老师虚拟钱包的例子，实在不知从何下手，ddd不是更适合复杂操作吗，这里该如何应用ddd呢？求指教，感激不尽。","like_count":13,"discussions":[{"author":{"id":1002849,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4d/61/48b65197.jpg","nickname":"菡萏如佳人","note":"","ucode":"8DC3B29C9D2049","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":200933,"discussion_content":"从你的单据名称可以猜到你的系统差不多应该是个ERP系统，ERP系统业务逻辑较复杂，不同的企业还存在一些差异，所以使用DDD是合适的。你所说的DDD更适合复杂操作，其实是不准确的，DDD不能降低复杂度，只是更能让你控制好复杂度。课程的例子只是一个充血和贫血的例子，和DDD全貌其实还相差很远。你提的问题不是三言两语说的清的哈，建议待你更进一步理解了DDD后应该能提出更加具体的问题，这样大家可能也更好回答你了。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1583743278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1247039,"avatar":"https://static001.geekbang.org/account/avatar/00/13/07/3f/53ae01f6.jpg","nickname":"Kevin.zhang🌏","note":"","ucode":"5C52AE51538906","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":212442,"discussion_content":"不管多复杂，把握一个核心：业务逻辑独立出来作为一个对象群，与数据库、界面、服务接口解耦。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1584972137,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1087243,"avatar":"https://static001.geekbang.org/account/avatar/00/10/97/0b/a943bcb3.jpg","nickname":"zhou","note":"","ucode":"E1CE8575B3F106","race_medal":3,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":257744,"discussion_content":"其实充血模型说白了，就是将你对象应用的属性和方法 放在domain中去做，而不是service","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1588602689,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1202465,"avatar":"https://static001.geekbang.org/account/avatar/00/12/59/21/d2efde18.jpg","nickname":"布凡","note":"","ucode":"346FCD332F8BFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371228,"discussion_content":"我思考的是这个是不是可以分为以库存为核心的库存域，对应出入库，和已财务为核心的资金域。有机会希望可以深入讨论","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619688611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1640974,"avatar":"","nickname":"大风","note":"","ucode":"583873CCAA2A67","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":359612,"discussion_content":"我增试图这样按域划分：核心域：销售。支撑域：客户域、价格域，物流域。通用域：商品类别、商品档案、仓库信息、人员信息 。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616240460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156921,"user_name":"pines","can_delete":false,"product_type":"c1","uid":1200708,"ip_address":"","ucode":"7B925605B36B4E","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/44/de7f2b98.jpg","comment_is_top":false,"comment_ctime":1574995909,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"57409570757","product_id":100039001,"comment_content":"在我看来，Repository与Domian都是service的底层。Repository复杂数据的存储，Domian负责业务逻辑，service将两者融合。","like_count":13,"discussions":[{"author":{"id":1999235,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/81/83/f93b1e62.jpg","nickname":"peaceForce","note":"","ucode":"98A318930DDC9A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374760,"discussion_content":"言简意赅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621337660,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1033096,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c3/88/d16816a8.jpg","nickname":"如来神掌","note":"","ucode":"45E20FF935BD2F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277165,"discussion_content":"嗯，我也这么理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591011177,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156936,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1574998369,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"48819638625","product_id":100039001,"comment_content":"十个项目九个挂，做为一个瘦子，先从贫血开干，等项目有奔头了，吃成胖子后再充血:)","like_count":11},{"had_liked":false,"id":156916,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1574995288,"is_pvip":false,"replies":[{"id":"60240","content":"完整案例代码可能就太多了","user_name":"作者回复","comment_id":156916,"uid":"1190123","ip_address":"","utype":1,"ctime":1575015681,"user_name_real":"王争"}],"discussion_count":9,"race_medal":0,"score":"44524668248","product_id":100039001,"comment_content":"还有一点，期待老师实现一个完整的案例的代码以供我们参考琢磨。","like_count":10,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476268,"discussion_content":"完整案例代码可能就太多了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575015681,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1314724,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0f/a4/0b49469f.jpg","nickname":"木子00","note":"","ucode":"8F78CA722EB29B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":80012,"discussion_content":"代码可以不全，希望注释多一点。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576137086,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2833619,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/3c/d3/fab9d588.jpg","nickname":"探雪","note":"","ucode":"2332650D9C8D54","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530719,"discussion_content":"+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637133862,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1988170,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/3giaicn2VaDJicDD7WnaT9mB5VbaF6J7aQszN4W9BVmSWmKoVFxTuN7iaDDgrKhlFp49k1iacvjMYSH3eejVbaH0Vhw/132","nickname":"sam","note":"","ucode":"D9DFFABC941E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293161,"discussion_content":"完整代码+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595466350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1145168,"avatar":"https://static001.geekbang.org/account/avatar/00/11/79/50/93f85cd6.jpg","nickname":"燎沉香","note":"","ucode":"4CA5403FFF3489","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":229154,"discussion_content":"十1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586612681,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1312130,"avatar":"https://static001.geekbang.org/account/avatar/00/14/05/82/51cd0a50.jpg","nickname":"zhimin","note":"","ucode":"DF6DFBEF6FA297","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":109487,"discussion_content":"+1 对于非java的同学来说，理解起来有点吃力","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577697367,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1018061,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/cd/2c3808ce.jpg","nickname":"Yangjing","note":"","ucode":"D88DFD4958D07C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":107467,"discussion_content":"+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577583006,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1132661,"avatar":"https://static001.geekbang.org/account/avatar/00/11/48/75/02b4366a.jpg","nickname":"乘坐Tornado的线程魔法师","note":"","ucode":"C4C9915866E769","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":69899,"discussion_content":"+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575300716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1049741,"avatar":"https://static001.geekbang.org/account/avatar/00/10/04/8d/005c2ff3.jpg","nickname":"weineel","note":"","ucode":"6DC6EF4F256A53","race_medal":2,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65374,"discussion_content":"+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574998732,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156867,"user_name":"何妨","can_delete":false,"product_type":"c1","uid":1385377,"ip_address":"","ucode":"EC3983BFF7992A","user_header":"https://static001.geekbang.org/account/avatar/00/15/23/a1/b08f3ee7.jpg","comment_is_top":false,"comment_ctime":1574990036,"is_pvip":false,"discussion_count":7,"race_medal":0,"score":"40229695700","product_id":100039001,"comment_content":"看了老师的这篇文章让我对 entity，bo，vo有了一个更清晰的认识。我是这样理解的，entity是对数据库的映射，vo 是前端展示的映射，bo 在 DDD 充血模型中我看到了他的用处，看起来他是将 entity 的一些逻辑业务分离了出来做了一个解耦（在我看来貌似没有 bo 或者说 Domain 类似 加余额减余额的逻辑也可以写在 entity 中，只是这样做对于专注于数据库的 entity 来说逻辑更复杂了，维护起来会很困难 ），同时也解决了 entity 暴露过多 getter setter 方法的问题。不知道我这样理解有没有问题，欢迎老师指正。<br><br>同时我有如下几个疑问:<br>1.具体上 domain 和 entity 属性和结构上有哪些不同呢？（在我看来好像能写成一样的）<br>2.在贫血模型下 bo 的作用好像没有那么明显了，多写一层 bo 能给我们带来什么好处呢？<br>3. entity bo vo 类属性上好像有很多重合，貌似在实际编写的过程会出现很多重复代码，并且要为每一层编写转换代码，代码量好像又增加了，对于这种情况应该怎么优化和权衡呢？<br>","like_count":9,"discussions":[{"author":{"id":1698258,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIx7FdRzUuQf4Fopr7DOXEHZyCFfH4GQViaqo7bymf1qaANcOvuEhHyTNwOOUFW7psxEeSQ5k9uXWw/132","nickname":"阿顺","note":"","ucode":"36F2AD6F980B11","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65431,"discussion_content":"1.这点文中已经有解释了，domain是数据与业务逻辑结合，遵循单一职责，entity本身只作为数据结构存在\n2.个人理解：entity（对数据建模）、bo（对业务建模）、vo（对前端/功能建模）\n3.重合度可能有以下原因：业务系统功能简单或者是建模没建好；如果只有entity，会导致service层和controller层十分臃肿\n\n个人理解：\n要理解DDD，就要跳出来去理解一个业务系统，站在如果是你应该如何去设计这个系统的角度去思考这个问题，而不是针对某一个具体的功能去比较贫血和充血模型的利弊。如果针对一个具体的功能来考虑问题，甚至可以得出直接用一个hashmap就能解决问题了的结论，连entity、bo、vo都可不需要。但如果从整体可维护性、可扩展性考虑，bo应该是作为最稳定的一层业务模型，vo会随着功能性需求变化而变化，应该说成dto会更好理解。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1575002645,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1385377,"avatar":"https://static001.geekbang.org/account/avatar/00/15/23/a1/b08f3ee7.jpg","nickname":"何妨","note":"","ucode":"EC3983BFF7992A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1698258,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIx7FdRzUuQf4Fopr7DOXEHZyCFfH4GQViaqo7bymf1qaANcOvuEhHyTNwOOUFW7psxEeSQ5k9uXWw/132","nickname":"阿顺","note":"","ucode":"36F2AD6F980B11","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65448,"discussion_content":"感谢回答,这个我平常开发确实是没有用到 bo,vo的，所以对其中的细节不是很理解，感觉这边给出的解释没有回答到我疑问的点上，大的概念我都理解，但我还是想了解到具体细节上吧，毕竟这些落实到代码上才有意义。仍然感谢回答【抱拳】","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575003486,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":65431,"ip_address":""},"score":65448,"extra":""}]},{"author":{"id":1922242,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/54/c2/17512f7a.jpg","nickname":"banxiaobu","note":"","ucode":"0FC00E5E90ACB8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":213287,"discussion_content":"在我个人开发经历感觉来看，在传统MVC开发模式下，这些各种POJO的诞生，也就是为了承担不同场景的数据传输所需所用。正如第三点你提到的，属性上确实有很多重合，但是针对不同场景需求，比如在表示层（VO/DTO）为了将数据传输到前端页面，可能很多，比如在Java中，一些基本类型都会附加相关的字符串类型的属性，比如日期，与之会对应一个字符串类型的日期。这样更便于传输到前端页面（虽然现在有些前端框架也封装了对一些基础类型的自动解析的操作）。Entity层，主要跟数据库相关，通常也就是一一对应就是了。BO嘛，按具体的业务场景，自然也会衍生出些许差异。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1585062694,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1084993,"avatar":"https://static001.geekbang.org/account/avatar/00/10/8e/41/709e9677.jpg","nickname":"袁帅","note":"","ucode":"A71A89B9F1BD69","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65396,"discussion_content":"第三点我也很困惑","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575000037,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1013317,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/76/45/abb7bfe3.jpg","nickname":"张金魁","note":"","ucode":"40343172910342","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586719,"discussion_content":"①domain 和 entity 可以合二为一，这样少了一层转换（层与层之间的dto 转化， 可以使用mapstruct）；\n②Domain 这里不允许对属性进行set（类上标注lombok注解@Setter(AccessLevel.PRIVATE)），不过继承的 BaseModel 允许set，方便赋值登录人、创建时间，修改时间等。\n③想要直接使用 mybatis-plus，需要排除非表映射字段，DDD模式下，不建议使用mybatis-plus；\n\n\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662458244,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1305227,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ea/8b/5fe54e19.jpg","nickname":"包包爸爸","note":"","ucode":"EBBB1663B41650","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":258451,"discussion_content":"实体其实不能这么简单的认为等同于数据库持久化的bean，在DDD里，实体不仅是持久化，更重要的是生命周期，是一个客观存在的唯一的东西","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588688017,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1053921,"avatar":"https://static001.geekbang.org/account/avatar/00/10/14/e1/ee5705a2.jpg","nickname":"Zend","note":"","ucode":"80EBB0B6772E27","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66554,"discussion_content":"我理解是在写代码的初期，就应该规划好bo类，把一些共性的业务提取出来，如果说没共性业务方法的话，那bo 也没有实际价值。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575084278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163008,"user_name":"斜杠青年","can_delete":false,"product_type":"c1","uid":1177739,"ip_address":"","ucode":"D7AF02B8588549","user_header":"https://static001.geekbang.org/account/avatar/00/11/f8/8b/74d2ab6b.jpg","comment_is_top":false,"comment_ctime":1576639488,"is_pvip":true,"replies":[{"id":"62270","content":"如果你用orm框架持久化 必须有get set 那就要妥协 ","user_name":"作者回复","comment_id":163008,"uid":"1190123","ip_address":"","utype":1,"ctime":1576797724,"user_name_real":"王争"}],"discussion_count":5,"race_medal":1,"score":"35936377856","product_id":100039001,"comment_content":"有一个人问题不太懂 数据持久的话 没有set get方法 如何进行持久化？","like_count":8,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478212,"discussion_content":"如果你用orm框架持久化 必须有get set 那就要妥协 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576797724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1651664,"avatar":"https://static001.geekbang.org/account/avatar/00/19/33/d0/962ebe2e.jpg","nickname":"Buring","note":"","ucode":"0AAEA64C63C2F6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":191350,"discussion_content":"好吧，纠结半天原来还是要妥协。。。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1582990833,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1042354,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e7/b2/334bc992.jpg","nickname":"AlfredLover","note":"","ucode":"A3A998F362CC37","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1651664,"avatar":"https://static001.geekbang.org/account/avatar/00/19/33/d0/962ebe2e.jpg","nickname":"Buring","note":"","ucode":"0AAEA64C63C2F6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":219842,"discussion_content":"哈哈，原来大家都纠结了半天...","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585816572,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":191350,"ip_address":""},"score":219842,"extra":""}]},{"author":{"id":1439301,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/rMgAbbKiasa1qR35ht0GEfwsHXbusPZAe9JFgicDgVRy8vQET2hypuDgwtHoPVU23RUoMdK7qA7gibMlTExpYibtbw/132","nickname":"YsnowLove","note":"","ucode":"70433D98592481","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":275477,"discussion_content":"Spring Data jpa 不需要set get方法也是可以把数据存储到数据库的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590719511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1528931,"avatar":"https://static001.geekbang.org/account/avatar/00/17/54/63/3a3f7d4c.jpg","nickname":"Giraffe","note":"","ucode":"2F272FFD6CD0CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":184147,"discussion_content":"原来是这样，我还在纠结怎么convert","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582548234,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158438,"user_name":"lmdcx","can_delete":false,"product_type":"c1","uid":1334409,"ip_address":"","ucode":"F2CDD0091ADFD7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIjRETqRjvLESLDZkNTjIiaSibtNYBaS1o8WMUicOFn3ycF3Mgh6LRJibqSBjVBjiaO2ibW0gHkafATb21A/132","comment_is_top":false,"comment_ctime":1575370536,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27345174312","product_id":100039001,"comment_content":"总结（直接忽略案例）：<br>* 充血模型把业务逻辑放到 Domain 中处理，满足了 OOP 的规则，数据和行为封装为一体。  <br>  类似于 CPU 主管计算，而对于数据转换之类的工作不应该交由 Domain 去做。  <br>* 把外围事务交给 Service 管理，比如接口传入的数据封装，底层数据库数据的读写，就好像 CPU 从来不关心 IO 的差异；比如把日志和消息幂等性等工作交给 Service 处理，CPU 也从来不负责监控和容错。  <br>自己的感受：  <br>这种业务相关性和业务无关性的分离，其实就是遵循了高内聚、低耦合，保证了业务和框架的独立性和重用性。  <br><br>问题：<br>* 无论 vo 还是 Entity 在我看来都是 dto ，这么多dto会不会导致类爆炸？  <br>  大概4、5年前，我用过两天 aws 的 sdk ，我记得所有的接口都会有对应的 dto ，所以这种类爆炸是必要的类爆炸，还是也是要自己权衡？  <br>  类似关联查询返回的结果也算是 Entity 吧，Entity 未必和表一一对应吧（额，感觉不应该在这章提问）？  <br><br>其他：<br>* 有人想要完整代码，我觉得没有太大必要，因为代码是示意代码，并非正式项目代码。  <br>  而且课程目标不是要做出一个完整小项目，实战往往和理论不是一一匹配的，而且需要大量额外工作。  <br>* 如果老师真的打算代码上 github ，那我的建议是用接口和抽象类来完成即可，即便如此我把老师的例子完成也写了14个文件。  <br>  老师还是应该把精力放到刀刃上，如果真的非要完成个小项目，我觉得也可以延迟到栏目结束，这种限时又定量的事，作为非全职讲师一定很难吧。  <br>* 关于问题的回复，我建议对于需要回复的问题，老师可以告知在后续章节会讲到，或者到答疑中统一提问，免得有人觉得回复不及时，而老师的一一回复既耗精力也很难普惠大家。  <br>  当然我也希望评论区功加上评论、提问、点赞几个选项，老师以后可以只看提问类型的留言，或者只看没有人回复的提问。  ","like_count":6},{"had_liked":false,"id":293824,"user_name":"隔壁老李","can_delete":false,"product_type":"c1","uid":2291115,"ip_address":"","ucode":"8E662BD946698A","user_header":"https://static001.geekbang.org/account/avatar/00/22/f5/ab/70d548e4.jpg","comment_is_top":false,"comment_ctime":1621566178,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"23096402658","product_id":100039001,"comment_content":"“这里我再稍微解释一下，之所以让 VirtualWalletService 类与 Repository 打交道，而不是让领域模型 VirtualWallet 与 Repository 打交道，那是因为我们想保持领域模型的独立性，不与任何其他层的代码（Repository 层的代码）或开发框架（比如 Spring、MyBatis）耦合在一起，将流程性的代码逻辑（比如从 DB 中取数据、映射数据）与领域模型的业务逻辑解耦，让领域模型更加可复用”<br>关于这句话，个人有不同的见解；现实中基本上所有的业务逻辑都得操作数据库，我认为实体中的动作与数据库操作是强关联的，实体类应该要操作数据对象。与开发框架进行解耦，可以交给Dao层。实体类访问Dao层，Dao层做数据适配操作持久化数据对象，当开发框架发生变化时，修改Dao层就好了。 按作者给出的架构，当开发框架发生变化后同样还得修改domain Service 。如果后期增加了冻结，透支等功能，它的本质还是去修改数据库，而实体的操作特别简单，修改下自己的属性然后传给外部domain service，domain service进行数据操作，这样的实体行为个人认为是一种伪充血模型。还不如在实体行为中去操作dao层呢，操作dao层就是实体行为之一，这样才算正真的充血。<br>呃呃，字数不够用了","like_count":5,"discussions":[{"author":{"id":1325354,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eodIl6VYOM7kKumgY1fHeq96vJXjWria2sU00b6W2licIftLDIHG3bFJMwUtGpsBcEem5EA44ULXePA/132","nickname":"Aeson","note":"","ucode":"08EF4FC160A472","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556456,"discussion_content":"同感","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647390911,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":274787,"user_name":"吴钩","can_delete":false,"product_type":"c1","uid":2062402,"ip_address":"","ucode":"0EB50E8144BCDE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKOnpl8fRB9r2vED2s8j7Arwbn2K6M6HUBWNjgoqV4uqe94fTGK4WGpOJLeRxXcBXk3dp23eQR0AQ/132","comment_is_top":false,"comment_ctime":1611156111,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"23085992591","product_id":100039001,"comment_content":"好像没看到有人有相同的疑问。贫血模型和充血模型的debit和credit操作，都是没有考虑并发的，需要附加手段保证并发安全。","like_count":5,"discussions":[{"author":{"id":1738238,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/85/fe/9cba131f.jpg","nickname":"crown clown","note":"","ucode":"04A981C89044EA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572363,"discussion_content":"我第一感觉就是不考虑并发，demo也应该是个真实案例吧？记得老师前面说过要用真实案例来着。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652748803,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1033066,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c3/6a/3272e095.jpg","nickname":"李春恒","note":"","ucode":"F2DCA19EC66DC1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541243,"discussion_content":"简单 demo","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640311341,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":270959,"user_name":"山海","can_delete":false,"product_type":"c1","uid":1702117,"ip_address":"","ucode":"77FA9967E58FA3","user_header":"https://static001.geekbang.org/account/avatar/00/19/f8/e5/119d5c15.jpg","comment_is_top":false,"comment_ctime":1609329435,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"23084165915","product_id":100039001,"comment_content":"其实一个在复杂或者简单的系统都可以类比成计算机<br>1. Service  CPU<br>2. Repository 磁盘<br>3. VIEW 显示器<br>4. RPC&#47;三方数据 网卡<br>5. REDIS调用， 内存<br>等等， 这些不同模块的实现可以分别计算机的某一模块， 咱们的代码则是操作系统","like_count":5},{"had_liked":false,"id":157358,"user_name":"旺旺","can_delete":false,"product_type":"c1","uid":1159196,"ip_address":"","ucode":"FE2CF90F446BFB","user_header":"https://static001.geekbang.org/account/avatar/00/11/b0/1c/2e30eeb8.jpg","comment_is_top":false,"comment_ctime":1575120263,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23049956743","product_id":100039001,"comment_content":"对于支付类型的交易，钱包的交易流水记录中的虚拟钱包交易流水ID会有2个吧，一个加钱流水，一个减钱流水。","like_count":5},{"had_liked":false,"id":181038,"user_name":"somenzz","can_delete":false,"product_type":"c1","uid":1187197,"ip_address":"","ucode":"EA59A170DF8910","user_header":"https://static001.geekbang.org/account/avatar/00/12/1d/7d/368df396.jpg","comment_is_top":false,"comment_ctime":1582464642,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18762333826","product_id":100039001,"comment_content":"类比下Django mvc 架构的理解，充血模型就是把原来放在 views 里的业务逻辑，抽像出共性放在 models  中，这样可以少写很多代码，可读性也更高，看下 Models 中的行为，可以了解核心的业务逻辑。不知道说的是否准确，欢迎讨论！","like_count":4},{"had_liked":false,"id":171250,"user_name":"Maurice","can_delete":false,"product_type":"c1","uid":1729796,"ip_address":"","ucode":"A35112AA415C67","user_header":"","comment_is_top":false,"comment_ctime":1578886369,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18758755553","product_id":100039001,"comment_content":"学习了这一章，让我想到《重构：改善既有代码的设计》中的MoveMethod，建议大家可以看这本书，尤其这本书的第一章的demo，里面说的MoveMethod好像说的就是本章所说的知识点。","like_count":4},{"had_liked":false,"id":170928,"user_name":"Citizen Z","can_delete":false,"product_type":"c1","uid":1125104,"ip_address":"","ucode":"9CA547640A8629","user_header":"https://static001.geekbang.org/account/avatar/00/11/2a/f0/41590e10.jpg","comment_is_top":false,"comment_ctime":1578765767,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18758634951","product_id":100039001,"comment_content":"私以为在实践中 Wallet 调用 Repo 会让代码更简洁，老师担忧的与具体框架耦合的问题，可以让模型依赖仓储的抽象，从设计上并没有对模型产生污染，只是需要在利用切面或其他手段对持久层接口进行实现，这样看来虽然是必须依赖某种框架技术才能将整个模型跑起来，但实践中，只要是大规模系统，IoC&#47;AOP 这种东西都是很基础的吧，总不能一个系统全都用 rt.jar 里的东西来实现，所有代码全都是一层层规规矩矩的对象创建和方法调用吧。<br>service（负责编排 domain） -&gt; domain（负责业务逻辑） -&gt; repo（负责持久化），这样的三层单向调用不是更简洁么？<br>我对 DDD 理解不深，不知道这样的看法对不对。","like_count":4},{"had_liked":false,"id":157899,"user_name":"努力的熊","can_delete":false,"product_type":"c1","uid":1504423,"ip_address":"","ucode":"D669AF855D2EF1","user_header":"https://static001.geekbang.org/account/avatar/00/16/f4/a7/1cf57505.jpg","comment_is_top":false,"comment_ctime":1575279427,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18755148611","product_id":100039001,"comment_content":"你们都这么厉害么，我看了一遍没看懂。看了你们的评论，太重要了，吓得我赶紧在研究研究。","like_count":4},{"had_liked":false,"id":156901,"user_name":"weineel","can_delete":false,"product_type":"c1","uid":1049741,"ip_address":"","ucode":"6DC6EF4F256A53","user_header":"https://static001.geekbang.org/account/avatar/00/10/04/8d/005c2ff3.jpg","comment_is_top":false,"comment_ctime":1574993722,"is_pvip":true,"discussion_count":6,"race_medal":2,"score":"18754862906","product_id":100039001,"comment_content":"感谢老师的分享，收获很多，也产生了两个问题：<br><br>问题1：Entity 转换成 Domain 的代码应该在哪一层实现？感觉在 Service 层不大合适，因为可能多个 Service 会使用到。<br>问题2：如果涉及到表单的保存，入参是一个保存全量数据的对象(比如，创建一个新用户的所有用户数据，但部分属性还是要计算得到的，比如年龄等)。这个对象是属于 VO 吗？这时的 Domain 怎么设计呢？数据模型间的转换怎么处理呢？VO-&gt;BO-&gt;Entity 感觉就是在写各种赋值语句啊, 所以我以前在传统开发模式是合并 VO、BO、Entity的，一个大而全的东西也是很尴尬。<br><br>期待老师解答。","like_count":4,"discussions":[{"author":{"id":1048367,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ff/2f/172b942b.jpg","nickname":"扬帆起航","note":"","ucode":"708B686F19B8DE","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":112582,"discussion_content":"可以抽成一个工具类 , 进行泛型转换 .","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577873018,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1033096,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c3/88/d16816a8.jpg","nickname":"如来神掌","note":"","ucode":"45E20FF935BD2F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1048367,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ff/2f/172b942b.jpg","nickname":"扬帆起航","note":"","ucode":"708B686F19B8DE","race_medal":1,"user_type":1,"is_pvip":false},"discussion":{"id":277167,"discussion_content":"对，转换可以抽象出来，可以多处使用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591011696,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":112582,"ip_address":""},"score":277167,"extra":""}]},{"author":{"id":1528931,"avatar":"https://static001.geekbang.org/account/avatar/00/17/54/63/3a3f7d4c.jpg","nickname":"Giraffe","note":"","ucode":"2F272FFD6CD0CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571831,"discussion_content":"你需要一个工厂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652425829,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1538604,"avatar":"https://static001.geekbang.org/account/avatar/00/17/7a/2c/54b48459.jpg","nickname":"Vincent.X","note":"","ucode":"8A40B5B2F4B102","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333198,"discussion_content":"如果domain是读取entity数据创建的话，可以使用构造函数创建domain","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607477400,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1369757,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/7WkTI1IicbKvsPJng5vQh5qlrf1smbfl2zb7icHZfzcAk1k4lr8w8IDEAdrqq1NHW5XZMPXiaa1h7Jn1LGOWOCkIA/132","nickname":"早起不吃虫","note":"","ucode":"13CD3B5E1F9435","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65608,"discussion_content":"entity转domain可以封装在domain中，借助domain中包含业务规则的Set方法进行赋值，保证domain对象的业务规则","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575015408,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1579768,"avatar":"https://static001.geekbang.org/account/avatar/00/18/1a/f8/bd3bc7c3.jpg","nickname":"💜💜奔跑的犀牛🦏🦏","note":"","ucode":"D88334E4875397","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1369757,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/7WkTI1IicbKvsPJng5vQh5qlrf1smbfl2zb7icHZfzcAk1k4lr8w8IDEAdrqq1NHW5XZMPXiaa1h7Jn1LGOWOCkIA/132","nickname":"早起不吃虫","note":"","ucode":"13CD3B5E1F9435","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":158345,"discussion_content":"domain没有set","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1580569193,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":65608,"ip_address":""},"score":158345,"extra":""}]}]},{"had_liked":false,"id":156812,"user_name":"Angus","can_delete":false,"product_type":"c1","uid":1540520,"ip_address":"","ucode":"C336521BD8BA64","user_header":"https://static001.geekbang.org/account/avatar/00/17/81/a8/4b6c61ce.jpg","comment_is_top":false,"comment_ctime":1574965217,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18754834401","product_id":100039001,"comment_content":"我理解的ddd分为四层，用户接口层，应用层，领域层，基础设施层。领域服务还是跟基础设施层打交道，领域服务主要是提供这个领域的业务行为，通过应用层聚合领域服务，而应用层正是和领域专家建立统一语言的一层，","like_count":4},{"had_liked":false,"id":294424,"user_name":"傲慢与偏见","can_delete":false,"product_type":"c1","uid":1028778,"ip_address":"","ucode":"1E1E93BE6142E0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b2/aa/8a74401f.jpg","comment_is_top":false,"comment_ctime":1621936782,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14506838670","product_id":100039001,"comment_content":"总觉得例子中充血模型的操作如果不每次查询数据库，会导致数据不一致<br>","like_count":3},{"had_liked":false,"id":181667,"user_name":"悠游","can_delete":false,"product_type":"c1","uid":1222834,"ip_address":"","ucode":"4FDDDDF29AE3F0","user_header":"https://static001.geekbang.org/account/avatar/00/12/a8/b2/998448ca.jpg","comment_is_top":false,"comment_ctime":1582610115,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14467512003","product_id":100039001,"comment_content":"默默的看了一眼书桌旁崭新的《领域驱动设计》这本书","like_count":3,"discussions":[{"author":{"id":1021539,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/96/63/7eb32c9b.jpg","nickname":"捞鱼的搬砖奇","note":"","ucode":"2FD194C4DA26E5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294081,"discussion_content":"+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595776294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167288,"user_name":"八歌","can_delete":false,"product_type":"c1","uid":1025218,"ip_address":"","ucode":"B54B99716358DE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a4/c2/e8ab13d7.jpg","comment_is_top":false,"comment_ctime":1577756832,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14462658720","product_id":100039001,"comment_content":"我觉得DDD如果在团队中没有形成共识可能并不会太实用。<br>现在团队业务复杂的情况下都习惯画个流程图，面像过程进行编程，一步一步来。<br>而且面对复杂度高，清晰度不够，现在习惯用微服务进行拆解，重要的是，即使一个很复杂的项目，已经MVC了，可能涉及钱包这类多对象体互动完成的功能点整体项目比重也不高，MVC更容易理解。","like_count":3},{"had_liked":false,"id":158917,"user_name":"licstar","can_delete":false,"product_type":"c1","uid":1503326,"ip_address":"","ucode":"CAA2D7E12D587D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoH6Y4Wc65CtVDkIbIEEHLnJKeAuE1SaV8kech2ucaaWuCNT7wUNDmyDeKNVProicRovdc0w9Oc7ZA/132","comment_is_top":false,"comment_ctime":1575486163,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"14460388051","product_id":100039001,"comment_content":"有个疑问，如果VirtualWallet里的冻结之类的功能全都实现了，这样操作流水里又会多冻结、解冻的记录的类型。这样的话，似乎service的代码会和VirtualWallet一样复杂，因为VirtualWallet中的每个方法，在service里都要把数据同步到数据库中。这样合理吗，会让我觉得service层变成了另一个repository层，有点重复","like_count":3,"discussions":[{"author":{"id":1297630,"avatar":"https://static001.geekbang.org/account/avatar/00/13/cc/de/e28c01e1.jpg","nickname":"剑八","note":"","ucode":"0A09F41DB8A4E7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286793,"discussion_content":"Domain层其实可以有reposity的，不过reposity是个接口，这样可以使domain不依赖于具体实现。\n个人感觉这样的话整体domain就有具体业务逻辑实现及完整的领域生命周期(含状态变更及持久化)\nservice层则专注于跨领域实体，消息等事情","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1593298123,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1066381,"avatar":"https://static001.geekbang.org/account/avatar/00/10/45/8d/09789253.jpg","nickname":"Hank","note":"","ucode":"0FF3FF62291918","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":77339,"discussion_content":"我也感觉到了，是不是业务架构还是比较适合贫血模式，而复杂的技术架构才能把DDD的价值体现出来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575901040,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157798,"user_name":"Wiggins","can_delete":false,"product_type":"c1","uid":1078222,"ip_address":"","ucode":"021EE98CF0E4EE","user_header":"https://static001.geekbang.org/account/avatar/00/10/73/ce/23bd3997.jpg","comment_is_top":false,"comment_ctime":1575260541,"is_pvip":false,"replies":[{"id":"60717","content":"可以放到构造函数中","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1575429902,"ip_address":"","comment_id":157798,"utype":1}],"discussion_count":1,"race_medal":1,"score":"14460162429","product_id":100039001,"comment_content":"老师你好，看完自己实现的时候有个疑问，每次实例化VirtualWallet时候他的balance都会被初始化为0，我又不想把balance set的方法暴露出来，但是如果Domain不跟Repository层交互的话，就无法获取到当前其中的余额。请问下老师是否只能在构造函数中传入这一种办法？","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476533,"discussion_content":"可以放到构造函数中","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575429902,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156910,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1574994766,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"14459896654","product_id":100039001,"comment_content":"DDD 中VirtualWalletService convert哪里定义了。 ","like_count":3,"discussions":[{"author":{"id":1338088,"avatar":"https://static001.geekbang.org/account/avatar/00/14/6a/e8/4bb87c34.jpg","nickname":"月马穿关","note":"","ucode":"2CE20CA1EB827D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":168355,"discussion_content":"伪代码 老铁","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1581574934,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1579768,"avatar":"https://static001.geekbang.org/account/avatar/00/18/1a/f8/bd3bc7c3.jpg","nickname":"💜💜奔跑的犀牛🦏🦏","note":"","ucode":"D88334E4875397","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":158372,"discussion_content":"没有set 应该是用到反射赋值","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580569947,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1523207,"avatar":"https://static001.geekbang.org/account/avatar/00/17/3e/07/c27b53b8.jpg","nickname":"Geek_ecf7bb","note":"","ucode":"5BF4DD62425BE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":76863,"discussion_content":"第三方的AutoMapper可以实现这种实体自动映射","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575862425,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1620113,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b8/91/8a5c3ec6.jpg","nickname":"王一之","note":"","ucode":"7E13332BAEC2F8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":72682,"discussion_content":"应该是伪代码，把领域实体转化为DTO返回","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575515229,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1740008,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKTkmXU3e5UIoHYvtV2PxtjagkLrAKibg0VNw2NgLQD9qCzoEWQqUJjYTTSwicS5EaPFLa5S4lbeJ7g/132","nickname":"hhp","note":"","ucode":"9DB6A430836BDA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":72497,"discussion_content":"我也想知道，求解答","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575478384,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156815,"user_name":"老姜","can_delete":false,"product_type":"c1","uid":1019835,"ip_address":"","ucode":"FB7962F08A9F3B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8f/bb/7068f251.jpg","comment_is_top":false,"comment_ctime":1574976857,"is_pvip":false,"discussion_count":0,"race_medal":3,"score":"14459878745","product_id":100039001,"comment_content":"更新流水出现异常会导钱包操作成功了，但是就是状态是错误的？是不是应该把生成流水放到一个事务里面，更新钱包和更新流水状态放到另外一个事务里面会避免这个问题？","like_count":3},{"had_liked":false,"id":255716,"user_name":"***","can_delete":false,"product_type":"c1","uid":1023291,"ip_address":"","ucode":"11456AA243ECB8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9d/3b/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1603417716,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10193352308","product_id":100039001,"comment_content":"老师，我有个疑问需要请教你。普通的三层架构把类按不同的职责放到对应的包中，比如service、controller、repository包。但是如果我在项目中使用设计模式，比如工厂模式，与之对应创建的一些AbstractFactory类、Factory类应该放置哪里，应该怎么更好的组织项目结构？","like_count":3},{"had_liked":false,"id":218748,"user_name":"buggetout","can_delete":false,"product_type":"c1","uid":1880582,"ip_address":"","ucode":"63A948EF415FDD","user_header":"https://static001.geekbang.org/account/avatar/00/1c/b2/06/2086d76d.jpg","comment_is_top":false,"comment_ctime":1589864859,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10179799451","product_id":100039001,"comment_content":"DDD原则，数据和操作结合，不依赖任何外部系统，使这个domain放到任何地方都适用。关键还是oop","like_count":2},{"had_liked":false,"id":213734,"user_name":"JuCY","can_delete":false,"product_type":"c1","uid":1038800,"ip_address":"","ucode":"43689B65128039","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d9/d0/baffc852.jpg","comment_is_top":false,"comment_ctime":1588526532,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10178461124","product_id":100039001,"comment_content":"充血模式的充值和提现两个函数在取余额和更新余额不在事务里，没有不一致问题吗？","like_count":2},{"had_liked":false,"id":169129,"user_name":"adasumm","can_delete":false,"product_type":"c1","uid":1434592,"ip_address":"","ucode":"5C070EF481AAA0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJURUiaWUoA41MOOAibCQdJdmqjeHqh7jp4tXibVfqUPBWbYBQv2BYIicic1bVRzPPbMWz5OseyRcxr49A/132","comment_is_top":false,"comment_ctime":1578278144,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10168212736","product_id":100039001,"comment_content":"感觉是懂非懂，目前只知道充血模式是将service分开成“纯业务”+“与Repository 层交互，或拆分不开”,但还是不知道业务逻辑怎么拆分。写的案例看不懂","like_count":2},{"had_liked":false,"id":160368,"user_name":"Mr.Strive.Z.H.L","can_delete":false,"product_type":"c1","uid":1030198,"ip_address":"","ucode":"6D97E159E2EECD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b8/36/542c96bf.jpg","comment_is_top":false,"comment_ctime":1575942065,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10165876657","product_id":100039001,"comment_content":"个人认为充血模型的好处有如下：<br>1. 数据与操作结合，而不是隔离，符合oop原则，而非数据驱动。<br>2. 关注点分离，或者说单一原则。充血模型包含的逻辑就是与该模型紧密相关的。<br>3. 领域模型是系统最为稳定的一层，当系统复杂后，也是作为微服务拆分的依据。因此模型的服用度很高。<br><br>但是充血模型的难点是：业务复杂后，什么样的逻辑最适合放到模型中？一旦不符合规范，那么充血模型就会变成胀血模型，难以维护。<br><br>还有一种设计方式：<br>充血模型对外提供的是领域服务（充血的领域模型如果是聚合根的话），而文中的service实际上是应用服务，串联多个领域服务以及其他组件功能，实现完整业务逻辑。<br><br>实际上我们可以抽出biz-service业务服务，和core-service领域服务。将充血模型的大部分逻辑放到core-service。这样也很清晰，不至于模型内部的逻辑过于复杂。老师怎么看呢？","like_count":2},{"had_liked":false,"id":158124,"user_name":"晨间新闻","can_delete":false,"product_type":"c1","uid":1161406,"ip_address":"","ucode":"6F7A55AAD52F16","user_header":"https://static001.geekbang.org/account/avatar/00/11/b8/be/2d77d643.jpg","comment_is_top":false,"comment_ctime":1575335920,"is_pvip":false,"replies":[{"id":"60710","content":"简单的业务确实用不上ddd","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1575428642,"ip_address":"","comment_id":158124,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10165270512","product_id":100039001,"comment_content":"看了下项目代码，service里的方法多数都是获取对象列表，对象入库，删除，很多方法都不是具体某个对象的某个动作，不像余额加减一样，是一个动作，对应某个属性的变化。感觉是不是用不上DDD啊。","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476637,"discussion_content":"简单的业务确实用不上ddd","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575428642,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345768,"user_name":"Soil","can_delete":false,"product_type":"c1","uid":2870321,"ip_address":"","ucode":"3B353BC858B5AE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLE9hv64CEabxt76tQQcWDicx0sucpAApFvYoM8eXBViaJgz06EjcfJjiamSFWY9aAuxjILaPoiaa0lNw/132","comment_is_top":false,"comment_ctime":1652582911,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"5947550207","product_id":100039001,"comment_content":"将核心功能业务与非功能性业务抽离出来，将两部分解耦，减少变化带来的影响。service可以提供稳定的对外接口。","like_count":1},{"had_liked":false,"id":320351,"user_name":"陆一鸣猜不动","can_delete":false,"product_type":"c1","uid":2831163,"ip_address":"","ucode":"68E89A037F9A0C","user_header":"https://static001.geekbang.org/account/avatar/00/2b/33/3b/0b25b622.jpg","comment_is_top":false,"comment_ctime":1636273038,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5931240334","product_id":100039001,"comment_content":"看完了老师的讲解，感觉充血模型的第一步就是把大而广的service再次细分，相当于在walletService中再细分出一个walletTransactionService，从而达到代码逻辑上的抽象。而之所以用具体相关的model&#47;object，而不是新的service，则是为了让复杂的逻辑跟使用的框架以及数据来源的方式解耦，方便日后的改进。<br>这样看来DDD之所以叫领域驱动，就是着手于每个类自己的功能模块的定义，而不是流程化的逻辑。明白之后才发现定义如此言简意赅，一目了然","like_count":1},{"had_liked":false,"id":307101,"user_name":"The-Jogger","can_delete":false,"product_type":"c1","uid":1396612,"ip_address":"","ucode":"4F19CA3DFA88E3","user_header":"https://static001.geekbang.org/account/avatar/00/15/4f/84/8b3b6a55.jpg","comment_is_top":false,"comment_ctime":1628861426,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5923828722","product_id":100039001,"comment_content":"传统的设计controller、service 、repository、domain ，domain只是作为数据载体，不参与业务行为，导致业务实体行为不清晰。<br>DDD设计强调service不参与过多的业务实体行为，domain作业务逻辑处理<br>职责：<br>1、controller负责接口的暴露<br>2、repository负责实体的储存<br>3、service ：1）框架代码 2）非功能代码 3）与repository层打交道<br>4、domain：存粹的业务代码逻辑、不耦合repository","like_count":1},{"had_liked":false,"id":253198,"user_name":"Zachariah","can_delete":false,"product_type":"c1","uid":2229665,"ip_address":"","ucode":"B0AED2A3B91369","user_header":"https://static001.geekbang.org/account/avatar/00/22/05/a1/2c631e12.jpg","comment_is_top":false,"comment_ctime":1602647208,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5897614504","product_id":100039001,"comment_content":"真真的大佬，膜拜","like_count":1},{"had_liked":false,"id":237360,"user_name":"Cutler","can_delete":false,"product_type":"c1","uid":1228136,"ip_address":"","ucode":"2EDECFE039845B","user_header":"https://static001.geekbang.org/account/avatar/00/12/bd/68/3fd6428d.jpg","comment_is_top":false,"comment_ctime":1595808779,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5890776075","product_id":100039001,"comment_content":"DDD的核心是领域模型的设计，这就倒逼开发人员要深入业务才能设计出较好的领域模型，设计领域模型包含的工作有:识别领域边界，确定限界上下文，设计领域事件等。","like_count":1},{"had_liked":false,"id":215387,"user_name":"张三丰","can_delete":false,"product_type":"c1","uid":1155275,"ip_address":"","ucode":"3A6215A40B3B21","user_header":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","comment_is_top":false,"comment_ctime":1588985730,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5883953026","product_id":100039001,"comment_content":"从entity到bo再到vo，这之间存在数据的拷贝，有没有什么技巧可以折中这方面的性能消耗？或者说一个系统真的有必要设计那么多”O”吗？","like_count":1},{"had_liked":false,"id":210437,"user_name":"高鹏0409","can_delete":false,"product_type":"c1","uid":1928337,"ip_address":"","ucode":"1833CA764B6A46","user_header":"https://static001.geekbang.org/account/avatar/00/1d/6c/91/8268a753.jpg","comment_is_top":false,"comment_ctime":1587744510,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5882711806","product_id":100039001,"comment_content":"充血模型是对业务操作对精准抽象","like_count":1},{"had_liked":false,"id":175277,"user_name":"逐风随想","can_delete":false,"product_type":"c1","uid":1286435,"ip_address":"","ucode":"A91C191EE82FCA","user_header":"https://static001.geekbang.org/account/avatar/00/13/a1/23/2b527dc4.jpg","comment_is_top":false,"comment_ctime":1580640529,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5875607825","product_id":100039001,"comment_content":"作者回复：关于PHP等动态语言适配的问题说明，<br>设计模式落实到具体的编程语言代码实现的时候，必然有个适配的过程，没法保证每种语言的实现思路都一模一样。Java是一种静态语言，那一些设计模式实现从Java搬到静态语言，比如C# C++是相对比较容易的，但是搬到动态语言，比如PHP，可能就要做些调整。同理，面向过程、面向对象、函数式编程中，设计模式也都有不同的实现方式。<br>编程语言有自成一体的设计，会阉割掉很多它觉得不重要的语法，加强它看重的语法，这就导致有些设计思想、原则、模式，并不能很容易地在这种语言下实现<br>PHP更多的偏向网站开发😂 而且像facebook 用php可能更偏向于网站后端中的前端部分的开发，从应用场景上来说 可能面向过程更合适些，这也是为什么 《设计模式》一书的副标题提到面向对象的原因。","like_count":1},{"had_liked":false,"id":158184,"user_name":"饭粒","can_delete":false,"product_type":"c1","uid":1153455,"ip_address":"","ucode":"4C3220B0D43997","user_header":"https://static001.geekbang.org/account/avatar/00/11/99/af/d29273e2.jpg","comment_is_top":false,"comment_ctime":1575343895,"is_pvip":false,"replies":[{"id":"60709","content":"1、transaction能处理分布式事务<br>2、再看遍文章吧 都有讲到","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1575428262,"ip_address":"","comment_id":158184,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5870311191","product_id":100039001,"comment_content":"看完这篇对 DDD 也有了初步的认识了，区别了贫血模式的开发，DDD 应用 OOP 的设计实现提高了封装性，在业务对象类 VirtualWallet 中封装数据和基本的数据处理过程，service 使用业务对象类暴露的方法过程以完成完整的功能。实现上业务对象类具备的封装，单一职责等特性，这样在易用，易维护，易扩展，易读等方面较之贫血模型都会有提高。<br><br>另外有两个问题请教下老师：<br>1.贫血模型的 service 中有 VirtualWalletRepository，VirtualWalletTransactionRepository 两个 repository，看字面应该是区分是否带事务，不太明白这样写的好处或用意？因为我现在一般是直接在 service 上直接加事务。<br>2.钱包交易流水和虚拟钱包的交易流水的功能区分还不是特别清楚，示例代码也没有体现。事物一致性的日子记录不能直接用钱包交易流水线吗？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476657,"discussion_content":"1、transaction能处理分布式事务\n2、再看遍文章吧 都有讲到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575428262,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157774,"user_name":"Eden Ma","can_delete":false,"product_type":"c1","uid":1457408,"ip_address":"","ucode":"755312F0D154F9","user_header":"https://static001.geekbang.org/account/avatar/00/16/3d/00/7daa7403.jpg","comment_is_top":false,"comment_ctime":1575257746,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5870225042","product_id":100039001,"comment_content":"iOS端是否可以这样理解：MVVM中VM层相当于Domain，就V层中控制器的业务逻辑抽到了VM中，M层负责数据和数据库操作，因为M层数据是对外暴露的依然是贫血。V层中的View相当于文中的Controller对外展示数据，只做展示功能，所以可以继续贫血，VM和V双向绑定。因为没有BO这种，所以更多的是对控制器数据和业务逻辑的抽离到VM。而MVP也MVVM也蛮相似。所以我可以理解MVVM和MVP算是运用到了充血模型吗？","like_count":1,"discussions":[{"author":{"id":1209852,"avatar":"https://static001.geekbang.org/account/avatar/00/12/75/fc/797fe290.jpg","nickname":"FafaSaigai","note":"","ucode":"325EF70B500B4F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":69314,"discussion_content":"我咋感觉有点那个胖model 和瘦model的意思呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575280695,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1457408,"avatar":"https://static001.geekbang.org/account/avatar/00/16/3d/00/7daa7403.jpg","nickname":"Eden Ma","note":"","ucode":"755312F0D154F9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1209852,"avatar":"https://static001.geekbang.org/account/avatar/00/12/75/fc/797fe290.jpg","nickname":"FafaSaigai","note":"","ucode":"325EF70B500B4F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":69371,"discussion_content":"嗯 我也这么想过，感觉胖model也像个充血模型...但是胖model的可维护性似乎不太好，而且数据基本对外暴露，封装性也不太合格的样子。而且胖model业务一多可能会越来越胖，而且viewmodel可以写多个，职责单一，然后我把model理解成那个实体类了，所以最终理解成上面那样了😂不知道有没有大佬提点一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575283774,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":69314,"ip_address":""},"score":69371,"extra":""}]}]},{"had_liked":false,"id":157739,"user_name":"好饿早知道送外卖了","can_delete":false,"product_type":"c1","uid":1132304,"ip_address":"","ucode":"AED22DB5BF8FC7","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/10/2d673601.jpg","comment_is_top":false,"comment_ctime":1575253028,"is_pvip":false,"replies":[{"id":"60721","content":"是的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1575432433,"ip_address":"","comment_id":157739,"utype":1}],"discussion_count":1,"race_medal":2,"score":"5870220324","product_id":100039001,"comment_content":"对于前端同学而言、DDD是不是类似于MVVM啊？只是没有数据绑定的业务映射","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476513,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575432433,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157602,"user_name":"下雨天","can_delete":false,"product_type":"c1","uid":1008315,"ip_address":"","ucode":"816B3792ECC50A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/62/bb/323a3133.jpg","comment_is_top":false,"comment_ctime":1575210125,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5870177421","product_id":100039001,"comment_content":"充血模型的DDD是为了解决业务层代码的复用性和封装性问题！","like_count":1},{"had_liked":false,"id":157452,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1575167140,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5870134436","product_id":100039001,"comment_content":"老师，最后一张设计图祭出了两条流水线，是分别对应数据库的两张表吗？","like_count":1},{"had_liked":false,"id":157249,"user_name":"相逢是缘","can_delete":false,"product_type":"c1","uid":1060730,"ip_address":"","ucode":"CB299F53A95654","user_header":"https://static001.geekbang.org/account/avatar/00/10/2f/7a/ab6c811c.jpg","comment_is_top":false,"comment_ctime":1575097240,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5870064536","product_id":100039001,"comment_content":"打卡<br>1、在充血模型的设计中Service类主要和Repository交互，获取数据并转化为VirtualWallet，使得领域模型中的VirtualWallet与其他业务模块解耦（领域模型可以不用关心数据如何存储，不用关心上层的业务逻辑以及功能需求），增强复用性；<br>2、Service类负责跨领域模型的聚合功能，整合多个领域模型的能力（此例子中转账可以设置为一个独立的领域模型）；<br>3、Service类负责一些非功能性以及与第三方的交互能力（发邮件、发信息、记录日志、RPC等）；<br><br>另外有个问题咨询一下老师：<br>在VirtualWalletService类中提供了一个public的getVirtualWallet接口，用于获取VirtualWallet的实例，这个接口的作用是什么呢？（我的理解是关于VirtualWallet的全部处理应该是在VirtualWalletService完成，不应该再暴露VirtualWallet给外部了）","like_count":1},{"had_liked":false,"id":157093,"user_name":"曾泽伟","can_delete":false,"product_type":"c1","uid":1106117,"ip_address":"","ucode":"E8C7C256BA4D84","user_header":"https://static001.geekbang.org/account/avatar/00/10/e0/c5/0a727162.jpg","comment_is_top":false,"comment_ctime":1575029635,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869996931","product_id":100039001,"comment_content":"在平时开发的时候，我更喜欢将service分成多层（可以理解为2层），一层是基于数据层的简单封装操作dataService，另一层，是专门用来组合调用dataService方法的，这样既有封装又有能让开发人员更好的理解，不知道我这种方式是否可以？有什么需要改进的地方吗？<br>另外时间长了，项目可能就面目全非了，不知道这个情况，该怎么办？<br>课程建议，能否把代码不一样的地方标亮，毕竟不是IDE比较代码的不同不是很方便","like_count":1},{"had_liked":false,"id":157014,"user_name":"gowerun","can_delete":false,"product_type":"c1","uid":1234469,"ip_address":"","ucode":"9F98BB327EE42B","user_header":"https://static001.geekbang.org/account/avatar/00/12/d6/25/0e85dce0.jpg","comment_is_top":false,"comment_ctime":1575013284,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869980580","product_id":100039001,"comment_content":"王争老师，service里的virtualWalletRepo.getBalance(walletId)的virtualWalletRepo是不是写错了。应该是walletRepo吧","like_count":1},{"had_liked":false,"id":156915,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1574995076,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869962372","product_id":100039001,"comment_content":"看到第3点提现的时候我脑袋灵光一闪 银行操作封装一个类  应用操作封装一个类 我这是进步了吗哈哈哈","like_count":1},{"had_liked":false,"id":356903,"user_name":"Geek_0d2e85","can_delete":false,"product_type":"c1","uid":2882738,"ip_address":"浙江","ucode":"D0E64BB92C6223","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEKwRibg8Y6J3BQsFfyboA5Px6ibx3iaerK3ia53XiavSJQ3quO7MxdFI9pwEACurR13MkuDTNnMurBqydA/132","comment_is_top":false,"comment_ctime":1662692303,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1662692303","product_id":100039001,"comment_content":"DDD感觉就是职责更明细了，更容易理解业务。同时进行了数据的封装保证了数据的安全性，不让程序员随意去操作数据。","like_count":0},{"had_liked":false,"id":356900,"user_name":"Stay_Gold","can_delete":false,"product_type":"c1","uid":1119904,"ip_address":"北京","ucode":"ACB8DCD2EF8F95","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJRCtuJkpyy2NTTABPFibg2k9tZscOOKx9wu80a85d5HspCorO9Nibj7Z7q9v1icPTVm5ia52r0RCzEaA/132","comment_is_top":false,"comment_ctime":1662690954,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662690954","product_id":100039001,"comment_content":"问题<br>这两节课中对于 DDD 的讲解，都是我的个人主观看法，你可能会有不同看法？<br>下面也说我个人的看法<br>DDD的核心是根据业务的不同把架构划分成一个一个的领域，个人领域里面只管理自己领域的事情，比如用户领域就只处理用户相关的操作，订单领域就只处理订单领域相关的操作。<br>还有就是充血模型中数据和影响数据相关的操作是不分离的都是放在一起的，这样便于后续像是拼积木一样的做对于数据相关的操作。<br>最后由于业务领域可能是固定的，但是我们内部的实现经常会变动，比如一开始也许用的mysql来存取数据的，后面可能编程sqlserver来存储，所以我们需要通过一个抽象的接口来关联。外部只访问接口，至于内部如何具体的实现外部不用感知。","like_count":0},{"had_liked":false,"id":356548,"user_name":"Sherk","can_delete":false,"product_type":"c1","uid":2156245,"ip_address":"重庆","ucode":"AFE3E7F158258D","user_header":"https://static001.geekbang.org/account/avatar/00/20/e6/d5/4f1fc074.jpg","comment_is_top":false,"comment_ctime":1662391237,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662391237","product_id":100039001,"comment_content":"DDD 相当于多抽出一个中间层来进行处理逻辑。这样的好处是，未来所有业务逻辑都在这一层，业务开发主要关注这一层，具体的某个实体。<br><br>这节主要讲了什么如何用充血模型开发。<br>     1. 在service 层和原来的reposity之间加了一个domain类。用来处理具体的业务逻辑。<br>      2.domain类显得更加独立，纯粹，只复杂某一领域的业务，可读性更好。<br>       3. service类可以幂等、事务、发邮件、发消息、记录日志、调用其他系统，或者聚合涉及的多个实体。","like_count":0},{"had_liked":false,"id":354537,"user_name":"Huyunfu","can_delete":false,"product_type":"c1","uid":1888301,"ip_address":"广东","ucode":"61A3AFC7BD4203","user_header":"","comment_is_top":false,"comment_ctime":1660519965,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660519965","product_id":100039001,"comment_content":"我对DDD的理解就是以面向对象的思想编程，对象有行为，这个行为就对应着这个对象在系统中的业务抽象。然后service就可以看成一个业务流程的组织者，它先让A对象做啥，接着让B对象这啥，最终完成整件事情。","like_count":0},{"had_liked":false,"id":352606,"user_name":"王政","can_delete":false,"product_type":"c1","uid":2297381,"ip_address":"","ucode":"A7DCA909FC8A38","user_header":"https://static001.geekbang.org/account/avatar/00/23/0e/25/aad87c07.jpg","comment_is_top":false,"comment_ctime":1658804880,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658804880","product_id":100039001,"comment_content":"ddd更适合复杂的业务场景，同时该场景下存在着可以被准确抽象的实体概念，这需要面向对象的思维达到一定的程度同时需要贫血模型开发的一定经验才能实现。","like_count":0},{"had_liked":false,"id":349272,"user_name":"逍客（Joe）","can_delete":false,"product_type":"c1","uid":1648821,"ip_address":"","ucode":"66A6C9368B3178","user_header":"https://static001.geekbang.org/account/avatar/00/19/28/b5/2cc82650.jpg","comment_is_top":false,"comment_ctime":1655861048,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655861048","product_id":100039001,"comment_content":"如果充血模式， 一个Domain还弄出来VO BO Entity 三个类似的对象，个人感觉这种设计还是有些 “贫血”","like_count":0},{"had_liked":false,"id":349109,"user_name":"Geek_08a0f7","can_delete":false,"product_type":"c1","uid":3015503,"ip_address":"","ucode":"C2D78F6B714B88","user_header":"","comment_is_top":false,"comment_ctime":1655732532,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655732532","product_id":100039001,"comment_content":"看代码有些费劲，是不是有必要去补补java基础了","like_count":0},{"had_liked":false,"id":346454,"user_name":"Lee","can_delete":false,"product_type":"c1","uid":1581878,"ip_address":"","ucode":"5A232B7388EB2C","user_header":"https://static001.geekbang.org/account/avatar/00/18/23/36/8bc95dca.jpg","comment_is_top":false,"comment_ctime":1653146073,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653146073","product_id":100039001,"comment_content":"Service依赖domain和repository，那domain的业务逻辑不会依赖和数据库相关的操作吗？","like_count":0},{"had_liked":false,"id":342337,"user_name":"于游","can_delete":false,"product_type":"c1","uid":1232227,"ip_address":"","ucode":"7FA6E0117A3700","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoKEDhibodjlC9dIic9StJDib0YsrSudlGjGpEIpmFbb38otr4Q3wgOI2DOCwVadEOO6KXhM92tXh6gw/132","comment_is_top":false,"comment_ctime":1650199067,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1650199067","product_id":100039001,"comment_content":"个人使用经验是，使用充血的模型的前提是这个需求在这个模型内部的逻辑实现是完备的，和业务无关的，也就是足够简单，比如类型转换。<br>而像上面这个充血的钱包模型，显然是不符合要求的，如果业务需求发生了变动，某些情况下允许欠款，而某些情况下不允许，这种逻辑放在service更加合适。","like_count":0},{"had_liked":false,"id":341141,"user_name":"Geek_949f5e","can_delete":false,"product_type":"c1","uid":2962932,"ip_address":"","ucode":"C771E35F26B718","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/cqdrEzhcZ54ibGbf3rjuHCesA6otluIKn9BR9uESN8E8b9nbcjX6xy8UmlictdLdp62dqNofHr5J5138D2Q9yOvw/132","comment_is_top":false,"comment_ctime":1649387801,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649387801","product_id":100039001,"comment_content":"将计算过程抽离到domain，service获取结果后回填进repository，service是数据中介，波妞喜欢中介","like_count":0},{"had_liked":false,"id":337805,"user_name":"关耳","can_delete":false,"product_type":"c1","uid":1583598,"ip_address":"","ucode":"9036ADEB550BD4","user_header":"https://static001.geekbang.org/account/avatar/00/18/29/ee/7cc1d3d2.jpg","comment_is_top":false,"comment_ctime":1647073843,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1647073843","product_id":100039001,"comment_content":"看完后，我理解的service层算是钱包domain的上一层domain，service获取数据，得到钱包的数据，给钱包domain，由钱包domain完成相关的业务操作，也可以在钱包操作完成后继续调用其他的domain完成其他的操作，再往上站一层，service是不是就是一个domain，完成的是上一层的业务，也就是用户需要的业务","like_count":0},{"had_liked":false,"id":335962,"user_name":"张小菜","can_delete":false,"product_type":"c1","uid":1349105,"ip_address":"","ucode":"295B52559FCE04","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ep1KzIk3KeeFCrQ2LSEbEDO7edoEYTPtKlM3fNMcpPtNzhTIQqVq32Va0ibJibF5Hg0buXwVPmeKaAg/132","comment_is_top":false,"comment_ctime":1645791916,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645791916","product_id":100039001,"comment_content":"虽然说不用计较细节。但是直接拿Java代码中的余额去覆盖数据库的余额，会有问题呢，一般应该是数据库的余额直接加减发生额。","like_count":0},{"had_liked":false,"id":335769,"user_name":"顺势而为","can_delete":false,"product_type":"c1","uid":2757858,"ip_address":"","ucode":"FE7D688D24823E","user_header":"https://static001.geekbang.org/account/avatar/00/2a/14/e2/f6f1627c.jpg","comment_is_top":false,"comment_ctime":1645684491,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645684491","product_id":100039001,"comment_content":"其实概念是很多。归结一句话，与功能无关的Service层，应该用Domain概念存着，而与功能有关的应该单独拆分出来，归结成不同的类。要用的时候，就直接调用就好了。<br>这样的好处，提高代码的可读性，而且维护起来不费劲。解耦合。","like_count":0},{"had_liked":false,"id":333733,"user_name":"笑醉三千","can_delete":false,"product_type":"c1","uid":1185495,"ip_address":"","ucode":"C820D678E981C3","user_header":"https://static001.geekbang.org/account/avatar/00/12/16/d7/09e92ea0.jpg","comment_is_top":false,"comment_ctime":1644490099,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644490099","product_id":100039001,"comment_content":"感谢王老师，解答了困扰我很久的疑惑，醍醐灌顶！","like_count":0},{"had_liked":false,"id":330125,"user_name":"zjl","can_delete":false,"product_type":"c1","uid":1124375,"ip_address":"","ucode":"0419EF7B28153F","user_header":"https://static001.geekbang.org/account/avatar/00/11/28/17/3b9bc42f.jpg","comment_is_top":false,"comment_ctime":1641806570,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641806570","product_id":100039001,"comment_content":"代码还没有放github上？想看看完整的一些代码！！！","like_count":0},{"had_liked":false,"id":330093,"user_name":"Sun Fei","can_delete":false,"product_type":"c1","uid":1032631,"ip_address":"","ucode":"092EC0992050BB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c1/b7/57f153f6.jpg","comment_is_top":false,"comment_ctime":1641795407,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641795407","product_id":100039001,"comment_content":"开一门 DDD 的课吧","like_count":0},{"had_liked":false,"id":329473,"user_name":"技术骨干","can_delete":false,"product_type":"c1","uid":1098720,"ip_address":"","ucode":"8FCF8DE6D29201","user_header":"https://static001.geekbang.org/account/avatar/00/10/c3/e0/3db22579.jpg","comment_is_top":false,"comment_ctime":1641363171,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641363171","product_id":100039001,"comment_content":"高手在评论区呀，学习了","like_count":0},{"had_liked":false,"id":327668,"user_name":"徐志超-Klaus","can_delete":false,"product_type":"c1","uid":2343086,"ip_address":"","ucode":"CF26B39965F2A2","user_header":"https://static001.geekbang.org/account/avatar/00/23/c0/ae/e5e62510.jpg","comment_is_top":false,"comment_ctime":1640227041,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640227041","product_id":100039001,"comment_content":"但是在实际业务场景中往往不是操作某条数据，而是操作一批数据，我们把一批数据查出来，转换成业务对象，业务操作（比如我将一些对象的某个属性的值全部改成1,另一些对象的某个属性的值全部改成2）完了之后，再由 service将 操作后的对象 持久化到 数据库。那问题来了，我是循环处理这批对象根据id将对象一个一个的update set pro=obj.pro where id = obj.id，还是update set pro=1 where id in (xx...)，update set pro=2 where id in (xx...)显然后者持久化效率比前者高n倍，那如何设计出通用的后者方案呢？还是说还有其他方案？或者说放弃业务代码与数据的解耦，直接在Bo里调Service操作数据库？","like_count":0},{"had_liked":false,"id":327395,"user_name":"samhe","can_delete":false,"product_type":"c1","uid":1073291,"ip_address":"","ucode":"D6F9591AC046A4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er4JSGvt4xzcQsXvQ5iakXnlsonwbNdozM27NSLW5H28YtUfd85hzPlDD73sPDGSf6mJFVaK0vpC2w/132","comment_is_top":false,"comment_ctime":1640097534,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640097534","product_id":100039001,"comment_content":"第二种DDD的充血模型实现方式确实优雅一点，并且可测试程度高一点。但是，我觉得也得面对一个现实问题：就是在并发情况下，我们获取的钱包数据可能都不是最新的。两种写法虽然都有这个问题，但是传统的贫血模型可以利用数据库的特性，如： update ewallet set balance = balance - debit where id = xxxx; 来实现； 但第二种充血模型的写法就没有那么直观来实现了。不知道有没有什么推荐的解决方案？","like_count":0},{"had_liked":false,"id":325215,"user_name":"徐璐💤","can_delete":false,"product_type":"c1","uid":1215684,"ip_address":"","ucode":"604E1CB60D4AB5","user_header":"https://static001.geekbang.org/account/avatar/00/12/8c/c4/4590df86.jpg","comment_is_top":false,"comment_ctime":1638866953,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638866953","product_id":100039001,"comment_content":"争哥，举的这个钱包的例子这个业务流程好像不符合监管规定呀，哈哈","like_count":0},{"had_liked":false,"id":322581,"user_name":"insist","can_delete":false,"product_type":"c1","uid":1054536,"ip_address":"","ucode":"1EE2800A900BA7","user_header":"https://static001.geekbang.org/account/avatar/00/10/17/48/3ab39c86.jpg","comment_is_top":false,"comment_ctime":1637487753,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637487753","product_id":100039001,"comment_content":"终于懂的ddd到底是啥了，领域驱动模型类包括数据和对数据的操作，通过阅读领域驱动类，可以对业务更加熟悉","like_count":0},{"had_liked":false,"id":322123,"user_name":"天亮前说晚安","can_delete":false,"product_type":"c1","uid":1541014,"ip_address":"","ucode":"1D82EE562A7C71","user_header":"https://static001.geekbang.org/account/avatar/00/17/83/96/73ff13a0.jpg","comment_is_top":false,"comment_ctime":1637197907,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637197907","product_id":100039001,"comment_content":"不太理解，领域模型不与数据层交互，也就是基础层。如果复杂业务，大根域，多个子域。那上下文参数将会变的非常巨大。大佬解释一下。","like_count":0},{"had_liked":false,"id":319527,"user_name":"A.Lyuweigh","can_delete":false,"product_type":"c1","uid":1443305,"ip_address":"","ucode":"0CCFA05639A9D1","user_header":"https://static001.geekbang.org/account/avatar/00/16/05/e9/91273c29.jpg","comment_is_top":false,"comment_ctime":1635842566,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635842566","product_id":100039001,"comment_content":"其实还是没有弄明白, 现在我能DDD是一种基于面向对象设计的业务模型,他比单纯的通过面向过程来处理复杂业务逻辑扩展性更高,因为是面向对象的设计方式所以有一定隔离性,也就是安全; 将业务逻辑封装在对象里面,也就有了可移植性,但是可移植的针对整个业务层而不是单个业务而言的,所以这里有个最大的疑问 什么时候使用DDD? ","like_count":0},{"had_liked":false,"id":319309,"user_name":"July 💫","can_delete":false,"product_type":"c1","uid":1761335,"ip_address":"","ucode":"0DC25F063E9E90","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e0/37/40b6711b.jpg","comment_is_top":false,"comment_ctime":1635738591,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635738591","product_id":100039001,"comment_content":"phper 表示没看明白🤣😂😂😂","like_count":0},{"had_liked":false,"id":316363,"user_name":"keep_it_real","can_delete":false,"product_type":"c1","uid":2055554,"ip_address":"","ucode":"F5057CAF752FF3","user_header":"https://static001.geekbang.org/account/avatar/00/1f/5d/82/81b2ba91.jpg","comment_is_top":false,"comment_ctime":1634287301,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634287301","product_id":100039001,"comment_content":"数据和操作数据的逻辑封装到一起，符合OOP的封装特性。而且与Service解藕，让逻辑更加的清晰。Service就去做Controller、Domian和Repository之间的组织任务和其他比如类似缓存，消息队列，日志打印这些事情。","like_count":0},{"had_liked":false,"id":314646,"user_name":"振振","can_delete":false,"product_type":"c1","uid":1313365,"ip_address":"","ucode":"ECE08186230140","user_header":"https://static001.geekbang.org/account/avatar/00/14/0a/55/5e440425.jpg","comment_is_top":false,"comment_ctime":1633275735,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633275735","product_id":100039001,"comment_content":"这一节课讲的很清楚，赞","like_count":0},{"had_liked":false,"id":312057,"user_name":"耶low","can_delete":false,"product_type":"c1","uid":1992059,"ip_address":"","ucode":"4CCEB741583544","user_header":"https://static001.geekbang.org/account/avatar/00/1e/65/7b/058d17f3.jpg","comment_is_top":false,"comment_ctime":1631610073,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631610073","product_id":100039001,"comment_content":"个人理解，关键点可以从DDD的名字看出：“领域”。例子中的钱包，跟钱包相关的方法可以放在Domain中，因为这些操作就属于钱包这个领域的，还体现了面向对象的封装特性。而跟钱包本体无关的操作，比如数据过滤，和上下层、上下游的交互就得放到service中。","like_count":0},{"had_liked":false,"id":307867,"user_name":"小王在努力","can_delete":false,"product_type":"c1","uid":2733574,"ip_address":"","ucode":"A324EF87198905","user_header":"https://static001.geekbang.org/account/avatar/00/29/b6/06/cd1eaa49.jpg","comment_is_top":false,"comment_ctime":1629287164,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629287164","product_id":100039001,"comment_content":"即使使用面向过程的方式去写代码，做好分层也可以做的很好，要把握住边界。","like_count":0},{"had_liked":false,"id":301590,"user_name":"Geek__126303fc81f7","can_delete":false,"product_type":"c1","uid":1453774,"ip_address":"","ucode":"D256622360E1B4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibFY0KibR500NUAibZqsZCqg8Z6XicEaqr23oZTUlFcQaMXAlhETpVBXPAiamJ1IYcc7ibn7ZGdmUycxAicibkhtSc3xYA/132","comment_is_top":false,"comment_ctime":1625752658,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625752658","product_id":100039001,"comment_content":"今天的内容读了收获很大，可能现在业务没那么复杂，基本是贫血模式开发的","like_count":0},{"had_liked":false,"id":301523,"user_name":"谭小谭","can_delete":false,"product_type":"c1","uid":1298631,"ip_address":"","ucode":"C7928BEDFF4EDC","user_header":"https://static001.geekbang.org/account/avatar/00/13/d0/c7/62de0458.jpg","comment_is_top":false,"comment_ctime":1625727894,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625727894","product_id":100039001,"comment_content":"很希望有对应的php版本的 java的还真难理解 看了有几遍了 没理解到意思","like_count":0},{"had_liked":false,"id":301334,"user_name":"九尾","can_delete":false,"product_type":"c1","uid":2429969,"ip_address":"","ucode":"3E6BDF7B9C78FC","user_header":"https://static001.geekbang.org/account/avatar/00/25/14/11/f1220081.jpg","comment_is_top":false,"comment_ctime":1625637613,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625637613","product_id":100039001,"comment_content":"以前贫血和充血的代码都写过，但是没有深入研究过类似的理论，看过之后更加清晰。个人的直观理解是，充血模型在进行复杂功能设计的时候，可以更好的将一些专有的业务逻辑抽离出来形成领域模型，抽离出来的逻辑更加内聚，而且可以减少Service的压力，代码会更清晰一点。当然如果功能模块没有那么复杂，抽离带来的收益并没有更高","like_count":0},{"had_liked":false,"id":300529,"user_name":"小帅","can_delete":false,"product_type":"c1","uid":1239663,"ip_address":"","ucode":"4129A7E9427FFC","user_header":"https://static001.geekbang.org/account/avatar/00/12/ea/6f/09de5f65.jpg","comment_is_top":false,"comment_ctime":1625208030,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625208030","product_id":100039001,"comment_content":"看完这节课，确实明白到了，虽然是说java是面向对象，但是我们实际上一直在面向过程开发，我目前实际业务开发过程中使用的也是贫血模型，但是我们中间多了一层，就是在service层之上有一层manager，这一层是用来做主要的业务逻辑，service层主要是提供单表数据库的操作，所以我们的Manger层越来越大，今天作者提到的充血模型才是真正的面向对象，将逻辑放在一个领域对象里操作，看是看明白了，但是一下子估计很难转变思维过来，这个方式如果用于复杂的业务逻辑中，需要多个领域模型进行交互，要一下子运用在开发中，还需要再思考下","like_count":0},{"had_liked":false,"id":299466,"user_name":"布拉姆","can_delete":false,"product_type":"c1","uid":1311125,"ip_address":"","ucode":"479FF27D73BCAD","user_header":"https://static001.geekbang.org/account/avatar/00/14/01/95/fd09e8a8.jpg","comment_is_top":false,"comment_ctime":1624635847,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624635847","product_id":100039001,"comment_content":"对比贫血和DDD模式区别，<br>贫血在service中，先获取walletEntity数据，对walletEntity进行操作后。最后由walletEntity转化为virtualWallet，virtualWallet只有数据没有任何操作；<br>DDD在service中，直接把walletEntity转化为virtualWallet，就地对virtualWallet进行操作，virtualWallet既有数据又有方法。<br>virtualWallet作为专注于某个业务的领域模型期望与其他非业务、工程上的流程逻辑解耦，就须作为充血模式，以便得到更多的复用<br>","like_count":0},{"had_liked":false,"id":296433,"user_name":"乐","can_delete":false,"product_type":"c1","uid":2098217,"ip_address":"","ucode":"5379CD3C973434","user_header":"https://static001.geekbang.org/account/avatar/00/20/04/29/14ccf5dd.jpg","comment_is_top":false,"comment_ctime":1622974363,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622974363","product_id":100039001,"comment_content":"业务逻辑和控制逻辑的分离","like_count":0},{"had_liked":false,"id":296423,"user_name":"建强","can_delete":false,"product_type":"c1","uid":1397126,"ip_address":"","ucode":"62B03D0E0C64EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/86/b5fd8dd8.jpg","comment_is_top":false,"comment_ctime":1622968730,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622968730","product_id":100039001,"comment_content":"DDD的开发模式没怎么接触过，听了老师的课，说一下我个人对的理解，DDD最大的好处是把业务从开发框架中剥离出来，对于简单的业务，可能没什么太多的作用，但对于复杂的业务，业务剥离后，可以使代码更清晰，更容易维护，业务的扩展也更容易，而且，最重要的是业务和开发框架可以各自独立地演变，互不影响，剥离出来的业务也更容易移植到其他的开发框架中。<br><br>这样理解是不是正确，请老师指正。","like_count":0},{"had_liked":false,"id":295819,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1622610087,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1622610087","product_id":100039001,"comment_content":"ddd还是在老师这里第一次听说","like_count":0},{"had_liked":false,"id":295089,"user_name":"辉","can_delete":false,"product_type":"c1","uid":2327900,"ip_address":"","ucode":"5A09D4BA659E6B","user_header":"https://static001.geekbang.org/account/avatar/00/23/85/5c/8bd7af72.jpg","comment_is_top":false,"comment_ctime":1622213339,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1622213339","product_id":100039001,"comment_content":"我想请教一下，DDD模式如果核心的逻辑放到domain中，那么，domain这个逻辑需要怎么使用呢，是注入到service中还是注入到controller中直接使用呢？","like_count":0},{"had_liked":false,"id":291581,"user_name":"惊蛰","can_delete":false,"product_type":"c1","uid":2574819,"ip_address":"","ucode":"E5A29CF79A24CD","user_header":"https://static001.geekbang.org/account/avatar/00/27/49/e3/1e3320e9.jpg","comment_is_top":false,"comment_ctime":1620374371,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620374371","product_id":100039001,"comment_content":"意思就是将原来service中的业务逻辑，转移一部分到entity中，将原来只是db数据载体的entity充血为domain，这样原来贫血的entity就是数据和逻辑相结合的了。那原来mybatis对应的dao层的位置在哪里呢？充血之后的domain和dao层的关系怎么处理转化呢？","like_count":0},{"had_liked":false,"id":290486,"user_name":"Helios","can_delete":false,"product_type":"c1","uid":1380758,"ip_address":"","ucode":"BE6B98EE8F0D09","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKJrOl63enWXCRxN0SoucliclBme0qrRb19ATrWIOIvibKIz8UAuVgicBMibIVUznerHnjotI4dm6ibODA/132","comment_is_top":false,"comment_ctime":1619585545,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619585545","product_id":100039001,"comment_content":"充血模型的意义在于将数据和操作结合起来。说白了就是封装。","like_count":0},{"had_liked":false,"id":289627,"user_name":"徐同学呀","can_delete":false,"product_type":"c1","uid":1252813,"ip_address":"","ucode":"03383EE820514D","user_header":"https://static001.geekbang.org/account/avatar/00/13/1d/cd/3819726f.jpg","comment_is_top":false,"comment_ctime":1619102469,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619102469","product_id":100039001,"comment_content":"DDD(Domain Driven Design)，领域驱动设计，领域模型驱动领域行为。领域行为是领域模式的基本行为，是其一部分。并不是所有的业务逻辑都可以放到领域模型里，要保证领域模型的单一职责，所以service存在的意义就是跨领域整合和交互，以及跨层级交互等。而controller和Repository还是贫血模型，因为业务逻辑单一并没有必要设计成DDD，不可矫枉过正。","like_count":0},{"had_liked":false,"id":288789,"user_name":"白开水","can_delete":false,"product_type":"c1","uid":2441239,"ip_address":"","ucode":"9D4CD6057200FD","user_header":"","comment_is_top":false,"comment_ctime":1618674367,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618674367","product_id":100039001,"comment_content":"我悟了","like_count":0},{"had_liked":false,"id":288311,"user_name":"xgh","can_delete":false,"product_type":"c1","uid":1985935,"ip_address":"","ucode":"3C508E2ED32508","user_header":"https://static001.geekbang.org/account/avatar/00/1e/4d/8f/e3f171c1.jpg","comment_is_top":false,"comment_ctime":1618403922,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618403922","product_id":100039001,"comment_content":"transfer会有数据库死锁的可能性吧，先锁from再锁to，另一个事务转账反过来，不过确实有点较真了，这不是本课重点","like_count":0},{"had_liked":false,"id":283533,"user_name":"Graham","can_delete":false,"product_type":"c1","uid":1994570,"ip_address":"","ucode":"C2545DE16EC3DD","user_header":"","comment_is_top":false,"comment_ctime":1615810454,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615810454","product_id":100039001,"comment_content":"DDD 可能 已经按照domain把业务都规整好了，便于后续的持续更新。因为全部耦合在service 层，只会使service层越来越大，代码越来越臃肿。<br>现在还流行写handler，用handler 来做业务归类，但是要预防 handler 类代码越来越大","like_count":0},{"had_liked":false,"id":281184,"user_name":"sleepingcat","can_delete":false,"product_type":"c1","uid":1809713,"ip_address":"","ucode":"AF7E7ED85E557F","user_header":"","comment_is_top":false,"comment_ctime":1614611732,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614611732","product_id":100039001,"comment_content":"有没有人可以告诉我一下，为啥三方支付里多了个商家银行卡，我一开始以为那个公共银行卡就是商家银行卡，按理左边的虚拟钱包角色数量，应该和右边的银行卡角色数量一样吧。","like_count":0},{"had_liked":false,"id":280287,"user_name":"IF-Processing","can_delete":false,"product_type":"c1","uid":1205736,"ip_address":"","ucode":"8298C3C9320D94","user_header":"https://static001.geekbang.org/account/avatar/00/12/65/e8/d1e52dbb.jpg","comment_is_top":false,"comment_ctime":1614151831,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1614151831","product_id":100039001,"comment_content":"Entity -&gt; Domain -&gt; DTO 转换过程中没有性能损耗吗？尤其是列表页面的DTO，经过大量的转换动作，必然伴随着大量的new 与 GC操作，这样不会对系统性能造成负担吗？","like_count":0},{"had_liked":false,"id":280001,"user_name":"DreamHeng","can_delete":false,"product_type":"c1","uid":1599490,"ip_address":"","ucode":"5562BFD8375138","user_header":"https://static001.geekbang.org/account/avatar/00/18/68/02/2d394d89.jpg","comment_is_top":false,"comment_ctime":1614050816,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614050816","product_id":100039001,"comment_content":"对DDD的大致了解就是要在分析模型上做到很好，但是这要求开发人员或者设计人员具有很专业的业务知识，但是现实中开发的都是底层的程序员，不可能对业务做到深入了解，那么现实中用DDD就感觉很难。","like_count":0},{"had_liked":false,"id":275097,"user_name":"Geek_cca021","can_delete":false,"product_type":"c1","uid":2209611,"ip_address":"","ucode":"09675F01BB895E","user_header":"","comment_is_top":false,"comment_ctime":1611306408,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611306408","product_id":100039001,"comment_content":"这个充血模型很考验业务的顺序一致性。特别是对于更新操作。建设这个人同时发生了一笔扣钱或者是充值操作。这个walletRepo.updateBalance(walletId, wallet.balance()); 结果就不可预估了。","like_count":0},{"had_liked":false,"id":274522,"user_name":"鲁鸣","can_delete":false,"product_type":"c1","uid":2152306,"ip_address":"","ucode":"974BA3C3E64630","user_header":"https://static001.geekbang.org/account/avatar/00/20/d7/72/cbef720d.jpg","comment_is_top":false,"comment_ctime":1611046595,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611046595","product_id":100039001,"comment_content":"钱包交易流水的第二种设计是没有办法查询哪一个钱包给谁转账的吧","like_count":0},{"had_liked":false,"id":273123,"user_name":"gsy_yang","can_delete":false,"product_type":"c1","uid":2412406,"ip_address":"","ucode":"48471A72E4A2A3","user_header":"","comment_is_top":false,"comment_ctime":1610445833,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610445833","product_id":100039001,"comment_content":"都是用的贫血，关于DDD的实际应用场景，可否归类说明？虽说有的业务service非常长，但是也并不知道能否使用DDD来去做改进。现学得不到现用","like_count":0},{"had_liked":false,"id":270957,"user_name":"山海","can_delete":false,"product_type":"c1","uid":1702117,"ip_address":"","ucode":"77FA9967E58FA3","user_header":"https://static001.geekbang.org/account/avatar/00/19/f8/e5/119d5c15.jpg","comment_is_top":false,"comment_ctime":1609329156,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1609329156","product_id":100039001,"comment_content":"其实一个再复杂或者简单的业务系统完全可以类比成计算机系统。 ","like_count":0},{"had_liked":false,"id":268984,"user_name":"乐多🙉","can_delete":false,"product_type":"c1","uid":2346451,"ip_address":"","ucode":"AE515FFF1CA582","user_header":"https://static001.geekbang.org/account/avatar/00/23/cd/d3/7e4d80e8.jpg","comment_is_top":false,"comment_ctime":1608458942,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608458942","product_id":100039001,"comment_content":"没懂的是,充血会有庞大的domain吧  这种情况怎么设计下去 不懂,<br>","like_count":0},{"had_liked":false,"id":268889,"user_name":"三生","can_delete":false,"product_type":"c1","uid":1606669,"ip_address":"","ucode":"1DE1A2693A5E33","user_header":"https://static001.geekbang.org/account/avatar/00/18/84/0d/4e289b94.jpg","comment_is_top":false,"comment_ctime":1608392537,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608392537","product_id":100039001,"comment_content":"感觉ddd应该是可以通过通用语言（application service）来建立有效沟通，并且可以对抗频繁的业务变更。","like_count":0},{"had_liked":false,"id":268858,"user_name":"帝都钟汉良","can_delete":false,"product_type":"c1","uid":1159615,"ip_address":"","ucode":"69378CAD75A773","user_header":"https://static001.geekbang.org/account/avatar/00/11/b1/bf/ebf045c7.jpg","comment_is_top":false,"comment_ctime":1608375167,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608375167","product_id":100039001,"comment_content":"老师讲的这个代码分层相对比较传统一些，我觉得比较六边型架构可能会更好一点，Domain层做为核心层，Serivce层也不用依赖Repo层，Serice负责协调多个Domain就行了，Repo层通过依赖倒置Domain层的持久化接口就行了","like_count":0},{"had_liked":false,"id":267733,"user_name":"Geek_ac6ae6","can_delete":false,"product_type":"c1","uid":1591745,"ip_address":"","ucode":"5293542776E48E","user_header":"","comment_is_top":false,"comment_ctime":1607908233,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607908233","product_id":100039001,"comment_content":"老师，请教一下，是不是所有的domain领域模型都不会直接和db打交道，只是些纯业务，如果domain依赖一些db数据，都是外部传入到domain么？","like_count":0},{"had_liked":false,"id":266734,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1607475997,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607475997","product_id":100039001,"comment_content":"最近几个月开始用ddd，我的组长把领域服务和repository缠在一起，每次调用他那边，repository还得提前处理没有注入的问题","like_count":0},{"had_liked":false,"id":265676,"user_name":"天下行走","can_delete":false,"product_type":"c1","uid":1462449,"ip_address":"","ucode":"73A4CD8BB91235","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLfrbMvhKQYhxP6ziaHaj4KUNRzst8u7BZsWUsazK8oTLXcNH6sDGITl6icy3IiaGFe9Iiae12LuTrF1g/132","comment_is_top":false,"comment_ctime":1606978427,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606978427","product_id":100039001,"comment_content":"贫血和充血这个翻译在第一次引入的时候真的是给跪了。这两个词和这两个模型能有一丁点都联系不起来","like_count":0},{"had_liked":false,"id":262503,"user_name":"JRich","can_delete":false,"product_type":"c1","uid":1114901,"ip_address":"","ucode":"66AE9D61533960","user_header":"https://static001.geekbang.org/account/avatar/00/11/03/15/293a185d.jpg","comment_is_top":false,"comment_ctime":1605752571,"is_pvip":false,"replies":[{"id":"96137","content":"至于叫什么不是关键，关键是理解它是用来做什么的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1606701374,"ip_address":"","comment_id":262503,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1605752571","product_id":100039001,"comment_content":"老师，上一节不是说业务模型是BO吗，怎么这里又叫domain呢，我们实际开发过程中数据库对象（entity）叫domain，这个该怎么区分呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509862,"discussion_content":"至于叫什么不是关键，关键是理解它是用来做什么的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606701374,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":262316,"user_name":"淤白","can_delete":false,"product_type":"c1","uid":1206503,"ip_address":"","ucode":"D1E65DC40DAF68","user_header":"https://static001.geekbang.org/account/avatar/00/12/68/e7/ee47d0e2.jpg","comment_is_top":false,"comment_ctime":1605691823,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605691823","product_id":100039001,"comment_content":"打卡：用Java实现了充血模式案例。","like_count":0},{"had_liked":false,"id":261338,"user_name":"Dana","can_delete":false,"product_type":"c1","uid":1241142,"ip_address":"","ucode":"FE94F5E3987DBA","user_header":"https://static001.geekbang.org/account/avatar/00/12/f0/36/020428c7.jpg","comment_is_top":false,"comment_ctime":1605276418,"is_pvip":false,"replies":[{"id":"96148","content":"应该差不多吧，理解思路是重点","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1606701476,"ip_address":"","comment_id":261338,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1605276418","product_id":100039001,"comment_content":"老师里面的代码 不怎么看得懂 没学过 java ","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509450,"discussion_content":"应该差不多吧，理解思路是重点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606701476,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":258367,"user_name":"Geek_f732e5","can_delete":false,"product_type":"c1","uid":2282385,"ip_address":"","ucode":"16060F5A969778","user_header":"","comment_is_top":false,"comment_ctime":1604398870,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604398870","product_id":100039001,"comment_content":"学了这个对代码得架构有了一个深刻得了解","like_count":0},{"had_liked":false,"id":258101,"user_name":"Kingram","can_delete":false,"product_type":"c1","uid":2247700,"ip_address":"","ucode":"212E403E81F2FC","user_header":"https://static001.geekbang.org/account/avatar/00/22/4c/14/8fa39544.jpg","comment_is_top":false,"comment_ctime":1604298783,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604298783","product_id":100039001,"comment_content":"基于充血模型的DDD开发就是将属于BO的业务从Service中抽离出来，封装到BO中，形成Domain领域模型，将复杂的业务逻辑进行解耦，增加代码的可复用性。","like_count":0},{"had_liked":false,"id":257066,"user_name":"李卫卫","can_delete":false,"product_type":"c1","uid":1367591,"ip_address":"","ucode":"F89946C5BF9EA1","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo6qUrJUgVNIMeWy4ffwR7AiahZSuiaOSGeicwSydRm0s5WUwzqxTib8hCuf6ticP8sKmabTf9WSgYHRxw/132","comment_is_top":false,"comment_ctime":1603847181,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603847181","product_id":100039001,"comment_content":"是不是Domain那层需要依赖service做数据的增删改操作，但同时service又因为要做跨域整合，可能又要依赖domain，会不会有循环依赖的问题？","like_count":0},{"had_liked":false,"id":257037,"user_name":"徐丶昌隆","can_delete":false,"product_type":"c1","uid":1604438,"ip_address":"","ucode":"9EE3F971F90C4F","user_header":"https://static001.geekbang.org/account/avatar/00/18/7b/56/80a75331.jpg","comment_is_top":false,"comment_ctime":1603840918,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603840918","product_id":100039001,"comment_content":"有些书要早读，有些文章要早看，感谢作者呀！","like_count":0},{"had_liked":false,"id":255365,"user_name":"紫日","can_delete":false,"product_type":"c1","uid":1207410,"ip_address":"","ucode":"73A8DEE323AC19","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqXSb2jAzlMM0JdTjWrNiaq2uR9eeloBYp906POddb9evmuj5f4CUoO6ge8TibibwtZicnl1sRHic9rW7g/132","comment_is_top":false,"comment_ctime":1603330007,"is_pvip":true,"discussion_count":0,"race_medal":4,"score":"1603330007","product_id":100039001,"comment_content":"根据业务复杂程度绝决定是否用充血模型，充血模型是复杂业务解决的一种方式。","like_count":0},{"had_liked":false,"id":250312,"user_name":"Chris","can_delete":false,"product_type":"c1","uid":1689346,"ip_address":"","ucode":"50A51AE2110A7A","user_header":"https://static001.geekbang.org/account/avatar/00/19/c7/02/8346ebf6.jpg","comment_is_top":false,"comment_ctime":1601020494,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601020494","product_id":100039001,"comment_content":"DDD像是面向过程和面向对象的结合，在逻辑复杂部分用面向对象提供代码复用，解耦与可维护性，在逻辑简单的部分面向对象体现不出优势，用面向过程编写，这样理解对吗","like_count":0},{"had_liked":false,"id":249663,"user_name":"huaweichen","can_delete":false,"product_type":"c1","uid":1249907,"ip_address":"","ucode":"974917DE2AE92E","user_header":"https://static001.geekbang.org/account/avatar/00/13/12/73/2183839d.jpg","comment_is_top":false,"comment_ctime":1600747004,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600747004","product_id":100039001,"comment_content":"建议将完整一些的代码放到 github 上 然后感兴趣的话可以自行去github 上研究或者提 pr   +1","like_count":0},{"had_liked":false,"id":248663,"user_name":"WilliamVector","can_delete":false,"product_type":"c1","uid":1898112,"ip_address":"","ucode":"E0D3C3D4FCB7C9","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f6/80/85ec2c2a.jpg","comment_is_top":false,"comment_ctime":1600255681,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600255681","product_id":100039001,"comment_content":"【要点】<br>1、基于充血模型的 DDD 开发模式跟基于贫血模型的传统开发模式相比，主要区别在 Service 层。在基于充血模型的开发模式下，我们将部分原来在 Service 类中的业务逻辑移动到了一个或多个充血的 Domain 领域模型中，让 Service 类的实现依赖这些 Domain 类。<br>2、在基于充血模型的 DDD 开发模式下，Service 类并不会完全移除，是因为需要Service类负责一些不适合放在 Domain 类中的功能。比如，负责与 Repository 层打交道、跨领域模型的业务聚合功能、幂等事务等非功能性的工作。<br>3、基于充血模型的 DDD 开发模式跟基于贫血模型的传统开发模式相比，Controller 层和 Repository 层的代码基本上相同。这是因为，Repository 层的 Entity 生命周期有限，Controller 层的 VO 只是单纯作为一种 DTO。两部分的业务逻辑都不会太复杂。业务逻辑主要集中在 Service 层。所以，Repository 层和 Controller 层继续沿用贫血模型的设计思路是没有问题的。<br>【思考】<br>个人对DDD开发模式的思考：<br>1、对于DDD开发模式，需要在项目初期对所有业务有较深的了解和整体的较为详细的设计，对于要求开发时效的项目来说，可能不太适用，因为等设计好了开发完了，市场可能也被抢完了。很多时候，我们新开发的系统都是为了快速响应市场需求，所以DDD模式在这种时候一般不会被采用。这种情况一般是先采用贫血模式，让业务尽快上线，等业务稳定后，整个开发团队对业务也非常熟悉了，需要解决的问题也都暴露了，然后再按照DDD的模式迭代升级。<br>2、如果项目时间相对比较充裕，而且系统确实很复杂，团队里的Leader也确实能把控得住整个项目，那就应该以DDD的模式进行开发。","like_count":0},{"had_liked":false,"id":246103,"user_name":"JerryZhu","can_delete":false,"product_type":"c1","uid":1591223,"ip_address":"","ucode":"76850CD45786C1","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/b7/b30472fd.jpg","comment_is_top":false,"comment_ctime":1599179765,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599179765","product_id":100039001,"comment_content":"至于如何理解ddd，我个人觉得，在当前微服务大行其道的背景下，  如果一个业务模块的功能非常简单，甚至不包含很多逻辑，那么这个模块其实用贫血模型会更加合适，  假如一个模块，尤其是金融领域的，如涉及到账户，账务 这类复杂业务逻辑， 建议转成ddd，会更加适合变化","like_count":0},{"had_liked":false,"id":246101,"user_name":"JerryZhu","can_delete":false,"product_type":"c1","uid":1591223,"ip_address":"","ucode":"76850CD45786C1","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/b7/b30472fd.jpg","comment_is_top":false,"comment_ctime":1599179633,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599179633","product_id":100039001,"comment_content":"最近团队准备将老系统重做，用ddd领域建模， 正愁无法很好的理解，看了一篇阿里内部的分享文章，还是有点迷茫，被老师这么一解释，更加形象了！感谢","like_count":0},{"had_liked":false,"id":246050,"user_name":"一尾","can_delete":false,"product_type":"c1","uid":1517556,"ip_address":"","ucode":"67D404036231D1","user_header":"https://static001.geekbang.org/account/avatar/00/17/27/f4/a1ce6248.jpg","comment_is_top":false,"comment_ctime":1599143793,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599143793","product_id":100039001,"comment_content":"我做的界面开发。遇到的场景是，一般定义了一个数据类之后，数据类里面有字段也有它的方法。然后程序里可能会有很多这样的数据类实例化的对象，然后用一个manager把他们管理起来。","like_count":0},{"had_liked":false,"id":245728,"user_name":"两鱼三网的辉","can_delete":false,"product_type":"c1","uid":1463393,"ip_address":"","ucode":"CC085447DF5B1D","user_header":"https://static001.geekbang.org/account/avatar/00/16/54/61/5e9de4db.jpg","comment_is_top":false,"comment_ctime":1599035955,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599035955","product_id":100039001,"comment_content":"基于充血模型的DDD开发模式和基于贫血模型开发模式相比，不同在于充血模型将部分业务逻辑放在BO中，service中只保留与repository交互、跨领域模型业务聚合、幂等事务等，service依赖Bo,优点是可读性提高，方便理解业务，在微服务开发中需要拆分业务利用这种开发模式很合适","like_count":0},{"had_liked":false,"id":244371,"user_name":"郑祖煌","can_delete":false,"product_type":"c1","uid":1469608,"ip_address":"","ucode":"49A0D2E3279826","user_header":"https://static001.geekbang.org/account/avatar/00/16/6c/a8/1922a0f5.jpg","comment_is_top":false,"comment_ctime":1598495024,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598495024","product_id":100039001,"comment_content":"我感觉两个流水表有点冗余，可以把wallet流水表的 +  - 字段放到线性流水表上就可以得到解决了。","like_count":0},{"had_liked":false,"id":243892,"user_name":"大力","can_delete":false,"product_type":"c1","uid":1364353,"ip_address":"","ucode":"1B2125C519443D","user_header":"https://static001.geekbang.org/account/avatar/00/14/d1/81/89ba9d81.jpg","comment_is_top":false,"comment_ctime":1598320896,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598320896","product_id":100039001,"comment_content":"除了充血与贫血模型的讨论，我更从这篇文章中进修了如何合理地进行需求分析与系统设计。谢谢老师。","like_count":0},{"had_liked":false,"id":243811,"user_name":"鲲鹏飞九万里","can_delete":false,"product_type":"c1","uid":1093920,"ip_address":"","ucode":"82BD0C789DF612","user_header":"https://static001.geekbang.org/account/avatar/00/10/b1/20/8718252f.jpg","comment_is_top":false,"comment_ctime":1598281174,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598281174","product_id":100039001,"comment_content":"没有记录 出账、入账的流水","like_count":0},{"had_liked":false,"id":243694,"user_name":"郑大钱","can_delete":false,"product_type":"c1","uid":1503067,"ip_address":"","ucode":"114CF48056880E","user_header":"https://static001.geekbang.org/account/avatar/00/16/ef/5b/ff28088f.jpg","comment_is_top":false,"comment_ctime":1598251865,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598251865","product_id":100039001,"comment_content":"钱包系统的设计思路把我看得一愣一愣的，涨姿势了！<br>解决问题的过程中，我容易陷入技术细节里。如何保证数据的一致性，可以依赖数据库事务的原子性，如果对数据做了分库分表，那我可能得引入一些分布式框架来保证多库多表数据的一致性了。但这可能会极大的损害性能。<br>但如果重新回到业务起点，重新定义问题“如何让用户看到正确的转账状态”，我们完全可以有一个中间状态“处理中”，当入账和出账都执行成功的时候，这笔转账才标记为成功，否则标记为失败，转入异常流程。<br>产品大大也是讲道理的，以性能为代价添加一个状态，产品大大是很乐于接受的。","like_count":0},{"had_liked":false,"id":243057,"user_name":"Gopher","can_delete":false,"product_type":"c1","uid":1206229,"ip_address":"","ucode":"3C1F9012BB486D","user_header":"https://static001.geekbang.org/account/avatar/00/12/67/d5/1b26b725.jpg","comment_is_top":false,"comment_ctime":1597933680,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597933680","product_id":100039001,"comment_content":"充血模型与贫血模型的区别并不只是说把service 层的逻辑放到domain 层，而是要学会全局思考自顶向下的思考才是最终要，这也就是前面提到到，一定要梳理好业务先。","like_count":0},{"had_liked":false,"id":242606,"user_name":"Ilearning99","can_delete":false,"product_type":"c1","uid":1989119,"ip_address":"","ucode":"7901836A2C47EF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/qOdqzmC507sibL6sichNSDaVmyoMKibEIqHWpic4CftgOQnoA3QKeRPwic9j1Ha8MLtzzqzfSRavR9GWMju09SMADUg/132","comment_is_top":false,"comment_ctime":1597796875,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597796875","product_id":100039001,"comment_content":"DDD领域驱动，似乎是将service做了一定的功能分拆，对业务逻辑进行解耦。<br><br>其实这一篇，我对于流水中的交易，编程两条语句之后如下，如果保证操作的原子性不太清楚。<br>debit(fromWalletId, amount); <br>credit(toWalletId, amount);","like_count":0},{"had_liked":false,"id":240288,"user_name":"double mu","can_delete":false,"product_type":"c1","uid":1707561,"ip_address":"","ucode":"62F82999EDDA56","user_header":"https://static001.geekbang.org/account/avatar/00/1a/0e/29/6c8034e3.jpg","comment_is_top":false,"comment_ctime":1596853559,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596853559","product_id":100039001,"comment_content":"依赖易变的数据开展业务，那么业务实现也是有变动风险的。<br>依赖自己设计的业务模型开展业务，业务模型不变，业务实现也不会变，所以把易变的数据代入到我们的业务模型里来，当数据发生变化时，我们只需要改变数据代入业务模型的策略。这就要求我们设计业务模型时要足够通用，足够稳定，足够抽象。<br>这是我的一点理解。","like_count":0},{"had_liked":false,"id":239739,"user_name":"罗盖","can_delete":false,"product_type":"c1","uid":1357135,"ip_address":"","ucode":"1B098D4CA6096A","user_header":"https://static001.geekbang.org/account/avatar/00/14/b5/4f/10c694db.jpg","comment_is_top":false,"comment_ctime":1596630348,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596630348","product_id":100039001,"comment_content":"感觉老师在钱包数据表的讲解处前后相矛盾，当然有可能是我的理解错误，如下：<br>（1）老师在开头部分说包含有入账和出账字段的数据表才能更好的支持数据的一致性，既然如此，后面提到的钱包交易流水数据表和虚拟钱包交易流水数据表中应该是钱包交易流水的数据表支持数据一致性，但您说的是虚拟钱包交易流水数据表<br>（2）如果虚拟钱包交易流水数据表不支持数据一致性，要它又有何用。。。？","like_count":0},{"had_liked":false,"id":239440,"user_name":"Aaron 延亮","can_delete":false,"product_type":"c1","uid":1394147,"ip_address":"","ucode":"48DE83DDF45A61","user_header":"https://static001.geekbang.org/account/avatar/00/15/45/e3/26d1e69c.jpg","comment_is_top":false,"comment_ctime":1596532492,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596532492","product_id":100039001,"comment_content":"不懂web开发，这种贫血理念不太理解，反而充血好理解","like_count":0},{"had_liked":false,"id":239075,"user_name":"owen","can_delete":false,"product_type":"c1","uid":1902116,"ip_address":"","ucode":"0E79DA9080A085","user_header":"https://static001.geekbang.org/account/avatar/00/1d/06/24/c2ee3b16.jpg","comment_is_top":false,"comment_ctime":1596427715,"is_pvip":false,"replies":[{"id":"89275","content":"不是，orm实体类不应该有业务逻辑的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1597454612,"ip_address":"","comment_id":239075,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1596427715","product_id":100039001,"comment_content":"是不是可以理解为，orm的实体类加上业务逻辑判断，Service层只负责和Dao 层交互","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502968,"discussion_content":"不是，orm实体类不应该有业务逻辑的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597454612,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1707561,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/0e/29/6c8034e3.jpg","nickname":"double mu","note":"","ucode":"62F82999EDDA56","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297277,"discussion_content":"orm的实体类，需要转换成自己的业务模型所使用的数据结构。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596853836,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":239025,"user_name":"David","can_delete":false,"product_type":"c1","uid":1021825,"ip_address":"","ucode":"22CBBC13FC97A9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/97/81/e1eaf621.jpg","comment_is_top":false,"comment_ctime":1596418261,"is_pvip":true,"replies":[{"id":"89271","content":"可以先用一个，必要的时候再分开多个","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1597454272,"ip_address":"","comment_id":239025,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1596418261","product_id":100039001,"comment_content":"我有一个问题 ，我的系统太简单了，如果定义这么多bo vo全部精力都用在数据转换上了 。工期又特别赶 怎么办？一般我都是只有一个实体类，把复用的逻辑放在实体类中，可以怎么优化一下呢？请教老师","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502943,"discussion_content":"可以先用一个，必要的时候再分开多个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597454272,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":237859,"user_name":"JasonZ","can_delete":false,"product_type":"c1","uid":1104818,"ip_address":"","ucode":"992193AE44C39C","user_header":"https://static001.geekbang.org/account/avatar/00/10/db/b2/29b4f22b.jpg","comment_is_top":false,"comment_ctime":1595987522,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595987522","product_id":100039001,"comment_content":"钱包交易流水和虚拟钱包交易流水，记录2次。仅仅是为了虚拟钱包交易流水不感知交易类型。那就带来了数据一致性问题，要确保2条流水状态一致，代价是不是有点大","like_count":0},{"had_liked":false,"id":236703,"user_name":"幽林萌逐","can_delete":false,"product_type":"c1","uid":1520451,"ip_address":"","ucode":"E6D95EC891800F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLqrAA1j4Oyy6ibicNOicn8K0olrEjtLLanic8V0y9icia6cvCVRCiabOm5llC0WhzcSWvaI2fia75hYbvjrQ/132","comment_is_top":false,"comment_ctime":1595506166,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595506166","product_id":100039001,"comment_content":"打卡，总结下我的观点，domain里的业务逻辑属于完全的职责单子，并且不耦合其他的类，而service主要执行聚合操作，调用各个层级的依赖类，这么做进一步的做到了解耦，职业更为单一，也就更利于维护。","like_count":0},{"had_liked":false,"id":233564,"user_name":"沧浪之水","can_delete":false,"product_type":"c1","uid":1126491,"ip_address":"","ucode":"3819CB439BFB4C","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/5b/ed3b2211.jpg","comment_is_top":false,"comment_ctime":1594355498,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594355498","product_id":100039001,"comment_content":"我个人认为可以把数据库操作从service中移到Entity对象中，使Entity对象也充血。这样更加符合人的理解，比如要想获得一个红色的苹果，那么去苹果对象中找获取红色苹果的方法。","like_count":0},{"had_liked":false,"id":233134,"user_name":"锤他","can_delete":false,"product_type":"c1","uid":1056088,"ip_address":"","ucode":"E0ADB985C67BB0","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/58/255fec76.jpg","comment_is_top":false,"comment_ctime":1594229449,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594229449","product_id":100039001,"comment_content":"我的理解是DDD围绕Domain来降低复杂度：<br>Domain定义某一个抽象业务对象的行为；（定义）<br>Service用于将Domain的行为映射为一些的多个底层操作 &#47; 三方操作的组合. （解释与实现）","like_count":0},{"had_liked":false,"id":231328,"user_name":"红豆成香","can_delete":false,"product_type":"c1","uid":1488601,"ip_address":"","ucode":"FB8FBB639B4BA6","user_header":"https://static001.geekbang.org/account/avatar/00/16/b6/d9/4d8a4d4c.jpg","comment_is_top":false,"comment_ctime":1593653160,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593653160","product_id":100039001,"comment_content":"真的是干货，学的我很开心","like_count":0},{"had_liked":false,"id":230823,"user_name":"Java垒墙工程师","can_delete":false,"product_type":"c1","uid":1937062,"ip_address":"","ucode":"E76AE44A9C76AE","user_header":"https://static001.geekbang.org/account/avatar/00/1d/8e/a6/c3286b61.jpg","comment_is_top":false,"comment_ctime":1593504679,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593504679","product_id":100039001,"comment_content":"如果虚拟钱包不包含任何与数据库直接的操作，如何完成业务呢？领域属性存在哪里呢？","like_count":0},{"had_liked":false,"id":230818,"user_name":"Geek_2c3942","can_delete":false,"product_type":"c1","uid":2029036,"ip_address":"","ucode":"67E0B5CC23AD07","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/N9pMvCZTjULxf3nWtYH85MMLR2Vj3390u3buicPZoJfa7dZbOKwrmy7VtLTcgwQNUQXiaAzicT1ZQDxSYHaIbXUsQ/132","comment_is_top":false,"comment_ctime":1593502803,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593502803","product_id":100039001,"comment_content":"充血模型可以看做一种特殊的继承，VirtualWallet是子类 VirtualWalletService是父类，他俩相互实现功与接口的解耦，对于复杂系统来说，这种方式要比贫血模型好的多","like_count":0},{"had_liked":false,"id":230592,"user_name":"Henry","can_delete":false,"product_type":"c1","uid":1929375,"ip_address":"","ucode":"7C554C97935443","user_header":"https://static001.geekbang.org/account/avatar/00/1d/70/9f/741cd6a4.jpg","comment_is_top":false,"comment_ctime":1593424328,"is_pvip":false,"replies":[{"id":"86374","content":"你的意思是，利用spring事务+单个数据库的事务，来解决你说的原子性问题。但是，有可能数据并非在一个数据库，而且，我也并不是用spring事务来解决事务问题的😂","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1594601636,"ip_address":"","comment_id":230592,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1593424328","product_id":100039001,"comment_content":"transfer操作try catch里的操作跑出异常会导致整个事务回滚，并不会记录交易记录；应该在另一个service组合debit 和credit 操作并用将事务Propagation设为REQUIRES_NEW才能保证原子性；。。。虽然这并不是这堂客的重点；","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499950,"discussion_content":"你的意思是，利用spring事务+单个数据库的事务，来解决你说的原子性问题。但是，有可能数据并非在一个数据库，而且，我也并不是用spring事务来解决事务问题的😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594601636,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":226195,"user_name":"maybe","can_delete":false,"product_type":"c1","uid":1475528,"ip_address":"","ucode":"93D160F617E750","user_header":"https://static001.geekbang.org/account/avatar/00/16/83/c8/5ce842f6.jpg","comment_is_top":false,"comment_ctime":1591975865,"is_pvip":false,"replies":[{"id":"86447","content":"理解的没问题，不过阿里编程规范里的manager我不是很清楚是不是就是domain层","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1594632716,"ip_address":"","comment_id":226195,"utype":1}],"discussion_count":1,"race_medal":4,"score":"1591975865","product_id":100039001,"comment_content":"之前对领域模型有重大误解，把他做成了类似repository。现在的理解应该是domain是service层中抽取出来的一些职责单一的点，数据与行为一体的充血领域类。看到阿里编程规范里面的manager层应该就是领域模型层了，controller、service 、manager、dao。不知道我现在的理解是否对了，希望老师指点迷津","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498143,"discussion_content":"理解的没问题，不过阿里编程规范里的manager我不是很清楚是不是就是domain层","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594632716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":224444,"user_name":"永远不要低估一颗冠军的心","can_delete":false,"product_type":"c1","uid":1339230,"ip_address":"","ucode":"FF0DD7382CD3CA","user_header":"https://static001.geekbang.org/account/avatar/00/14/6f/5e/3f7e9ccd.jpg","comment_is_top":false,"comment_ctime":1591403075,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591403075","product_id":100039001,"comment_content":"没有看出Service 类是怎么实现依赖 VirtualWallet 类的，没有看出VirtualWallet 中方法的哪一部分是从service中拆出来的，看不出VirtualWallet 这个领域模型类有什么优势","like_count":0},{"had_liked":false,"id":224325,"user_name":"阳超","can_delete":false,"product_type":"c1","uid":1792066,"ip_address":"","ucode":"239037A8E3F055","user_header":"https://static001.geekbang.org/account/avatar/00/1b/58/42/640dd096.jpg","comment_is_top":false,"comment_ctime":1591345529,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591345529","product_id":100039001,"comment_content":"domain 是否并不是在某一个sercer层面而是一个作为一个公用的对外暴露？","like_count":0},{"had_liked":false,"id":223996,"user_name":"马球先生","can_delete":false,"product_type":"c1","uid":1119609,"ip_address":"","ucode":"858C2CE0E494C5","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/79/efde2a69.jpg","comment_is_top":false,"comment_ctime":1591252089,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591252089","product_id":100039001,"comment_content":"感觉充血模型的domain类 可以更方便的做单元测试 <br>与数据层等依赖层分离后 减少了依赖 代码更提纯了 ","like_count":0},{"had_liked":false,"id":221756,"user_name":"Zero","can_delete":false,"product_type":"c1","uid":2015022,"ip_address":"","ucode":"5FAC7E84CD622F","user_header":"https://static001.geekbang.org/account/avatar/00/1e/bf/2e/e586ffbd.jpg","comment_is_top":false,"comment_ctime":1590585263,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590585263","product_id":100039001,"comment_content":"充血模型的DDD其实就是完全诠释的OOP的特性","like_count":0},{"had_liked":false,"id":219824,"user_name":"注定非凡","can_delete":false,"product_type":"c1","uid":1113597,"ip_address":"","ucode":"80673056E131B7","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/fd/326be9bb.jpg","comment_is_top":false,"comment_ctime":1590107913,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1590107913","product_id":100039001,"comment_content":"充血模型：自己的事情自己做，service是胶水，协作沟通<br>贫血模型：一盘棋思想，集中调度，统一指挥","like_count":0},{"had_liked":false,"id":219075,"user_name":"MadleS_F","can_delete":false,"product_type":"c1","uid":1670997,"ip_address":"","ucode":"D6B6C29F576B7A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoV9IsMsiawicpaaTXqhPzqH2mA5HUKUSyJ5fbUhoqTKhNRxJ5dibhs5bkTqCSqcuolZT7sam2sn8sBA/132","comment_is_top":false,"comment_ctime":1589940092,"is_pvip":false,"replies":[{"id":"86626","content":"必要的时候也可以添加setter、getter方法的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1594783954,"ip_address":"","comment_id":219075,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1589940092","product_id":100039001,"comment_content":"老师:<br>domain 没有 get set方法，如何将entity convert成domain呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495672,"discussion_content":"必要的时候也可以添加setter、getter方法的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594783954,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":217334,"user_name":"batman","can_delete":false,"product_type":"c1","uid":1266482,"ip_address":"","ucode":"73C30ACFC0D612","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/IIkdC2gohpcibib0AJvSdnJQefAuQYGlLySQOticThpF7Ck9WuDUQLJlgZ7ic13LIFnGBXXbMsSP3nZsbibBN98ZjGA/132","comment_is_top":false,"comment_ctime":1589465962,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1589465962","product_id":100039001,"comment_content":"如果是支付操作，这里的虚拟钱包流水表，会生成两条记录（一加一减），那对应的两条虚拟钱包流水ID是相同的还是不同？<br><br>如果不同，那钱包流水表里面是不是少了个虚拟钱包流水ID？","like_count":0},{"had_liked":false,"id":217151,"user_name":"师哥","can_delete":false,"product_type":"c1","uid":1333376,"ip_address":"","ucode":"A86CD1661D370F","user_header":"https://static001.geekbang.org/account/avatar/00/14/58/80/c9e232b6.jpg","comment_is_top":false,"comment_ctime":1589427544,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589427544","product_id":100039001,"comment_content":"DDD 主要是解决在复杂业务中，代码的复用性问题。贫血还是领域要针对具体的业务而言。","like_count":0},{"had_liked":false,"id":214654,"user_name":"Ifdevil","can_delete":false,"product_type":"c1","uid":1212912,"ip_address":"","ucode":"79DB0ADE9AD082","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/f0/695ca05f.jpg","comment_is_top":false,"comment_ctime":1588776945,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588776945","product_id":100039001,"comment_content":"只有我一个人觉得DDD更人性化吗？^_^","like_count":0},{"had_liked":false,"id":214442,"user_name":"ll.py","can_delete":false,"product_type":"c1","uid":1165828,"ip_address":"","ucode":"7E3C3C1D262372","user_header":"https://static001.geekbang.org/account/avatar/00/11/ca/04/11cf22de.jpg","comment_is_top":false,"comment_ctime":1588750374,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588750374","product_id":100039001,"comment_content":"在service层还需跟Repository 和 Entity打交道, 充血模型中的domain职责更加单一, 只包含业务逻辑","like_count":0},{"had_liked":false,"id":212089,"user_name":"Garwen","can_delete":false,"product_type":"c1","uid":1045062,"ip_address":"","ucode":"C76346E1734AB8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f2/46/09c457eb.jpg","comment_is_top":false,"comment_ctime":1588059445,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588059445","product_id":100039001,"comment_content":"DDD带来的改善还是体现在复杂业务逻辑上，在简单业务逻辑上的程序能带来的提升很小。其中的思想也是“分久必合，合久必分”。service类应付简单的业务逻辑时，开发效率高，所有业务逻辑放在一起也没多少行，多于业务逻辑的修改也快。<br>当业务逻辑复杂到一定程度，service类变得巨大且臃肿，这时必然会带来服务细粒度上的难以重用，复杂的耦合交互。此时意识到可以将服务中的一部分功能定义为领域（Domin）属性，固化相关属性至领域模型中，使得service类在调用时的粒度放大，业务逻辑变得更加简单，易读性和可维护性增强。","like_count":0},{"had_liked":false,"id":210828,"user_name":"简单猫","can_delete":false,"product_type":"c1","uid":1866485,"ip_address":"","ucode":"EA027D4C344E25","user_header":"https://static001.geekbang.org/account/avatar/00/1c/7a/f5/54a5084b.jpg","comment_is_top":false,"comment_ctime":1587830345,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587830345","product_id":100039001,"comment_content":"开发中加入了service层，目的是就是细化 或者说抽象和封装方法，这样在controller中可以 组合这些细小的业务功能形成块状功能，而且service对controller屏蔽了实现 一旦底层有变化 对上层逻辑不会发生什么改变(例如 本来是一个查MySQL数据库的功能 改成了查Oracle 或文件)。","like_count":0},{"had_liked":false,"id":208912,"user_name":"落尘kira","can_delete":false,"product_type":"c1","uid":1092169,"ip_address":"","ucode":"D203B519E43F85","user_header":"https://static001.geekbang.org/account/avatar/00/10/aa/49/51790edb.jpg","comment_is_top":false,"comment_ctime":1587463943,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1587463943","product_id":100039001,"comment_content":"在实际的开发过程中，我们是将Entity去掉的，只保留Domain和DTO的","like_count":0,"discussions":[{"author":{"id":1670997,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoV9IsMsiawicpaaTXqhPzqH2mA5HUKUSyJ5fbUhoqTKhNRxJ5dibhs5bkTqCSqcuolZT7sam2sn8sBA/132","nickname":"MadleS_F","note":"","ucode":"D6B6C29F576B7A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":269704,"discussion_content":"我比较迷的是没有get set如何convert..","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589939643,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":207514,"user_name":"冉冉","can_delete":false,"product_type":"c1","uid":1436334,"ip_address":"","ucode":"D36C0F95BC1DAB","user_header":"https://static001.geekbang.org/account/avatar/00/15/ea/ae/0e056410.jpg","comment_is_top":false,"comment_ctime":1587098384,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1587098384","product_id":100039001,"comment_content":"哎，repository到底由谁调用跟隔壁ddd的老师建议不一样啊，我纠结了，ddd老师是放domain里的，也有道理，对数据库的操作其实也是domain业务服务的职责之一啊","like_count":0,"discussions":[{"author":{"id":1283989,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/95/aad51e9b.jpg","nickname":"waterjiao","note":"","ucode":"74F2F75BF0CA6F","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292250,"discussion_content":"感觉放service里比较合适，service可以调不同的repo","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595154931,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":204378,"user_name":"阿固","can_delete":false,"product_type":"c1","uid":1064149,"ip_address":"","ucode":"F16B99FED58993","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/2PtNr4sjKLYNnibicnwWcZicmQbTguUK9ZaCVBLYmiaSYFRjRrUP08jHO9N7KB2adDw87ywccexMJh8yCQ84q5gEzg/132","comment_is_top":false,"comment_ctime":1586393614,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586393614","product_id":100039001,"comment_content":"表的最后设计中，钱包交易流水中有个“虚拟钱包交易流水ID”存的是两个ID吗？因为在转账的时会有两个帐户的虚拟钱包交易流水ID","like_count":0},{"had_liked":false,"id":203794,"user_name":"reminis","can_delete":false,"product_type":"c1","uid":1020530,"ip_address":"","ucode":"43E5F6A610E846","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/72/c3b36a77.jpg","comment_is_top":false,"comment_ctime":1586267398,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586267398","product_id":100039001,"comment_content":"化繁为简，在复杂业务场景下，采用“充血模型”也是一种化繁为简的策略。这个“简“实际上也是指代码的可维护性，可读性以及可扩展性","like_count":0},{"had_liked":false,"id":203392,"user_name":"技术骨干","can_delete":false,"product_type":"c1","uid":1098720,"ip_address":"","ucode":"8FCF8DE6D29201","user_header":"https://static001.geekbang.org/account/avatar/00/10/c3/e0/3db22579.jpg","comment_is_top":false,"comment_ctime":1586183785,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586183785","product_id":100039001,"comment_content":"如果说复杂的功能用DDD ,简单的方式用贫血模式。<br>那么按照复杂问题分而治之，是不是就没有复杂的功能了<br>如何识别复杂度呢？然后选择充血还是贫血","like_count":0},{"had_liked":false,"id":202983,"user_name":"ello","can_delete":false,"product_type":"c1","uid":1102790,"ip_address":"","ucode":"49D1BFB47067A9","user_header":"https://static001.geekbang.org/account/avatar/00/10/d3/c6/f83661b1.jpg","comment_is_top":false,"comment_ctime":1586097205,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586097205","product_id":100039001,"comment_content":"相对于其他关于DDD的文章中铺陈概念又大又空的情况，争哥的这两篇在我看来都是接地气的干活，看完就懂，懂了就能用上。真的难得，感谢🙏。","like_count":0},{"had_liked":false,"id":200705,"user_name":"这得从我捡到一个鼠标垫开始说起","can_delete":false,"product_type":"c1","uid":1272321,"ip_address":"","ucode":"2FF4347B4E7A9B","user_header":"https://static001.geekbang.org/account/avatar/00/13/6a/01/d9cb531d.jpg","comment_is_top":false,"comment_ctime":1585641058,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585641058","product_id":100039001,"comment_content":"这么看来，Android开发的时候，大多数代码写在Activity里，没有做太多封装，数据和操作分离。也就是使用了贫血模型来做，变成面向过程的编程风格了。","like_count":0},{"had_liked":false,"id":193835,"user_name":"Kevin.zhang🌏","can_delete":false,"product_type":"c1","uid":1247039,"ip_address":"","ucode":"5C52AE51538906","user_header":"https://static001.geekbang.org/account/avatar/00/13/07/3f/53ae01f6.jpg","comment_is_top":false,"comment_ctime":1584971822,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584971822","product_id":100039001,"comment_content":"看起来纷繁复杂，核心只有一个: 解耦，即封装出一个业务逻辑独立的类virtualWallet，其他都是打酱油做辅助工作的。Controller负责广告，Repository负责存取数据库，Service负责与各个部门联络。","like_count":0},{"had_liked":false,"id":191135,"user_name":"ladidili","can_delete":false,"product_type":"c1","uid":1217498,"ip_address":"","ucode":"38886C1908DE6B","user_header":"https://static001.geekbang.org/account/avatar/00/12/93/da/0e47c76e.jpg","comment_is_top":false,"comment_ctime":1584748024,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1584748024","product_id":100039001,"comment_content":"service负责整合，domain负责实现。<br>service负责数据获取。<br>service与其他层通信，做一些业务较为无关的操作，domain不与其他层通信，不关心数据来源，做好自己的业务即可。<br>service与domain之间通过数据传递与函数返回通信","like_count":0},{"had_liked":false,"id":191026,"user_name":"ladidili","can_delete":false,"product_type":"c1","uid":1217498,"ip_address":"","ucode":"38886C1908DE6B","user_header":"https://static001.geekbang.org/account/avatar/00/12/93/da/0e47c76e.jpg","comment_is_top":false,"comment_ctime":1584718402,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1584718402","product_id":100039001,"comment_content":"如果全部业务都在service内。service会越来越膨胀，不易读。拆分domain，在service做整合。domain单纯做业务，不关心数据来源。<br>domain里面包含数据以及对数据的操作，基本看完domain就对某一块业务领域就清晰不少","like_count":0},{"had_liked":false,"id":191022,"user_name":"ladidili","can_delete":false,"product_type":"c1","uid":1217498,"ip_address":"","ucode":"38886C1908DE6B","user_header":"https://static001.geekbang.org/account/avatar/00/12/93/da/0e47c76e.jpg","comment_is_top":false,"comment_ctime":1584718196,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1584718196","product_id":100039001,"comment_content":"确实，看完了确实感觉ddd只值五毛钱。一开始只认识到ddd只是一个拆分service的思想，以及oop在业务层面的应用。<br>文章讲了怎么去实现ddd，但是ddd的核心还是对业务的拆分思想，如何去拆分合理，怎么去确定拆分边界。不然就是光有型而没有内在。","like_count":0},{"had_liked":false,"id":189198,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1584484526,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584484526","product_id":100039001,"comment_content":"好久没有学习了，从去年12月间断的，现在又重新拾起，感觉真好。谢谢老师","like_count":0},{"had_liked":false,"id":188083,"user_name":"刘爽","can_delete":false,"product_type":"c1","uid":1030794,"ip_address":"","ucode":"3763C72661AC1F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/8a/a9cbb922.jpg","comment_is_top":false,"comment_ctime":1584320702,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584320702","product_id":100039001,"comment_content":"通过两种代码的对比，我终于明白了！","like_count":0},{"had_liked":false,"id":187619,"user_name":"劳码识途","can_delete":false,"product_type":"c1","uid":1598564,"ip_address":"","ucode":"7AEF4D9407F097","user_header":"https://static001.geekbang.org/account/avatar/00/18/64/64/865c1eb4.jpg","comment_is_top":false,"comment_ctime":1584174088,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584174088","product_id":100039001,"comment_content":"其实DDD的核心思想就是，对象要负责自己状态的维护，因为BO的状态比较复杂，同时，BO的状态其实是一组业务逻辑的映射，所以对于Service这一层，在业务相对复杂的时候采用充血模型是比较理想的，而Controller和Repository层只涉及数据的获取和传输（理想状态下，大部分时候，Controller层可能要做一些适配前端数据结构的工作，而Repository可能就是单纯的获取数据和存储数据），所以没有必要在这两层上采用充血模型。","like_count":0},{"had_liked":false,"id":186862,"user_name":"Tom.G","can_delete":false,"product_type":"c1","uid":1206034,"ip_address":"","ucode":"7929B45C1A51F8","user_header":"https://static001.geekbang.org/account/avatar/00/12/67/12/5c6eb568.jpg","comment_is_top":false,"comment_ctime":1583940951,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583940951","product_id":100039001,"comment_content":"争哥，Do转换成Domain有什么好用的工具推荐","like_count":0},{"had_liked":false,"id":186743,"user_name":"煜","can_delete":false,"product_type":"c1","uid":1650785,"ip_address":"","ucode":"3C5A9A55A65FC9","user_header":"https://static001.geekbang.org/account/avatar/00/19/30/61/50e24e09.jpg","comment_is_top":false,"comment_ctime":1583916581,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583916581","product_id":100039001,"comment_content":"老师，请问service进行rpc调用其他的service服务，是不是要建立一个新的DTO对象，而不是把domain作为DTO对象来使用？","like_count":0},{"had_liked":false,"id":186244,"user_name":"大王叫我来巡山","can_delete":false,"product_type":"c1","uid":1099513,"ip_address":"","ucode":"1B8D0C701BC95E","user_header":"https://static001.geekbang.org/account/avatar/00/10/c6/f9/caf27bd3.jpg","comment_is_top":false,"comment_ctime":1583806869,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583806869","product_id":100039001,"comment_content":"我感觉service层的主要作用还是面向接口编程，用于协议约束，遵循这个协议的domain可以任意替换，正常的业务都是在修改的过程中发现某一层变的太厚了，维护性越来越差，这个时候就是需要瘦身了，明确责任，不管怎么改，都不会有最佳实践的，都是最满足当下需求的实践。","like_count":0},{"had_liked":false,"id":185686,"user_name":"胡小禾","can_delete":false,"product_type":"c1","uid":1132315,"ip_address":"","ucode":"1C23B7492C0C9E","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/1b/64262861.jpg","comment_is_top":false,"comment_ctime":1583662799,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583662799","product_id":100039001,"comment_content":"1、钱包系统、虚拟钱包系统都会记录流水，岂不是又有事务的问题？<br>","like_count":0},{"had_liked":false,"id":184631,"user_name":"时光流逝x","can_delete":false,"product_type":"c1","uid":1695455,"ip_address":"","ucode":"D7334E717D9ED0","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqUMEsVYklTc7akT2e6pfytu4jTQ88EVe1H6L2eHdXC6G8sbKCvfrnSDUIRq229M2Wt419LX2q8SQ/132","comment_is_top":false,"comment_ctime":1583374751,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583374751","product_id":100039001,"comment_content":"我目前对DDD的看法是,由于Repository层和Controller层的DTO和VO只是进行数据传输所以领域模型的设计主要是在Service层的Domain,把具体的业务和数据都放在Domain中可以充分保持业务的独立性让Service层只去负责与Repository交互和业务的整合等与具体业务无关的辅助功能。","like_count":0},{"had_liked":false,"id":183978,"user_name":"lcf枫","can_delete":false,"product_type":"c1","uid":1144171,"ip_address":"","ucode":"D51E8F68BD41CA","user_header":"https://static001.geekbang.org/account/avatar/00/11/75/6b/fd685164.jpg","comment_is_top":false,"comment_ctime":1583194989,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583194989","product_id":100039001,"comment_content":"感觉在项目中不知不觉就会形成DDD，业务多了就会产生跟多重复活着leisi","like_count":0},{"had_liked":false,"id":183072,"user_name":"zj","can_delete":false,"product_type":"c1","uid":1100064,"ip_address":"","ucode":"E3329CCF694AC2","user_header":"https://static001.geekbang.org/account/avatar/00/10/c9/20/e4f1b17c.jpg","comment_is_top":false,"comment_ctime":1582948444,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582948444","product_id":100039001,"comment_content":"如果DO不提供setter getter方法那如何将数据库对象转换成DO呢？如果提供了又会影响封装性","like_count":0},{"had_liked":false,"id":182472,"user_name":"我是你的导师杨永信[奸笑]","can_delete":false,"product_type":"c1","uid":1222916,"ip_address":"","ucode":"8399AD43B7BAD2","user_header":"https://static001.geekbang.org/account/avatar/00/12/a9/04/b84223d8.jpg","comment_is_top":false,"comment_ctime":1582793066,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582793066","product_id":100039001,"comment_content":"看了好几本介绍DDD的书和文章，对比下来就争哥的容易理解和接受，醍醐灌顶和原来看的理论能融合起来啦，很棒","like_count":0},{"had_liked":false,"id":182443,"user_name":"Jie","can_delete":false,"product_type":"c1","uid":1045078,"ip_address":"","ucode":"AB94041E548FEB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f2/56/c39046c0.jpg","comment_is_top":false,"comment_ctime":1582788533,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582788533","product_id":100039001,"comment_content":"这里的Service更加偏向于DomainService，在DDD里面是协调聚合内跨领域的方法调用；上层还可以有ApplicationService，协同不同聚合间的交互协作","like_count":0},{"had_liked":false,"id":181858,"user_name":"未来小娃","can_delete":false,"product_type":"c1","uid":1047329,"ip_address":"","ucode":"477D166EBB6B70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/21/d017438c.jpg","comment_is_top":false,"comment_ctime":1582646323,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1582646323","product_id":100039001,"comment_content":"【设计模式笔记13】20200225<br>看到这里我想一个问题，如果虚拟钱包得业务逻辑越来越复杂应该怎么解决代码得可扩展性、可维护性和可读性？毕竟不做处理的话，虚拟钱包类会越来越臃肿","like_count":0},{"had_liked":false,"id":180554,"user_name":"朱靓","can_delete":false,"product_type":"c1","uid":1202981,"ip_address":"","ucode":"D9B95A07FFBC60","user_header":"https://static001.geekbang.org/account/avatar/00/12/5b/25/5d031c12.jpg","comment_is_top":false,"comment_ctime":1582336005,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582336005","product_id":100039001,"comment_content":"我理解DDD关键点在于能否从业务中提炼出公用部分(领域模型)，将这部分公用部分的代码下沉，形成具体的领域模型的逻辑并提供代码复用。<br>其实微服务也是这个道理，下沉的微服务就是领域模型。我们希望领域模型能够有意义，能够复用。","like_count":0},{"had_liked":false,"id":180075,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1582180629,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582180629","product_id":100039001,"comment_content":"经过了这几天的学习,认识到了贫血模型和充血模型之间的区别,在贫血模型和充血模型之间的选择是根据业务逻辑是否复杂来决定的<br>而充血逻辑,就是将原本负责沟通的Service层中的Bo和service数据和业务逻辑相分离改为了,Domain和service类,将数据和业务逻辑放到了Domain中,只讲一些无法和Domain整合的,比如和数据层整合代码,跨领域模型的方法放到了Service类中","like_count":0},{"had_liked":false,"id":176966,"user_name":"涉蓝","can_delete":false,"product_type":"c1","uid":1134619,"ip_address":"","ucode":"C1321E29E01625","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLh8ubWQtDRa6exJtloSwibLliaejpF7434ficyggzukmXE63UlSPvbykoiaVDZo4CbDIIOQsCkicibyn9A/132","comment_is_top":false,"comment_ctime":1581237771,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581237771","product_id":100039001,"comment_content":"例子中提到 service 似乎是个粘合剂作用  Repository负责底层的数据库 domain Repository的实体的业务逻辑 service 是 跟其他的各种依赖的联动做绑定的 可能是因为service 天然框架自带的依赖注入？<br>还是有点不理解 为啥 Repository 的相关的放service里 <br>在我自己原来设想中 是把更多的逻辑放到domain 里面 把Repository 注入到 domain里 总觉得 Repository 是跟数据库的一种实现 是 domain 依托的一个实现细节  然后 service 就都调用 domain 的方法了<br>这是一个没学过java的人的简单意淫","like_count":0},{"had_liked":false,"id":173912,"user_name":"燃着的半支烟","can_delete":false,"product_type":"c1","uid":1230837,"ip_address":"","ucode":"23C7B588F400A7","user_header":"https://static001.geekbang.org/account/avatar/00/12/c7/f5/4e9a82e9.jpg","comment_is_top":false,"comment_ctime":1579779117,"is_pvip":false,"replies":[{"id":"67717","content":"1. 可以不用bo了，不过看情况，如果你的service有组合多个domain的业务逻辑，可能还是需要bo<br>2. 直接返回domain也可以，毕竟到了controller层就会转化成vo","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1580112486,"ip_address":"","comment_id":173912,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1579779117","product_id":100039001,"comment_content":"老师，咨询个问题：<br>1、如果用了domain，那还需要用BO吗？<br>2、domian对象适合直接在service层返回吗？还是说要把domain转换成BO，在返回？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482238,"discussion_content":"1. 可以不用bo了，不过看情况，如果你的service有组合多个domain的业务逻辑，可能还是需要bo\n2. 直接返回domain也可以，毕竟到了controller层就会转化成vo","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580112486,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1230837,"avatar":"https://static001.geekbang.org/account/avatar/00/12/c7/f5/4e9a82e9.jpg","nickname":"燃着的半支烟","note":"","ucode":"23C7B588F400A7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":154080,"discussion_content":"好的，谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580114342,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173857,"user_name":"Geek_d25b8d","can_delete":false,"product_type":"c1","uid":1407103,"ip_address":"","ucode":"636A5BCB3BAAA1","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/GbZRicqbu1QJmlcOlfLyW4ican8ZVzrSZ2FRA7EygB8WAdDnoQwR6L4ldNzX3myAd4wYOuGYPguaLAccpQMWIpUg/132","comment_is_top":false,"comment_ctime":1579740706,"is_pvip":true,"replies":[{"id":"67722","content":"看是否有多种实现类，如果没有，那就不用定义接口","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1580113777,"ip_address":"","comment_id":173857,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1579740706","product_id":100039001,"comment_content":"争哥，领域对象需要抽象出接口吗","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482220,"discussion_content":"看是否有多种实现类，如果没有，那就不用定义接口","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580113777,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173088,"user_name":"zj","can_delete":false,"product_type":"c1","uid":1100064,"ip_address":"","ucode":"E3329CCF694AC2","user_header":"https://static001.geekbang.org/account/avatar/00/10/c9/20/e4f1b17c.jpg","comment_is_top":false,"comment_ctime":1579422649,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579422649","product_id":100039001,"comment_content":"DDD一般是四层分层架构，接口层，应用层，领域层，我倾向先有应用层，应用层去组合和编排领域层代码，让领域层只跟该聚合的代码有关，形成领域层高内聚","like_count":0},{"had_liked":false,"id":170863,"user_name":"移动一下","can_delete":false,"product_type":"c1","uid":1034115,"ip_address":"","ucode":"9314E79C72A71E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c7/83/ca76b4f3.jpg","comment_is_top":false,"comment_ctime":1578742723,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578742723","product_id":100039001,"comment_content":"我们在钱包系统这一层额外再记录一条包含交易类型的交易流水信息，而在底层的虚拟钱包系统中记录不包含交易类型的交易流水信息。如果一条钱包交易流水是支付，那他就会对应两条虚拟钱包交易流水（一个加，一个减）。但一条钱包交易流水记录只有一条虚拟钱包交易流水id，这个怎么操作？","like_count":0},{"had_liked":false,"id":170796,"user_name":"daniel","can_delete":false,"product_type":"c1","uid":1370456,"ip_address":"","ucode":"3516AF7F9A4DEA","user_header":"https://static001.geekbang.org/account/avatar/00/14/e9/58/397a4ab2.jpg","comment_is_top":false,"comment_ctime":1578723516,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578723516","product_id":100039001,"comment_content":"那么在客户端mvc的设计模式中，充血模式是不是应该在model里面添加数据逻辑代码，而不止getter和setter","like_count":0},{"had_liked":false,"id":169563,"user_name":"移动一下","can_delete":false,"product_type":"c1","uid":1034115,"ip_address":"","ucode":"9314E79C72A71E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c7/83/ca76b4f3.jpg","comment_is_top":false,"comment_ctime":1578380073,"is_pvip":false,"replies":[{"id":"65949","content":"后台补漏更好点。因为回滚也不一定能成功，也有可能会失败。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1578489306,"ip_address":"","comment_id":169563,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1578380073","product_id":100039001,"comment_content":"在给两个钱包加减金额的过程中，如果有任意一个操作失败，我们就将交易记录的状态标记为“失败”。这个时候是马上对其中一个成功操作做回滚，还是在后台补漏 Job中再处理好一些？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480613,"discussion_content":"后台补漏更好点。因为回滚也不一定能成功，也有可能会失败。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578489306,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169400,"user_name":"东流","can_delete":false,"product_type":"c1","uid":1738147,"ip_address":"","ucode":"2715BC6E87BD83","user_header":"https://static001.geekbang.org/account/avatar/00/1a/85/a3/7e078442.jpg","comment_is_top":false,"comment_ctime":1578326898,"is_pvip":false,"replies":[{"id":"65736","content":"是的，我改下，多谢提醒","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1578379205,"ip_address":"","comment_id":169400,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1578326898","product_id":100039001,"comment_content":"service里面的getbalnce中virtualwalletRepo是不是写错了，应该还是walletRepo","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480541,"discussion_content":"是的，我改下，多谢提醒","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578379205,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169011,"user_name":"何领","can_delete":false,"product_type":"c1","uid":1240298,"ip_address":"","ucode":"F0F2B11CF5C9FA","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/ea/c33e5a3d.jpg","comment_is_top":false,"comment_ctime":1578237328,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578237328","product_id":100039001,"comment_content":"感觉这个领域对象有点像是对数据库的钱包实体加了一层装饰者","like_count":0},{"had_liked":false,"id":168496,"user_name":"STAND ALONE COMPLEX","can_delete":false,"product_type":"c1","uid":1595002,"ip_address":"","ucode":"2AC2F9B0A6D823","user_header":"https://static001.geekbang.org/account/avatar/00/18/56/7a/60c3d6a5.jpg","comment_is_top":false,"comment_ctime":1578100271,"is_pvip":false,"replies":[{"id":"65959","content":"service不需要频繁创建，但vo、bo、entity不也得频繁创建吗？","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1578490373,"ip_address":"","comment_id":168496,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1578100271","product_id":100039001,"comment_content":"看了这篇文章，有个问题，web开发如果采用领域设计模型，那么一些关键的逻辑会在domain中，service层调用domain的逻辑，请求过来，都要创建domain对象，关键逻辑的频繁调用，导致domain对象频繁创建，而如果把逻辑放到service中，由于是spring去管理的service，是单例的，不用频繁创建，而且service中没有成员变量，也不用考虑线程安全问题，所以，从这个角度来讲，贫血模式，要比充血模式好？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480232,"discussion_content":"service不需要频繁创建，但vo、bo、entity不也得频繁创建吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578490373,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1595002,"avatar":"https://static001.geekbang.org/account/avatar/00/18/56/7a/60c3d6a5.jpg","nickname":"STAND ALONE COMPLEX","note":"","ucode":"2AC2F9B0A6D823","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":126869,"discussion_content":"嗯，你说的有道理，要创建的对象很多，也不在乎多创建一个domian对象。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578545054,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":168228,"user_name":"那月真美","can_delete":false,"product_type":"c1","uid":1441895,"ip_address":"","ucode":"CEF1AF65C6064E","user_header":"https://static001.geekbang.org/account/avatar/00/16/00/67/e24dd940.jpg","comment_is_top":false,"comment_ctime":1578034808,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578034808","product_id":100039001,"comment_content":"transfer方法，充血模型没有充起来啊！其实也可以充起来，domain中抛异常，在service层中做事务控制即可","like_count":0},{"had_liked":false,"id":168113,"user_name":"wai","can_delete":false,"product_type":"c1","uid":1439529,"ip_address":"","ucode":"29CE3BE148FB79","user_header":"https://static001.geekbang.org/account/avatar/00/15/f7/29/60e01017.jpg","comment_is_top":false,"comment_ctime":1578015110,"is_pvip":false,"replies":[{"id":"65965","content":"是的，domain可以被service复用。命名参照业务模型来。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1578491040,"ip_address":"","comment_id":168113,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1578015110","product_id":100039001,"comment_content":"针对第一个辩证讨论的问题，老师说出的三条观点中的第二条 让领域模型更加可复用，能理解成一个Domain可能对应多个Service？那Domain的命名是不是得抽象一些？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480142,"discussion_content":"是的，domain可以被service复用。命名参照业务模型来。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578491040,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167332,"user_name":"张迪","can_delete":false,"product_type":"c1","uid":1104835,"ip_address":"","ucode":"6A5D44999A0FEA","user_header":"https://static001.geekbang.org/account/avatar/00/10/db/c3/e11adfe8.jpg","comment_is_top":false,"comment_ctime":1577766603,"is_pvip":false,"replies":[{"id":"65134","content":"😂 你具体讲讲？","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1577946171,"ip_address":"","comment_id":167332,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1577766603","product_id":100039001,"comment_content":"感觉你对DDD了解的不深","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479828,"discussion_content":"😂 你具体讲讲？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577946171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1242373,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f5/05/d6547381.jpg","nickname":"才才","note":"","ucode":"94D76106261987","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":200139,"discussion_content":"哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583660779,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167177,"user_name":"Jessica","can_delete":false,"product_type":"c1","uid":1084877,"ip_address":"","ucode":"9FC7E9BD3FE9F1","user_header":"https://static001.geekbang.org/account/avatar/00/10/8d/cd/b6bdc1b2.jpg","comment_is_top":false,"comment_ctime":1577708109,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577708109","product_id":100039001,"comment_content":"DDD架构中，还有一个很重要的概念是依赖倒置，即领域中的service层不直接依赖repository层，而是通过定义一个接口，service层调用这个接口，而不直接调用实现。这样后续真正的repository实现变了，领域层不需要做任何改变。","like_count":0},{"had_liked":false,"id":166770,"user_name":"迷羊","can_delete":false,"product_type":"c1","uid":1286251,"ip_address":"","ucode":"85AF8CED3436C8","user_header":"https://static001.geekbang.org/account/avatar/00/13/a0/6b/0a21b2b8.jpg","comment_is_top":false,"comment_ctime":1577590706,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577590706","product_id":100039001,"comment_content":"<br>一、使用贫血模型与充血模型开发的区别<br>贫血模型所有的业务都在Service类来完成，BO只用来定义数据，每次来一个新需求都需要在Service类中写。而充血模型一开始就在Domain类中设计好对应的业务逻辑和属性，不与别的Repository层、Controller层直接打交道，避免太耦合。相当于一个业务中间件一样，每次有新功能需要开发的时候，都基于定义好的Domain类来完成。<br><br>二、基于充血模型的DDD开发模式中Service类担当的职责是什么？<br>1.Service 类负责与 Repository 交流。充血模型不能直接与Repository打交道，因为要保持领域模型的独立性，不与任何其他层的代码（Repository 层的代码）或开发框架（比如 Spring、MyBatis）耦合在一起，将流程性的代码逻辑（比如从 DB 中取数据、映射数据）与领域模型的业务逻辑解耦，让领域模型更加可复用。<br>2.Service类负责跨领域模型的业务聚合功能，比如实战案例中的transfer()方法<br>3..Service 类负责一些非功能性及与三方系统交互的工作。比如幂等、事务、发邮件、发消息、记录日志、调用其他系统的 RPC 接口等，都可以放到 Service 类中。<br><br>三、Controller层和Repository层是否有必要也进行充血领域建模呢？<br>1.答案是没有必要。因为这两层包含的业务逻辑不多，如果设计成充血模型没有太大意义。<br>2.我们把PO传递到 Service 层之后，就会转化成 BO 或者 Domain 来继续后面的业务逻辑。Entity 的生命周期到此就结束了，所以也并不会被到处任意修改。<br>3.VO只是用来将数据发送给其他系统，主要作为接口的数据传输载体。从功能上来讲，它理应不包含业务逻辑、只包含数据。","like_count":0},{"had_liked":false,"id":166380,"user_name":"Geek_323c91","can_delete":false,"product_type":"c1","uid":1732683,"ip_address":"","ucode":"AE946A94605456","user_header":"","comment_is_top":false,"comment_ctime":1577439875,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577439875","product_id":100039001,"comment_content":"我的想法 是领域层 虚拟钱包BO  虚拟账户BO 然后都有各自的转账 记录流水 service负责组装实现业务功能就行了  所以 db操作 我也会放在领域层","like_count":0},{"had_liked":false,"id":165911,"user_name":"Sean","can_delete":false,"product_type":"c1","uid":1118217,"ip_address":"","ucode":"CAB27AFED91166","user_header":"https://static001.geekbang.org/account/avatar/00/11/10/09/ab005c4d.jpg","comment_is_top":false,"comment_ctime":1577344018,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577344018","product_id":100039001,"comment_content":"最开始时只是觉着建造者模式用起舒服,后来偷懒顺便处理了下业务逻辑,再后来别人告诉这是DDD.我的Builder去哪了?<br>钱塘江上潮信来，今日方知我是我","like_count":0},{"had_liked":false,"id":165889,"user_name":"我太难了","can_delete":false,"product_type":"c1","uid":1731602,"ip_address":"","ucode":"B80133799A4494","user_header":"https://static001.geekbang.org/account/avatar/00/1a/6c/12/67bcce50.jpg","comment_is_top":false,"comment_ctime":1577340833,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577340833","product_id":100039001,"comment_content":"两种模式下的 19&#47;41 行 virtualWalletRepo 是不是有问题？","like_count":0},{"had_liked":false,"id":164947,"user_name":"花颜","can_delete":false,"product_type":"c1","uid":1096871,"ip_address":"","ucode":"77AAE0CBA75439","user_header":"https://static001.geekbang.org/account/avatar/00/10/bc/a7/d36843c9.jpg","comment_is_top":false,"comment_ctime":1577115166,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577115166","product_id":100039001,"comment_content":"老师，这两节课主要是讲后端业务开发模型，虽然我能看懂，但是我是一个前端开发，可以有针对前端流程的面向对象讲解么？这样才能应用于我的实际开发中","like_count":0},{"had_liked":false,"id":164670,"user_name":"饭太司替可","can_delete":false,"product_type":"c1","uid":1171829,"ip_address":"","ucode":"9A47FCA16199B0","user_header":"https://static001.geekbang.org/account/avatar/00/11/e1/75/bbdf9052.jpg","comment_is_top":false,"comment_ctime":1577069534,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577069534","product_id":100039001,"comment_content":"贫血与充血的区别就是充血的时候会变硬。","like_count":0},{"had_liked":false,"id":164553,"user_name":"tuyu","can_delete":false,"product_type":"c1","uid":1448863,"ip_address":"","ucode":"B235325B541408","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/BIRpwViaN51yynIeFonD7QRlwDCVtKibrG956NTxzEqibOZZVjhMMgibOPmd3VicfYxpknZsic1oJq8KicZvXkmmiajuQg/132","comment_is_top":false,"comment_ctime":1577026483,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577026483","product_id":100039001,"comment_content":"老师, 我写过java, 我懂你的意思, 但是我最近写python, django框架的orm很方便, 现在很多应该吧你所说的bo写在entity类里面(django框架), 也许python本来不是面向对象语言, 学的有点强迫症","like_count":0},{"had_liked":false,"id":164544,"user_name":"tuyu","can_delete":false,"product_type":"c1","uid":1448863,"ip_address":"","ucode":"B235325B541408","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/BIRpwViaN51yynIeFonD7QRlwDCVtKibrG956NTxzEqibOZZVjhMMgibOPmd3VicfYxpknZsic1oJq8KicZvXkmmiajuQg/132","comment_is_top":false,"comment_ctime":1577024936,"is_pvip":false,"replies":[{"id":"65139","content":"后面36讲会详细讲到","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1577949691,"ip_address":"","comment_id":164544,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1577024936","product_id":100039001,"comment_content":"老师, 以前写算法, 程序都是如果不符合条件都会返回null, 是不是写业务逻辑, 如果不符合调节抛出异常比较好, 能不能简单介绍一下","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478809,"discussion_content":"后面36讲会详细讲到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577949691,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163597,"user_name":"饭太司替可","can_delete":false,"product_type":"c1","uid":1171829,"ip_address":"","ucode":"9A47FCA16199B0","user_header":"https://static001.geekbang.org/account/avatar/00/11/e1/75/bbdf9052.jpg","comment_is_top":false,"comment_ctime":1576753361,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576753361","product_id":100039001,"comment_content":"对于充血模式，Domain里放一些跟该Domain联系紧密的业务逻辑，Service留着处理一些与其它层的交互。","like_count":0},{"had_liked":false,"id":163592,"user_name":"岁月","can_delete":false,"product_type":"c1","uid":1337598,"ip_address":"","ucode":"29A2A2BC3C4FE4","user_header":"https://static001.geekbang.org/account/avatar/00/14/68/fe/1353168d.jpg","comment_is_top":false,"comment_ctime":1576751525,"is_pvip":false,"replies":[{"id":"62261","content":"可以不恢复 直接标记报错 后台job做补偿","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1576796671,"ip_address":"","comment_id":163592,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1576751525","product_id":100039001,"comment_content":"有个问题没看明白, 事务一致性问题, 如果写入一条流水表示转账等待执行, 那么开始加减余额的时候, 如果加成功,减失败, 那不还是一样需要重新去把加的操作恢复吗? 恢复的过程又可能出错了, 所以没有原子操作的话这个做不了呀? ","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478466,"discussion_content":"可以不恢复 直接标记报错 后台job做补偿","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576796671,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163483,"user_name":"luke","can_delete":false,"product_type":"c1","uid":1057643,"ip_address":"","ucode":"1D26F3F31CC435","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/pCVwNYT22UX6XAXJ5XLmbSHRmuPIncaJkS7S6kUKe0C8qWURib8zOhHTPwR36FeZZ4BcnKuDia4nrekqDnAkxdJQ/132","comment_is_top":false,"comment_ctime":1576730070,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576730070","product_id":100039001,"comment_content":"领域模型类其实是有状态的，是不是还要考虑线程安全问题？","like_count":0},{"had_liked":false,"id":163297,"user_name":"花花大脸猫","can_delete":false,"product_type":"c1","uid":1117318,"ip_address":"","ucode":"8ABDB3F7F4FB0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0c/86/8e52afb8.jpg","comment_is_top":false,"comment_ctime":1576681821,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1576681821","product_id":100039001,"comment_content":"豁然开朗！！","like_count":0},{"had_liked":false,"id":163160,"user_name":"小妖","can_delete":false,"product_type":"c1","uid":1730626,"ip_address":"","ucode":"49C01DBFADF101","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJvm1JYIDcS74s4cEYxA1PXMqjortVXEjUKyGQcPvibNJ4EAuksIa6uoHgr6G1yRqAM2KtP3yicKgTA/132","comment_is_top":false,"comment_ctime":1576664584,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576664584","product_id":100039001,"comment_content":"关于示例中的表的设计是不是有点问题？感觉最后的虚拟钱包流水和讲解的理论有偏差，另外感觉单纯那么设计没法实现所谓的业务控制","like_count":0},{"had_liked":false,"id":163120,"user_name":"冬渐暖","can_delete":false,"product_type":"c1","uid":1586800,"ip_address":"","ucode":"907E41AAE9A36C","user_header":"https://static001.geekbang.org/account/avatar/00/18/36/70/00122b24.jpg","comment_is_top":false,"comment_ctime":1576659608,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576659608","product_id":100039001,"comment_content":"service层只是处理dao，以及类与类之间的关系，而不是类本身的动作。<br>","like_count":0},{"had_liked":false,"id":162645,"user_name":"爱吃面包的西门吹雪","can_delete":false,"product_type":"c1","uid":1204315,"ip_address":"","ucode":"8CF3AD92617359","user_header":"https://static001.geekbang.org/account/avatar/00/12/60/5b/616dbaa3.jpg","comment_is_top":false,"comment_ctime":1576572112,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1576572112","product_id":100039001,"comment_content":"有木有大佬可以解答我的一个疑问，在DDD中，domain可以有多态的表现形式么，例如订单，根据其来源渠道不同，其下单业务操作各有不同","like_count":0},{"had_liked":false,"id":161859,"user_name":"王加武","can_delete":false,"product_type":"c1","uid":1665471,"ip_address":"","ucode":"DDCFE578C6C428","user_header":"https://static001.geekbang.org/account/avatar/00/19/69/bf/50a824a4.jpg","comment_is_top":false,"comment_ctime":1576380852,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576380852","product_id":100039001,"comment_content":"今年大二，说实话，贫血模型和充血模型在理论上是不难理解，但是代码上就稍微有点难理解，也许是因为我缺乏项目经验的原因，这一节我打算自己使用贫血模型来实现一下老师所讲的钱包系统，对于DDD开发模式，我想对于现在的我来说有个理论上的认知以及知道它们是怎么一回事就行了，老师能否给点意见呢？","like_count":0},{"had_liked":false,"id":161698,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1015754,"ip_address":"","ucode":"00DF2FEC58D2E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","comment_is_top":false,"comment_ctime":1576300637,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576300637","product_id":100039001,"comment_content":"文中的代码和表的设计没有关系吧，只是对钱包本身的crud","like_count":0},{"had_liked":false,"id":161516,"user_name":"wl","can_delete":false,"product_type":"c1","uid":1392730,"ip_address":"","ucode":"45062AA2460F1F","user_header":"https://static001.geekbang.org/account/avatar/00/15/40/5a/e65e8c40.jpg","comment_is_top":false,"comment_ctime":1576220801,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1576220801","product_id":100039001,"comment_content":"老师，我是学习前端的，没有写过 Java，看到老师的代码中定义的一些类没有用到，还有些字段是没有出处的，看起来特别费解，比如 VirtualWalletService 中有个 getVirtualWallet 的方法，这个是在 VirtualWalletService 实例上使用的吗？还有 getBalance 中的 virtualWalletRepo 这个字段，找了好久也没有找到，照道理来说，getBalance 不是应该和 debit 中获取 balance 的方式一样，是通过 walletEntity.getBalance() 获取的吗？老师能不能稍微解释下？<br><br>还有，虽然有些疑惑，但是我反复看了好几遍，发现贫血模型和充血模型的差别在于，贫血模型的方式在处理钱包操作（查看余额、支付等）时还夹杂了其他操作，看起来很费劲，都不知道在做些什么；充血模型在 Domain 类中定义了所有与钱包相关的属性和方法，没有其他操作，一目了然。不知道理解的对不对。","like_count":0,"discussions":[{"author":{"id":1337598,"avatar":"https://static001.geekbang.org/account/avatar/00/14/68/fe/1353168d.jpg","nickname":"岁月","note":"","ucode":"29A2A2BC3C4FE4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":89159,"discussion_content":"代码是有点问题. virtualWalletRepo这个应该是写错了, 正确的应该是walletRepo. 另外为什么获取余额分别拿了两个不同地方的数据, 可能也是写错了.....也可能是缓存设计, 毕竟读数据库需要时间. ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576752713,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1392730,"avatar":"https://static001.geekbang.org/account/avatar/00/15/40/5a/e65e8c40.jpg","nickname":"wl","note":"","ucode":"45062AA2460F1F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1337598,"avatar":"https://static001.geekbang.org/account/avatar/00/14/68/fe/1353168d.jpg","nickname":"岁月","note":"","ucode":"29A2A2BC3C4FE4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":98437,"discussion_content":"谢谢帮忙解释！因为没有后端经验，看起来确实很吃力…尤其代码有问题，就更加难","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577163378,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":89159,"ip_address":""},"score":98437,"extra":""}]}]},{"had_liked":false,"id":160065,"user_name":"Geek_ecf7bb","can_delete":false,"product_type":"c1","uid":1523207,"ip_address":"","ucode":"5BF4DD62425BE0","user_header":"https://static001.geekbang.org/account/avatar/00/17/3e/07/c27b53b8.jpg","comment_is_top":false,"comment_ctime":1575862636,"is_pvip":false,"replies":[{"id":"61123","content":"嗯嗯，关注https:&#47;&#47;github.com&#47;wangzheng0822，我更新到上面","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1575895728,"ip_address":"","comment_id":160065,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1575862636","product_id":100039001,"comment_content":"有些理解充血的模式，不过还是希望能尽快看到老师更加完整的示例代码，期待老师的Github更新，谢谢老师~","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477247,"discussion_content":"嗯嗯，关注https://github.com/wangzheng0822，我更新到上面","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575895728,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159527,"user_name":"thewangzl","can_delete":false,"product_type":"c1","uid":1006661,"ip_address":"","ucode":"5968FDED0C5AC8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/45/2fa66e67.jpg","comment_is_top":false,"comment_ctime":1575647845,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1575647845","product_id":100039001,"comment_content":"如果瞬间发生两笔转账，账户余额是不是就不对了，应该怎么处理比较友好？","like_count":0,"discussions":[{"author":{"id":1002095,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/6f/e36b3908.jpg","nickname":"xzy","note":"","ucode":"1A44368083A19E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":80857,"discussion_content":"转账时，扣出了转出账户的余额，然后被转入的账户会增加余额。\n假如瞬间发生两次转账，也不会出现转出的钱比自己的余额多的情况！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576200390,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159051,"user_name":"1620","can_delete":false,"product_type":"c1","uid":1104310,"ip_address":"","ucode":"C9222A5CE4723C","user_header":"https://static001.geekbang.org/account/avatar/00/10/d9/b6/4c498c17.jpg","comment_is_top":false,"comment_ctime":1575525657,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575525657","product_id":100039001,"comment_content":"如果你的对象是一些常规的记录且加入时间轴来思考后续对象也不会有很多细粒度规则操作，那么不要纠结了 直接贫血模型 。","like_count":0},{"had_liked":false,"id":159007,"user_name":"每天一点点","can_delete":false,"product_type":"c1","uid":1106238,"ip_address":"","ucode":"B4DFDA3200B452","user_header":"https://static001.geekbang.org/account/avatar/00/10/e1/3e/a617ae38.jpg","comment_is_top":false,"comment_ctime":1575514303,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575514303","product_id":100039001,"comment_content":"DDD应用的场景是不是多人协作开发,若操作转账这样的关键代码用贫血模式开发的话，每个人都有编写代码的权限，就有可能造成修改者对业务逻辑的不了解产生不必要的风险，若用充血模式的话可以把转账等关键代码放入BO 的 domain 中然后以jar 包的形式提供出去，service 调用只能使用 getBalance 的方式修改余额，但是 getBalance 的逻辑是在 domain 中有熟悉业务的人维护，这样可以避免出错的概率，这样理解对么？","like_count":0},{"had_liked":false,"id":159005,"user_name":"每天一点点","can_delete":false,"product_type":"c1","uid":1106238,"ip_address":"","ucode":"B4DFDA3200B452","user_header":"https://static001.geekbang.org/account/avatar/00/10/e1/3e/a617ae38.jpg","comment_is_top":false,"comment_ctime":1575513510,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575513510","product_id":100039001,"comment_content":"我还是没有领会到 DDD 的精髓，目前看放入 domain 的的代码逻辑其实是可以放入 service 中的一个private方法中，ddd 的设计理念还是没有被点通，也有可能是我开发的业务比较简单，理解不到复杂的场景","like_count":0},{"had_liked":false,"id":158915,"user_name":"筱乐乐哦","can_delete":false,"product_type":"c1","uid":1307611,"ip_address":"","ucode":"AE92539F0419C3","user_header":"https://static001.geekbang.org/account/avatar/00/13/f3/db/5b7a8fd8.jpg","comment_is_top":false,"comment_ctime":1575480041,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575480041","product_id":100039001,"comment_content":"同意老师的看法，在实际的开发中，service层的功能一般都是整合多个实体的数据交互和业务逻辑，就算按照充血模型写，由于的实际的业务需求，Domain的实现也会很简单，完全没有必要，这也就导致了，大部分的代码都是贫血模型的，我是这么理解的，如果有不对，欢迎指出","like_count":0},{"had_liked":false,"id":158775,"user_name":"堵车","can_delete":false,"product_type":"c1","uid":1145404,"ip_address":"","ucode":"7BC1E50A4F8D3D","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/3c/87e015f8.jpg","comment_is_top":false,"comment_ctime":1575449172,"is_pvip":false,"replies":[{"id":"61144","content":"继续拆分成更细粒度的domain","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1575897836,"ip_address":"","comment_id":158775,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1575449172","product_id":100039001,"comment_content":"业务复杂后，domain很大。怎么处理比较好？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476841,"discussion_content":"继续拆分成更细粒度的domain","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575897836,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158429,"user_name":"fmouse","can_delete":false,"product_type":"c1","uid":1202325,"ip_address":"","ucode":"9A8858CFFAB858","user_header":"https://static001.geekbang.org/account/avatar/00/12/58/95/640b6465.jpg","comment_is_top":false,"comment_ctime":1575369018,"is_pvip":false,"replies":[{"id":"60684","content":"我个人觉得controller层负责接口暴露 数据的封装 解析。service层包含主要业务。至于你说的臃肿 可以在service继续模块化","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1575424052,"ip_address":"","comment_id":158429,"utype":1}],"discussion_count":0,"race_medal":2,"score":"1575369018","product_id":100039001,"comment_content":"这两节课中提出的一些问题，我们在讨论DDD的时候遇到了同样的问题。如果涉及到多领域的业务，放在service层，Controller层只暴露接口不做业务吗。还有业务比较复杂的时候，service层会过于臃肿庞大。业务关系比较复杂的情况下，如何来划分界限，或者说是领域。","like_count":0},{"had_liked":false,"id":158232,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1575354444,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575354444","product_id":100039001,"comment_content":"充血和贫血模型的最大区别在于应用逻辑和是否和数据绑定在一起，还是对象和过程的区别。绑定是否值得需要具体分析。领域类封装了数据，外部只看到函数，隐藏了信息，让类更加内聚，类内的一致性也更容易保持。但是，这样的类包含了很多业务逻辑，容易被将来的业务修改所冲击，而且也容易让类过于庞大。","like_count":0},{"had_liked":false,"id":158211,"user_name":"牧名","can_delete":false,"product_type":"c1","uid":1020390,"ip_address":"","ucode":"193F0F33E1AB47","user_header":"https://static001.geekbang.org/account/avatar/00/0f/91/e6/03582dee.jpg","comment_is_top":false,"comment_ctime":1575350216,"is_pvip":false,"replies":[{"id":"60692","content":"是有这个问题 我改下","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1575424827,"ip_address":"","comment_id":158211,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1575350216","product_id":100039001,"comment_content":"虽然这节课的重点不是讲转帐功能，但转帐的交易流水设计存在一个问题：比如转帐失败后，单从交易流水记录上看只知道转账失败了，却不知道到底是出帐钱包扣款失败还是入帐钱包收款失败。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476673,"discussion_content":"是有这个问题 我改下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575424827,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158163,"user_name":"塔兹米","can_delete":false,"product_type":"c1","uid":1425252,"ip_address":"","ucode":"1A58C81EF9B0A4","user_header":"https://static001.geekbang.org/account/avatar/00/15/bf/64/c9a0e913.jpg","comment_is_top":false,"comment_ctime":1575340909,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575340909","product_id":100039001,"comment_content":"打卡！<br>在MVC中，controller层和repository层其实都是对数据进行正确的读取和写入与按需求的暴露自己的数据。业务的逻辑都写在service层，DDD的目的在于把service层再抽象一次。把业务核心逻辑都抽取成domian类。service就主要负责与repository层和controller层的沟通上了。","like_count":0},{"had_liked":false,"id":157971,"user_name":"BADTZ-MARU 🍪","can_delete":false,"product_type":"c1","uid":1325267,"ip_address":"","ucode":"358FAA1C9F5721","user_header":"https://static001.geekbang.org/account/avatar/00/14/38/d3/07585dc8.jpg","comment_is_top":false,"comment_ctime":1575291507,"is_pvip":false,"replies":[{"id":"60693","content":"是有这个问题 我改下","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1575424867,"ip_address":"","comment_id":157971,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1575291507","product_id":100039001,"comment_content":"有点疑问，如果虚拟钱包系统只关注加减的话，日志不还是两条，如何保证一致性？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476600,"discussion_content":"是有这个问题 我改下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575424867,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1309877,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/RNO4yZyBvic914hewmNNE8iblYDcfv5yGHZ9OnKuCuZXNmGR0F5qV3icKLT2xpMt66GyEpicZVvrmz8A6TIqt92MQg/132","nickname":"啊啊啊哦哦","note":"","ucode":"68C7153ECAAC57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70255,"discussion_content":"我感觉支付的时候  用户减的一条  商家加的 一条  总的一条 是3条。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575338442,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157954,"user_name":"宝宝太喜欢极客时间了","can_delete":false,"product_type":"c1","uid":1215152,"ip_address":"","ucode":"9CDB679C257612","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoOGZ6lbHiboIZMN9USbeutnmCWBahVLtSlKlIENKvrZQCUQzpzeZQOxTntIkBUeDk6qZUPdqmfKrQ/132","comment_is_top":false,"comment_ctime":1575289479,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575289479","product_id":100039001,"comment_content":"“对于支付这样的类似转账的操作，我们在操作两个钱包账户余额之前，先记录交易流水，并且标记为“待执行”，当两个钱包的加减金额都完成之后，我们再回过头来，将交易流水标记为“成功”。在给两个钱包加减金额的过程中，如果有任意一个操作失败，我们就将交易记录的状态标记为“失败”。我们通过后台补漏 Job，拉取状态为“失败”或者长时间处于“待执行”状态的交易记录，重新执行或者人工介入处理“  这里还是不明白怎么保持一致性","like_count":0},{"had_liked":false,"id":157952,"user_name":"随心而至","can_delete":false,"product_type":"c1","uid":1097836,"ip_address":"","ucode":"31866865255101","user_header":"https://static001.geekbang.org/account/avatar/00/10/c0/6c/29be1864.jpg","comment_is_top":false,"comment_ctime":1575289203,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575289203","product_id":100039001,"comment_content":"看着挺简单，为了活学活用，等老师更新代码了就去实操一下。","like_count":0},{"had_liked":false,"id":157803,"user_name":"grey927","can_delete":false,"product_type":"c1","uid":1202782,"ip_address":"","ucode":"833E02ED835B4A","user_header":"https://static001.geekbang.org/account/avatar/00/12/5a/5e/a897cb0d.jpg","comment_is_top":false,"comment_ctime":1575261900,"is_pvip":false,"replies":[{"id":"60689","content":"是的 贫血就够了","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1575424684,"ip_address":"","comment_id":157803,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1575261900","product_id":100039001,"comment_content":"如果是简单的增删改查附加一点点判断逻辑的操作，是不是不太适合用充血模型","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476535,"discussion_content":"是的 贫血就够了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575424684,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157800,"user_name":"DullBird","can_delete":false,"product_type":"c1","uid":1110494,"ip_address":"","ucode":"80E2FD5F9687CB","user_header":"https://static001.geekbang.org/account/avatar/00/10/f1/de/3ebcbb3f.jpg","comment_is_top":false,"comment_ctime":1575261466,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575261466","product_id":100039001,"comment_content":"1. 看完文章理解了之前的一个疑惑点。之前一直疑惑Domain模型，一定要自己去和数据库打交道，并且只能访问自己管理的数据。<br>学习到了service可以控制操作db。这样让Domain模型更加干净，简洁。<br>2. 之前做OOP设计的时候，会被业务必须要，而模型不应该有的场景所困扰，最后做出的决定都是模型加上好了，再外面调用方再弄一遍不就重复了么。学习了今天的知识，得到一个很大的启发是要识别清楚哪些是模型应该有的&quot;职责&quot;，哪些是业务的东西，就算有时候要多写点代码，但是要合理的分离这两个内容。 ","like_count":0},{"had_liked":false,"id":157711,"user_name":"胡家鹏","can_delete":false,"product_type":"c1","uid":1109940,"ip_address":"","ucode":"1636F84062948B","user_header":"https://static001.geekbang.org/account/avatar/00/10/ef/b4/61fb4dba.jpg","comment_is_top":false,"comment_ctime":1575249469,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575249469","product_id":100039001,"comment_content":"老师您好，我想了解下对这种转账，涉及到多个数据库操作，是用什么保持原子性的？如果是全局锁肯定会影响性能。","like_count":0},{"had_liked":false,"id":157601,"user_name":"Joanfen","can_delete":false,"product_type":"c1","uid":1004260,"ip_address":"","ucode":"4CF1B92337B625","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/e4/50600574.jpg","comment_is_top":false,"comment_ctime":1575209917,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575209917","product_id":100039001,"comment_content":"一开始使用充血模型经常会把方法放错地方，其实还是没有理解到底是哪层需要充血，真正理解了每层架构具体要做什么一切都和贫血模式时一样自然了","like_count":0},{"had_liked":false,"id":157523,"user_name":"LJK","can_delete":false,"product_type":"c1","uid":1199213,"ip_address":"","ucode":"12B2441099FF1D","user_header":"https://static001.geekbang.org/account/avatar/00/12/4c/6d/c20f2d5a.jpg","comment_is_top":false,"comment_ctime":1575185363,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1575185363","product_id":100039001,"comment_content":"&quot;就拿 Repository 的 Entity 来说，即便它被设计成贫血模型，违反面相对象编程的封装特性，有被任意代码修改数据的风险&quot;，哪位大神可以给举个简单例子解释一下为什么会有这个风险么？感谢！","like_count":0,"discussions":[{"author":{"id":1153455,"avatar":"https://static001.geekbang.org/account/avatar/00/11/99/af/d29273e2.jpg","nickname":"饭粒","note":"","ucode":"4C3220B0D43997","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70272,"discussion_content":"这个前面好像讲过，Entity 一些字段暴露一些并不需要的 public getter/setter 方法，比如 余额 balance 字段，正常应该是只用相应的业务（充值，支付等）触发才能改变余额，但是由于 setter 的存在，其他地方可通过这个入口随意改。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575340612,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1199213,"avatar":"https://static001.geekbang.org/account/avatar/00/12/4c/6d/c20f2d5a.jpg","nickname":"LJK","note":"","ucode":"12B2441099FF1D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1153455,"avatar":"https://static001.geekbang.org/account/avatar/00/11/99/af/d29273e2.jpg","nickname":"饭粒","note":"","ucode":"4C3220B0D43997","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70419,"discussion_content":"明白了，非常感谢～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575355002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":70272,"ip_address":""},"score":70419,"extra":""}]}]},{"had_liked":false,"id":157396,"user_name":"风行者","can_delete":false,"product_type":"c1","uid":1541934,"ip_address":"","ucode":"F058640CF77A35","user_header":"https://static001.geekbang.org/account/avatar/00/17/87/2e/ea54c240.jpg","comment_is_top":false,"comment_ctime":1575130719,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575130719","product_id":100039001,"comment_content":"打卡，可能还是有些疑惑，1.实体，领域模型，vo是否能够重用呢？2.领域模型的作用在于能够让更好的理解业务，如果只是数据增删改查是否太过简单，为何就不能进行业务聚合和调用dao操作数据库呢。我理解的领域模型应该是结合了entity和service层，以往贫血service层抛弃掉","like_count":0},{"had_liked":false,"id":157383,"user_name":"平风造雨","can_delete":false,"product_type":"c1","uid":1014349,"ip_address":"","ucode":"F9EE4704F31E22","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7a/4d/b0228a1a.jpg","comment_is_top":false,"comment_ctime":1575127047,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575127047","product_id":100039001,"comment_content":"充血模型提供了核心业务和非核心业务的分离，比如领域模型专注业务的描述，service层作为容器承担业务运行环境，比如访问db，读取外部存储，调用外部服务，所以业务越复杂，越需要详细的领域模型划分，以及隔离service提供的环境，进而方便后续的单元测试，功能扩展。","like_count":0},{"had_liked":false,"id":157378,"user_name":"王盛武","can_delete":false,"product_type":"c1","uid":1182516,"ip_address":"","ucode":"DE7EF246D3DCE8","user_header":"https://static001.geekbang.org/account/avatar/00/12/0b/34/f41d73a4.jpg","comment_is_top":false,"comment_ctime":1575125755,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575125755","product_id":100039001,"comment_content":"两张表记录两条，为了充血，感觉不是特别必要","like_count":0},{"had_liked":false,"id":157354,"user_name":"搞怪者😘 😒 😏 👿","can_delete":false,"product_type":"c1","uid":1300678,"ip_address":"","ucode":"40DFF5D3E3B24C","user_header":"https://static001.geekbang.org/account/avatar/00/13/d8/c6/2b2a58cf.jpg","comment_is_top":false,"comment_ctime":1575119201,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1575119201","product_id":100039001,"comment_content":"PHP也可以使用这个吗，PHP的框架感觉和这个不太一样","like_count":0,"discussions":[{"author":{"id":1286435,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a1/23/2b527dc4.jpg","nickname":"逐风随想","note":"","ucode":"A91C191EE82FCA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":158938,"discussion_content":"作者回复： 设计模式落实到具体的编程语言代码实现的时候，必然有个适配的过程，没法保证每种语言的实现思路都一模一样。Java是一种静态语言，那一些设计模式实现从Java搬到静态语言，比如C# C++是相对比较容易的，但是搬到动态语言，比如PHP，可能就要做些调整。同理，面向过程、面向对象、函数式编程中，设计模式也都有不同的实现方式。\n编程语言有自成一体的设计，会阉割掉很多它觉得不重要的语法，加强它看重的语法，这就导致有些设计思想、原则、模式，并不能很容易地在这种语言下实现。\nPHP更多的偏向网站开发，而且像facebook 用php可能更偏向于网站后端中的前端部分的开发。从应用场景上来说 可能面向过程更合适些，而设计模式的应用场景更多的是面向对象的设计，这也是为什么 《设计模式》一书的副标题提到面向对象的原因。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580640903,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157347,"user_name":"Yo nací para quererte.","can_delete":false,"product_type":"c1","uid":1664572,"ip_address":"","ucode":"8B6E9B8B3D007C","user_header":"https://static001.geekbang.org/account/avatar/00/19/66/3c/2d563488.jpg","comment_is_top":false,"comment_ctime":1575115172,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575115172","product_id":100039001,"comment_content":"有一个问题，在VirtualWalletService类中为什么要提供一个public的getVirtualWallet接口","like_count":0},{"had_liked":false,"id":157342,"user_name":"逍遥思","can_delete":false,"product_type":"c1","uid":1015512,"ip_address":"","ucode":"340F05C786730F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/d8/92a98fb6.jpg","comment_is_top":false,"comment_ctime":1575114463,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575114463","product_id":100039001,"comment_content":"DDD就是面相对象编程的具体实践，对于简单业务，用不用都行，业务越复杂，使用DDD的价值越高。<br>我目前连三层结构都没用上，直接转DDD是盲目的，但知道了DDD，就会有意识地在写新代码时思考相关架构，这个是期望，也可能在业务压力下就忘得干干净净😂","like_count":0},{"had_liked":false,"id":157338,"user_name":"Uncle.Wang","can_delete":false,"product_type":"c1","uid":1456955,"ip_address":"","ucode":"9A4F646CFC237F","user_header":"https://static001.geekbang.org/account/avatar/00/16/3b/3b/b8c00291.jpg","comment_is_top":false,"comment_ctime":1575113269,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575113269","product_id":100039001,"comment_content":"增加类图展示应该能更容易理解。","like_count":0},{"had_liked":false,"id":157317,"user_name":"奔跑的小孩","can_delete":false,"product_type":"c1","uid":1304259,"ip_address":"","ucode":"0053193F7A9870","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/21uTMWr7bx5qMibp2hwmGvLbYuj5Aic2dqD3futlNo25eDGDt4t7zzN9cdnj7cVGwTot1U4AyADfWUpqjq1SicgWQ/132","comment_is_top":false,"comment_ctime":1575107186,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575107186","product_id":100039001,"comment_content":"如果数据库交互的对象、和返回前端的vo使用贫血模式开发，那么就是在处理具体的业务逻辑时创建类使用创建领域模型对象，这样不是会导致类太多了吗","like_count":0},{"had_liked":false,"id":157310,"user_name":"Yo nací para quererte.","can_delete":false,"product_type":"c1","uid":1664572,"ip_address":"","ucode":"8B6E9B8B3D007C","user_header":"https://static001.geekbang.org/account/avatar/00/19/66/3c/2d563488.jpg","comment_is_top":false,"comment_ctime":1575106299,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575106299","product_id":100039001,"comment_content":"支付的过程感觉有些问题：<br>1.若商家和用户用同一虚拟平台的话，应该是用户虚拟钱包账户划钱到商家虚拟钱包账户，公共银行卡账户不需要转到商家银行卡<br>2.若商家和用户用不同虚拟平台的话，应该是用户虚拟钱包扣除金额，公共银行卡账户转到商家银行卡","like_count":0},{"had_liked":false,"id":157285,"user_name":"小喵喵","can_delete":false,"product_type":"c1","uid":1062444,"ip_address":"","ucode":"FDBBB2A59DB8B6","user_header":"https://static001.geekbang.org/account/avatar/00/10/36/2c/8bd4be3a.jpg","comment_is_top":false,"comment_ctime":1575102814,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575102814","product_id":100039001,"comment_content":"Domain是充血模式，除了拥有Entity类的属性，还拥有实现了业务逻辑的方法，看起来显得胖多了，所以充血了。失血模型刚好相反，比如实体（Entity）类一般只有属性，Repository只有与数据库打交道的方法。这样子看起来瘦多了，也就是指责单一了，所以失血了。不知道理解的对不对，期待老师回复。","like_count":0},{"had_liked":false,"id":157271,"user_name":"heyman","can_delete":false,"product_type":"c1","uid":1173894,"ip_address":"","ucode":"92EF9EF1B1B1B3","user_header":"https://static001.geekbang.org/account/avatar/00/11/e9/86/d34800a4.jpg","comment_is_top":false,"comment_ctime":1575100981,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575100981","product_id":100039001,"comment_content":"老师，请问贫血模式的MVC代码是使用什么框架写的？","like_count":0},{"had_liked":false,"id":157238,"user_name":"陈迎春","can_delete":false,"product_type":"c1","uid":1443663,"ip_address":"","ucode":"2870BA6D6E5B1E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIang00R9vkklnkFCLhzRysNfocr0sLnCdoZwOT3UkulAPefk5BDvd0PfIeQSODSQg1DjKWUmJOaA/132","comment_is_top":false,"comment_ctime":1575094504,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575094504","product_id":100039001,"comment_content":"做嵌入式C&#47;C++开发的表示，立即MVC的贫血和充血模型都有点费劲，感觉项目中没有用到过这个MVC开发模式","like_count":0},{"had_liked":false,"id":157237,"user_name":"Y","can_delete":false,"product_type":"c1","uid":1108914,"ip_address":"","ucode":"120EA837663A9F","user_header":"https://static001.geekbang.org/account/avatar/00/10/eb/b2/d2133ee6.jpg","comment_is_top":false,"comment_ctime":1575094139,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575094139","product_id":100039001,"comment_content":"请问老师，您举的这个例子，在 domain 类（也就是 VirtualWallet 类）的内部方法中，是不需要调用到别的 domain 类的方法的。那如果业务逻辑更加复杂了，VirtualWallet 类中的方法中的一些业务逻辑，需要调用到别的 domain 提供的方法，怎么办？不允许这种操作，必须在 service 层里面进行？","like_count":0},{"had_liked":false,"id":157225,"user_name":"join","can_delete":false,"product_type":"c1","uid":1130132,"ip_address":"","ucode":"C097D89F7BA3EF","user_header":"https://static001.geekbang.org/account/avatar/00/11/3e/94/c6460883.jpg","comment_is_top":false,"comment_ctime":1575088934,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575088934","product_id":100039001,"comment_content":"看到这里，感觉才真正理解充血模型的作用：<br><br>    真正的业务逻辑都放在充血的领域对象中，与具体使用什么框架（比如Spring，MyBatis），具体使用什么数据库无关。这样有利于保护领域对象中的数据，比如钱包中的余额，当有入账和出账操作时，余额在领域对象中自动执行加减操作，而不是将余额暴露在Service中直接操作（这样很容易出错可能导致帐不平衡，余额应该封装保护起来），当然“余额自动增减”这只是一个简单的业务逻辑例子，业务逻辑越复杂就越应该封装到领域对象中。<br><br>1. Service层只是一个中间层，起到连接和组合作用。<br>用于支持领域模型层和Repository层的交互（连接作用），利用各种领域对象执行业务逻辑（组合作用）。<br>比如通过Repository查出数据，将数据转换为领域模型对象，利用领域模型对象执行业务逻辑（核心），然后调用Repository更新领域模型中的数据。<br><br>2. Service类还负责一些非功能性及与三方系统交互的工作。<br>比如幂等、事务、发邮件、发消息、记录日志、调用其他系统的 RPC 接口等。<br><br>    不允许Service中的逻辑过于复杂，如果Service中的组合的业务逻辑过于复杂，我们就要将这业务逻辑抽取出一个新的领域对象进行封装，通过调用这个领域对象来进行这些复杂的操作。<br><br>    由于controller和Repository层中本身没有什么业务逻辑，controller中的Vo对象实际上只是传输数据使用（数据从系统传输数据到外部调用方），Repository中的Entity本质上也只是传输数据（数据从数据库中传输数据到系统），所以用贫血模型不会带来副作用，是没有问题的。<br>","like_count":0},{"had_liked":false,"id":157216,"user_name":"安静的boy","can_delete":false,"product_type":"c1","uid":1196475,"ip_address":"","ucode":"F5F44B75228A85","user_header":"https://static001.geekbang.org/account/avatar/00/12/41/bb/21ce60d2.jpg","comment_is_top":false,"comment_ctime":1575084843,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575084843","product_id":100039001,"comment_content":"又看了一遍，感觉我在理解上又深了一点。基于充血模型的开发方式将针对domain的通用业务逻辑放在domain中更利于复用，而基于贫血模型的开发方式将domain的通用业务逻辑以及一些流程性、与第三方系统打交道等非通用代码都整合在一起是不利于复用的。在业务简单的情况下，两种模式确实看不出什么太大的差别，充血模型也展示不出什么优点，但是当业务逻辑极其复杂的时候，贫血模型中的通用代码被整合在service某个方法的流程中，复用起来将十分困难，反观将通用的业务逻辑放在domain中，我们就可以随用随取，十分方便。这样看来，充血模型在业务复杂时优势确实很大。","like_count":0},{"had_liked":false,"id":157191,"user_name":"William","can_delete":false,"product_type":"c1","uid":1346215,"ip_address":"","ucode":"55F5D9DEE485B1","user_header":"https://static001.geekbang.org/account/avatar/00/14/8a/a7/674c1864.jpg","comment_is_top":false,"comment_ctime":1575077561,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575077561","product_id":100039001,"comment_content":"没接触过DDD，<br>但是通过看专栏，感觉就是把数据本身的操作抽离出去了，然后service需要了，再调用对应的方法处理，别的没啥改变？ 不知道理解的对不对.","like_count":0},{"had_liked":false,"id":157181,"user_name":"达文西","can_delete":false,"product_type":"c1","uid":1398824,"ip_address":"","ucode":"01C1063F23D634","user_header":"https://static001.geekbang.org/account/avatar/00/15/58/28/c86340ca.jpg","comment_is_top":false,"comment_ctime":1575074753,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575074753","product_id":100039001,"comment_content":"看得好过瘾，把我一直以来的困惑解除了。准备下载老师的代码看看","like_count":0},{"had_liked":false,"id":157148,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1575042211,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1575042211","product_id":100039001,"comment_content":"我们现在是吧domain和entity合二为一了。","like_count":0},{"had_liked":false,"id":157145,"user_name":"花儿少年","can_delete":false,"product_type":"c1","uid":1318540,"ip_address":"","ucode":"CFE4F64243673B","user_header":"https://static001.geekbang.org/account/avatar/00/14/1e/8c/450fe5cb.jpg","comment_is_top":false,"comment_ctime":1575041944,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575041944","product_id":100039001,"comment_content":"老师的设计没问题<br>在我看完 DDD 那本书后的感受就是，尽量把复杂的逻辑使用充血模型开发，而简单的逻辑就使用贫血模型开发。<br>使用充血模型开发的一个要点就是要保证领域模型的变更的尽量少的影响到其他层（controller，repository），所以 domain 之外还有一个防腐层，将 VO，DO 转换为 domain 的模型，简单来说就是一系列的 transfer 函数，但是这层是必须的，为了保持领域模型的纯洁性。<br>然后对于 老师的 service 层，其实还起到了两个作用，1.流程编排（调用哪些 domain 功能，这里只有一个）2.防腐层（模型转换）<br>如有错误，请指出~","like_count":0},{"had_liked":false,"id":157112,"user_name":"清风自来","can_delete":false,"product_type":"c1","uid":1026907,"ip_address":"","ucode":"89D07A602D2E00","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ab/5b/fd0b96cb.jpg","comment_is_top":false,"comment_ctime":1575033546,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575033546","product_id":100039001,"comment_content":"谢谢老师，让我解决了上一讲的疑惑。","like_count":0},{"had_liked":false,"id":157061,"user_name":"不似旧日","can_delete":false,"product_type":"c1","uid":1161271,"ip_address":"","ucode":"DF4C5E3AB9570C","user_header":"https://static001.geekbang.org/account/avatar/00/11/b8/37/98991aeb.jpg","comment_is_top":false,"comment_ctime":1575022137,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575022137","product_id":100039001,"comment_content":"感觉domain只是把service中的业务提取出来了","like_count":0},{"had_liked":false,"id":157053,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1575019354,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575019354","product_id":100039001,"comment_content":"课堂讨论: 对于DDD的看法.<br><br>DDD能有效解决MVC中Controller层（同理MVP中的Presenter层， MVVM中的VM层）的厚度，前提是项目系统复杂，业务量庞大的前提下。<br><br>个人认为在胶水层中引入Domain层并非必须将Domain类设置为数据和业务一体的类,也可以将Domain层的业务和数据分离,同样能够起到摊薄胶水层的作用.","like_count":0},{"had_liked":false,"id":157027,"user_name":"нáпの゛","can_delete":false,"product_type":"c1","uid":1130666,"ip_address":"","ucode":"834FA877EFBAF7","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/aa/49bbb007.jpg","comment_is_top":false,"comment_ctime":1575014930,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575014930","product_id":100039001,"comment_content":"两种交易流水数据格式习惯第一种，第二种也会有字段冗余吧，比如相同的时间金额字段？","like_count":0},{"had_liked":false,"id":157022,"user_name":"早起不吃虫","can_delete":false,"product_type":"c1","uid":1369757,"ip_address":"","ucode":"13CD3B5E1F9435","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/7WkTI1IicbKvsPJng5vQh5qlrf1smbfl2zb7icHZfzcAk1k4lr8w8IDEAdrqq1NHW5XZMPXiaa1h7Jn1LGOWOCkIA/132","comment_is_top":false,"comment_ctime":1575014204,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575014204","product_id":100039001,"comment_content":"1、DDD中除了service层的service逻辑外，好像存在domain层的service，将一些domain内多实例的操作包装在其中<br>2、个人感觉domain层更多控制领域实体的create,update&lt;delete&gt;操作，service层的逻辑可以封装一些查询操作，这些查询操作的返回值可以不是domain对象<br>3、IOC框架负责domain对象的持久化，domain层不必关注持久化的具体实现，由Service层逻辑与repository层的具体实现控制","like_count":0},{"had_liked":false,"id":157015,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1575013339,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575013339","product_id":100039001,"comment_content":"第二遍理解的时候 发现钱包数据的操作在贫血模型中是耦合在service中的  而充血模型是将钱包数据的操作解偶了的","like_count":0},{"had_liked":false,"id":156998,"user_name":"圆哥哥呐丶","can_delete":false,"product_type":"c1","uid":1238051,"ip_address":"","ucode":"8E56E3E68A3836","user_header":"https://static001.geekbang.org/account/avatar/00/12/e4/23/ac13d916.jpg","comment_is_top":false,"comment_ctime":1575011015,"is_pvip":true,"replies":[{"id":"60238","content":"好的 我抽空放上去<br>https:&#47;&#47;github.com&#47;wangzheng0822","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1575015624,"ip_address":"","comment_id":156998,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1575011015","product_id":100039001,"comment_content":"花费大篇幅讲 查询交易流水，  其实 在代码上体现不大， 老师 下次能给出详细的代码吗？  即便是github的 也行 ","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476298,"discussion_content":"好的 我抽空放上去\nhttps://github.com/wangzheng0822","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575015624,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156996,"user_name":"圆哥哥呐丶","can_delete":false,"product_type":"c1","uid":1238051,"ip_address":"","ucode":"8E56E3E68A3836","user_header":"https://static001.geekbang.org/account/avatar/00/12/e4/23/ac13d916.jpg","comment_is_top":false,"comment_ctime":1575010860,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575010860","product_id":100039001,"comment_content":"哎，你讲的设计思路， 和代码  联系不大。。。。代码就简单的 实现了几大业务","like_count":0},{"had_liked":false,"id":156990,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1575009901,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575009901","product_id":100039001,"comment_content":"按我的理解得出 首先control层也就是所谓的暴露接口层即就是用来负责收发数据 service层 用来处理整体的逻辑相当于整个钱包的管理层 比如通过钱包id拿到钱包 再通过钱包的逻辑处理自己的加减余额， 或者转账操作,  而respons 则负责数据存储相关 交流流水存储等等 也放在service当中进行管理 而虚拟钱包则只负责钱包的余额的增删改查逻辑  让各个类之间解偶 功能单一   <br>我对于ddd的看法如下 从例子来看 通过ddd模型 对虚拟钱包的操作和service层进行了解偶 并且service层扩展过后 service 代码依旧可维护性 和可读性 都比较好","like_count":0},{"had_liked":false,"id":156979,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1575008317,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575008317","product_id":100039001,"comment_content":"在前几节课，才初步了解到DDD，也尝试着去看过一些资料不过资料终究是资料。学习了今天的实战，等下自己还得去敲下代码，认真的对比下两者的差异。<br><br>在贫血的世界里习惯了，一下子要来充血，有个转变的过程。刚好可以在自己的实战项目里去体会，真爽","like_count":0},{"had_liked":false,"id":156972,"user_name":"Tom.G","can_delete":false,"product_type":"c1","uid":1206034,"ip_address":"","ucode":"7929B45C1A51F8","user_header":"https://static001.geekbang.org/account/avatar/00/12/67/12/5c6eb568.jpg","comment_is_top":false,"comment_ctime":1575006331,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575006331","product_id":100039001,"comment_content":"和我写的基本是一致的","like_count":0},{"had_liked":false,"id":156963,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1575003397,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575003397","product_id":100039001,"comment_content":"课后题<br>1.基于ddd，让我来拆会跟老师不一样。当然，咱们的demo比较简单，所以怎么拆都行，这里我阐述的主要是分层上的思路。<br><br>2.老师这样拆service层太重了。我会把service层再拆出一个dom service层。service层服务外放服务，做rpc或本地多个“聚合”间的交互整合。dom service负责  一个“聚合”dao层，mq，redis等等“数据源”的交互。领域对象或者叫它“聚合”或者所谓的充血模型，实现内敛的业务逻辑，对外只与自己的 dom service发生交互。<br><br>3.这样拆的好处是结构清晰，易于扩展、变动和定位问题，阅读和维护成本会比较低。坏处就是逻辑运行的中间对象会比较多，会有new 对象和数据转移的成本，在吞吐（新对象多）和响应时间（数据转换多）都有开销。","like_count":0},{"had_liked":false,"id":156950,"user_name":"宫作","can_delete":false,"product_type":"c1","uid":1242241,"ip_address":"","ucode":"A20CCCCBE044D8","user_header":"https://static001.geekbang.org/account/avatar/00/12/f4/81/5e55baaa.jpg","comment_is_top":false,"comment_ctime":1574999894,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574999894","product_id":100039001,"comment_content":"看了老师的代码  有点感觉   DDD更像 面向对象的抽象   domain  这个其实 也是面像对象的 思考方式      ","like_count":0},{"had_liked":false,"id":156939,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1574999138,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574999138","product_id":100039001,"comment_content":"关键要想好，什么东西是领域要管的，什么东西不属于领域的，这个界定很难的","like_count":0},{"had_liked":false,"id":156933,"user_name":"potato00fa","can_delete":false,"product_type":"c1","uid":1307080,"ip_address":"","ucode":"D179E68D87CC50","user_header":"https://static001.geekbang.org/account/avatar/00/13/f1/c8/8e6dc340.jpg","comment_is_top":false,"comment_ctime":1574998166,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574998166","product_id":100039001,"comment_content":"今天这堂课，妙啊~","like_count":0},{"had_liked":false,"id":156928,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1574997652,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1574997652","product_id":100039001,"comment_content":"感觉DDD的一个基本思路就是遵循单一职责原则，将业务进行职责划分，比如将贫血模型的BO，service转换为Domian和很薄的service层次，Domain中的模型对外只提供对于模型的操作，调用者不需要知道具体实现细节，而service层将调用domian里的操作将不同业务逻辑组合起来，对外提供某一功能，各司其职，每个对象内部的修改不影响调用者，划清了职责的边界，逻辑更清晰。","like_count":0},{"had_liked":false,"id":156923,"user_name":"yz","can_delete":false,"product_type":"c1","uid":1256001,"ip_address":"","ucode":"D646E3BDD795A2","user_header":"https://static001.geekbang.org/account/avatar/00/13/2a/41/6116db1b.jpg","comment_is_top":false,"comment_ctime":1574996654,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1574996654","product_id":100039001,"comment_content":"如果是这样的话，DDD的流程就变成了 vo -&gt; bo-&gt;domain-&gt;entity，那么就会序列化4次了，这在性能上有些损失，但收获的是在程序开发上的可维护，可扩展性，有没有什么更好的方式呢？","like_count":0,"discussions":[{"author":{"id":1068816,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4f/10/c276c714.jpg","nickname":"luke","note":"","ucode":"B5E0A435461A20","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65383,"discussion_content":"有了domain就没有bo了，bo和domain是同一层的，贫血里的bo，充血里的domain。另外其实没有序列化，get,set罢了，微乎其微的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1574999174,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156920,"user_name":"没有昵称行不行","can_delete":false,"product_type":"c1","uid":1241408,"ip_address":"","ucode":"0A7B13B79647CE","user_header":"https://static001.geekbang.org/account/avatar/00/12/f1/40/95d38194.jpg","comment_is_top":false,"comment_ctime":1574995771,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1574995771","product_id":100039001,"comment_content":"交易流水拆分到上层钱包和虚拟钱包单独记录之后，上层钱包的支付交易流水和虚拟钱包的交易流水如何对应呢？<br>文中提到把充值、提现、支付等业务相关的交易流水记录在上层钱包，虚拟钱包的交易流水与业务无关，只记录简单的加&#47;减操作。<br>那么对于上层钱包的支付交易流水，由于涉及两个虚拟钱包，那是不是也要对应的记录两条虚拟钱包交易流水？但是在给出的图中似乎没有体现出有两条虚拟钱包交易流水。<br>还有这是不是跟之前讨论的两种交易流水数据格式一样有数据一致性问题啊。<br>关于这个问题不知道理解得对不对，希望老师能够再说明一下。","like_count":0,"discussions":[{"author":{"id":1018685,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/3d/0c3a2fd4.jpg","nickname":"偶尔复活下","note":"","ucode":"18B1D525CD50D3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":67649,"discussion_content":"我感觉钱包流水还是要分借贷分别记录一条，便于统计当天的借方贷分总额，以及对账平衡。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575163758,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156913,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1574994960,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574994960","product_id":100039001,"comment_content":"回答问题：Service 类在DDD中相当于承担了委托职责的功能。跟上篇文章有所讲解","like_count":0},{"had_liked":false,"id":156912,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1574994893,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1574994893","product_id":100039001,"comment_content":"还有你不断在领域模型 VirtualWallet类中填加方法，不就违背了开闭原则了？？？","like_count":0,"discussions":[{"author":{"id":1132538,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/fa/030d51c1.jpg","nickname":"wythehuang","note":"","ucode":"4A4AAFDF505F72","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66398,"discussion_content":"S.O.L.I.D原则在业务中无法一一实现的, 只能有所取舍. ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575044465,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1701867,"avatar":"https://static001.geekbang.org/account/avatar/00/19/f7/eb/e7127bb8.jpg","nickname":"，","note":"","ucode":"A5543C8DFEB198","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65713,"discussion_content":"我的理解,开闭原则体现在具体业务逻辑上,比如系统添加了一个新功能,方法与某个老功能的方法类似,但是不一样,这时候就新加一个方法来做新功能,而不是修改老功能,更不是新加个类再添加方法来做新功能,比如说spring的BeanPostProcessor吧,他允许开发者添加新的实现类来补充功能,但是不允许开发者修改他原来的功能.同时体现在老师的代码里,他添加属性和新的业务不算违反开闭原则,但是如果他修改了某个业务操作的逻辑,那才是违反了开闭原则.\n不知道是不是这样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575023301,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1049741,"avatar":"https://static001.geekbang.org/account/avatar/00/10/04/8d/005c2ff3.jpg","nickname":"weineel","note":"","ucode":"6DC6EF4F256A53","race_medal":2,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65384,"discussion_content":"类的设计没办法完全同时遵循所有原则的吧。领域模型让功能的增加更简单了，代码修改的范围更小了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574999191,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156909,"user_name":"那就这样吧","can_delete":false,"product_type":"c1","uid":1327343,"ip_address":"","ucode":"A1315C5EAF2917","user_header":"https://static001.geekbang.org/account/avatar/00/14/40/ef/52bbadb9.jpg","comment_is_top":false,"comment_ctime":1574994705,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574994705","product_id":100039001,"comment_content":"两种模式综合一起比较，在平时开发中，很多数据处理这些业务我们一般还是会放到domain中去做，但service是不可少的，比如交互，给客户端返回等。不过怎么说呢，如果是简单的业务，我觉得两种都行呀，无伤大雅。","like_count":0},{"had_liked":false,"id":156907,"user_name":"Jesse","can_delete":false,"product_type":"c1","uid":1368038,"ip_address":"","ucode":"727CA882B84DA0","user_header":"https://static001.geekbang.org/account/avatar/00/14/df/e6/bd1b3c0b.jpg","comment_is_top":false,"comment_ctime":1574994398,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574994398","product_id":100039001,"comment_content":"虽然没有用过DDD原则和domain 领域模型，但是听了老师讲解这个概念和这个例子，个人感觉DDD的Domain领域模型在层次上更清晰，业务上实现更灵活。相比与贫血模型，充血模型的service 的接口对应的是业务方法接口，并将方法的具体实现委托给Domain，由Domain来完成具体业务细节的划分和实现。增强了service的灵活性和Domain的内聚性。是一种非常值得尝试的设计思路!","like_count":0},{"had_liked":false,"id":156905,"user_name":"小文","can_delete":false,"product_type":"c1","uid":1177540,"ip_address":"","ucode":"974071FAA5F173","user_header":"https://static001.geekbang.org/account/avatar/00/11/f7/c4/bd7dd30a.jpg","comment_is_top":false,"comment_ctime":1574994173,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1574994173","product_id":100039001,"comment_content":"老师，你这讲的都以后端作为例子，很多后端技术名词不知道具体含义呀，我是做前端的理解不透呀","like_count":0,"discussions":[{"author":{"id":1657587,"avatar":"https://static001.geekbang.org/account/avatar/00/19/4a/f3/a37db121.jpg","nickname":"原磨豆浆","note":"","ucode":"1E1F65276FDDDF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65410,"discussion_content":"其实从一个高度上看，前端是 Android h5，后端是后台。但是单纯从前端的业务看，你们的数据状态可以看成后端，具体的界面上的逻辑 又可以是前端。其实更多的是学习这种代码思想，我也是做前端的，我暂时是这么理解的唉o(︶︿︶)o 唉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575001290,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1177540,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f7/c4/bd7dd30a.jpg","nickname":"小文","note":"","ucode":"974071FAA5F173","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1657587,"avatar":"https://static001.geekbang.org/account/avatar/00/19/4a/f3/a37db121.jpg","nickname":"原磨豆浆","note":"","ucode":"1E1F65276FDDDF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66483,"discussion_content":"我是做游戏的，用的C++,主要想学学设计模式，可是有些名词不知道没办法理解……","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575076009,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":65410,"ip_address":""},"score":66483,"extra":""}]}]},{"had_liked":false,"id":156899,"user_name":"teddytyy","can_delete":false,"product_type":"c1","uid":1268738,"ip_address":"","ucode":"E1569D81A4154E","user_header":"https://static001.geekbang.org/account/avatar/00/13/5c/02/e7af1750.jpg","comment_is_top":false,"comment_ctime":1574993261,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574993261","product_id":100039001,"comment_content":"个人理解下来ddd的优势就在于domain抽取后的代码复用，不知道对不对","like_count":0},{"had_liked":false,"id":156895,"user_name":"L.","can_delete":false,"product_type":"c1","uid":1181647,"ip_address":"","ucode":"46A2F679C094E8","user_header":"https://static001.geekbang.org/account/avatar/00/12/07/cf/b0d6fe74.jpg","comment_is_top":false,"comment_ctime":1574992580,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574992580","product_id":100039001,"comment_content":"老师，如果两个表之间有关联关系，比如查询A表的时候一般也会把B表一起查出来，那这种耦合逻辑是放在Entity里还是放在DTO里呢？谢谢。","like_count":0},{"had_liked":false,"id":156880,"user_name":"zs阿帅","can_delete":false,"product_type":"c1","uid":1141173,"ip_address":"","ucode":"07A54AE7F1CAFF","user_header":"https://static001.geekbang.org/account/avatar/00/11/69/b5/1e1731cc.jpg","comment_is_top":false,"comment_ctime":1574991513,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1574991513","product_id":100039001,"comment_content":"为什么支付的过程中涉及到应用公共账号向商家银行卡转账？直接从用户的虚拟钱包到商家虚拟钱包转账不就行了？不太理解","like_count":0,"discussions":[{"author":{"id":1018685,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/3d/0c3a2fd4.jpg","nickname":"偶尔复活下","note":"","ucode":"18B1D525CD50D3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":67644,"discussion_content":"这里的转账，虚拟资金还是在支付系统内部的虚拟账户体系里流转（信息流），涉及到账户系统账户余额的增减，会计系统的记账（会计科目的借贷记），暂时不涉及实体银行账户（可能是记录在内部账户的在途资金，可用不可取）（t+n后银行按合同约定将这部分资金清算给平台在银行开设的实体账户；）。t+n后（平台与商家的合同约定），实体资金清算给商家（平台与商家实体账户余额变动），这部分资金可取，然后在商家发起提现，此时，不仅涉及平台内部账户余额变动，会计记账，日终清算后，还涉及商家银行实体账户的余额变动（资金流）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575163465,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1346215,"avatar":"https://static001.geekbang.org/account/avatar/00/14/8a/a7/674c1864.jpg","nickname":"William","note":"","ucode":"55F5D9DEE485B1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66497,"discussion_content":"商家的应用账号转给商家的银行卡，\n商家自己的流转. ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575077835,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156878,"user_name":"KaitoShy","can_delete":false,"product_type":"c1","uid":1038415,"ip_address":"","ucode":"E2E2E9BD3F5048","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d8/4f/65abc6f0.jpg","comment_is_top":false,"comment_ctime":1574991173,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574991173","product_id":100039001,"comment_content":"我从中能理解的是：DDD 这种思想是更专注的是本身业务，而非产品的整体业务。就像插件和其他导入的包一样。","like_count":0},{"had_liked":false,"id":156874,"user_name":"xl000","can_delete":false,"product_type":"c1","uid":1117935,"ip_address":"","ucode":"6FEABE7F7D0DC0","user_header":"https://static001.geekbang.org/account/avatar/00/11/0e/ef/030e6d27.jpg","comment_is_top":false,"comment_ctime":1574990656,"is_pvip":false,"discussion_count":3,"race_medal":5,"score":"1574990656","product_id":100039001,"comment_content":"&quot;实际上，支付的过程就是一个转账的过程，从用户的虚拟钱包账户划钱到商家的虚拟钱包账户上，然后触发真正的银行转账操作，从应用的公共银行账户转钱到商家的银行账户（注意，这里并不是从用户的银行账户转钱到商家的银行账户）&quot; 老师这里的业务没有理解，支付会导致商家钱包和银行账户余额增加，那商家钱包没有提现功能吗？如果有的话岂不是银行账户余额加了两遍？","like_count":0,"discussions":[{"author":{"id":1018685,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/3d/0c3a2fd4.jpg","nickname":"偶尔复活下","note":"","ucode":"18B1D525CD50D3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":67633,"discussion_content":"这里的转账，虚拟资金还是在支付系统内部的虚拟账户体系里流转（信息流），涉及到账户系统账户的增减，会计系统的记账；暂时不涉及实体银行账户。在商家发起提现时，日终清算后才涉及银行实体账户的余额变动（资金流）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575162705,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1637228,"avatar":"https://static001.geekbang.org/account/avatar/00/18/fb/6c/12fdc372.jpg","nickname":"迈向架构师","note":"","ucode":"2476594CF76001","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66495,"discussion_content":"然后触发真正的银行转账操作，应该是指商家后续提现的流程才触发银行转账吧- -","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575077657,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1141173,"avatar":"https://static001.geekbang.org/account/avatar/00/11/69/b5/1e1731cc.jpg","nickname":"zs阿帅","note":"","ucode":"07A54AE7F1CAFF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65293,"discussion_content":"是的，我也不理解，为啥还有一个商家钱包，不应该是极客的虚拟钱包后者应用的虚拟钱包。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574993853,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156873,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1574990495,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1574990495","product_id":100039001,"comment_content":"即便不知道DDD的理论，只要记住一句话，把service中与dao无关的操作放到相应domain中进行就可以了。不觉得DDD这个有啥神秘的。","like_count":0,"discussions":[{"author":{"id":1368038,"avatar":"https://static001.geekbang.org/account/avatar/00/14/df/e6/bd1b3c0b.jpg","nickname":"Jesse","note":"","ucode":"727CA882B84DA0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65295,"discussion_content":"还有一些 domain 无法完成的逻辑，移动到service中","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574993893,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156864,"user_name":"啦啦啦","can_delete":false,"product_type":"c1","uid":1131687,"ip_address":"","ucode":"6B12EC90A62525","user_header":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","comment_is_top":false,"comment_ctime":1574989451,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1574989451","product_id":100039001,"comment_content":"钱包系统和虚拟钱包系统这两个系统是不是就是两份项目代码","like_count":0,"discussions":[{"author":{"id":1087243,"avatar":"https://static001.geekbang.org/account/avatar/00/10/97/0b/a943bcb3.jpg","nickname":"zhou","note":"","ucode":"E1CE8575B3F106","race_medal":3,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":257758,"discussion_content":"嗯 你可以理解为两个单独的系统。  就好比你一个支付宝系统 和 你的银行卡系统一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588603176,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1219438,"avatar":"https://static001.geekbang.org/account/avatar/00/12/9b/6e/edd2da0c.jpg","nickname":"蓝魔丶","note":"","ucode":"2AE4359E263558","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65258,"discussion_content":"重头开始设计的新系统就可以采用微服务分开两份代码，如果是遗留系统或者比较传统，团队规模，技术负担大就采用Maven多模块来实现职责单一，项目统一维护的目的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574992064,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156863,"user_name":"安静的boy","can_delete":false,"product_type":"c1","uid":1196475,"ip_address":"","ucode":"F5F44B75228A85","user_header":"https://static001.geekbang.org/account/avatar/00/12/41/bb/21ce60d2.jpg","comment_is_top":false,"comment_ctime":1574989143,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574989143","product_id":100039001,"comment_content":"我看代码中并没有关于流水记录的代码，是老师省略了吗？还是我自己没有注意到。。。","like_count":0},{"had_liked":false,"id":156852,"user_name":"摸爬滚打三十年","can_delete":false,"product_type":"c1","uid":1240241,"ip_address":"","ucode":"764A7F920EC304","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/b1/d790b927.jpg","comment_is_top":false,"comment_ctime":1574988452,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574988452","product_id":100039001,"comment_content":"这节讲的干货满满，理论实践讲解的非常透彻。感觉学一遍没有完全领会。周末再刷两遍，深入学习下。","like_count":0},{"had_liked":false,"id":156828,"user_name":"L🚲🐱","can_delete":false,"product_type":"c1","uid":1577856,"ip_address":"","ucode":"08A012739614DE","user_header":"https://static001.geekbang.org/account/avatar/00/18/13/80/2c9da1b1.jpg","comment_is_top":false,"comment_ctime":1574986289,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574986289","product_id":100039001,"comment_content":"趁着坐公交的时间，看了一遍，感觉茅塞顿开，再多看几遍巩固下💪","like_count":0},{"had_liked":false,"id":156803,"user_name":"zliweijk","can_delete":false,"product_type":"c1","uid":1082430,"ip_address":"","ucode":"5645F9D0BD0751","user_header":"https://static001.geekbang.org/account/avatar/00/10/84/3e/d162e6db.jpg","comment_is_top":false,"comment_ctime":1574960603,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574960603","product_id":100039001,"comment_content":"王争老师讲的是DDD如何应用到单个服务代码中，欧创新老师讲的是DDD在微服务设计中的应用，感觉现在对DDD认识更深刻了","like_count":0},{"had_liked":false,"id":156802,"user_name":"李小龙","can_delete":false,"product_type":"c1","uid":1158263,"ip_address":"","ucode":"1B64CB66AF0765","user_header":"https://static001.geekbang.org/account/avatar/00/11/ac/77/fbca9f8b.jpg","comment_is_top":false,"comment_ctime":1574960449,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574960449","product_id":100039001,"comment_content":"看了老师的分享茅塞顿开。","like_count":0},{"had_liked":false,"id":156796,"user_name":"Daiver","can_delete":false,"product_type":"c1","uid":1466447,"ip_address":"","ucode":"9B1A03AFBC79BC","user_header":"https://static001.geekbang.org/account/avatar/00/16/60/4f/db0e62b3.jpg","comment_is_top":false,"comment_ctime":1574958778,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574958778","product_id":100039001,"comment_content":"受教了","like_count":0},{"had_liked":false,"id":156941,"user_name":"potato00fa","can_delete":false,"product_type":"c1","uid":1307080,"ip_address":"","ucode":"D179E68D87CC50","user_header":"https://static001.geekbang.org/account/avatar/00/13/f1/c8/8e6dc340.jpg","comment_is_top":false,"comment_ctime":1574999281,"is_pvip":false,"discussion_count":32,"race_medal":0,"score":"2574260409585","product_id":100039001,"comment_content":"我对DDD的看法就是，它可以把原来最重的service逻辑拆分并且转移一部分逻辑，可以使得代码可读性略微提高，另一个比较重要的点是使得模型充血以后，基于模型的业务抽象在不断的迭代之后会越来越明确，业务的细节会越来越精准，通过阅读模型的充血行为代码，能够极快的了解系统的业务，对于开发来说能说明显的提升开发效率。<br>在维护性上来说，如果项目新进了开发人员，如果是贫血模型的service代码，无论代码如何清晰，注释如何完备，代码结构设计得如何优雅，都没有办法第一时间理解系统的核心业务逻辑，但是如果是充血模型，直接阅读充血模型的行为方法，起码能够很快理解70%左右的业务逻辑，因为充血模型可以说是业务的精准抽象，我想，这就是领域模型驱动能够达到&quot;驱动&quot;效果的由来吧","like_count":600},{"had_liked":false,"id":156816,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1574979779,"is_pvip":true,"discussion_count":15,"race_medal":0,"score":"443956611267","product_id":100039001,"comment_content":"理解OOP，我们就不难理解DDD：<br>DDD第一原则：将数据和操作结合。（贫血模型将数据和操作分离，违反OOP的原则。）<br>DDD第二原则：界限上下文。这是将“单一指责”应用于我们的领域模型。<br><br>DDD is nothing more than OOP applied to business models. DDD其实就是把OOP应用于业务模型。<br><br>实现：<br>1、使用通用语言（Ubiquitous Language）：类、方法、字段的命名，要符合业务。使用业务语言命名，以后在和客户或者其他团队交流时能够更顺畅。<br><br>2、理解系统业务：例如做一个理财系统，要亲自去和银行卖理财产品的人聊聊或者买个理财产品之后，那些数据库中对你来说毫无意义的字段才变得有血有肉。<br><br>介绍一篇博客吧：DDD101 https:&#47;&#47;medium.com&#47;the-coding-matrix&#47;ddd-101-the-5-minute-tour-7a3037cf53b8<br><br>最后，是时候祭出大杀器了：《领域驱动设计》Eric Evans （反正我也没看）<br>","like_count":104},{"had_liked":false,"id":157226,"user_name":"join","can_delete":false,"product_type":"c1","uid":1130132,"ip_address":"","ucode":"C097D89F7BA3EF","user_header":"https://static001.geekbang.org/account/avatar/00/11/3e/94/c6460883.jpg","comment_is_top":false,"comment_ctime":1575089047,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"319402668951","product_id":100039001,"comment_content":"看到这里，感觉才真正理解充血模型的作用：<br><br>    真正的业务逻辑都放在充血的领域对象中，与具体使用什么框架（比如Spring，MyBatis），具体使用什么数据库无关。这样有利于保护领域对象中的数据，比如钱包中的余额，当有入账和出账操作时，余额在领域对象中自动执行加减操作，而不是将余额暴露在Service中直接操作（这样很容易出错可能导致帐不平衡，余额应该封装保护起来），当然“余额自动增减”这只是一个简单的业务逻辑例子，业务逻辑越复杂就越应该封装到领域对象中。<br><br>1. Service层只是一个中间层，起到连接和组合作用。<br>用于支持领域模型层和Repository层的交互（连接作用），利用各种领域对象执行业务逻辑（组合作用）。<br>比如通过Repository查出数据，将数据转换为领域模型对象，利用领域模型对象执行业务逻辑（核心），然后调用Repository更新领域模型中的数据。<br><br>2. Service类还负责一些非功能性及与三方系统交互的工作。<br>比如幂等、事务、发邮件、发消息、记录日志、调用其他系统的 RPC 接口等。<br><br>    不允许Service中的逻辑过于复杂，如果Service中的组合的业务逻辑过于复杂，我们就要将这业务逻辑抽取出一个新的领域对象进行封装，通过调用这个领域对象来进行这些复杂的操作。<br><br>    由于controller和Repository层中本身没有什么业务逻辑，controller中的Vo对象实际上只是传输数据使用（数据从系统传输数据到外部调用方），Repository中的Entity本质上也只是传输数据（数据从数据库中传输数据到系统），所以用贫血模型不会带来副作用，是没有问题的。<br>","like_count":74,"discussions":[{"author":{"id":2935759,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/cb/cf/fc97de76.jpg","nickname":"Geektimer","note":"","ucode":"13746813BA173A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555741,"discussion_content":"解释的很棒","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647055116,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1930698,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/75/ca/4c127da3.jpg","nickname":"Emma","note":"","ucode":"C2D31142AF7288","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543894,"discussion_content":"差不多就是这个意思吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641348838,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1021539,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/96/63/7eb32c9b.jpg","nickname":"捞鱼的搬砖奇","note":"","ucode":"2FD194C4DA26E5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294080,"discussion_content":"Repository本身就是 DDD 的叫法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595775930,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1622209,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c0/c1/414d5d1b.jpg","nickname":"_yh葱","note":"","ucode":"FA899711E91113","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":202122,"discussion_content":"对老师知识补充的更加好理解😀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583865501,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156831,"user_name":"miracle","can_delete":false,"product_type":"c1","uid":1276137,"ip_address":"","ucode":"FD7074F1062AE9","user_header":"https://static001.geekbang.org/account/avatar/00/13/78/e9/9d807269.jpg","comment_is_top":false,"comment_ctime":1574986580,"is_pvip":false,"replies":[{"id":"60237","content":"好的，我把完整代码抽空整理好放到github上<br>https:&#47;&#47;github.com&#47;wangzheng0822","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1575015591,"ip_address":"","comment_id":156831,"utype":1}],"discussion_count":20,"race_medal":0,"score":"302222697300","product_id":100039001,"comment_content":"建议将完整一些的代码放到 github 上 然后感兴趣的话可以自行去github 上研究或者提 pr","like_count":71,"discussions":[{"author":{"id":2411555,"avatar":"","nickname":"Geek_08733c","note":"","ucode":"9EE5A78C35DBB1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341288,"discussion_content":"花了钱的，能不能让我的money有所价值","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1610368610,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1134861,"avatar":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","nickname":"James","note":"","ucode":"48B0F2A334D1C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66754,"discussion_content":"代码还没放上去= =","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1575104590,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1603271,"avatar":"","nickname":"Geek_f3a3d1","note":"","ucode":"E15FA1C3AB3174","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1134861,"avatar":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","nickname":"James","note":"","ucode":"48B0F2A334D1C1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":112883,"discussion_content":"现在也没","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1577886172,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":66754,"ip_address":""},"score":112883,"extra":""}]},{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476246,"discussion_content":"好的，我把完整代码抽空整理好放到github上\nhttps://github.com/wangzheng0822","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575015591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1042444,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e8/0c/870d2de4.jpg","nickname":"敲代码的老王","note":"","ucode":"B641FB945F0C04","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":532988,"discussion_content":"2021年11月24日了，还是没看到代码。。。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1637747860,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":476246,"ip_address":""},"score":532988,"extra":"{\"user_type\":1}"}]},{"author":{"id":1586169,"avatar":"https://static001.geekbang.org/account/avatar/00/18/33/f9/658f5bd2.jpg","nickname":"torchlight","note":"","ucode":"1E05FD0360BEF3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379889,"discussion_content":"2021年6月依然没有","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1624205138,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1656956,"avatar":"https://static001.geekbang.org/account/avatar/00/19/48/7c/2aaf50e5.jpg","nickname":"coder","note":"","ucode":"3A0940EBF94577","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307794,"discussion_content":"现在还是没有","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1600761130,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1008793,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/64/99/c22d82a1.jpg","nickname":"陈高健","note":"","ucode":"9EABC500EA924F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":210965,"discussion_content":"代码确实没找到... 口头答应确实...","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1584795906,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1058015,"avatar":"https://static001.geekbang.org/account/avatar/00/10/24/df/645f8087.jpg","nickname":"Yayu","note":"","ucode":"5E7842458D8229","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65467,"discussion_content":"补充一点，可以创建多个语言版本的目录，以供各个不同语言的开发人员研究或者提 PR","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575004139,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1370705,"avatar":"https://static001.geekbang.org/account/avatar/00/14/ea/51/9132e9cc.jpg","nickname":"土豆哪里挖","note":"","ucode":"F27B3BA0477050","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1058015,"avatar":"https://static001.geekbang.org/account/avatar/00/10/24/df/645f8087.jpg","nickname":"Yayu","note":"","ucode":"5E7842458D8229","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65511,"discussion_content":"附议","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575008067,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":65467,"ip_address":""},"score":65511,"extra":""},{"author":{"id":1164531,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c4/f3/92f654f1.jpg","nickname":"Bug? Feature!","note":"","ucode":"F8FA8A0094FBA0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1058015,"avatar":"https://static001.geekbang.org/account/avatar/00/10/24/df/645f8087.jpg","nickname":"Yayu","note":"","ucode":"5E7842458D8229","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65633,"discussion_content":"一直都是这样，之前的数据结构与算法就是这样","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575017124,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":65467,"ip_address":""},"score":65633,"extra":""}]},{"author":{"id":1250730,"avatar":"https://static001.geekbang.org/account/avatar/00/13/15/aa/b45d1f44.jpg","nickname":"大黄蜂=_=","note":"","ucode":"17E9EB8F524967","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591226,"discussion_content":"2022年了 还是没有代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666411852,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2821088,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/0b/e0/06031ed5.jpg","nickname":"梅里埃","note":"","ucode":"5AFC7F8875750D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532797,"discussion_content":"talk cheap show me your code！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637704808,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2663785,"avatar":"https://static001.geekbang.org/account/avatar/00/28/a5/69/1fc6fc4b.jpg","nickname":"张海翔","note":"","ucode":"3A331DAA59FC2E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385702,"discussion_content":"我觉得没有也好，正好自己操作一遍，映像更为深刻。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627218054,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1115232,"avatar":"https://static001.geekbang.org/account/avatar/00/11/04/60/64d166b6.jpg","nickname":"Fan","note":"","ucode":"3BF28670FD9407","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380810,"discussion_content":"请问下，代码在哪里呢？在github没有找到。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624709500,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1167430,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d0/46/7f9af8de.jpg","nickname":"寻","note":"","ucode":"473B2CC14158A7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373619,"discussion_content":"还是没有","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620800893,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1152145,"avatar":"https://static001.geekbang.org/account/avatar/00/11/94/91/6d6ca42f.jpg","nickname":"怀草诗","note":"","ucode":"78F8B9B4628F15","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348686,"discussion_content":"我还以为真有代码呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612679631,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2107466,"avatar":"https://static001.geekbang.org/account/avatar/00/20/28/4a/36d07533.jpg","nickname":"crossover  of   AI","note":"","ucode":"8EE3289947808F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344275,"discussion_content":"代码呢，我可不想只看你说的，代码代码代码代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611382379,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1042793,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e9/69/779b48c2.jpg","nickname":"苏忆","note":"","ucode":"B8BE78280CCB99","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299701,"discussion_content":"到目前为止依然没有","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597770078,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1264061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/49/bd/ae37990b.jpg","nickname":"geeklyc","note":"","ucode":"F25441AB6433B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281015,"discussion_content":"找了半天没找到，尴尬","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591662820,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157231,"user_name":"风之射手座","can_delete":false,"product_type":"c1","uid":1128993,"ip_address":"","ucode":"41701B012716AC","user_header":"https://static001.geekbang.org/account/avatar/00/11/3a/21/caa40d0f.jpg","comment_is_top":false,"comment_ctime":1575091377,"is_pvip":false,"discussion_count":14,"race_medal":0,"score":"126129142961","product_id":100039001,"comment_content":"第2步支付处理流程感觉有点问题:<br>从用户的虚拟钱包转90到商家虚拟钱包应该就完了，不应该再从应用公共银行卡再划钱到商家银行卡。如果要即时划转到商家银行卡，就要记得把商家的虚拟钱包减少90。<br>好像是这样吧？","like_count":29,"discussions":[{"author":{"id":1236325,"avatar":"https://static001.geekbang.org/account/avatar/00/12/dd/65/575a3b8d.jpg","nickname":"🎵粉墨","note":"","ucode":"559647560612F0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299856,"discussion_content":"看来做金融合规的公司还是少啊,资金监管需要,要做合规的金融业务,所有的资金必须被银行监管,公司会给每一个用户在对应监管银行去开一个虚拟银行卡.所以转账的时候会有对应的操作.","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1597840145,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1390286,"avatar":"https://static001.geekbang.org/account/avatar/00/15/36/ce/5c958ff9.jpg","nickname":"Just do it","note":"","ucode":"70C3F8F9707325","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":73728,"discussion_content":"不过， 这个流程应该是， 用户虚拟钱包-90， 商家钱包+90， 商家体现，公共银行账户转账90到行家银行账户。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1575592764,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1398577,"avatar":"https://static001.geekbang.org/account/avatar/00/15/57/31/6772744d.jpg","nickname":"ちよくん","note":"","ucode":"B71E9B16E4408F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1390286,"avatar":"https://static001.geekbang.org/account/avatar/00/15/36/ce/5c958ff9.jpg","nickname":"Just do it","note":"","ucode":"70C3F8F9707325","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":107629,"discussion_content":"+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577594537,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":73728,"ip_address":""},"score":107629,"extra":""}]},{"author":{"id":1390286,"avatar":"https://static001.geekbang.org/account/avatar/00/15/36/ce/5c958ff9.jpg","nickname":"Just do it","note":"","ucode":"70C3F8F9707325","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":73724,"discussion_content":"我理解虚拟钱包，只显示个数字，用户存入应用的钱都在应该的公共银行账户中，所以这里第一步是虚拟钱包金额减90，然后是银行发生真正的转账操作。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1575592594,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1536075,"avatar":"https://static001.geekbang.org/account/avatar/00/17/70/4b/6b028f2a.jpg","nickname":"Hooray","note":"","ucode":"39A62F7619C5D3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":218166,"discussion_content":"因为有个提现的功能啊，转账的两个用户都是虚拟的钱存在虚拟钱包，实际的钱都是在公共的银行卡上，这个就不需要转来转去了，而只有商家要去提现的时候，才会有实际的钱从公共的银行卡到商户的银行卡啊","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585627346,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1104279,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d9/97/0cc8cfac.jpg","nickname":"计二高岑","note":"","ucode":"991CDC1255023D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":363496,"discussion_content":"请教下各位。公共帐户在数据库上如何设计。一个系统只有一个公共帐号。所用户的提现都会对公共帐号进行余额减少。如何解决并发问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617203724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1268264,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5a/28/732d3f2f.jpg","nickname":"GEEKBANG_6638780","note":"","ucode":"952194E56FD8C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1104279,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d9/97/0cc8cfac.jpg","nickname":"计二高岑","note":"","ucode":"991CDC1255023D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382785,"discussion_content":"这个在数据库中叫热点数据，竞争一般是行锁。知道了根源以后就好处理了。 首先为什么行锁竞争激烈，因为大家都想针对该行读写。 分而治之，把热点行拆分成多行，汇总的时候统计所有的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1625724100,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":363496,"ip_address":""},"score":382785,"extra":""}]},{"author":{"id":1612910,"avatar":"https://static001.geekbang.org/account/avatar/00/18/9c/6e/01b4d5d2.jpg","nickname":"liupan","note":"","ucode":"C6C7C48BCCAE12","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332211,"discussion_content":"虚拟钱包的余额只是用于记账和显示，实际应该都是公共账户与用户，商家的钱发生转账","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607094662,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1249981,"avatar":"https://static001.geekbang.org/account/avatar/00/13/12/bd/54987d4b.jpg","nickname":"vince","note":"","ucode":"90DC7EA30D34B2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":79171,"discussion_content":"+1，我也一开始觉得奇怪了。然后个人观点是：只有充值和提现涉及到公共银行卡和用户银行卡之间的操作。转账步骤应该仅仅是虚拟钱包之间的操作。(转账也可能老师考虑的是从A用户虚拟钱包直接转到了B用户的银行卡中，这操作有点迷...)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576064823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1507189,"avatar":"https://static001.geekbang.org/account/avatar/00/16/ff/75/9c1b2ece.jpg","nickname":"wind","note":"","ucode":"5EC77AEB18130E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":73982,"discussion_content":"我看的时候误解商家虚拟钱包是不同的系统。同意你的说法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575619393,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1325816,"avatar":"https://static001.geekbang.org/account/avatar/00/14/3a/f8/c1a939e7.jpg","nickname":"君哥聊技术","note":"","ucode":"2C9A22BCE4C79E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":73083,"discussion_content":"不应该吧，虚拟钱包和银行卡相当于是两套帐啊\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575552226,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1132661,"avatar":"https://static001.geekbang.org/account/avatar/00/11/48/75/02b4366a.jpg","nickname":"乘坐Tornado的线程魔法师","note":"","ucode":"C4C9915866E769","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":69898,"discussion_content":"同意。另一个办法就是直接从应用公共账户转账到商家账户。但是不给商家加虚拟钱包余额。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575300707,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1109940,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ef/b4/61fb4dba.jpg","nickname":"胡家鹏","note":"","ucode":"1636F84062948B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":69449,"discussion_content":"同意","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575288426,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1236484,"avatar":"https://static001.geekbang.org/account/avatar/00/12/de/04/a597d056.jpg","nickname":"蓝心","note":"","ucode":"2230EB2DEB6DF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66871,"discussion_content":"同意","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575113263,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157929,"user_name":"邹佳敏","can_delete":false,"product_type":"c1","uid":1328215,"ip_address":"","ucode":"377E2194CE6E64","user_header":"https://static001.geekbang.org/account/avatar/00/14/44/57/b0f3eeb5.jpg","comment_is_top":false,"comment_ctime":1575284138,"is_pvip":false,"replies":[{"id":"60711","content":"是有这个问题 我改下 ","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1575428793,"ip_address":"","comment_id":157929,"utype":1}],"discussion_count":18,"race_medal":0,"score":"113244433834","product_id":100039001,"comment_content":"看了一圈评论，好像没有人和我有同样的疑惑？ <br>争哥说了很多交易流水表的设计，明明已经详细介绍了字段冗余的表1要明显优于表2，但为何在虚拟钱包的交易流水表的设计里，使用的又是字段紧凑的表2呢？<br>那么，在底层虚拟钱包的交易流水表里，同样会存在数据不一致的情况呀？A转出被记录下来了，B转入失败。","like_count":26},{"had_liked":false,"id":156800,"user_name":"丿淡忘","can_delete":false,"product_type":"c1","uid":1139645,"ip_address":"","ucode":"604AE01961A026","user_header":"https://static001.geekbang.org/account/avatar/00/11/63/bd/80f587ad.jpg","comment_is_top":false,"comment_ctime":1574959804,"is_pvip":false,"discussion_count":9,"race_medal":1,"score":"96064240316","product_id":100039001,"comment_content":"这两天一直在思考ddd，就等课程更新，这样一说就理解了，domain模型使用充血模型设计，使之具备独立性，而业务无关的vo，po就可以使用贫血模型进行设计，因为不涉及具体复杂业务，如果control层需要调用多个领域模型，则把相关的领域服务组合在一起，这里有个小问题，就是do转为dto这个过程，应该是在应用层完成还是领域层完成，如果在应用层完成，好像属于把领域模型暴露出去了，希望老师可以在指点一下","like_count":22,"discussions":[{"author":{"id":1274117,"avatar":"https://static001.geekbang.org/account/avatar/00/13/71/05/db554eba.jpg","nickname":"👽","note":"","ucode":"D313AF941B412D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281892,"discussion_content":"内存吃紧的时候可以考虑使用WeakHashMap，，，\n不要误导人，内存吃紧的时候就联系老板加服务器内存。条件允许的情况下，不要用自己不熟悉的技术。加内存是公司掏钱，省内存省出事了，可是自己背锅。\n","likes_number":33,"is_delete":false,"is_hidden":false,"ctime":1591837832,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1670152,"avatar":"https://static001.geekbang.org/account/avatar/00/19/7c/08/a2cca204.jpg","nickname":"123","note":"","ucode":"47320F849F6C40","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1274117,"avatar":"https://static001.geekbang.org/account/avatar/00/13/71/05/db554eba.jpg","nickname":"👽","note":"","ucode":"D313AF941B412D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299206,"discussion_content":"哈哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597592757,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":281892,"ip_address":""},"score":299206,"extra":""},{"author":{"id":2347137,"avatar":"https://static001.geekbang.org/account/avatar/00/23/d0/81/d5c8e46e.jpg","nickname":"snake","note":"","ucode":"47BFFE4D048156","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1670152,"avatar":"https://static001.geekbang.org/account/avatar/00/19/7c/08/a2cca204.jpg","nickname":"123","note":"","ucode":"47320F849F6C40","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":354353,"discussion_content":"哈哈，太真实了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615279287,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":299206,"ip_address":""},"score":354353,"extra":""},{"author":{"id":2853072,"avatar":"","nickname":"小杰同学","note":"","ucode":"C6FC59D58F772C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1274117,"avatar":"https://static001.geekbang.org/account/avatar/00/13/71/05/db554eba.jpg","nickname":"👽","note":"","ucode":"D313AF941B412D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579327,"discussion_content":"很™有道理 我学废了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657353748,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":281892,"ip_address":""},"score":579327,"extra":""}]},{"author":{"id":1540988,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKZ16iaIia0029oI1Qh5NicibpbTiaBAaCOPYXoLplKHr6uQ2rSVxPZanBvpMcL2NuhwKQYCFnaHP5tedQ/132","nickname":"FIGNT","note":"","ucode":"D9DB185AE9E67C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":214695,"discussion_content":"感谢分享，正好学习一下","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585227152,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1213078,"avatar":"https://static001.geekbang.org/account/avatar/00/12/82/96/aa795685.jpg","nickname":"mghio","note":"","ucode":"74883EDE4FD0DC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":212691,"discussion_content":"优秀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585008664,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157382,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1119593,"ip_address":"","ucode":"94656FE4A6C378","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","comment_is_top":false,"comment_ctime":1575126725,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"83179505349","product_id":100039001,"comment_content":"DDD真正的价值在于战略设计，对业务模型到领域模型的建模时需要重点关注的有哪些，比如确定核心服务（核心域、通用域、支撑域）、微服务边界（领域、子域）、领域边界（限界上下文），功能归类（聚合）等等。而战略设计最终的目的仍然是说过来说过去的那些，高内聚、低耦合、面向对象设计、职责单一、易扩展、易维护、易拆分、易演进。<br>DDD战术设计是一种实施的方法论，但是因为他是看的见、摸得着（有真正所谓的代码结构可以参考）的，吸引了更多的关注点，如果没有背后的战略设计的思想，生搬硬套，甚至可能会适得其反。<br>DDD最重要的还是设计思想，也就是战略设计，而不是他的模式或者分层方式，也就是战术设计！","like_count":19},{"had_liked":false,"id":156821,"user_name":"Cy23","can_delete":false,"product_type":"c1","uid":1591293,"ip_address":"","ucode":"8DC561C5151758","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/fd/895f0c27.jpg","comment_is_top":false,"comment_ctime":1574984164,"is_pvip":false,"discussion_count":16,"race_medal":0,"score":"74589428196","product_id":100039001,"comment_content":"听完一遍，看来我需要在听一遍，php视乎要理解JAVA的有点差异啊","like_count":17,"discussions":[{"author":{"id":1363822,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/uktgj5R0p78c67oLib8EuRMRCgP8yjxnZ1ibVOuibhRZvjJpKSJNaTl0UlEfGyiaaiaGyPmqpGYpibTt0QopX1qtWfQQ/132","nickname":"杨大小最嗨皮","note":"","ucode":"7DFACF1414AE16","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373862,"discussion_content":"这个实现应该是有问题的 WeakHashMap的Key对象如果只被weakhashmap持有 而没有被外界其他地方引用 这个key对应的entry是会再下一次gc中清除掉的 https://www.baeldung.com/java-weakhashmap","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1620896415,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1100064,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c9/20/e4f1b17c.jpg","nickname":"zj","note":"","ucode":"E3329CCF694AC2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284066,"discussion_content":"你这个做法不太好，按道理一个弱引用的散列表就可以解决了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1592440931,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1006864,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/10/0acf7cbc.jpg","nickname":"Ryan-Hou","note":"","ucode":"5B703C1E1596A5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":256487,"discussion_content":"这个代码 valueOf 方法递归调用死循环了吧。 ","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1588485518,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1338203,"avatar":"https://static001.geekbang.org/account/avatar/00/14/6b/5b/16a93d9d.jpg","nickname":"- -","note":"","ucode":"FBB2869AD5FEA5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":204949,"discussion_content":"这样的话，WeakHashMap的key的Integer对象是否一直被引用，造成无法被GC回收呢？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1584241777,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2739750,"avatar":"https://static001.geekbang.org/account/avatar/00/29/ce/26/f493253d.jpg","nickname":"源不息","note":"","ucode":"2B9FF0B611BC9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1338203,"avatar":"https://static001.geekbang.org/account/avatar/00/14/6b/5b/16a93d9d.jpg","nickname":"- -","note":"","ucode":"FBB2869AD5FEA5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548768,"discussion_content":"一定会\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643360898,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":204949,"ip_address":""},"score":548768,"extra":""}]},{"author":{"id":1330141,"avatar":"https://static001.geekbang.org/account/avatar/00/14/4b/dd/41614582.jpg","nickname":"HomeyLiu","note":"","ucode":"EF4CCB92C369B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538022,"discussion_content":"用soft更好,要是用LinkHashMap&lt;Integer,SoftReference&lt;Integer&gt;&gt; ,采用LRU算法 是最好的.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639301476,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1484184,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","nickname":"djfhchdh","note":"","ucode":"E71D75328CE398","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":206712,"discussion_content":"赞同，weakhashmap的键自动就是弱引用对象，","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584432252,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159332,"user_name":"随机的","can_delete":false,"product_type":"c1","uid":1194535,"ip_address":"","ucode":"D8319136F27CBA","user_header":"https://static001.geekbang.org/account/avatar/00/12/3a/27/6bb0bb01.jpg","comment_is_top":false,"comment_ctime":1575600610,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"57410175458","product_id":100039001,"comment_content":"请教一下老师，以及各位同学，销售单、进货单、调拨单、入库单、出库单之类的单据类型是否适合使用ddd，单据的操作一般是新增编辑删除，还有状态的变化，以最复杂的调拨单为例，调拨单有新增、编辑、删除、查找操作，还有状态操作，比如从草稿到待审核，待审核到已审核，待审核到拒绝，审核通过之后还要在出库仓库生成待发货的出库单，入库仓库生成待收货的入库单，出库单入库单又有各自的状态操作，出库单确认发货，出库单变成已发货状态，同步修改调拨单和入库单的状态为已发货，入库仓库收到货，确认收货后，入库单变成已收货，同步修改调拨单和出库单的状态为已收货，这已经是简化的流程，我当前的实现中还涉及到仓库与总部的结算，仓库部分发货，部分收货等操作，结算还支持部分结算，就更复杂了，这种情况下，适合使用ddd吗？若适合，该怎么使用，仿照老师虚拟钱包的例子，实在不知从何下手，ddd不是更适合复杂操作吗，这里该如何应用ddd呢？求指教，感激不尽。","like_count":13,"discussions":[{"author":{"id":1147453,"avatar":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","nickname":"忆水寒","note":"","ucode":"E3F86BD8AA8903","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":216769,"discussion_content":"惭愧啊，进度滞后了半个月多.....","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585484794,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1004698,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/54/9a/76c0af70.jpg","nickname":"每天晒白牙","note":"","ucode":"A1B102CD933DEA","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":1147453,"avatar":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","nickname":"忆水寒","note":"","ucode":"E3F86BD8AA8903","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":216820,"discussion_content":"这个是哪个专栏？我都记不清了，我现在追更好几个专栏😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585487573,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":216769,"ip_address":""},"score":216820,"extra":""},{"author":{"id":1147453,"avatar":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","nickname":"忆水寒","note":"","ucode":"E3F86BD8AA8903","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1004698,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/54/9a/76c0af70.jpg","nickname":"每天晒白牙","note":"","ucode":"A1B102CD933DEA","race_medal":1,"user_type":1,"is_pvip":false},"discussion":{"id":216864,"discussion_content":"设计模式之美，3月9号课程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585490272,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":216820,"ip_address":""},"score":216864,"extra":""},{"author":{"id":1004698,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/54/9a/76c0af70.jpg","nickname":"每天晒白牙","note":"","ucode":"A1B102CD933DEA","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":1147453,"avatar":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","nickname":"忆水寒","note":"","ucode":"E3F86BD8AA8903","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":216935,"discussion_content":"哦，这个我追更到最新了，我不咋留言，就瞎看😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585492726,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":216864,"ip_address":""},"score":216935,"extra":""}]}]},{"had_liked":false,"id":156921,"user_name":"pines","can_delete":false,"product_type":"c1","uid":1200708,"ip_address":"","ucode":"7B925605B36B4E","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/44/de7f2b98.jpg","comment_is_top":false,"comment_ctime":1574995909,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"57409570757","product_id":100039001,"comment_content":"在我看来，Repository与Domian都是service的底层。Repository复杂数据的存储，Domian负责业务逻辑，service将两者融合。","like_count":13,"discussions":[{"author":{"id":1999235,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/81/83/f93b1e62.jpg","nickname":"peaceForce","note":"","ucode":"98A318930DDC9A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374760,"discussion_content":"言简意赅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621337660,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1033096,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c3/88/d16816a8.jpg","nickname":"如来神掌","note":"","ucode":"45E20FF935BD2F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277165,"discussion_content":"嗯，我也这么理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591011177,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156936,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1574998369,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"48819638625","product_id":100039001,"comment_content":"十个项目九个挂，做为一个瘦子，先从贫血开干，等项目有奔头了，吃成胖子后再充血:)","like_count":11},{"had_liked":false,"id":156916,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1574995288,"is_pvip":false,"replies":[{"id":"60240","content":"完整案例代码可能就太多了","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1575015681,"ip_address":"","comment_id":156916,"utype":1}],"discussion_count":9,"race_medal":0,"score":"44524668248","product_id":100039001,"comment_content":"还有一点，期待老师实现一个完整的案例的代码以供我们参考琢磨。","like_count":10,"discussions":[{"author":{"id":1128121,"avatar":"https://static001.geekbang.org/account/avatar/00/11/36/b9/3b28f67c.jpg","nickname":"xueyuan","note":"","ucode":"3DE20A723EBAFE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296160,"discussion_content":"Java定义int不要应该是直接值比较吗？估计要看下编译后的代码吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596462688,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1112651,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fa/4b/c385f755.jpg","nickname":"向前走","note":"","ucode":"8956E92DCEFB60","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":202375,"discussion_content":"试了下,两个int类型的, ==是返回true,一个Integer 一个int，也是一样的,使用的是500,只有两个都是Integer时才会false","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583907864,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1464183,"avatar":"https://static001.geekbang.org/account/avatar/00/16/57/77/ad6b2b8b.jpg","nickname":"桃花河逆流而上","note":"","ucode":"A88A60296743CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1112651,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fa/4b/c385f755.jpg","nickname":"向前走","note":"","ucode":"8956E92DCEFB60","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":238368,"discussion_content":"和 int 相比较，Integer 会拆箱","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1587220046,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":202375,"ip_address":""},"score":238368,"extra":""}]},{"author":{"id":1018370,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8a/02/828938c9.jpg","nickname":"Frank","note":"","ucode":"7A488CC6FE15E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":200712,"discussion_content":"嗯。定义为int后，在执行“==”时会自动装箱的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583715195,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156867,"user_name":"何妨","can_delete":false,"product_type":"c1","uid":1385377,"ip_address":"","ucode":"EC3983BFF7992A","user_header":"https://static001.geekbang.org/account/avatar/00/15/23/a1/b08f3ee7.jpg","comment_is_top":false,"comment_ctime":1574990036,"is_pvip":false,"discussion_count":7,"race_medal":0,"score":"40229695700","product_id":100039001,"comment_content":"看了老师的这篇文章让我对 entity，bo，vo有了一个更清晰的认识。我是这样理解的，entity是对数据库的映射，vo 是前端展示的映射，bo 在 DDD 充血模型中我看到了他的用处，看起来他是将 entity 的一些逻辑业务分离了出来做了一个解耦（在我看来貌似没有 bo 或者说 Domain 类似 加余额减余额的逻辑也可以写在 entity 中，只是这样做对于专注于数据库的 entity 来说逻辑更复杂了，维护起来会很困难 ），同时也解决了 entity 暴露过多 getter setter 方法的问题。不知道我这样理解有没有问题，欢迎老师指正。<br><br>同时我有如下几个疑问:<br>1.具体上 domain 和 entity 属性和结构上有哪些不同呢？（在我看来好像能写成一样的）<br>2.在贫血模型下 bo 的作用好像没有那么明显了，多写一层 bo 能给我们带来什么好处呢？<br>3. entity bo vo 类属性上好像有很多重合，貌似在实际编写的过程会出现很多重复代码，并且要为每一层编写转换代码，代码量好像又增加了，对于这种情况应该怎么优化和权衡呢？<br>","like_count":9,"discussions":[{"author":{"id":1698258,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIx7FdRzUuQf4Fopr7DOXEHZyCFfH4GQViaqo7bymf1qaANcOvuEhHyTNwOOUFW7psxEeSQ5k9uXWw/132","nickname":"阿顺","note":"","ucode":"36F2AD6F980B11","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65431,"discussion_content":"1.这点文中已经有解释了，domain是数据与业务逻辑结合，遵循单一职责，entity本身只作为数据结构存在\n2.个人理解：entity（对数据建模）、bo（对业务建模）、vo（对前端/功能建模）\n3.重合度可能有以下原因：业务系统功能简单或者是建模没建好；如果只有entity，会导致service层和controller层十分臃肿\n\n个人理解：\n要理解DDD，就要跳出来去理解一个业务系统，站在如果是你应该如何去设计这个系统的角度去思考这个问题，而不是针对某一个具体的功能去比较贫血和充血模型的利弊。如果针对一个具体的功能来考虑问题，甚至可以得出直接用一个hashmap就能解决问题了的结论，连entity、bo、vo都可不需要。但如果从整体可维护性、可扩展性考虑，bo应该是作为最稳定的一层业务模型，vo会随着功能性需求变化而变化，应该说成dto会更好理解。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1575002645,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1385377,"avatar":"https://static001.geekbang.org/account/avatar/00/15/23/a1/b08f3ee7.jpg","nickname":"何妨","note":"","ucode":"EC3983BFF7992A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1698258,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIx7FdRzUuQf4Fopr7DOXEHZyCFfH4GQViaqo7bymf1qaANcOvuEhHyTNwOOUFW7psxEeSQ5k9uXWw/132","nickname":"阿顺","note":"","ucode":"36F2AD6F980B11","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65448,"discussion_content":"感谢回答,这个我平常开发确实是没有用到 bo,vo的，所以对其中的细节不是很理解，感觉这边给出的解释没有回答到我疑问的点上，大的概念我都理解，但我还是想了解到具体细节上吧，毕竟这些落实到代码上才有意义。仍然感谢回答【抱拳】","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575003486,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":65431,"ip_address":""},"score":65448,"extra":""}]},{"author":{"id":1922242,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/54/c2/17512f7a.jpg","nickname":"banxiaobu","note":"","ucode":"0FC00E5E90ACB8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":213287,"discussion_content":"在我个人开发经历感觉来看，在传统MVC开发模式下，这些各种POJO的诞生，也就是为了承担不同场景的数据传输所需所用。正如第三点你提到的，属性上确实有很多重合，但是针对不同场景需求，比如在表示层（VO/DTO）为了将数据传输到前端页面，可能很多，比如在Java中，一些基本类型都会附加相关的字符串类型的属性，比如日期，与之会对应一个字符串类型的日期。这样更便于传输到前端页面（虽然现在有些前端框架也封装了对一些基础类型的自动解析的操作）。Entity层，主要跟数据库相关，通常也就是一一对应就是了。BO嘛，按具体的业务场景，自然也会衍生出些许差异。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1585062694,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1084993,"avatar":"https://static001.geekbang.org/account/avatar/00/10/8e/41/709e9677.jpg","nickname":"袁帅","note":"","ucode":"A71A89B9F1BD69","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65396,"discussion_content":"第三点我也很困惑","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575000037,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1013317,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/76/45/abb7bfe3.jpg","nickname":"张金魁","note":"","ucode":"40343172910342","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586719,"discussion_content":"①domain 和 entity 可以合二为一，这样少了一层转换（层与层之间的dto 转化， 可以使用mapstruct）；\n②Domain 这里不允许对属性进行set（类上标注lombok注解@Setter(AccessLevel.PRIVATE)），不过继承的 BaseModel 允许set，方便赋值登录人、创建时间，修改时间等。\n③想要直接使用 mybatis-plus，需要排除非表映射字段，DDD模式下，不建议使用mybatis-plus；\n\n\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662458244,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1305227,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ea/8b/5fe54e19.jpg","nickname":"包包爸爸","note":"","ucode":"EBBB1663B41650","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":258451,"discussion_content":"实体其实不能这么简单的认为等同于数据库持久化的bean，在DDD里，实体不仅是持久化，更重要的是生命周期，是一个客观存在的唯一的东西","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588688017,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1053921,"avatar":"https://static001.geekbang.org/account/avatar/00/10/14/e1/ee5705a2.jpg","nickname":"Zend","note":"","ucode":"80EBB0B6772E27","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66554,"discussion_content":"我理解是在写代码的初期，就应该规划好bo类，把一些共性的业务提取出来，如果说没共性业务方法的话，那bo 也没有实际价值。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575084278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163008,"user_name":"斜杠青年","can_delete":false,"product_type":"c1","uid":1177739,"ip_address":"","ucode":"D7AF02B8588549","user_header":"https://static001.geekbang.org/account/avatar/00/11/f8/8b/74d2ab6b.jpg","comment_is_top":false,"comment_ctime":1576639488,"is_pvip":true,"replies":[{"id":"62270","content":"如果你用orm框架持久化 必须有get set 那就要妥协 ","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1576797724,"ip_address":"","comment_id":163008,"utype":1}],"discussion_count":5,"race_medal":1,"score":"35936377856","product_id":100039001,"comment_content":"有一个人问题不太懂 数据持久的话 没有set get方法 如何进行持久化？","like_count":8,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478212,"discussion_content":"如果你用orm框架持久化 必须有get set 那就要妥协 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576797724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1651664,"avatar":"https://static001.geekbang.org/account/avatar/00/19/33/d0/962ebe2e.jpg","nickname":"Buring","note":"","ucode":"0AAEA64C63C2F6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":191350,"discussion_content":"好吧，纠结半天原来还是要妥协。。。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1582990833,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1042354,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e7/b2/334bc992.jpg","nickname":"AlfredLover","note":"","ucode":"A3A998F362CC37","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1651664,"avatar":"https://static001.geekbang.org/account/avatar/00/19/33/d0/962ebe2e.jpg","nickname":"Buring","note":"","ucode":"0AAEA64C63C2F6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":219842,"discussion_content":"哈哈，原来大家都纠结了半天...","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585816572,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":191350,"ip_address":""},"score":219842,"extra":""}]},{"author":{"id":1439301,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/rMgAbbKiasa1qR35ht0GEfwsHXbusPZAe9JFgicDgVRy8vQET2hypuDgwtHoPVU23RUoMdK7qA7gibMlTExpYibtbw/132","nickname":"YsnowLove","note":"","ucode":"70433D98592481","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":275477,"discussion_content":"Spring Data jpa 不需要set get方法也是可以把数据存储到数据库的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590719511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1528931,"avatar":"https://static001.geekbang.org/account/avatar/00/17/54/63/3a3f7d4c.jpg","nickname":"Giraffe","note":"","ucode":"2F272FFD6CD0CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":184147,"discussion_content":"原来是这样，我还在纠结怎么convert","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582548234,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158438,"user_name":"lmdcx","can_delete":false,"product_type":"c1","uid":1334409,"ip_address":"","ucode":"F2CDD0091ADFD7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIjRETqRjvLESLDZkNTjIiaSibtNYBaS1o8WMUicOFn3ycF3Mgh6LRJibqSBjVBjiaO2ibW0gHkafATb21A/132","comment_is_top":false,"comment_ctime":1575370536,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27345174312","product_id":100039001,"comment_content":"总结（直接忽略案例）：<br>* 充血模型把业务逻辑放到 Domain 中处理，满足了 OOP 的规则，数据和行为封装为一体。  <br>  类似于 CPU 主管计算，而对于数据转换之类的工作不应该交由 Domain 去做。  <br>* 把外围事务交给 Service 管理，比如接口传入的数据封装，底层数据库数据的读写，就好像 CPU 从来不关心 IO 的差异；比如把日志和消息幂等性等工作交给 Service 处理，CPU 也从来不负责监控和容错。  <br>自己的感受：  <br>这种业务相关性和业务无关性的分离，其实就是遵循了高内聚、低耦合，保证了业务和框架的独立性和重用性。  <br><br>问题：<br>* 无论 vo 还是 Entity 在我看来都是 dto ，这么多dto会不会导致类爆炸？  <br>  大概4、5年前，我用过两天 aws 的 sdk ，我记得所有的接口都会有对应的 dto ，所以这种类爆炸是必要的类爆炸，还是也是要自己权衡？  <br>  类似关联查询返回的结果也算是 Entity 吧，Entity 未必和表一一对应吧（额，感觉不应该在这章提问）？  <br><br>其他：<br>* 有人想要完整代码，我觉得没有太大必要，因为代码是示意代码，并非正式项目代码。  <br>  而且课程目标不是要做出一个完整小项目，实战往往和理论不是一一匹配的，而且需要大量额外工作。  <br>* 如果老师真的打算代码上 github ，那我的建议是用接口和抽象类来完成即可，即便如此我把老师的例子完成也写了14个文件。  <br>  老师还是应该把精力放到刀刃上，如果真的非要完成个小项目，我觉得也可以延迟到栏目结束，这种限时又定量的事，作为非全职讲师一定很难吧。  <br>* 关于问题的回复，我建议对于需要回复的问题，老师可以告知在后续章节会讲到，或者到答疑中统一提问，免得有人觉得回复不及时，而老师的一一回复既耗精力也很难普惠大家。  <br>  当然我也希望评论区功加上评论、提问、点赞几个选项，老师以后可以只看提问类型的留言，或者只看没有人回复的提问。  ","like_count":6},{"had_liked":false,"id":293824,"user_name":"隔壁老李","can_delete":false,"product_type":"c1","uid":2291115,"ip_address":"","ucode":"8E662BD946698A","user_header":"https://static001.geekbang.org/account/avatar/00/22/f5/ab/70d548e4.jpg","comment_is_top":false,"comment_ctime":1621566178,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"23096402658","product_id":100039001,"comment_content":"“这里我再稍微解释一下，之所以让 VirtualWalletService 类与 Repository 打交道，而不是让领域模型 VirtualWallet 与 Repository 打交道，那是因为我们想保持领域模型的独立性，不与任何其他层的代码（Repository 层的代码）或开发框架（比如 Spring、MyBatis）耦合在一起，将流程性的代码逻辑（比如从 DB 中取数据、映射数据）与领域模型的业务逻辑解耦，让领域模型更加可复用”<br>关于这句话，个人有不同的见解；现实中基本上所有的业务逻辑都得操作数据库，我认为实体中的动作与数据库操作是强关联的，实体类应该要操作数据对象。与开发框架进行解耦，可以交给Dao层。实体类访问Dao层，Dao层做数据适配操作持久化数据对象，当开发框架发生变化时，修改Dao层就好了。 按作者给出的架构，当开发框架发生变化后同样还得修改domain Service 。如果后期增加了冻结，透支等功能，它的本质还是去修改数据库，而实体的操作特别简单，修改下自己的属性然后传给外部domain service，domain service进行数据操作，这样的实体行为个人认为是一种伪充血模型。还不如在实体行为中去操作dao层呢，操作dao层就是实体行为之一，这样才算正真的充血。<br>呃呃，字数不够用了","like_count":5,"discussions":[{"author":{"id":1325354,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eodIl6VYOM7kKumgY1fHeq96vJXjWria2sU00b6W2licIftLDIHG3bFJMwUtGpsBcEem5EA44ULXePA/132","nickname":"Aeson","note":"","ucode":"08EF4FC160A472","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556456,"discussion_content":"同感","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647390911,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":274787,"user_name":"吴钩","can_delete":false,"product_type":"c1","uid":2062402,"ip_address":"","ucode":"0EB50E8144BCDE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKOnpl8fRB9r2vED2s8j7Arwbn2K6M6HUBWNjgoqV4uqe94fTGK4WGpOJLeRxXcBXk3dp23eQR0AQ/132","comment_is_top":false,"comment_ctime":1611156111,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"23085992591","product_id":100039001,"comment_content":"好像没看到有人有相同的疑问。贫血模型和充血模型的debit和credit操作，都是没有考虑并发的，需要附加手段保证并发安全。","like_count":5,"discussions":[{"author":{"id":1738238,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/85/fe/9cba131f.jpg","nickname":"crown clown","note":"","ucode":"04A981C89044EA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572363,"discussion_content":"我第一感觉就是不考虑并发，demo也应该是个真实案例吧？记得老师前面说过要用真实案例来着。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652748803,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1033066,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c3/6a/3272e095.jpg","nickname":"李春恒","note":"","ucode":"F2DCA19EC66DC1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541243,"discussion_content":"简单 demo","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640311341,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":270959,"user_name":"山海","can_delete":false,"product_type":"c1","uid":1702117,"ip_address":"","ucode":"77FA9967E58FA3","user_header":"https://static001.geekbang.org/account/avatar/00/19/f8/e5/119d5c15.jpg","comment_is_top":false,"comment_ctime":1609329435,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"23084165915","product_id":100039001,"comment_content":"其实一个在复杂或者简单的系统都可以类比成计算机<br>1. Service  CPU<br>2. Repository 磁盘<br>3. VIEW 显示器<br>4. RPC&#47;三方数据 网卡<br>5. REDIS调用， 内存<br>等等， 这些不同模块的实现可以分别计算机的某一模块， 咱们的代码则是操作系统","like_count":5},{"had_liked":false,"id":157358,"user_name":"旺旺","can_delete":false,"product_type":"c1","uid":1159196,"ip_address":"","ucode":"FE2CF90F446BFB","user_header":"https://static001.geekbang.org/account/avatar/00/11/b0/1c/2e30eeb8.jpg","comment_is_top":false,"comment_ctime":1575120263,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23049956743","product_id":100039001,"comment_content":"对于支付类型的交易，钱包的交易流水记录中的虚拟钱包交易流水ID会有2个吧，一个加钱流水，一个减钱流水。","like_count":5},{"had_liked":false,"id":181038,"user_name":"somenzz","can_delete":false,"product_type":"c1","uid":1187197,"ip_address":"","ucode":"EA59A170DF8910","user_header":"https://static001.geekbang.org/account/avatar/00/12/1d/7d/368df396.jpg","comment_is_top":false,"comment_ctime":1582464642,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18762333826","product_id":100039001,"comment_content":"类比下Django mvc 架构的理解，充血模型就是把原来放在 views 里的业务逻辑，抽像出共性放在 models  中，这样可以少写很多代码，可读性也更高，看下 Models 中的行为，可以了解核心的业务逻辑。不知道说的是否准确，欢迎讨论！","like_count":4},{"had_liked":false,"id":171250,"user_name":"Maurice","can_delete":false,"product_type":"c1","uid":1729796,"ip_address":"","ucode":"A35112AA415C67","user_header":"","comment_is_top":false,"comment_ctime":1578886369,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18758755553","product_id":100039001,"comment_content":"学习了这一章，让我想到《重构：改善既有代码的设计》中的MoveMethod，建议大家可以看这本书，尤其这本书的第一章的demo，里面说的MoveMethod好像说的就是本章所说的知识点。","like_count":4},{"had_liked":false,"id":170928,"user_name":"Citizen Z","can_delete":false,"product_type":"c1","uid":1125104,"ip_address":"","ucode":"9CA547640A8629","user_header":"https://static001.geekbang.org/account/avatar/00/11/2a/f0/41590e10.jpg","comment_is_top":false,"comment_ctime":1578765767,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18758634951","product_id":100039001,"comment_content":"私以为在实践中 Wallet 调用 Repo 会让代码更简洁，老师担忧的与具体框架耦合的问题，可以让模型依赖仓储的抽象，从设计上并没有对模型产生污染，只是需要在利用切面或其他手段对持久层接口进行实现，这样看来虽然是必须依赖某种框架技术才能将整个模型跑起来，但实践中，只要是大规模系统，IoC&#47;AOP 这种东西都是很基础的吧，总不能一个系统全都用 rt.jar 里的东西来实现，所有代码全都是一层层规规矩矩的对象创建和方法调用吧。<br>service（负责编排 domain） -&gt; domain（负责业务逻辑） -&gt; repo（负责持久化），这样的三层单向调用不是更简洁么？<br>我对 DDD 理解不深，不知道这样的看法对不对。","like_count":4},{"had_liked":false,"id":157899,"user_name":"努力的熊","can_delete":false,"product_type":"c1","uid":1504423,"ip_address":"","ucode":"D669AF855D2EF1","user_header":"https://static001.geekbang.org/account/avatar/00/16/f4/a7/1cf57505.jpg","comment_is_top":false,"comment_ctime":1575279427,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18755148611","product_id":100039001,"comment_content":"你们都这么厉害么，我看了一遍没看懂。看了你们的评论，太重要了，吓得我赶紧在研究研究。","like_count":4},{"had_liked":false,"id":156901,"user_name":"weineel","can_delete":false,"product_type":"c1","uid":1049741,"ip_address":"","ucode":"6DC6EF4F256A53","user_header":"https://static001.geekbang.org/account/avatar/00/10/04/8d/005c2ff3.jpg","comment_is_top":false,"comment_ctime":1574993722,"is_pvip":true,"discussion_count":6,"race_medal":2,"score":"18754862906","product_id":100039001,"comment_content":"感谢老师的分享，收获很多，也产生了两个问题：<br><br>问题1：Entity 转换成 Domain 的代码应该在哪一层实现？感觉在 Service 层不大合适，因为可能多个 Service 会使用到。<br>问题2：如果涉及到表单的保存，入参是一个保存全量数据的对象(比如，创建一个新用户的所有用户数据，但部分属性还是要计算得到的，比如年龄等)。这个对象是属于 VO 吗？这时的 Domain 怎么设计呢？数据模型间的转换怎么处理呢？VO-&gt;BO-&gt;Entity 感觉就是在写各种赋值语句啊, 所以我以前在传统开发模式是合并 VO、BO、Entity的，一个大而全的东西也是很尴尬。<br><br>期待老师解答。","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509742,"discussion_content":"嗯嗯 ������","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606700958,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156812,"user_name":"Angus","can_delete":false,"product_type":"c1","uid":1540520,"ip_address":"","ucode":"C336521BD8BA64","user_header":"https://static001.geekbang.org/account/avatar/00/17/81/a8/4b6c61ce.jpg","comment_is_top":false,"comment_ctime":1574965217,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18754834401","product_id":100039001,"comment_content":"我理解的ddd分为四层，用户接口层，应用层，领域层，基础设施层。领域服务还是跟基础设施层打交道，领域服务主要是提供这个领域的业务行为，通过应用层聚合领域服务，而应用层正是和领域专家建立统一语言的一层，","like_count":4},{"had_liked":false,"id":294424,"user_name":"傲慢与偏见","can_delete":false,"product_type":"c1","uid":1028778,"ip_address":"","ucode":"1E1E93BE6142E0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b2/aa/8a74401f.jpg","comment_is_top":false,"comment_ctime":1621936782,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14506838670","product_id":100039001,"comment_content":"总觉得例子中充血模型的操作如果不每次查询数据库，会导致数据不一致<br>","like_count":3},{"had_liked":false,"id":181667,"user_name":"悠游","can_delete":false,"product_type":"c1","uid":1222834,"ip_address":"","ucode":"4FDDDDF29AE3F0","user_header":"https://static001.geekbang.org/account/avatar/00/12/a8/b2/998448ca.jpg","comment_is_top":false,"comment_ctime":1582610115,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14467512003","product_id":100039001,"comment_content":"默默的看了一眼书桌旁崭新的《领域驱动设计》这本书","like_count":3,"discussions":[{"author":{"id":1021539,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/96/63/7eb32c9b.jpg","nickname":"捞鱼的搬砖奇","note":"","ucode":"2FD194C4DA26E5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294081,"discussion_content":"+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595776294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167288,"user_name":"八歌","can_delete":false,"product_type":"c1","uid":1025218,"ip_address":"","ucode":"B54B99716358DE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a4/c2/e8ab13d7.jpg","comment_is_top":false,"comment_ctime":1577756832,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14462658720","product_id":100039001,"comment_content":"我觉得DDD如果在团队中没有形成共识可能并不会太实用。<br>现在团队业务复杂的情况下都习惯画个流程图，面像过程进行编程，一步一步来。<br>而且面对复杂度高，清晰度不够，现在习惯用微服务进行拆解，重要的是，即使一个很复杂的项目，已经MVC了，可能涉及钱包这类多对象体互动完成的功能点整体项目比重也不高，MVC更容易理解。","like_count":3},{"had_liked":false,"id":158917,"user_name":"licstar","can_delete":false,"product_type":"c1","uid":1503326,"ip_address":"","ucode":"CAA2D7E12D587D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoH6Y4Wc65CtVDkIbIEEHLnJKeAuE1SaV8kech2ucaaWuCNT7wUNDmyDeKNVProicRovdc0w9Oc7ZA/132","comment_is_top":false,"comment_ctime":1575486163,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"14460388051","product_id":100039001,"comment_content":"有个疑问，如果VirtualWallet里的冻结之类的功能全都实现了，这样操作流水里又会多冻结、解冻的记录的类型。这样的话，似乎service的代码会和VirtualWallet一样复杂，因为VirtualWallet中的每个方法，在service里都要把数据同步到数据库中。这样合理吗，会让我觉得service层变成了另一个repository层，有点重复","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502735,"discussion_content":"有引用，就是在被使用啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596193726,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157798,"user_name":"Wiggins","can_delete":false,"product_type":"c1","uid":1078222,"ip_address":"","ucode":"021EE98CF0E4EE","user_header":"https://static001.geekbang.org/account/avatar/00/10/73/ce/23bd3997.jpg","comment_is_top":false,"comment_ctime":1575260541,"is_pvip":false,"replies":[{"id":"60717","content":"可以放到构造函数中","user_name":"作者回复","comment_id":157798,"uid":"1190123","ip_address":"","utype":1,"ctime":1575429902,"user_name_real":"王争"}],"discussion_count":1,"race_medal":1,"score":"14460162429","product_id":100039001,"comment_content":"老师你好，看完自己实现的时候有个疑问，每次实例化VirtualWallet时候他的balance都会被初始化为0，我又不想把balance set的方法暴露出来，但是如果Domain不跟Repository层交互的话，就无法获取到当前其中的余额。请问下老师是否只能在构造函数中传入这一种办法？","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476533,"discussion_content":"可以放到构造函数中","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575429902,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156910,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1574994766,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"14459896654","product_id":100039001,"comment_content":"DDD 中VirtualWalletService convert哪里定义了。 ","like_count":3,"discussions":[{"author":{"id":1338088,"avatar":"https://static001.geekbang.org/account/avatar/00/14/6a/e8/4bb87c34.jpg","nickname":"月马穿关","note":"","ucode":"2CE20CA1EB827D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":168355,"discussion_content":"伪代码 老铁","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1581574934,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1579768,"avatar":"https://static001.geekbang.org/account/avatar/00/18/1a/f8/bd3bc7c3.jpg","nickname":"💜💜奔跑的犀牛🦏🦏","note":"","ucode":"D88334E4875397","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":158372,"discussion_content":"没有set 应该是用到反射赋值","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580569947,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1523207,"avatar":"https://static001.geekbang.org/account/avatar/00/17/3e/07/c27b53b8.jpg","nickname":"Geek_ecf7bb","note":"","ucode":"5BF4DD62425BE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":76863,"discussion_content":"第三方的AutoMapper可以实现这种实体自动映射","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575862425,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1620113,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b8/91/8a5c3ec6.jpg","nickname":"王一之","note":"","ucode":"7E13332BAEC2F8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":72682,"discussion_content":"应该是伪代码，把领域实体转化为DTO返回","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575515229,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1740008,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKTkmXU3e5UIoHYvtV2PxtjagkLrAKibg0VNw2NgLQD9qCzoEWQqUJjYTTSwicS5EaPFLa5S4lbeJ7g/132","nickname":"hhp","note":"","ucode":"9DB6A430836BDA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":72497,"discussion_content":"我也想知道，求解答","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575478384,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156815,"user_name":"老姜","can_delete":false,"product_type":"c1","uid":1019835,"ip_address":"","ucode":"FB7962F08A9F3B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8f/bb/7068f251.jpg","comment_is_top":false,"comment_ctime":1574976857,"is_pvip":false,"discussion_count":0,"race_medal":3,"score":"14459878745","product_id":100039001,"comment_content":"更新流水出现异常会导钱包操作成功了，但是就是状态是错误的？是不是应该把生成流水放到一个事务里面，更新钱包和更新流水状态放到另外一个事务里面会避免这个问题？","like_count":3},{"had_liked":false,"id":255716,"user_name":"***","can_delete":false,"product_type":"c1","uid":1023291,"ip_address":"","ucode":"11456AA243ECB8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9d/3b/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1603417716,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10193352308","product_id":100039001,"comment_content":"老师，我有个疑问需要请教你。普通的三层架构把类按不同的职责放到对应的包中，比如service、controller、repository包。但是如果我在项目中使用设计模式，比如工厂模式，与之对应创建的一些AbstractFactory类、Factory类应该放置哪里，应该怎么更好的组织项目结构？","like_count":3},{"had_liked":false,"id":218748,"user_name":"buggetout","can_delete":false,"product_type":"c1","uid":1880582,"ip_address":"","ucode":"63A948EF415FDD","user_header":"https://static001.geekbang.org/account/avatar/00/1c/b2/06/2086d76d.jpg","comment_is_top":false,"comment_ctime":1589864859,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10179799451","product_id":100039001,"comment_content":"DDD原则，数据和操作结合，不依赖任何外部系统，使这个domain放到任何地方都适用。关键还是oop","like_count":2},{"had_liked":false,"id":213734,"user_name":"JuCY","can_delete":false,"product_type":"c1","uid":1038800,"ip_address":"","ucode":"43689B65128039","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d9/d0/baffc852.jpg","comment_is_top":false,"comment_ctime":1588526532,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10178461124","product_id":100039001,"comment_content":"充血模式的充值和提现两个函数在取余额和更新余额不在事务里，没有不一致问题吗？","like_count":2},{"had_liked":false,"id":169129,"user_name":"adasumm","can_delete":false,"product_type":"c1","uid":1434592,"ip_address":"","ucode":"5C070EF481AAA0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJURUiaWUoA41MOOAibCQdJdmqjeHqh7jp4tXibVfqUPBWbYBQv2BYIicic1bVRzPPbMWz5OseyRcxr49A/132","comment_is_top":false,"comment_ctime":1578278144,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10168212736","product_id":100039001,"comment_content":"感觉是懂非懂，目前只知道充血模式是将service分开成“纯业务”+“与Repository 层交互，或拆分不开”,但还是不知道业务逻辑怎么拆分。写的案例看不懂","like_count":2},{"had_liked":false,"id":160368,"user_name":"Mr.Strive.Z.H.L","can_delete":false,"product_type":"c1","uid":1030198,"ip_address":"","ucode":"6D97E159E2EECD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b8/36/542c96bf.jpg","comment_is_top":false,"comment_ctime":1575942065,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10165876657","product_id":100039001,"comment_content":"个人认为充血模型的好处有如下：<br>1. 数据与操作结合，而不是隔离，符合oop原则，而非数据驱动。<br>2. 关注点分离，或者说单一原则。充血模型包含的逻辑就是与该模型紧密相关的。<br>3. 领域模型是系统最为稳定的一层，当系统复杂后，也是作为微服务拆分的依据。因此模型的服用度很高。<br><br>但是充血模型的难点是：业务复杂后，什么样的逻辑最适合放到模型中？一旦不符合规范，那么充血模型就会变成胀血模型，难以维护。<br><br>还有一种设计方式：<br>充血模型对外提供的是领域服务（充血的领域模型如果是聚合根的话），而文中的service实际上是应用服务，串联多个领域服务以及其他组件功能，实现完整业务逻辑。<br><br>实际上我们可以抽出biz-service业务服务，和core-service领域服务。将充血模型的大部分逻辑放到core-service。这样也很清晰，不至于模型内部的逻辑过于复杂。老师怎么看呢？","like_count":2},{"had_liked":false,"id":158124,"user_name":"晨间新闻","can_delete":false,"product_type":"c1","uid":1161406,"ip_address":"","ucode":"6F7A55AAD52F16","user_header":"https://static001.geekbang.org/account/avatar/00/11/b8/be/2d77d643.jpg","comment_is_top":false,"comment_ctime":1575335920,"is_pvip":false,"replies":[{"id":"60710","content":"简单的业务确实用不上ddd","user_name":"作者回复","comment_id":158124,"uid":"1190123","ip_address":"","utype":1,"ctime":1575428642,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"10165270512","product_id":100039001,"comment_content":"看了下项目代码，service里的方法多数都是获取对象列表，对象入库，删除，很多方法都不是具体某个对象的某个动作，不像余额加减一样，是一个动作，对应某个属性的变化。感觉是不是用不上DDD啊。","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476637,"discussion_content":"简单的业务确实用不上ddd","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575428642,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345768,"user_name":"Soil","can_delete":false,"product_type":"c1","uid":2870321,"ip_address":"","ucode":"3B353BC858B5AE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLE9hv64CEabxt76tQQcWDicx0sucpAApFvYoM8eXBViaJgz06EjcfJjiamSFWY9aAuxjILaPoiaa0lNw/132","comment_is_top":false,"comment_ctime":1652582911,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"5947550207","product_id":100039001,"comment_content":"将核心功能业务与非功能性业务抽离出来，将两部分解耦，减少变化带来的影响。service可以提供稳定的对外接口。","like_count":1},{"had_liked":false,"id":320351,"user_name":"陆一鸣猜不动","can_delete":false,"product_type":"c1","uid":2831163,"ip_address":"","ucode":"68E89A037F9A0C","user_header":"https://static001.geekbang.org/account/avatar/00/2b/33/3b/0b25b622.jpg","comment_is_top":false,"comment_ctime":1636273038,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5931240334","product_id":100039001,"comment_content":"看完了老师的讲解，感觉充血模型的第一步就是把大而广的service再次细分，相当于在walletService中再细分出一个walletTransactionService，从而达到代码逻辑上的抽象。而之所以用具体相关的model&#47;object，而不是新的service，则是为了让复杂的逻辑跟使用的框架以及数据来源的方式解耦，方便日后的改进。<br>这样看来DDD之所以叫领域驱动，就是着手于每个类自己的功能模块的定义，而不是流程化的逻辑。明白之后才发现定义如此言简意赅，一目了然","like_count":1},{"had_liked":false,"id":307101,"user_name":"The-Jogger","can_delete":false,"product_type":"c1","uid":1396612,"ip_address":"","ucode":"4F19CA3DFA88E3","user_header":"https://static001.geekbang.org/account/avatar/00/15/4f/84/8b3b6a55.jpg","comment_is_top":false,"comment_ctime":1628861426,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5923828722","product_id":100039001,"comment_content":"传统的设计controller、service 、repository、domain ，domain只是作为数据载体，不参与业务行为，导致业务实体行为不清晰。<br>DDD设计强调service不参与过多的业务实体行为，domain作业务逻辑处理<br>职责：<br>1、controller负责接口的暴露<br>2、repository负责实体的储存<br>3、service ：1）框架代码 2）非功能代码 3）与repository层打交道<br>4、domain：存粹的业务代码逻辑、不耦合repository","like_count":1},{"had_liked":false,"id":253198,"user_name":"Zachariah","can_delete":false,"product_type":"c1","uid":2229665,"ip_address":"","ucode":"B0AED2A3B91369","user_header":"https://static001.geekbang.org/account/avatar/00/22/05/a1/2c631e12.jpg","comment_is_top":false,"comment_ctime":1602647208,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5897614504","product_id":100039001,"comment_content":"真真的大佬，膜拜","like_count":1},{"had_liked":false,"id":237360,"user_name":"Cutler","can_delete":false,"product_type":"c1","uid":1228136,"ip_address":"","ucode":"2EDECFE039845B","user_header":"https://static001.geekbang.org/account/avatar/00/12/bd/68/3fd6428d.jpg","comment_is_top":false,"comment_ctime":1595808779,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5890776075","product_id":100039001,"comment_content":"DDD的核心是领域模型的设计，这就倒逼开发人员要深入业务才能设计出较好的领域模型，设计领域模型包含的工作有:识别领域边界，确定限界上下文，设计领域事件等。","like_count":1},{"had_liked":false,"id":215387,"user_name":"张三丰","can_delete":false,"product_type":"c1","uid":1155275,"ip_address":"","ucode":"3A6215A40B3B21","user_header":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","comment_is_top":false,"comment_ctime":1588985730,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5883953026","product_id":100039001,"comment_content":"从entity到bo再到vo，这之间存在数据的拷贝，有没有什么技巧可以折中这方面的性能消耗？或者说一个系统真的有必要设计那么多”O”吗？","like_count":1},{"had_liked":false,"id":210437,"user_name":"高鹏0409","can_delete":false,"product_type":"c1","uid":1928337,"ip_address":"","ucode":"1833CA764B6A46","user_header":"https://static001.geekbang.org/account/avatar/00/1d/6c/91/8268a753.jpg","comment_is_top":false,"comment_ctime":1587744510,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5882711806","product_id":100039001,"comment_content":"充血模型是对业务操作对精准抽象","like_count":1},{"had_liked":false,"id":175277,"user_name":"逐风随想","can_delete":false,"product_type":"c1","uid":1286435,"ip_address":"","ucode":"A91C191EE82FCA","user_header":"https://static001.geekbang.org/account/avatar/00/13/a1/23/2b527dc4.jpg","comment_is_top":false,"comment_ctime":1580640529,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5875607825","product_id":100039001,"comment_content":"作者回复：关于PHP等动态语言适配的问题说明，<br>设计模式落实到具体的编程语言代码实现的时候，必然有个适配的过程，没法保证每种语言的实现思路都一模一样。Java是一种静态语言，那一些设计模式实现从Java搬到静态语言，比如C# C++是相对比较容易的，但是搬到动态语言，比如PHP，可能就要做些调整。同理，面向过程、面向对象、函数式编程中，设计模式也都有不同的实现方式。<br>编程语言有自成一体的设计，会阉割掉很多它觉得不重要的语法，加强它看重的语法，这就导致有些设计思想、原则、模式，并不能很容易地在这种语言下实现<br>PHP更多的偏向网站开发😂 而且像facebook 用php可能更偏向于网站后端中的前端部分的开发，从应用场景上来说 可能面向过程更合适些，这也是为什么 《设计模式》一书的副标题提到面向对象的原因。","like_count":1},{"had_liked":false,"id":158184,"user_name":"饭粒","can_delete":false,"product_type":"c1","uid":1153455,"ip_address":"","ucode":"4C3220B0D43997","user_header":"https://static001.geekbang.org/account/avatar/00/11/99/af/d29273e2.jpg","comment_is_top":false,"comment_ctime":1575343895,"is_pvip":false,"replies":[{"id":"60709","content":"1、transaction能处理分布式事务<br>2、再看遍文章吧 都有讲到","user_name":"作者回复","comment_id":158184,"uid":"1190123","ip_address":"","utype":1,"ctime":1575428262,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"5870311191","product_id":100039001,"comment_content":"看完这篇对 DDD 也有了初步的认识了，区别了贫血模式的开发，DDD 应用 OOP 的设计实现提高了封装性，在业务对象类 VirtualWallet 中封装数据和基本的数据处理过程，service 使用业务对象类暴露的方法过程以完成完整的功能。实现上业务对象类具备的封装，单一职责等特性，这样在易用，易维护，易扩展，易读等方面较之贫血模型都会有提高。<br><br>另外有两个问题请教下老师：<br>1.贫血模型的 service 中有 VirtualWalletRepository，VirtualWalletTransactionRepository 两个 repository，看字面应该是区分是否带事务，不太明白这样写的好处或用意？因为我现在一般是直接在 service 上直接加事务。<br>2.钱包交易流水和虚拟钱包的交易流水的功能区分还不是特别清楚，示例代码也没有体现。事物一致性的日子记录不能直接用钱包交易流水线吗？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476657,"discussion_content":"1、transaction能处理分布式事务\n2、再看遍文章吧 都有讲到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575428262,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157774,"user_name":"Eden Ma","can_delete":false,"product_type":"c1","uid":1457408,"ip_address":"","ucode":"755312F0D154F9","user_header":"https://static001.geekbang.org/account/avatar/00/16/3d/00/7daa7403.jpg","comment_is_top":false,"comment_ctime":1575257746,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5870225042","product_id":100039001,"comment_content":"iOS端是否可以这样理解：MVVM中VM层相当于Domain，就V层中控制器的业务逻辑抽到了VM中，M层负责数据和数据库操作，因为M层数据是对外暴露的依然是贫血。V层中的View相当于文中的Controller对外展示数据，只做展示功能，所以可以继续贫血，VM和V双向绑定。因为没有BO这种，所以更多的是对控制器数据和业务逻辑的抽离到VM。而MVP也MVVM也蛮相似。所以我可以理解MVVM和MVP算是运用到了充血模型吗？","like_count":1,"discussions":[{"author":{"id":1209852,"avatar":"https://static001.geekbang.org/account/avatar/00/12/75/fc/797fe290.jpg","nickname":"FafaSaigai","note":"","ucode":"325EF70B500B4F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":69314,"discussion_content":"我咋感觉有点那个胖model 和瘦model的意思呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575280695,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1457408,"avatar":"https://static001.geekbang.org/account/avatar/00/16/3d/00/7daa7403.jpg","nickname":"Eden Ma","note":"","ucode":"755312F0D154F9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1209852,"avatar":"https://static001.geekbang.org/account/avatar/00/12/75/fc/797fe290.jpg","nickname":"FafaSaigai","note":"","ucode":"325EF70B500B4F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":69371,"discussion_content":"嗯 我也这么想过，感觉胖model也像个充血模型...但是胖model的可维护性似乎不太好，而且数据基本对外暴露，封装性也不太合格的样子。而且胖model业务一多可能会越来越胖，而且viewmodel可以写多个，职责单一，然后我把model理解成那个实体类了，所以最终理解成上面那样了😂不知道有没有大佬提点一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575283774,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":69314,"ip_address":""},"score":69371,"extra":""}]}]},{"had_liked":false,"id":157739,"user_name":"好饿早知道送外卖了","can_delete":false,"product_type":"c1","uid":1132304,"ip_address":"","ucode":"AED22DB5BF8FC7","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/10/2d673601.jpg","comment_is_top":false,"comment_ctime":1575253028,"is_pvip":false,"replies":[{"id":"60721","content":"是的","user_name":"作者回复","comment_id":157739,"uid":"1190123","ip_address":"","utype":1,"ctime":1575432433,"user_name_real":"王争"}],"discussion_count":1,"race_medal":2,"score":"5870220324","product_id":100039001,"comment_content":"对于前端同学而言、DDD是不是类似于MVVM啊？只是没有数据绑定的业务映射","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476513,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575432433,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157602,"user_name":"下雨天","can_delete":false,"product_type":"c1","uid":1008315,"ip_address":"","ucode":"816B3792ECC50A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/62/bb/323a3133.jpg","comment_is_top":false,"comment_ctime":1575210125,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5870177421","product_id":100039001,"comment_content":"充血模型的DDD是为了解决业务层代码的复用性和封装性问题！","like_count":1},{"had_liked":false,"id":157452,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1575167140,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5870134436","product_id":100039001,"comment_content":"老师，最后一张设计图祭出了两条流水线，是分别对应数据库的两张表吗？","like_count":1},{"had_liked":false,"id":157249,"user_name":"相逢是缘","can_delete":false,"product_type":"c1","uid":1060730,"ip_address":"","ucode":"CB299F53A95654","user_header":"https://static001.geekbang.org/account/avatar/00/10/2f/7a/ab6c811c.jpg","comment_is_top":false,"comment_ctime":1575097240,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5870064536","product_id":100039001,"comment_content":"打卡<br>1、在充血模型的设计中Service类主要和Repository交互，获取数据并转化为VirtualWallet，使得领域模型中的VirtualWallet与其他业务模块解耦（领域模型可以不用关心数据如何存储，不用关心上层的业务逻辑以及功能需求），增强复用性；<br>2、Service类负责跨领域模型的聚合功能，整合多个领域模型的能力（此例子中转账可以设置为一个独立的领域模型）；<br>3、Service类负责一些非功能性以及与第三方的交互能力（发邮件、发信息、记录日志、RPC等）；<br><br>另外有个问题咨询一下老师：<br>在VirtualWalletService类中提供了一个public的getVirtualWallet接口，用于获取VirtualWallet的实例，这个接口的作用是什么呢？（我的理解是关于VirtualWallet的全部处理应该是在VirtualWalletService完成，不应该再暴露VirtualWallet给外部了）","like_count":1},{"had_liked":false,"id":157093,"user_name":"曾泽伟","can_delete":false,"product_type":"c1","uid":1106117,"ip_address":"","ucode":"E8C7C256BA4D84","user_header":"https://static001.geekbang.org/account/avatar/00/10/e0/c5/0a727162.jpg","comment_is_top":false,"comment_ctime":1575029635,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869996931","product_id":100039001,"comment_content":"在平时开发的时候，我更喜欢将service分成多层（可以理解为2层），一层是基于数据层的简单封装操作dataService，另一层，是专门用来组合调用dataService方法的，这样既有封装又有能让开发人员更好的理解，不知道我这种方式是否可以？有什么需要改进的地方吗？<br>另外时间长了，项目可能就面目全非了，不知道这个情况，该怎么办？<br>课程建议，能否把代码不一样的地方标亮，毕竟不是IDE比较代码的不同不是很方便","like_count":1},{"had_liked":false,"id":157014,"user_name":"gowerun","can_delete":false,"product_type":"c1","uid":1234469,"ip_address":"","ucode":"9F98BB327EE42B","user_header":"https://static001.geekbang.org/account/avatar/00/12/d6/25/0e85dce0.jpg","comment_is_top":false,"comment_ctime":1575013284,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869980580","product_id":100039001,"comment_content":"王争老师，service里的virtualWalletRepo.getBalance(walletId)的virtualWalletRepo是不是写错了。应该是walletRepo吧","like_count":1},{"had_liked":false,"id":156915,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1574995076,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869962372","product_id":100039001,"comment_content":"看到第3点提现的时候我脑袋灵光一闪 银行操作封装一个类  应用操作封装一个类 我这是进步了吗哈哈哈","like_count":1},{"had_liked":false,"id":356903,"user_name":"Geek_0d2e85","can_delete":false,"product_type":"c1","uid":2882738,"ip_address":"浙江","ucode":"D0E64BB92C6223","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEKwRibg8Y6J3BQsFfyboA5Px6ibx3iaerK3ia53XiavSJQ3quO7MxdFI9pwEACurR13MkuDTNnMurBqydA/132","comment_is_top":false,"comment_ctime":1662692303,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1662692303","product_id":100039001,"comment_content":"DDD感觉就是职责更明细了，更容易理解业务。同时进行了数据的封装保证了数据的安全性，不让程序员随意去操作数据。","like_count":0},{"had_liked":false,"id":356900,"user_name":"Stay_Gold","can_delete":false,"product_type":"c1","uid":1119904,"ip_address":"北京","ucode":"ACB8DCD2EF8F95","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJRCtuJkpyy2NTTABPFibg2k9tZscOOKx9wu80a85d5HspCorO9Nibj7Z7q9v1icPTVm5ia52r0RCzEaA/132","comment_is_top":false,"comment_ctime":1662690954,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662690954","product_id":100039001,"comment_content":"问题<br>这两节课中对于 DDD 的讲解，都是我的个人主观看法，你可能会有不同看法？<br>下面也说我个人的看法<br>DDD的核心是根据业务的不同把架构划分成一个一个的领域，个人领域里面只管理自己领域的事情，比如用户领域就只处理用户相关的操作，订单领域就只处理订单领域相关的操作。<br>还有就是充血模型中数据和影响数据相关的操作是不分离的都是放在一起的，这样便于后续像是拼积木一样的做对于数据相关的操作。<br>最后由于业务领域可能是固定的，但是我们内部的实现经常会变动，比如一开始也许用的mysql来存取数据的，后面可能编程sqlserver来存储，所以我们需要通过一个抽象的接口来关联。外部只访问接口，至于内部如何具体的实现外部不用感知。","like_count":0},{"had_liked":false,"id":356548,"user_name":"Sherk","can_delete":false,"product_type":"c1","uid":2156245,"ip_address":"重庆","ucode":"AFE3E7F158258D","user_header":"https://static001.geekbang.org/account/avatar/00/20/e6/d5/4f1fc074.jpg","comment_is_top":false,"comment_ctime":1662391237,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662391237","product_id":100039001,"comment_content":"DDD 相当于多抽出一个中间层来进行处理逻辑。这样的好处是，未来所有业务逻辑都在这一层，业务开发主要关注这一层，具体的某个实体。<br><br>这节主要讲了什么如何用充血模型开发。<br>     1. 在service 层和原来的reposity之间加了一个domain类。用来处理具体的业务逻辑。<br>      2.domain类显得更加独立，纯粹，只复杂某一领域的业务，可读性更好。<br>       3. service类可以幂等、事务、发邮件、发消息、记录日志、调用其他系统，或者聚合涉及的多个实体。","like_count":0},{"had_liked":false,"id":354537,"user_name":"Huyunfu","can_delete":false,"product_type":"c1","uid":1888301,"ip_address":"广东","ucode":"61A3AFC7BD4203","user_header":"","comment_is_top":false,"comment_ctime":1660519965,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660519965","product_id":100039001,"comment_content":"我对DDD的理解就是以面向对象的思想编程，对象有行为，这个行为就对应着这个对象在系统中的业务抽象。然后service就可以看成一个业务流程的组织者，它先让A对象做啥，接着让B对象这啥，最终完成整件事情。","like_count":0},{"had_liked":false,"id":352606,"user_name":"王政","can_delete":false,"product_type":"c1","uid":2297381,"ip_address":"","ucode":"A7DCA909FC8A38","user_header":"https://static001.geekbang.org/account/avatar/00/23/0e/25/aad87c07.jpg","comment_is_top":false,"comment_ctime":1658804880,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658804880","product_id":100039001,"comment_content":"ddd更适合复杂的业务场景，同时该场景下存在着可以被准确抽象的实体概念，这需要面向对象的思维达到一定的程度同时需要贫血模型开发的一定经验才能实现。","like_count":0},{"had_liked":false,"id":349272,"user_name":"逍客（Joe）","can_delete":false,"product_type":"c1","uid":1648821,"ip_address":"","ucode":"66A6C9368B3178","user_header":"https://static001.geekbang.org/account/avatar/00/19/28/b5/2cc82650.jpg","comment_is_top":false,"comment_ctime":1655861048,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655861048","product_id":100039001,"comment_content":"如果充血模式， 一个Domain还弄出来VO BO Entity 三个类似的对象，个人感觉这种设计还是有些 “贫血”","like_count":0},{"had_liked":false,"id":349109,"user_name":"Geek_08a0f7","can_delete":false,"product_type":"c1","uid":3015503,"ip_address":"","ucode":"C2D78F6B714B88","user_header":"","comment_is_top":false,"comment_ctime":1655732532,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655732532","product_id":100039001,"comment_content":"看代码有些费劲，是不是有必要去补补java基础了","like_count":0},{"had_liked":false,"id":346454,"user_name":"Lee","can_delete":false,"product_type":"c1","uid":1581878,"ip_address":"","ucode":"5A232B7388EB2C","user_header":"https://static001.geekbang.org/account/avatar/00/18/23/36/8bc95dca.jpg","comment_is_top":false,"comment_ctime":1653146073,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653146073","product_id":100039001,"comment_content":"Service依赖domain和repository，那domain的业务逻辑不会依赖和数据库相关的操作吗？","like_count":0},{"had_liked":false,"id":342337,"user_name":"于游","can_delete":false,"product_type":"c1","uid":1232227,"ip_address":"","ucode":"7FA6E0117A3700","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoKEDhibodjlC9dIic9StJDib0YsrSudlGjGpEIpmFbb38otr4Q3wgOI2DOCwVadEOO6KXhM92tXh6gw/132","comment_is_top":false,"comment_ctime":1650199067,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1650199067","product_id":100039001,"comment_content":"个人使用经验是，使用充血的模型的前提是这个需求在这个模型内部的逻辑实现是完备的，和业务无关的，也就是足够简单，比如类型转换。<br>而像上面这个充血的钱包模型，显然是不符合要求的，如果业务需求发生了变动，某些情况下允许欠款，而某些情况下不允许，这种逻辑放在service更加合适。","like_count":0},{"had_liked":false,"id":341141,"user_name":"Geek_949f5e","can_delete":false,"product_type":"c1","uid":2962932,"ip_address":"","ucode":"C771E35F26B718","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/cqdrEzhcZ54ibGbf3rjuHCesA6otluIKn9BR9uESN8E8b9nbcjX6xy8UmlictdLdp62dqNofHr5J5138D2Q9yOvw/132","comment_is_top":false,"comment_ctime":1649387801,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649387801","product_id":100039001,"comment_content":"将计算过程抽离到domain，service获取结果后回填进repository，service是数据中介，波妞喜欢中介","like_count":0},{"had_liked":false,"id":337805,"user_name":"关耳","can_delete":false,"product_type":"c1","uid":1583598,"ip_address":"","ucode":"9036ADEB550BD4","user_header":"https://static001.geekbang.org/account/avatar/00/18/29/ee/7cc1d3d2.jpg","comment_is_top":false,"comment_ctime":1647073843,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1647073843","product_id":100039001,"comment_content":"看完后，我理解的service层算是钱包domain的上一层domain，service获取数据，得到钱包的数据，给钱包domain，由钱包domain完成相关的业务操作，也可以在钱包操作完成后继续调用其他的domain完成其他的操作，再往上站一层，service是不是就是一个domain，完成的是上一层的业务，也就是用户需要的业务","like_count":0},{"had_liked":false,"id":335962,"user_name":"张小菜","can_delete":false,"product_type":"c1","uid":1349105,"ip_address":"","ucode":"295B52559FCE04","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ep1KzIk3KeeFCrQ2LSEbEDO7edoEYTPtKlM3fNMcpPtNzhTIQqVq32Va0ibJibF5Hg0buXwVPmeKaAg/132","comment_is_top":false,"comment_ctime":1645791916,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645791916","product_id":100039001,"comment_content":"虽然说不用计较细节。但是直接拿Java代码中的余额去覆盖数据库的余额，会有问题呢，一般应该是数据库的余额直接加减发生额。","like_count":0},{"had_liked":false,"id":335769,"user_name":"顺势而为","can_delete":false,"product_type":"c1","uid":2757858,"ip_address":"","ucode":"FE7D688D24823E","user_header":"https://static001.geekbang.org/account/avatar/00/2a/14/e2/f6f1627c.jpg","comment_is_top":false,"comment_ctime":1645684491,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645684491","product_id":100039001,"comment_content":"其实概念是很多。归结一句话，与功能无关的Service层，应该用Domain概念存着，而与功能有关的应该单独拆分出来，归结成不同的类。要用的时候，就直接调用就好了。<br>这样的好处，提高代码的可读性，而且维护起来不费劲。解耦合。","like_count":0},{"had_liked":false,"id":333733,"user_name":"笑醉三千","can_delete":false,"product_type":"c1","uid":1185495,"ip_address":"","ucode":"C820D678E981C3","user_header":"https://static001.geekbang.org/account/avatar/00/12/16/d7/09e92ea0.jpg","comment_is_top":false,"comment_ctime":1644490099,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644490099","product_id":100039001,"comment_content":"感谢王老师，解答了困扰我很久的疑惑，醍醐灌顶！","like_count":0},{"had_liked":false,"id":330125,"user_name":"zjl","can_delete":false,"product_type":"c1","uid":1124375,"ip_address":"","ucode":"0419EF7B28153F","user_header":"https://static001.geekbang.org/account/avatar/00/11/28/17/3b9bc42f.jpg","comment_is_top":false,"comment_ctime":1641806570,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641806570","product_id":100039001,"comment_content":"代码还没有放github上？想看看完整的一些代码！！！","like_count":0},{"had_liked":false,"id":330093,"user_name":"Sun Fei","can_delete":false,"product_type":"c1","uid":1032631,"ip_address":"","ucode":"092EC0992050BB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c1/b7/57f153f6.jpg","comment_is_top":false,"comment_ctime":1641795407,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641795407","product_id":100039001,"comment_content":"开一门 DDD 的课吧","like_count":0},{"had_liked":false,"id":329473,"user_name":"技术骨干","can_delete":false,"product_type":"c1","uid":1098720,"ip_address":"","ucode":"8FCF8DE6D29201","user_header":"https://static001.geekbang.org/account/avatar/00/10/c3/e0/3db22579.jpg","comment_is_top":false,"comment_ctime":1641363171,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641363171","product_id":100039001,"comment_content":"高手在评论区呀，学习了","like_count":0},{"had_liked":false,"id":327668,"user_name":"徐志超-Klaus","can_delete":false,"product_type":"c1","uid":2343086,"ip_address":"","ucode":"CF26B39965F2A2","user_header":"https://static001.geekbang.org/account/avatar/00/23/c0/ae/e5e62510.jpg","comment_is_top":false,"comment_ctime":1640227041,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640227041","product_id":100039001,"comment_content":"但是在实际业务场景中往往不是操作某条数据，而是操作一批数据，我们把一批数据查出来，转换成业务对象，业务操作（比如我将一些对象的某个属性的值全部改成1,另一些对象的某个属性的值全部改成2）完了之后，再由 service将 操作后的对象 持久化到 数据库。那问题来了，我是循环处理这批对象根据id将对象一个一个的update set pro=obj.pro where id = obj.id，还是update set pro=1 where id in (xx...)，update set pro=2 where id in (xx...)显然后者持久化效率比前者高n倍，那如何设计出通用的后者方案呢？还是说还有其他方案？或者说放弃业务代码与数据的解耦，直接在Bo里调Service操作数据库？","like_count":0},{"had_liked":false,"id":327395,"user_name":"samhe","can_delete":false,"product_type":"c1","uid":1073291,"ip_address":"","ucode":"D6F9591AC046A4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er4JSGvt4xzcQsXvQ5iakXnlsonwbNdozM27NSLW5H28YtUfd85hzPlDD73sPDGSf6mJFVaK0vpC2w/132","comment_is_top":false,"comment_ctime":1640097534,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640097534","product_id":100039001,"comment_content":"第二种DDD的充血模型实现方式确实优雅一点，并且可测试程度高一点。但是，我觉得也得面对一个现实问题：就是在并发情况下，我们获取的钱包数据可能都不是最新的。两种写法虽然都有这个问题，但是传统的贫血模型可以利用数据库的特性，如： update ewallet set balance = balance - debit where id = xxxx; 来实现； 但第二种充血模型的写法就没有那么直观来实现了。不知道有没有什么推荐的解决方案？","like_count":0},{"had_liked":false,"id":325215,"user_name":"徐璐💤","can_delete":false,"product_type":"c1","uid":1215684,"ip_address":"","ucode":"604E1CB60D4AB5","user_header":"https://static001.geekbang.org/account/avatar/00/12/8c/c4/4590df86.jpg","comment_is_top":false,"comment_ctime":1638866953,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638866953","product_id":100039001,"comment_content":"争哥，举的这个钱包的例子这个业务流程好像不符合监管规定呀，哈哈","like_count":0},{"had_liked":false,"id":322581,"user_name":"insist","can_delete":false,"product_type":"c1","uid":1054536,"ip_address":"","ucode":"1EE2800A900BA7","user_header":"https://static001.geekbang.org/account/avatar/00/10/17/48/3ab39c86.jpg","comment_is_top":false,"comment_ctime":1637487753,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637487753","product_id":100039001,"comment_content":"终于懂的ddd到底是啥了，领域驱动模型类包括数据和对数据的操作，通过阅读领域驱动类，可以对业务更加熟悉","like_count":0},{"had_liked":false,"id":322123,"user_name":"天亮前说晚安","can_delete":false,"product_type":"c1","uid":1541014,"ip_address":"","ucode":"1D82EE562A7C71","user_header":"https://static001.geekbang.org/account/avatar/00/17/83/96/73ff13a0.jpg","comment_is_top":false,"comment_ctime":1637197907,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637197907","product_id":100039001,"comment_content":"不太理解，领域模型不与数据层交互，也就是基础层。如果复杂业务，大根域，多个子域。那上下文参数将会变的非常巨大。大佬解释一下。","like_count":0},{"had_liked":false,"id":319527,"user_name":"A.Lyuweigh","can_delete":false,"product_type":"c1","uid":1443305,"ip_address":"","ucode":"0CCFA05639A9D1","user_header":"https://static001.geekbang.org/account/avatar/00/16/05/e9/91273c29.jpg","comment_is_top":false,"comment_ctime":1635842566,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635842566","product_id":100039001,"comment_content":"其实还是没有弄明白, 现在我能DDD是一种基于面向对象设计的业务模型,他比单纯的通过面向过程来处理复杂业务逻辑扩展性更高,因为是面向对象的设计方式所以有一定隔离性,也就是安全; 将业务逻辑封装在对象里面,也就有了可移植性,但是可移植的针对整个业务层而不是单个业务而言的,所以这里有个最大的疑问 什么时候使用DDD? ","like_count":0},{"had_liked":false,"id":319309,"user_name":"July 💫","can_delete":false,"product_type":"c1","uid":1761335,"ip_address":"","ucode":"0DC25F063E9E90","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e0/37/40b6711b.jpg","comment_is_top":false,"comment_ctime":1635738591,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635738591","product_id":100039001,"comment_content":"phper 表示没看明白🤣😂😂😂","like_count":0},{"had_liked":false,"id":316363,"user_name":"keep_it_real","can_delete":false,"product_type":"c1","uid":2055554,"ip_address":"","ucode":"F5057CAF752FF3","user_header":"https://static001.geekbang.org/account/avatar/00/1f/5d/82/81b2ba91.jpg","comment_is_top":false,"comment_ctime":1634287301,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634287301","product_id":100039001,"comment_content":"数据和操作数据的逻辑封装到一起，符合OOP的封装特性。而且与Service解藕，让逻辑更加的清晰。Service就去做Controller、Domian和Repository之间的组织任务和其他比如类似缓存，消息队列，日志打印这些事情。","like_count":0},{"had_liked":false,"id":314646,"user_name":"振振","can_delete":false,"product_type":"c1","uid":1313365,"ip_address":"","ucode":"ECE08186230140","user_header":"https://static001.geekbang.org/account/avatar/00/14/0a/55/5e440425.jpg","comment_is_top":false,"comment_ctime":1633275735,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633275735","product_id":100039001,"comment_content":"这一节课讲的很清楚，赞","like_count":0},{"had_liked":false,"id":312057,"user_name":"耶low","can_delete":false,"product_type":"c1","uid":1992059,"ip_address":"","ucode":"4CCEB741583544","user_header":"https://static001.geekbang.org/account/avatar/00/1e/65/7b/058d17f3.jpg","comment_is_top":false,"comment_ctime":1631610073,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631610073","product_id":100039001,"comment_content":"个人理解，关键点可以从DDD的名字看出：“领域”。例子中的钱包，跟钱包相关的方法可以放在Domain中，因为这些操作就属于钱包这个领域的，还体现了面向对象的封装特性。而跟钱包本体无关的操作，比如数据过滤，和上下层、上下游的交互就得放到service中。","like_count":0},{"had_liked":false,"id":307867,"user_name":"小王在努力","can_delete":false,"product_type":"c1","uid":2733574,"ip_address":"","ucode":"A324EF87198905","user_header":"https://static001.geekbang.org/account/avatar/00/29/b6/06/cd1eaa49.jpg","comment_is_top":false,"comment_ctime":1629287164,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629287164","product_id":100039001,"comment_content":"即使使用面向过程的方式去写代码，做好分层也可以做的很好，要把握住边界。","like_count":0},{"had_liked":false,"id":301590,"user_name":"Geek__126303fc81f7","can_delete":false,"product_type":"c1","uid":1453774,"ip_address":"","ucode":"D256622360E1B4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibFY0KibR500NUAibZqsZCqg8Z6XicEaqr23oZTUlFcQaMXAlhETpVBXPAiamJ1IYcc7ibn7ZGdmUycxAicibkhtSc3xYA/132","comment_is_top":false,"comment_ctime":1625752658,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625752658","product_id":100039001,"comment_content":"今天的内容读了收获很大，可能现在业务没那么复杂，基本是贫血模式开发的","like_count":0},{"had_liked":false,"id":301523,"user_name":"谭小谭","can_delete":false,"product_type":"c1","uid":1298631,"ip_address":"","ucode":"C7928BEDFF4EDC","user_header":"https://static001.geekbang.org/account/avatar/00/13/d0/c7/62de0458.jpg","comment_is_top":false,"comment_ctime":1625727894,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625727894","product_id":100039001,"comment_content":"很希望有对应的php版本的 java的还真难理解 看了有几遍了 没理解到意思","like_count":0},{"had_liked":false,"id":301334,"user_name":"九尾","can_delete":false,"product_type":"c1","uid":2429969,"ip_address":"","ucode":"3E6BDF7B9C78FC","user_header":"https://static001.geekbang.org/account/avatar/00/25/14/11/f1220081.jpg","comment_is_top":false,"comment_ctime":1625637613,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625637613","product_id":100039001,"comment_content":"以前贫血和充血的代码都写过，但是没有深入研究过类似的理论，看过之后更加清晰。个人的直观理解是，充血模型在进行复杂功能设计的时候，可以更好的将一些专有的业务逻辑抽离出来形成领域模型，抽离出来的逻辑更加内聚，而且可以减少Service的压力，代码会更清晰一点。当然如果功能模块没有那么复杂，抽离带来的收益并没有更高","like_count":0},{"had_liked":false,"id":300529,"user_name":"小帅","can_delete":false,"product_type":"c1","uid":1239663,"ip_address":"","ucode":"4129A7E9427FFC","user_header":"https://static001.geekbang.org/account/avatar/00/12/ea/6f/09de5f65.jpg","comment_is_top":false,"comment_ctime":1625208030,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625208030","product_id":100039001,"comment_content":"看完这节课，确实明白到了，虽然是说java是面向对象，但是我们实际上一直在面向过程开发，我目前实际业务开发过程中使用的也是贫血模型，但是我们中间多了一层，就是在service层之上有一层manager，这一层是用来做主要的业务逻辑，service层主要是提供单表数据库的操作，所以我们的Manger层越来越大，今天作者提到的充血模型才是真正的面向对象，将逻辑放在一个领域对象里操作，看是看明白了，但是一下子估计很难转变思维过来，这个方式如果用于复杂的业务逻辑中，需要多个领域模型进行交互，要一下子运用在开发中，还需要再思考下","like_count":0},{"had_liked":false,"id":299466,"user_name":"布拉姆","can_delete":false,"product_type":"c1","uid":1311125,"ip_address":"","ucode":"479FF27D73BCAD","user_header":"https://static001.geekbang.org/account/avatar/00/14/01/95/fd09e8a8.jpg","comment_is_top":false,"comment_ctime":1624635847,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624635847","product_id":100039001,"comment_content":"对比贫血和DDD模式区别，<br>贫血在service中，先获取walletEntity数据，对walletEntity进行操作后。最后由walletEntity转化为virtualWallet，virtualWallet只有数据没有任何操作；<br>DDD在service中，直接把walletEntity转化为virtualWallet，就地对virtualWallet进行操作，virtualWallet既有数据又有方法。<br>virtualWallet作为专注于某个业务的领域模型期望与其他非业务、工程上的流程逻辑解耦，就须作为充血模式，以便得到更多的复用<br>","like_count":0},{"had_liked":false,"id":296433,"user_name":"乐","can_delete":false,"product_type":"c1","uid":2098217,"ip_address":"","ucode":"5379CD3C973434","user_header":"https://static001.geekbang.org/account/avatar/00/20/04/29/14ccf5dd.jpg","comment_is_top":false,"comment_ctime":1622974363,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622974363","product_id":100039001,"comment_content":"业务逻辑和控制逻辑的分离","like_count":0},{"had_liked":false,"id":296423,"user_name":"建强","can_delete":false,"product_type":"c1","uid":1397126,"ip_address":"","ucode":"62B03D0E0C64EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/86/b5fd8dd8.jpg","comment_is_top":false,"comment_ctime":1622968730,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622968730","product_id":100039001,"comment_content":"DDD的开发模式没怎么接触过，听了老师的课，说一下我个人对的理解，DDD最大的好处是把业务从开发框架中剥离出来，对于简单的业务，可能没什么太多的作用，但对于复杂的业务，业务剥离后，可以使代码更清晰，更容易维护，业务的扩展也更容易，而且，最重要的是业务和开发框架可以各自独立地演变，互不影响，剥离出来的业务也更容易移植到其他的开发框架中。<br><br>这样理解是不是正确，请老师指正。","like_count":0},{"had_liked":false,"id":295819,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1622610087,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1622610087","product_id":100039001,"comment_content":"ddd还是在老师这里第一次听说","like_count":0},{"had_liked":false,"id":295089,"user_name":"辉","can_delete":false,"product_type":"c1","uid":2327900,"ip_address":"","ucode":"5A09D4BA659E6B","user_header":"https://static001.geekbang.org/account/avatar/00/23/85/5c/8bd7af72.jpg","comment_is_top":false,"comment_ctime":1622213339,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1622213339","product_id":100039001,"comment_content":"我想请教一下，DDD模式如果核心的逻辑放到domain中，那么，domain这个逻辑需要怎么使用呢，是注入到service中还是注入到controller中直接使用呢？","like_count":0},{"had_liked":false,"id":291581,"user_name":"惊蛰","can_delete":false,"product_type":"c1","uid":2574819,"ip_address":"","ucode":"E5A29CF79A24CD","user_header":"https://static001.geekbang.org/account/avatar/00/27/49/e3/1e3320e9.jpg","comment_is_top":false,"comment_ctime":1620374371,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620374371","product_id":100039001,"comment_content":"意思就是将原来service中的业务逻辑，转移一部分到entity中，将原来只是db数据载体的entity充血为domain，这样原来贫血的entity就是数据和逻辑相结合的了。那原来mybatis对应的dao层的位置在哪里呢？充血之后的domain和dao层的关系怎么处理转化呢？","like_count":0},{"had_liked":false,"id":290486,"user_name":"Helios","can_delete":false,"product_type":"c1","uid":1380758,"ip_address":"","ucode":"BE6B98EE8F0D09","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKJrOl63enWXCRxN0SoucliclBme0qrRb19ATrWIOIvibKIz8UAuVgicBMibIVUznerHnjotI4dm6ibODA/132","comment_is_top":false,"comment_ctime":1619585545,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619585545","product_id":100039001,"comment_content":"充血模型的意义在于将数据和操作结合起来。说白了就是封装。","like_count":0},{"had_liked":false,"id":289627,"user_name":"徐同学呀","can_delete":false,"product_type":"c1","uid":1252813,"ip_address":"","ucode":"03383EE820514D","user_header":"https://static001.geekbang.org/account/avatar/00/13/1d/cd/3819726f.jpg","comment_is_top":false,"comment_ctime":1619102469,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619102469","product_id":100039001,"comment_content":"DDD(Domain Driven Design)，领域驱动设计，领域模型驱动领域行为。领域行为是领域模式的基本行为，是其一部分。并不是所有的业务逻辑都可以放到领域模型里，要保证领域模型的单一职责，所以service存在的意义就是跨领域整合和交互，以及跨层级交互等。而controller和Repository还是贫血模型，因为业务逻辑单一并没有必要设计成DDD，不可矫枉过正。","like_count":0},{"had_liked":false,"id":288789,"user_name":"白开水","can_delete":false,"product_type":"c1","uid":2441239,"ip_address":"","ucode":"9D4CD6057200FD","user_header":"","comment_is_top":false,"comment_ctime":1618674367,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618674367","product_id":100039001,"comment_content":"我悟了","like_count":0},{"had_liked":false,"id":288311,"user_name":"xgh","can_delete":false,"product_type":"c1","uid":1985935,"ip_address":"","ucode":"3C508E2ED32508","user_header":"https://static001.geekbang.org/account/avatar/00/1e/4d/8f/e3f171c1.jpg","comment_is_top":false,"comment_ctime":1618403922,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618403922","product_id":100039001,"comment_content":"transfer会有数据库死锁的可能性吧，先锁from再锁to，另一个事务转账反过来，不过确实有点较真了，这不是本课重点","like_count":0},{"had_liked":false,"id":283533,"user_name":"Graham","can_delete":false,"product_type":"c1","uid":1994570,"ip_address":"","ucode":"C2545DE16EC3DD","user_header":"","comment_is_top":false,"comment_ctime":1615810454,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615810454","product_id":100039001,"comment_content":"DDD 可能 已经按照domain把业务都规整好了，便于后续的持续更新。因为全部耦合在service 层，只会使service层越来越大，代码越来越臃肿。<br>现在还流行写handler，用handler 来做业务归类，但是要预防 handler 类代码越来越大","like_count":0},{"had_liked":false,"id":281184,"user_name":"sleepingcat","can_delete":false,"product_type":"c1","uid":1809713,"ip_address":"","ucode":"AF7E7ED85E557F","user_header":"","comment_is_top":false,"comment_ctime":1614611732,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614611732","product_id":100039001,"comment_content":"有没有人可以告诉我一下，为啥三方支付里多了个商家银行卡，我一开始以为那个公共银行卡就是商家银行卡，按理左边的虚拟钱包角色数量，应该和右边的银行卡角色数量一样吧。","like_count":0},{"had_liked":false,"id":280287,"user_name":"IF-Processing","can_delete":false,"product_type":"c1","uid":1205736,"ip_address":"","ucode":"8298C3C9320D94","user_header":"https://static001.geekbang.org/account/avatar/00/12/65/e8/d1e52dbb.jpg","comment_is_top":false,"comment_ctime":1614151831,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1614151831","product_id":100039001,"comment_content":"Entity -&gt; Domain -&gt; DTO 转换过程中没有性能损耗吗？尤其是列表页面的DTO，经过大量的转换动作，必然伴随着大量的new 与 GC操作，这样不会对系统性能造成负担吗？","like_count":0},{"had_liked":false,"id":280001,"user_name":"DreamHeng","can_delete":false,"product_type":"c1","uid":1599490,"ip_address":"","ucode":"5562BFD8375138","user_header":"https://static001.geekbang.org/account/avatar/00/18/68/02/2d394d89.jpg","comment_is_top":false,"comment_ctime":1614050816,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614050816","product_id":100039001,"comment_content":"对DDD的大致了解就是要在分析模型上做到很好，但是这要求开发人员或者设计人员具有很专业的业务知识，但是现实中开发的都是底层的程序员，不可能对业务做到深入了解，那么现实中用DDD就感觉很难。","like_count":0},{"had_liked":false,"id":275097,"user_name":"Geek_cca021","can_delete":false,"product_type":"c1","uid":2209611,"ip_address":"","ucode":"09675F01BB895E","user_header":"","comment_is_top":false,"comment_ctime":1611306408,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611306408","product_id":100039001,"comment_content":"这个充血模型很考验业务的顺序一致性。特别是对于更新操作。建设这个人同时发生了一笔扣钱或者是充值操作。这个walletRepo.updateBalance(walletId, wallet.balance()); 结果就不可预估了。","like_count":0},{"had_liked":false,"id":274522,"user_name":"鲁鸣","can_delete":false,"product_type":"c1","uid":2152306,"ip_address":"","ucode":"974BA3C3E64630","user_header":"https://static001.geekbang.org/account/avatar/00/20/d7/72/cbef720d.jpg","comment_is_top":false,"comment_ctime":1611046595,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611046595","product_id":100039001,"comment_content":"钱包交易流水的第二种设计是没有办法查询哪一个钱包给谁转账的吧","like_count":0},{"had_liked":false,"id":273123,"user_name":"gsy_yang","can_delete":false,"product_type":"c1","uid":2412406,"ip_address":"","ucode":"48471A72E4A2A3","user_header":"","comment_is_top":false,"comment_ctime":1610445833,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610445833","product_id":100039001,"comment_content":"都是用的贫血，关于DDD的实际应用场景，可否归类说明？虽说有的业务service非常长，但是也并不知道能否使用DDD来去做改进。现学得不到现用","like_count":0},{"had_liked":false,"id":270957,"user_name":"山海","can_delete":false,"product_type":"c1","uid":1702117,"ip_address":"","ucode":"77FA9967E58FA3","user_header":"https://static001.geekbang.org/account/avatar/00/19/f8/e5/119d5c15.jpg","comment_is_top":false,"comment_ctime":1609329156,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1609329156","product_id":100039001,"comment_content":"其实一个再复杂或者简单的业务系统完全可以类比成计算机系统。 ","like_count":0},{"had_liked":false,"id":268984,"user_name":"乐多🙉","can_delete":false,"product_type":"c1","uid":2346451,"ip_address":"","ucode":"AE515FFF1CA582","user_header":"https://static001.geekbang.org/account/avatar/00/23/cd/d3/7e4d80e8.jpg","comment_is_top":false,"comment_ctime":1608458942,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608458942","product_id":100039001,"comment_content":"没懂的是,充血会有庞大的domain吧  这种情况怎么设计下去 不懂,<br>","like_count":0},{"had_liked":false,"id":268889,"user_name":"三生","can_delete":false,"product_type":"c1","uid":1606669,"ip_address":"","ucode":"1DE1A2693A5E33","user_header":"https://static001.geekbang.org/account/avatar/00/18/84/0d/4e289b94.jpg","comment_is_top":false,"comment_ctime":1608392537,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608392537","product_id":100039001,"comment_content":"感觉ddd应该是可以通过通用语言（application service）来建立有效沟通，并且可以对抗频繁的业务变更。","like_count":0},{"had_liked":false,"id":268858,"user_name":"帝都钟汉良","can_delete":false,"product_type":"c1","uid":1159615,"ip_address":"","ucode":"69378CAD75A773","user_header":"https://static001.geekbang.org/account/avatar/00/11/b1/bf/ebf045c7.jpg","comment_is_top":false,"comment_ctime":1608375167,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608375167","product_id":100039001,"comment_content":"老师讲的这个代码分层相对比较传统一些，我觉得比较六边型架构可能会更好一点，Domain层做为核心层，Serivce层也不用依赖Repo层，Serice负责协调多个Domain就行了，Repo层通过依赖倒置Domain层的持久化接口就行了","like_count":0},{"had_liked":false,"id":267733,"user_name":"Geek_ac6ae6","can_delete":false,"product_type":"c1","uid":1591745,"ip_address":"","ucode":"5293542776E48E","user_header":"","comment_is_top":false,"comment_ctime":1607908233,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607908233","product_id":100039001,"comment_content":"老师，请教一下，是不是所有的domain领域模型都不会直接和db打交道，只是些纯业务，如果domain依赖一些db数据，都是外部传入到domain么？","like_count":0},{"had_liked":false,"id":266734,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1607475997,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607475997","product_id":100039001,"comment_content":"最近几个月开始用ddd，我的组长把领域服务和repository缠在一起，每次调用他那边，repository还得提前处理没有注入的问题","like_count":0},{"had_liked":false,"id":265676,"user_name":"天下行走","can_delete":false,"product_type":"c1","uid":1462449,"ip_address":"","ucode":"73A4CD8BB91235","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLfrbMvhKQYhxP6ziaHaj4KUNRzst8u7BZsWUsazK8oTLXcNH6sDGITl6icy3IiaGFe9Iiae12LuTrF1g/132","comment_is_top":false,"comment_ctime":1606978427,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606978427","product_id":100039001,"comment_content":"贫血和充血这个翻译在第一次引入的时候真的是给跪了。这两个词和这两个模型能有一丁点都联系不起来","like_count":0},{"had_liked":false,"id":262503,"user_name":"JRich","can_delete":false,"product_type":"c1","uid":1114901,"ip_address":"","ucode":"66AE9D61533960","user_header":"https://static001.geekbang.org/account/avatar/00/11/03/15/293a185d.jpg","comment_is_top":false,"comment_ctime":1605752571,"is_pvip":false,"replies":[{"id":"96137","content":"至于叫什么不是关键，关键是理解它是用来做什么的","user_name":"作者回复","comment_id":262503,"uid":"1190123","ip_address":"","utype":1,"ctime":1606701374,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1605752571","product_id":100039001,"comment_content":"老师，上一节不是说业务模型是BO吗，怎么这里又叫domain呢，我们实际开发过程中数据库对象（entity）叫domain，这个该怎么区分呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509862,"discussion_content":"至于叫什么不是关键，关键是理解它是用来做什么的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606701374,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":262316,"user_name":"淤白","can_delete":false,"product_type":"c1","uid":1206503,"ip_address":"","ucode":"D1E65DC40DAF68","user_header":"https://static001.geekbang.org/account/avatar/00/12/68/e7/ee47d0e2.jpg","comment_is_top":false,"comment_ctime":1605691823,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605691823","product_id":100039001,"comment_content":"打卡：用Java实现了充血模式案例。","like_count":0},{"had_liked":false,"id":261338,"user_name":"Dana","can_delete":false,"product_type":"c1","uid":1241142,"ip_address":"","ucode":"FE94F5E3987DBA","user_header":"https://static001.geekbang.org/account/avatar/00/12/f0/36/020428c7.jpg","comment_is_top":false,"comment_ctime":1605276418,"is_pvip":false,"replies":[{"id":"96148","content":"应该差不多吧，理解思路是重点","user_name":"作者回复","comment_id":261338,"uid":"1190123","ip_address":"","utype":1,"ctime":1606701476,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1605276418","product_id":100039001,"comment_content":"老师里面的代码 不怎么看得懂 没学过 java ","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509450,"discussion_content":"应该差不多吧，理解思路是重点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606701476,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":258367,"user_name":"Geek_f732e5","can_delete":false,"product_type":"c1","uid":2282385,"ip_address":"","ucode":"16060F5A969778","user_header":"","comment_is_top":false,"comment_ctime":1604398870,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604398870","product_id":100039001,"comment_content":"学了这个对代码得架构有了一个深刻得了解","like_count":0},{"had_liked":false,"id":258101,"user_name":"Kingram","can_delete":false,"product_type":"c1","uid":2247700,"ip_address":"","ucode":"212E403E81F2FC","user_header":"https://static001.geekbang.org/account/avatar/00/22/4c/14/8fa39544.jpg","comment_is_top":false,"comment_ctime":1604298783,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604298783","product_id":100039001,"comment_content":"基于充血模型的DDD开发就是将属于BO的业务从Service中抽离出来，封装到BO中，形成Domain领域模型，将复杂的业务逻辑进行解耦，增加代码的可复用性。","like_count":0},{"had_liked":false,"id":257066,"user_name":"李卫卫","can_delete":false,"product_type":"c1","uid":1367591,"ip_address":"","ucode":"F89946C5BF9EA1","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo6qUrJUgVNIMeWy4ffwR7AiahZSuiaOSGeicwSydRm0s5WUwzqxTib8hCuf6ticP8sKmabTf9WSgYHRxw/132","comment_is_top":false,"comment_ctime":1603847181,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603847181","product_id":100039001,"comment_content":"是不是Domain那层需要依赖service做数据的增删改操作，但同时service又因为要做跨域整合，可能又要依赖domain，会不会有循环依赖的问题？","like_count":0},{"had_liked":false,"id":257037,"user_name":"徐丶昌隆","can_delete":false,"product_type":"c1","uid":1604438,"ip_address":"","ucode":"9EE3F971F90C4F","user_header":"https://static001.geekbang.org/account/avatar/00/18/7b/56/80a75331.jpg","comment_is_top":false,"comment_ctime":1603840918,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603840918","product_id":100039001,"comment_content":"有些书要早读，有些文章要早看，感谢作者呀！","like_count":0},{"had_liked":false,"id":255365,"user_name":"紫日","can_delete":false,"product_type":"c1","uid":1207410,"ip_address":"","ucode":"73A8DEE323AC19","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqXSb2jAzlMM0JdTjWrNiaq2uR9eeloBYp906POddb9evmuj5f4CUoO6ge8TibibwtZicnl1sRHic9rW7g/132","comment_is_top":false,"comment_ctime":1603330007,"is_pvip":true,"discussion_count":0,"race_medal":4,"score":"1603330007","product_id":100039001,"comment_content":"根据业务复杂程度绝决定是否用充血模型，充血模型是复杂业务解决的一种方式。","like_count":0},{"had_liked":false,"id":250312,"user_name":"Chris","can_delete":false,"product_type":"c1","uid":1689346,"ip_address":"","ucode":"50A51AE2110A7A","user_header":"https://static001.geekbang.org/account/avatar/00/19/c7/02/8346ebf6.jpg","comment_is_top":false,"comment_ctime":1601020494,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601020494","product_id":100039001,"comment_content":"DDD像是面向过程和面向对象的结合，在逻辑复杂部分用面向对象提供代码复用，解耦与可维护性，在逻辑简单的部分面向对象体现不出优势，用面向过程编写，这样理解对吗","like_count":0},{"had_liked":false,"id":249663,"user_name":"huaweichen","can_delete":false,"product_type":"c1","uid":1249907,"ip_address":"","ucode":"974917DE2AE92E","user_header":"https://static001.geekbang.org/account/avatar/00/13/12/73/2183839d.jpg","comment_is_top":false,"comment_ctime":1600747004,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600747004","product_id":100039001,"comment_content":"建议将完整一些的代码放到 github 上 然后感兴趣的话可以自行去github 上研究或者提 pr   +1","like_count":0},{"had_liked":false,"id":248663,"user_name":"WilliamVector","can_delete":false,"product_type":"c1","uid":1898112,"ip_address":"","ucode":"E0D3C3D4FCB7C9","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f6/80/85ec2c2a.jpg","comment_is_top":false,"comment_ctime":1600255681,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600255681","product_id":100039001,"comment_content":"【要点】<br>1、基于充血模型的 DDD 开发模式跟基于贫血模型的传统开发模式相比，主要区别在 Service 层。在基于充血模型的开发模式下，我们将部分原来在 Service 类中的业务逻辑移动到了一个或多个充血的 Domain 领域模型中，让 Service 类的实现依赖这些 Domain 类。<br>2、在基于充血模型的 DDD 开发模式下，Service 类并不会完全移除，是因为需要Service类负责一些不适合放在 Domain 类中的功能。比如，负责与 Repository 层打交道、跨领域模型的业务聚合功能、幂等事务等非功能性的工作。<br>3、基于充血模型的 DDD 开发模式跟基于贫血模型的传统开发模式相比，Controller 层和 Repository 层的代码基本上相同。这是因为，Repository 层的 Entity 生命周期有限，Controller 层的 VO 只是单纯作为一种 DTO。两部分的业务逻辑都不会太复杂。业务逻辑主要集中在 Service 层。所以，Repository 层和 Controller 层继续沿用贫血模型的设计思路是没有问题的。<br>【思考】<br>个人对DDD开发模式的思考：<br>1、对于DDD开发模式，需要在项目初期对所有业务有较深的了解和整体的较为详细的设计，对于要求开发时效的项目来说，可能不太适用，因为等设计好了开发完了，市场可能也被抢完了。很多时候，我们新开发的系统都是为了快速响应市场需求，所以DDD模式在这种时候一般不会被采用。这种情况一般是先采用贫血模式，让业务尽快上线，等业务稳定后，整个开发团队对业务也非常熟悉了，需要解决的问题也都暴露了，然后再按照DDD的模式迭代升级。<br>2、如果项目时间相对比较充裕，而且系统确实很复杂，团队里的Leader也确实能把控得住整个项目，那就应该以DDD的模式进行开发。","like_count":0},{"had_liked":false,"id":246103,"user_name":"JerryZhu","can_delete":false,"product_type":"c1","uid":1591223,"ip_address":"","ucode":"76850CD45786C1","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/b7/b30472fd.jpg","comment_is_top":false,"comment_ctime":1599179765,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599179765","product_id":100039001,"comment_content":"至于如何理解ddd，我个人觉得，在当前微服务大行其道的背景下，  如果一个业务模块的功能非常简单，甚至不包含很多逻辑，那么这个模块其实用贫血模型会更加合适，  假如一个模块，尤其是金融领域的，如涉及到账户，账务 这类复杂业务逻辑， 建议转成ddd，会更加适合变化","like_count":0},{"had_liked":false,"id":246101,"user_name":"JerryZhu","can_delete":false,"product_type":"c1","uid":1591223,"ip_address":"","ucode":"76850CD45786C1","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/b7/b30472fd.jpg","comment_is_top":false,"comment_ctime":1599179633,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599179633","product_id":100039001,"comment_content":"最近团队准备将老系统重做，用ddd领域建模， 正愁无法很好的理解，看了一篇阿里内部的分享文章，还是有点迷茫，被老师这么一解释，更加形象了！感谢","like_count":0},{"had_liked":false,"id":246050,"user_name":"一尾","can_delete":false,"product_type":"c1","uid":1517556,"ip_address":"","ucode":"67D404036231D1","user_header":"https://static001.geekbang.org/account/avatar/00/17/27/f4/a1ce6248.jpg","comment_is_top":false,"comment_ctime":1599143793,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599143793","product_id":100039001,"comment_content":"我做的界面开发。遇到的场景是，一般定义了一个数据类之后，数据类里面有字段也有它的方法。然后程序里可能会有很多这样的数据类实例化的对象，然后用一个manager把他们管理起来。","like_count":0},{"had_liked":false,"id":245728,"user_name":"两鱼三网的辉","can_delete":false,"product_type":"c1","uid":1463393,"ip_address":"","ucode":"CC085447DF5B1D","user_header":"https://static001.geekbang.org/account/avatar/00/16/54/61/5e9de4db.jpg","comment_is_top":false,"comment_ctime":1599035955,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599035955","product_id":100039001,"comment_content":"基于充血模型的DDD开发模式和基于贫血模型开发模式相比，不同在于充血模型将部分业务逻辑放在BO中，service中只保留与repository交互、跨领域模型业务聚合、幂等事务等，service依赖Bo,优点是可读性提高，方便理解业务，在微服务开发中需要拆分业务利用这种开发模式很合适","like_count":0},{"had_liked":false,"id":244371,"user_name":"郑祖煌","can_delete":false,"product_type":"c1","uid":1469608,"ip_address":"","ucode":"49A0D2E3279826","user_header":"https://static001.geekbang.org/account/avatar/00/16/6c/a8/1922a0f5.jpg","comment_is_top":false,"comment_ctime":1598495024,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598495024","product_id":100039001,"comment_content":"我感觉两个流水表有点冗余，可以把wallet流水表的 +  - 字段放到线性流水表上就可以得到解决了。","like_count":0},{"had_liked":false,"id":243892,"user_name":"大力","can_delete":false,"product_type":"c1","uid":1364353,"ip_address":"","ucode":"1B2125C519443D","user_header":"https://static001.geekbang.org/account/avatar/00/14/d1/81/89ba9d81.jpg","comment_is_top":false,"comment_ctime":1598320896,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598320896","product_id":100039001,"comment_content":"除了充血与贫血模型的讨论，我更从这篇文章中进修了如何合理地进行需求分析与系统设计。谢谢老师。","like_count":0},{"had_liked":false,"id":243811,"user_name":"鲲鹏飞九万里","can_delete":false,"product_type":"c1","uid":1093920,"ip_address":"","ucode":"82BD0C789DF612","user_header":"https://static001.geekbang.org/account/avatar/00/10/b1/20/8718252f.jpg","comment_is_top":false,"comment_ctime":1598281174,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598281174","product_id":100039001,"comment_content":"没有记录 出账、入账的流水","like_count":0},{"had_liked":false,"id":243694,"user_name":"郑大钱","can_delete":false,"product_type":"c1","uid":1503067,"ip_address":"","ucode":"114CF48056880E","user_header":"https://static001.geekbang.org/account/avatar/00/16/ef/5b/ff28088f.jpg","comment_is_top":false,"comment_ctime":1598251865,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598251865","product_id":100039001,"comment_content":"钱包系统的设计思路把我看得一愣一愣的，涨姿势了！<br>解决问题的过程中，我容易陷入技术细节里。如何保证数据的一致性，可以依赖数据库事务的原子性，如果对数据做了分库分表，那我可能得引入一些分布式框架来保证多库多表数据的一致性了。但这可能会极大的损害性能。<br>但如果重新回到业务起点，重新定义问题“如何让用户看到正确的转账状态”，我们完全可以有一个中间状态“处理中”，当入账和出账都执行成功的时候，这笔转账才标记为成功，否则标记为失败，转入异常流程。<br>产品大大也是讲道理的，以性能为代价添加一个状态，产品大大是很乐于接受的。","like_count":0},{"had_liked":false,"id":243057,"user_name":"Gopher","can_delete":false,"product_type":"c1","uid":1206229,"ip_address":"","ucode":"3C1F9012BB486D","user_header":"https://static001.geekbang.org/account/avatar/00/12/67/d5/1b26b725.jpg","comment_is_top":false,"comment_ctime":1597933680,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597933680","product_id":100039001,"comment_content":"充血模型与贫血模型的区别并不只是说把service 层的逻辑放到domain 层，而是要学会全局思考自顶向下的思考才是最终要，这也就是前面提到到，一定要梳理好业务先。","like_count":0},{"had_liked":false,"id":242606,"user_name":"Ilearning99","can_delete":false,"product_type":"c1","uid":1989119,"ip_address":"","ucode":"7901836A2C47EF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/qOdqzmC507sibL6sichNSDaVmyoMKibEIqHWpic4CftgOQnoA3QKeRPwic9j1Ha8MLtzzqzfSRavR9GWMju09SMADUg/132","comment_is_top":false,"comment_ctime":1597796875,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597796875","product_id":100039001,"comment_content":"DDD领域驱动，似乎是将service做了一定的功能分拆，对业务逻辑进行解耦。<br><br>其实这一篇，我对于流水中的交易，编程两条语句之后如下，如果保证操作的原子性不太清楚。<br>debit(fromWalletId, amount); <br>credit(toWalletId, amount);","like_count":0},{"had_liked":false,"id":240288,"user_name":"double mu","can_delete":false,"product_type":"c1","uid":1707561,"ip_address":"","ucode":"62F82999EDDA56","user_header":"https://static001.geekbang.org/account/avatar/00/1a/0e/29/6c8034e3.jpg","comment_is_top":false,"comment_ctime":1596853559,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596853559","product_id":100039001,"comment_content":"依赖易变的数据开展业务，那么业务实现也是有变动风险的。<br>依赖自己设计的业务模型开展业务，业务模型不变，业务实现也不会变，所以把易变的数据代入到我们的业务模型里来，当数据发生变化时，我们只需要改变数据代入业务模型的策略。这就要求我们设计业务模型时要足够通用，足够稳定，足够抽象。<br>这是我的一点理解。","like_count":0},{"had_liked":false,"id":239739,"user_name":"罗盖","can_delete":false,"product_type":"c1","uid":1357135,"ip_address":"","ucode":"1B098D4CA6096A","user_header":"https://static001.geekbang.org/account/avatar/00/14/b5/4f/10c694db.jpg","comment_is_top":false,"comment_ctime":1596630348,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596630348","product_id":100039001,"comment_content":"感觉老师在钱包数据表的讲解处前后相矛盾，当然有可能是我的理解错误，如下：<br>（1）老师在开头部分说包含有入账和出账字段的数据表才能更好的支持数据的一致性，既然如此，后面提到的钱包交易流水数据表和虚拟钱包交易流水数据表中应该是钱包交易流水的数据表支持数据一致性，但您说的是虚拟钱包交易流水数据表<br>（2）如果虚拟钱包交易流水数据表不支持数据一致性，要它又有何用。。。？","like_count":0},{"had_liked":false,"id":239440,"user_name":"Aaron 延亮","can_delete":false,"product_type":"c1","uid":1394147,"ip_address":"","ucode":"48DE83DDF45A61","user_header":"https://static001.geekbang.org/account/avatar/00/15/45/e3/26d1e69c.jpg","comment_is_top":false,"comment_ctime":1596532492,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596532492","product_id":100039001,"comment_content":"不懂web开发，这种贫血理念不太理解，反而充血好理解","like_count":0},{"had_liked":false,"id":239075,"user_name":"owen","can_delete":false,"product_type":"c1","uid":1902116,"ip_address":"","ucode":"0E79DA9080A085","user_header":"https://static001.geekbang.org/account/avatar/00/1d/06/24/c2ee3b16.jpg","comment_is_top":false,"comment_ctime":1596427715,"is_pvip":false,"replies":[{"id":"89275","content":"不是，orm实体类不应该有业务逻辑的","user_name":"作者回复","comment_id":239075,"uid":"1190123","ip_address":"","utype":1,"ctime":1597454612,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"1596427715","product_id":100039001,"comment_content":"是不是可以理解为，orm的实体类加上业务逻辑判断，Service层只负责和Dao 层交互","like_count":0,"discussions":[{"author":{"id":2853072,"avatar":"","nickname":"小杰同学","note":"","ucode":"C6FC59D58F772C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579350,"discussion_content":"消费者是主动拉取\n观察者是被动接收","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1657368491,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":239025,"user_name":"David","can_delete":false,"product_type":"c1","uid":1021825,"ip_address":"","ucode":"22CBBC13FC97A9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/97/81/e1eaf621.jpg","comment_is_top":false,"comment_ctime":1596418261,"is_pvip":true,"replies":[{"id":"89271","content":"可以先用一个，必要的时候再分开多个","user_name":"作者回复","comment_id":239025,"uid":"1190123","ip_address":"","utype":1,"ctime":1597454272,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1596418261","product_id":100039001,"comment_content":"我有一个问题 ，我的系统太简单了，如果定义这么多bo vo全部精力都用在数据转换上了 。工期又特别赶 怎么办？一般我都是只有一个实体类，把复用的逻辑放在实体类中，可以怎么优化一下呢？请教老师","like_count":0,"discussions":[{"author":{"id":1161271,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b8/37/98991aeb.jpg","nickname":"不似旧日","note":"","ucode":"DF4C5E3AB9570C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":213781,"discussion_content":"把简单的问题搞复杂了, 文章写得晦涩难懂","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585121343,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2122539,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/BOEEDquKAT3WLFjFlwcyVvKvoW7hgXHtbtBC4YzOtQoAat7eAtnBDjjWsEY5g4JJEj7jvPuboT8LoSGCrAbcgA/132","nickname":"阿骨打","note":"","ucode":"35EADA5550162A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1161271,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b8/37/98991aeb.jpg","nickname":"不似旧日","note":"","ucode":"DF4C5E3AB9570C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308361,"discussion_content":"我看到这里 几乎没感觉哪里是 “简单”，哪里是 “搞复杂”，不懂哪个模式是简单的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1600929781,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":213781,"ip_address":""},"score":308361,"extra":""},{"author":{"id":1476490,"avatar":"https://static001.geekbang.org/account/avatar/00/16/87/8a/07ab933c.jpg","nickname":"璀璨星空","note":"","ucode":"CE6324C4261A52","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1161271,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b8/37/98991aeb.jpg","nickname":"不似旧日","note":"","ucode":"DF4C5E3AB9570C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381364,"discussion_content":"不是晦涩难度，是专栏很有深度，反复去品，干货越来越香","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625024644,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":213781,"ip_address":""},"score":381364,"extra":""}]},{"author":{"id":1315367,"avatar":"https://static001.geekbang.org/account/avatar/00/14/12/27/32746bbf.jpg","nickname":"大头","note":"","ucode":"C1FB2C8A0FB0C0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":202364,"discussion_content":"确实如此，感觉非常适合反复阅读揣摩，每次阅读都有新的收货","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1583904629,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":237859,"user_name":"JasonZ","can_delete":false,"product_type":"c1","uid":1104818,"ip_address":"","ucode":"992193AE44C39C","user_header":"https://static001.geekbang.org/account/avatar/00/10/db/b2/29b4f22b.jpg","comment_is_top":false,"comment_ctime":1595987522,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595987522","product_id":100039001,"comment_content":"钱包交易流水和虚拟钱包交易流水，记录2次。仅仅是为了虚拟钱包交易流水不感知交易类型。那就带来了数据一致性问题，要确保2条流水状态一致，代价是不是有点大","like_count":0},{"had_liked":false,"id":236703,"user_name":"幽林萌逐","can_delete":false,"product_type":"c1","uid":1520451,"ip_address":"","ucode":"E6D95EC891800F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLqrAA1j4Oyy6ibicNOicn8K0olrEjtLLanic8V0y9icia6cvCVRCiabOm5llC0WhzcSWvaI2fia75hYbvjrQ/132","comment_is_top":false,"comment_ctime":1595506166,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595506166","product_id":100039001,"comment_content":"打卡，总结下我的观点，domain里的业务逻辑属于完全的职责单子，并且不耦合其他的类，而service主要执行聚合操作，调用各个层级的依赖类，这么做进一步的做到了解耦，职业更为单一，也就更利于维护。","like_count":0,"discussions":[{"author":{"id":1135900,"avatar":"https://static001.geekbang.org/account/avatar/00/11/55/1c/c76abe73.jpg","nickname":"大叶子","note":"","ucode":"31CCDE9E88C023","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":274127,"discussion_content":"是的，在Rxjava中，被观察者是事件产生方（上游），观察者就是事件处理方（下游）","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1590544174,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1293907,"avatar":"https://static001.geekbang.org/account/avatar/00/13/be/53/eda4b622.jpg","nickname":"Smile @ Life","note":"","ucode":"320EDAD5A8BE56","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295173,"discussion_content":"响应式编程本来就是观察者模式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596109302,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1115169,"avatar":"https://static001.geekbang.org/account/avatar/00/11/04/21/94322854.jpg","nickname":"不来也不去","note":"","ucode":"79D4A8BADAB1CA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294273,"discussion_content":"现在rxjava好像都是搞Android的在用？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595844674,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233564,"user_name":"沧浪之水","can_delete":false,"product_type":"c1","uid":1126491,"ip_address":"","ucode":"3819CB439BFB4C","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/5b/ed3b2211.jpg","comment_is_top":false,"comment_ctime":1594355498,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594355498","product_id":100039001,"comment_content":"我个人认为可以把数据库操作从service中移到Entity对象中，使Entity对象也充血。这样更加符合人的理解，比如要想获得一个红色的苹果，那么去苹果对象中找获取红色苹果的方法。","like_count":0},{"had_liked":false,"id":233134,"user_name":"锤他","can_delete":false,"product_type":"c1","uid":1056088,"ip_address":"","ucode":"E0ADB985C67BB0","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/58/255fec76.jpg","comment_is_top":false,"comment_ctime":1594229449,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594229449","product_id":100039001,"comment_content":"我的理解是DDD围绕Domain来降低复杂度：<br>Domain定义某一个抽象业务对象的行为；（定义）<br>Service用于将Domain的行为映射为一些的多个底层操作 &#47; 三方操作的组合. （解释与实现）","like_count":0},{"had_liked":false,"id":231328,"user_name":"红豆成香","can_delete":false,"product_type":"c1","uid":1488601,"ip_address":"","ucode":"FB8FBB639B4BA6","user_header":"https://static001.geekbang.org/account/avatar/00/16/b6/d9/4d8a4d4c.jpg","comment_is_top":false,"comment_ctime":1593653160,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593653160","product_id":100039001,"comment_content":"真的是干货，学的我很开心","like_count":0},{"had_liked":false,"id":230823,"user_name":"Java垒墙工程师","can_delete":false,"product_type":"c1","uid":1937062,"ip_address":"","ucode":"E76AE44A9C76AE","user_header":"https://static001.geekbang.org/account/avatar/00/1d/8e/a6/c3286b61.jpg","comment_is_top":false,"comment_ctime":1593504679,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593504679","product_id":100039001,"comment_content":"如果虚拟钱包不包含任何与数据库直接的操作，如何完成业务呢？领域属性存在哪里呢？","like_count":0},{"had_liked":false,"id":230818,"user_name":"Geek_2c3942","can_delete":false,"product_type":"c1","uid":2029036,"ip_address":"","ucode":"67E0B5CC23AD07","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/N9pMvCZTjULxf3nWtYH85MMLR2Vj3390u3buicPZoJfa7dZbOKwrmy7VtLTcgwQNUQXiaAzicT1ZQDxSYHaIbXUsQ/132","comment_is_top":false,"comment_ctime":1593502803,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593502803","product_id":100039001,"comment_content":"充血模型可以看做一种特殊的继承，VirtualWallet是子类 VirtualWalletService是父类，他俩相互实现功与接口的解耦，对于复杂系统来说，这种方式要比贫血模型好的多","like_count":0},{"had_liked":false,"id":230592,"user_name":"Henry","can_delete":false,"product_type":"c1","uid":1929375,"ip_address":"","ucode":"7C554C97935443","user_header":"https://static001.geekbang.org/account/avatar/00/1d/70/9f/741cd6a4.jpg","comment_is_top":false,"comment_ctime":1593424328,"is_pvip":false,"replies":[{"id":"86374","content":"你的意思是，利用spring事务+单个数据库的事务，来解决你说的原子性问题。但是，有可能数据并非在一个数据库，而且，我也并不是用spring事务来解决事务问题的😂","user_name":"作者回复","comment_id":230592,"uid":"1190123","ip_address":"","utype":1,"ctime":1594601636,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1593424328","product_id":100039001,"comment_content":"transfer操作try catch里的操作跑出异常会导致整个事务回滚，并不会记录交易记录；应该在另一个service组合debit 和credit 操作并用将事务Propagation设为REQUIRES_NEW才能保证原子性；。。。虽然这并不是这堂客的重点；","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499950,"discussion_content":"你的意思是，利用spring事务+单个数据库的事务，来解决你说的原子性问题。但是，有可能数据并非在一个数据库，而且，我也并不是用spring事务来解决事务问题的😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594601636,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":226195,"user_name":"maybe","can_delete":false,"product_type":"c1","uid":1475528,"ip_address":"","ucode":"93D160F617E750","user_header":"https://static001.geekbang.org/account/avatar/00/16/83/c8/5ce842f6.jpg","comment_is_top":false,"comment_ctime":1591975865,"is_pvip":false,"replies":[{"id":"86447","content":"理解的没问题，不过阿里编程规范里的manager我不是很清楚是不是就是domain层","user_name":"作者回复","comment_id":226195,"uid":"1190123","ip_address":"","utype":1,"ctime":1594632716,"user_name_real":"王争"}],"discussion_count":1,"race_medal":4,"score":"1591975865","product_id":100039001,"comment_content":"之前对领域模型有重大误解，把他做成了类似repository。现在的理解应该是domain是service层中抽取出来的一些职责单一的点，数据与行为一体的充血领域类。看到阿里编程规范里面的manager层应该就是领域模型层了，controller、service 、manager、dao。不知道我现在的理解是否对了，希望老师指点迷津","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498143,"discussion_content":"理解的没问题，不过阿里编程规范里的manager我不是很清楚是不是就是domain层","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594632716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":224444,"user_name":"永远不要低估一颗冠军的心","can_delete":false,"product_type":"c1","uid":1339230,"ip_address":"","ucode":"FF0DD7382CD3CA","user_header":"https://static001.geekbang.org/account/avatar/00/14/6f/5e/3f7e9ccd.jpg","comment_is_top":false,"comment_ctime":1591403075,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591403075","product_id":100039001,"comment_content":"没有看出Service 类是怎么实现依赖 VirtualWallet 类的，没有看出VirtualWallet 中方法的哪一部分是从service中拆出来的，看不出VirtualWallet 这个领域模型类有什么优势","like_count":0},{"had_liked":false,"id":224325,"user_name":"阳超","can_delete":false,"product_type":"c1","uid":1792066,"ip_address":"","ucode":"239037A8E3F055","user_header":"https://static001.geekbang.org/account/avatar/00/1b/58/42/640dd096.jpg","comment_is_top":false,"comment_ctime":1591345529,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591345529","product_id":100039001,"comment_content":"domain 是否并不是在某一个sercer层面而是一个作为一个公用的对外暴露？","like_count":0},{"had_liked":false,"id":223996,"user_name":"马球先生","can_delete":false,"product_type":"c1","uid":1119609,"ip_address":"","ucode":"858C2CE0E494C5","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/79/efde2a69.jpg","comment_is_top":false,"comment_ctime":1591252089,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591252089","product_id":100039001,"comment_content":"感觉充血模型的domain类 可以更方便的做单元测试 <br>与数据层等依赖层分离后 减少了依赖 代码更提纯了 ","like_count":0},{"had_liked":false,"id":221756,"user_name":"Zero","can_delete":false,"product_type":"c1","uid":2015022,"ip_address":"","ucode":"5FAC7E84CD622F","user_header":"https://static001.geekbang.org/account/avatar/00/1e/bf/2e/e586ffbd.jpg","comment_is_top":false,"comment_ctime":1590585263,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590585263","product_id":100039001,"comment_content":"充血模型的DDD其实就是完全诠释的OOP的特性","like_count":0},{"had_liked":false,"id":219824,"user_name":"注定非凡","can_delete":false,"product_type":"c1","uid":1113597,"ip_address":"","ucode":"80673056E131B7","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/fd/326be9bb.jpg","comment_is_top":false,"comment_ctime":1590107913,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1590107913","product_id":100039001,"comment_content":"充血模型：自己的事情自己做，service是胶水，协作沟通<br>贫血模型：一盘棋思想，集中调度，统一指挥","like_count":0},{"had_liked":false,"id":219075,"user_name":"MadleS_F","can_delete":false,"product_type":"c1","uid":1670997,"ip_address":"","ucode":"D6B6C29F576B7A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoV9IsMsiawicpaaTXqhPzqH2mA5HUKUSyJ5fbUhoqTKhNRxJ5dibhs5bkTqCSqcuolZT7sam2sn8sBA/132","comment_is_top":false,"comment_ctime":1589940092,"is_pvip":false,"replies":[{"id":"86626","content":"必要的时候也可以添加setter、getter方法的","user_name":"作者回复","comment_id":219075,"uid":"1190123","ip_address":"","utype":1,"ctime":1594783954,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1589940092","product_id":100039001,"comment_content":"老师:<br>domain 没有 get set方法，如何将entity convert成domain呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495672,"discussion_content":"必要的时候也可以添加setter、getter方法的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594783954,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":217334,"user_name":"batman","can_delete":false,"product_type":"c1","uid":1266482,"ip_address":"","ucode":"73C30ACFC0D612","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/IIkdC2gohpcibib0AJvSdnJQefAuQYGlLySQOticThpF7Ck9WuDUQLJlgZ7ic13LIFnGBXXbMsSP3nZsbibBN98ZjGA/132","comment_is_top":false,"comment_ctime":1589465962,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1589465962","product_id":100039001,"comment_content":"如果是支付操作，这里的虚拟钱包流水表，会生成两条记录（一加一减），那对应的两条虚拟钱包流水ID是相同的还是不同？<br><br>如果不同，那钱包流水表里面是不是少了个虚拟钱包流水ID？","like_count":0},{"had_liked":false,"id":217151,"user_name":"师哥","can_delete":false,"product_type":"c1","uid":1333376,"ip_address":"","ucode":"A86CD1661D370F","user_header":"https://static001.geekbang.org/account/avatar/00/14/58/80/c9e232b6.jpg","comment_is_top":false,"comment_ctime":1589427544,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589427544","product_id":100039001,"comment_content":"DDD 主要是解决在复杂业务中，代码的复用性问题。贫血还是领域要针对具体的业务而言。","like_count":0},{"had_liked":false,"id":214654,"user_name":"Ifdevil","can_delete":false,"product_type":"c1","uid":1212912,"ip_address":"","ucode":"79DB0ADE9AD082","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/f0/695ca05f.jpg","comment_is_top":false,"comment_ctime":1588776945,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588776945","product_id":100039001,"comment_content":"只有我一个人觉得DDD更人性化吗？^_^","like_count":0},{"had_liked":false,"id":214442,"user_name":"ll.py","can_delete":false,"product_type":"c1","uid":1165828,"ip_address":"","ucode":"7E3C3C1D262372","user_header":"https://static001.geekbang.org/account/avatar/00/11/ca/04/11cf22de.jpg","comment_is_top":false,"comment_ctime":1588750374,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588750374","product_id":100039001,"comment_content":"在service层还需跟Repository 和 Entity打交道, 充血模型中的domain职责更加单一, 只包含业务逻辑","like_count":0},{"had_liked":false,"id":212089,"user_name":"Garwen","can_delete":false,"product_type":"c1","uid":1045062,"ip_address":"","ucode":"C76346E1734AB8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f2/46/09c457eb.jpg","comment_is_top":false,"comment_ctime":1588059445,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588059445","product_id":100039001,"comment_content":"DDD带来的改善还是体现在复杂业务逻辑上，在简单业务逻辑上的程序能带来的提升很小。其中的思想也是“分久必合，合久必分”。service类应付简单的业务逻辑时，开发效率高，所有业务逻辑放在一起也没多少行，多于业务逻辑的修改也快。<br>当业务逻辑复杂到一定程度，service类变得巨大且臃肿，这时必然会带来服务细粒度上的难以重用，复杂的耦合交互。此时意识到可以将服务中的一部分功能定义为领域（Domin）属性，固化相关属性至领域模型中，使得service类在调用时的粒度放大，业务逻辑变得更加简单，易读性和可维护性增强。","like_count":0},{"had_liked":false,"id":210828,"user_name":"简单猫","can_delete":false,"product_type":"c1","uid":1866485,"ip_address":"","ucode":"EA027D4C344E25","user_header":"https://static001.geekbang.org/account/avatar/00/1c/7a/f5/54a5084b.jpg","comment_is_top":false,"comment_ctime":1587830345,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587830345","product_id":100039001,"comment_content":"开发中加入了service层，目的是就是细化 或者说抽象和封装方法，这样在controller中可以 组合这些细小的业务功能形成块状功能，而且service对controller屏蔽了实现 一旦底层有变化 对上层逻辑不会发生什么改变(例如 本来是一个查MySQL数据库的功能 改成了查Oracle 或文件)。","like_count":0},{"had_liked":false,"id":208912,"user_name":"落尘kira","can_delete":false,"product_type":"c1","uid":1092169,"ip_address":"","ucode":"D203B519E43F85","user_header":"https://static001.geekbang.org/account/avatar/00/10/aa/49/51790edb.jpg","comment_is_top":false,"comment_ctime":1587463943,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1587463943","product_id":100039001,"comment_content":"在实际的开发过程中，我们是将Entity去掉的，只保留Domain和DTO的","like_count":0,"discussions":[{"author":{"id":1670997,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoV9IsMsiawicpaaTXqhPzqH2mA5HUKUSyJ5fbUhoqTKhNRxJ5dibhs5bkTqCSqcuolZT7sam2sn8sBA/132","nickname":"MadleS_F","note":"","ucode":"D6B6C29F576B7A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":269704,"discussion_content":"我比较迷的是没有get set如何convert..","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589939643,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":207514,"user_name":"冉冉","can_delete":false,"product_type":"c1","uid":1436334,"ip_address":"","ucode":"D36C0F95BC1DAB","user_header":"https://static001.geekbang.org/account/avatar/00/15/ea/ae/0e056410.jpg","comment_is_top":false,"comment_ctime":1587098384,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1587098384","product_id":100039001,"comment_content":"哎，repository到底由谁调用跟隔壁ddd的老师建议不一样啊，我纠结了，ddd老师是放domain里的，也有道理，对数据库的操作其实也是domain业务服务的职责之一啊","like_count":0,"discussions":[{"author":{"id":1283989,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/95/aad51e9b.jpg","nickname":"waterjiao","note":"","ucode":"74F2F75BF0CA6F","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292250,"discussion_content":"感觉放service里比较合适，service可以调不同的repo","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595154931,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":204378,"user_name":"阿固","can_delete":false,"product_type":"c1","uid":1064149,"ip_address":"","ucode":"F16B99FED58993","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/2PtNr4sjKLYNnibicnwWcZicmQbTguUK9ZaCVBLYmiaSYFRjRrUP08jHO9N7KB2adDw87ywccexMJh8yCQ84q5gEzg/132","comment_is_top":false,"comment_ctime":1586393614,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586393614","product_id":100039001,"comment_content":"表的最后设计中，钱包交易流水中有个“虚拟钱包交易流水ID”存的是两个ID吗？因为在转账的时会有两个帐户的虚拟钱包交易流水ID","like_count":0},{"had_liked":false,"id":203794,"user_name":"reminis","can_delete":false,"product_type":"c1","uid":1020530,"ip_address":"","ucode":"43E5F6A610E846","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/72/c3b36a77.jpg","comment_is_top":false,"comment_ctime":1586267398,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586267398","product_id":100039001,"comment_content":"化繁为简，在复杂业务场景下，采用“充血模型”也是一种化繁为简的策略。这个“简“实际上也是指代码的可维护性，可读性以及可扩展性","like_count":0},{"had_liked":false,"id":203392,"user_name":"技术骨干","can_delete":false,"product_type":"c1","uid":1098720,"ip_address":"","ucode":"8FCF8DE6D29201","user_header":"https://static001.geekbang.org/account/avatar/00/10/c3/e0/3db22579.jpg","comment_is_top":false,"comment_ctime":1586183785,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586183785","product_id":100039001,"comment_content":"如果说复杂的功能用DDD ,简单的方式用贫血模式。<br>那么按照复杂问题分而治之，是不是就没有复杂的功能了<br>如何识别复杂度呢？然后选择充血还是贫血","like_count":0},{"had_liked":false,"id":202983,"user_name":"ello","can_delete":false,"product_type":"c1","uid":1102790,"ip_address":"","ucode":"49D1BFB47067A9","user_header":"https://static001.geekbang.org/account/avatar/00/10/d3/c6/f83661b1.jpg","comment_is_top":false,"comment_ctime":1586097205,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586097205","product_id":100039001,"comment_content":"相对于其他关于DDD的文章中铺陈概念又大又空的情况，争哥的这两篇在我看来都是接地气的干活，看完就懂，懂了就能用上。真的难得，感谢🙏。","like_count":0},{"had_liked":false,"id":200705,"user_name":"这得从我捡到一个鼠标垫开始说起","can_delete":false,"product_type":"c1","uid":1272321,"ip_address":"","ucode":"2FF4347B4E7A9B","user_header":"https://static001.geekbang.org/account/avatar/00/13/6a/01/d9cb531d.jpg","comment_is_top":false,"comment_ctime":1585641058,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585641058","product_id":100039001,"comment_content":"这么看来，Android开发的时候，大多数代码写在Activity里，没有做太多封装，数据和操作分离。也就是使用了贫血模型来做，变成面向过程的编程风格了。","like_count":0},{"had_liked":false,"id":193835,"user_name":"Kevin.zhang🌏","can_delete":false,"product_type":"c1","uid":1247039,"ip_address":"","ucode":"5C52AE51538906","user_header":"https://static001.geekbang.org/account/avatar/00/13/07/3f/53ae01f6.jpg","comment_is_top":false,"comment_ctime":1584971822,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584971822","product_id":100039001,"comment_content":"看起来纷繁复杂，核心只有一个: 解耦，即封装出一个业务逻辑独立的类virtualWallet，其他都是打酱油做辅助工作的。Controller负责广告，Repository负责存取数据库，Service负责与各个部门联络。","like_count":0},{"had_liked":false,"id":191135,"user_name":"ladidili","can_delete":false,"product_type":"c1","uid":1217498,"ip_address":"","ucode":"38886C1908DE6B","user_header":"https://static001.geekbang.org/account/avatar/00/12/93/da/0e47c76e.jpg","comment_is_top":false,"comment_ctime":1584748024,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1584748024","product_id":100039001,"comment_content":"service负责整合，domain负责实现。<br>service负责数据获取。<br>service与其他层通信，做一些业务较为无关的操作，domain不与其他层通信，不关心数据来源，做好自己的业务即可。<br>service与domain之间通过数据传递与函数返回通信","like_count":0},{"had_liked":false,"id":191026,"user_name":"ladidili","can_delete":false,"product_type":"c1","uid":1217498,"ip_address":"","ucode":"38886C1908DE6B","user_header":"https://static001.geekbang.org/account/avatar/00/12/93/da/0e47c76e.jpg","comment_is_top":false,"comment_ctime":1584718402,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1584718402","product_id":100039001,"comment_content":"如果全部业务都在service内。service会越来越膨胀，不易读。拆分domain，在service做整合。domain单纯做业务，不关心数据来源。<br>domain里面包含数据以及对数据的操作，基本看完domain就对某一块业务领域就清晰不少","like_count":0},{"had_liked":false,"id":191022,"user_name":"ladidili","can_delete":false,"product_type":"c1","uid":1217498,"ip_address":"","ucode":"38886C1908DE6B","user_header":"https://static001.geekbang.org/account/avatar/00/12/93/da/0e47c76e.jpg","comment_is_top":false,"comment_ctime":1584718196,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1584718196","product_id":100039001,"comment_content":"确实，看完了确实感觉ddd只值五毛钱。一开始只认识到ddd只是一个拆分service的思想，以及oop在业务层面的应用。<br>文章讲了怎么去实现ddd，但是ddd的核心还是对业务的拆分思想，如何去拆分合理，怎么去确定拆分边界。不然就是光有型而没有内在。","like_count":0},{"had_liked":false,"id":189198,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1584484526,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584484526","product_id":100039001,"comment_content":"好久没有学习了，从去年12月间断的，现在又重新拾起，感觉真好。谢谢老师","like_count":0},{"had_liked":false,"id":188083,"user_name":"刘爽","can_delete":false,"product_type":"c1","uid":1030794,"ip_address":"","ucode":"3763C72661AC1F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/8a/a9cbb922.jpg","comment_is_top":false,"comment_ctime":1584320702,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584320702","product_id":100039001,"comment_content":"通过两种代码的对比，我终于明白了！","like_count":0},{"had_liked":false,"id":187619,"user_name":"劳码识途","can_delete":false,"product_type":"c1","uid":1598564,"ip_address":"","ucode":"7AEF4D9407F097","user_header":"https://static001.geekbang.org/account/avatar/00/18/64/64/865c1eb4.jpg","comment_is_top":false,"comment_ctime":1584174088,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584174088","product_id":100039001,"comment_content":"其实DDD的核心思想就是，对象要负责自己状态的维护，因为BO的状态比较复杂，同时，BO的状态其实是一组业务逻辑的映射，所以对于Service这一层，在业务相对复杂的时候采用充血模型是比较理想的，而Controller和Repository层只涉及数据的获取和传输（理想状态下，大部分时候，Controller层可能要做一些适配前端数据结构的工作，而Repository可能就是单纯的获取数据和存储数据），所以没有必要在这两层上采用充血模型。","like_count":0},{"had_liked":false,"id":186862,"user_name":"Tom.G","can_delete":false,"product_type":"c1","uid":1206034,"ip_address":"","ucode":"7929B45C1A51F8","user_header":"https://static001.geekbang.org/account/avatar/00/12/67/12/5c6eb568.jpg","comment_is_top":false,"comment_ctime":1583940951,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583940951","product_id":100039001,"comment_content":"争哥，Do转换成Domain有什么好用的工具推荐","like_count":0},{"had_liked":false,"id":186743,"user_name":"煜","can_delete":false,"product_type":"c1","uid":1650785,"ip_address":"","ucode":"3C5A9A55A65FC9","user_header":"https://static001.geekbang.org/account/avatar/00/19/30/61/50e24e09.jpg","comment_is_top":false,"comment_ctime":1583916581,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583916581","product_id":100039001,"comment_content":"老师，请问service进行rpc调用其他的service服务，是不是要建立一个新的DTO对象，而不是把domain作为DTO对象来使用？","like_count":0},{"had_liked":false,"id":186244,"user_name":"大王叫我来巡山","can_delete":false,"product_type":"c1","uid":1099513,"ip_address":"","ucode":"1B8D0C701BC95E","user_header":"https://static001.geekbang.org/account/avatar/00/10/c6/f9/caf27bd3.jpg","comment_is_top":false,"comment_ctime":1583806869,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583806869","product_id":100039001,"comment_content":"我感觉service层的主要作用还是面向接口编程，用于协议约束，遵循这个协议的domain可以任意替换，正常的业务都是在修改的过程中发现某一层变的太厚了，维护性越来越差，这个时候就是需要瘦身了，明确责任，不管怎么改，都不会有最佳实践的，都是最满足当下需求的实践。","like_count":0},{"had_liked":false,"id":185686,"user_name":"胡小禾","can_delete":false,"product_type":"c1","uid":1132315,"ip_address":"","ucode":"1C23B7492C0C9E","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/1b/64262861.jpg","comment_is_top":false,"comment_ctime":1583662799,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583662799","product_id":100039001,"comment_content":"1、钱包系统、虚拟钱包系统都会记录流水，岂不是又有事务的问题？<br>","like_count":0},{"had_liked":false,"id":184631,"user_name":"时光流逝x","can_delete":false,"product_type":"c1","uid":1695455,"ip_address":"","ucode":"D7334E717D9ED0","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqUMEsVYklTc7akT2e6pfytu4jTQ88EVe1H6L2eHdXC6G8sbKCvfrnSDUIRq229M2Wt419LX2q8SQ/132","comment_is_top":false,"comment_ctime":1583374751,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583374751","product_id":100039001,"comment_content":"我目前对DDD的看法是,由于Repository层和Controller层的DTO和VO只是进行数据传输所以领域模型的设计主要是在Service层的Domain,把具体的业务和数据都放在Domain中可以充分保持业务的独立性让Service层只去负责与Repository交互和业务的整合等与具体业务无关的辅助功能。","like_count":0},{"had_liked":false,"id":183978,"user_name":"lcf枫","can_delete":false,"product_type":"c1","uid":1144171,"ip_address":"","ucode":"D51E8F68BD41CA","user_header":"https://static001.geekbang.org/account/avatar/00/11/75/6b/fd685164.jpg","comment_is_top":false,"comment_ctime":1583194989,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583194989","product_id":100039001,"comment_content":"感觉在项目中不知不觉就会形成DDD，业务多了就会产生跟多重复活着leisi","like_count":0},{"had_liked":false,"id":183072,"user_name":"zj","can_delete":false,"product_type":"c1","uid":1100064,"ip_address":"","ucode":"E3329CCF694AC2","user_header":"https://static001.geekbang.org/account/avatar/00/10/c9/20/e4f1b17c.jpg","comment_is_top":false,"comment_ctime":1582948444,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582948444","product_id":100039001,"comment_content":"如果DO不提供setter getter方法那如何将数据库对象转换成DO呢？如果提供了又会影响封装性","like_count":0},{"had_liked":false,"id":182472,"user_name":"我是你的导师杨永信[奸笑]","can_delete":false,"product_type":"c1","uid":1222916,"ip_address":"","ucode":"8399AD43B7BAD2","user_header":"https://static001.geekbang.org/account/avatar/00/12/a9/04/b84223d8.jpg","comment_is_top":false,"comment_ctime":1582793066,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582793066","product_id":100039001,"comment_content":"看了好几本介绍DDD的书和文章，对比下来就争哥的容易理解和接受，醍醐灌顶和原来看的理论能融合起来啦，很棒","like_count":0},{"had_liked":false,"id":182443,"user_name":"Jie","can_delete":false,"product_type":"c1","uid":1045078,"ip_address":"","ucode":"AB94041E548FEB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f2/56/c39046c0.jpg","comment_is_top":false,"comment_ctime":1582788533,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582788533","product_id":100039001,"comment_content":"这里的Service更加偏向于DomainService，在DDD里面是协调聚合内跨领域的方法调用；上层还可以有ApplicationService，协同不同聚合间的交互协作","like_count":0},{"had_liked":false,"id":181858,"user_name":"未来小娃","can_delete":false,"product_type":"c1","uid":1047329,"ip_address":"","ucode":"477D166EBB6B70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/21/d017438c.jpg","comment_is_top":false,"comment_ctime":1582646323,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1582646323","product_id":100039001,"comment_content":"【设计模式笔记13】20200225<br>看到这里我想一个问题，如果虚拟钱包得业务逻辑越来越复杂应该怎么解决代码得可扩展性、可维护性和可读性？毕竟不做处理的话，虚拟钱包类会越来越臃肿","like_count":0},{"had_liked":false,"id":180554,"user_name":"朱靓","can_delete":false,"product_type":"c1","uid":1202981,"ip_address":"","ucode":"D9B95A07FFBC60","user_header":"https://static001.geekbang.org/account/avatar/00/12/5b/25/5d031c12.jpg","comment_is_top":false,"comment_ctime":1582336005,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582336005","product_id":100039001,"comment_content":"我理解DDD关键点在于能否从业务中提炼出公用部分(领域模型)，将这部分公用部分的代码下沉，形成具体的领域模型的逻辑并提供代码复用。<br>其实微服务也是这个道理，下沉的微服务就是领域模型。我们希望领域模型能够有意义，能够复用。","like_count":0},{"had_liked":false,"id":180075,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1582180629,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582180629","product_id":100039001,"comment_content":"经过了这几天的学习,认识到了贫血模型和充血模型之间的区别,在贫血模型和充血模型之间的选择是根据业务逻辑是否复杂来决定的<br>而充血逻辑,就是将原本负责沟通的Service层中的Bo和service数据和业务逻辑相分离改为了,Domain和service类,将数据和业务逻辑放到了Domain中,只讲一些无法和Domain整合的,比如和数据层整合代码,跨领域模型的方法放到了Service类中","like_count":0},{"had_liked":false,"id":176966,"user_name":"涉蓝","can_delete":false,"product_type":"c1","uid":1134619,"ip_address":"","ucode":"C1321E29E01625","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLh8ubWQtDRa6exJtloSwibLliaejpF7434ficyggzukmXE63UlSPvbykoiaVDZo4CbDIIOQsCkicibyn9A/132","comment_is_top":false,"comment_ctime":1581237771,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581237771","product_id":100039001,"comment_content":"例子中提到 service 似乎是个粘合剂作用  Repository负责底层的数据库 domain Repository的实体的业务逻辑 service 是 跟其他的各种依赖的联动做绑定的 可能是因为service 天然框架自带的依赖注入？<br>还是有点不理解 为啥 Repository 的相关的放service里 <br>在我自己原来设想中 是把更多的逻辑放到domain 里面 把Repository 注入到 domain里 总觉得 Repository 是跟数据库的一种实现 是 domain 依托的一个实现细节  然后 service 就都调用 domain 的方法了<br>这是一个没学过java的人的简单意淫","like_count":0},{"had_liked":false,"id":173912,"user_name":"燃着的半支烟","can_delete":false,"product_type":"c1","uid":1230837,"ip_address":"","ucode":"23C7B588F400A7","user_header":"https://static001.geekbang.org/account/avatar/00/12/c7/f5/4e9a82e9.jpg","comment_is_top":false,"comment_ctime":1579779117,"is_pvip":false,"replies":[{"id":"67717","content":"1. 可以不用bo了，不过看情况，如果你的service有组合多个domain的业务逻辑，可能还是需要bo<br>2. 直接返回domain也可以，毕竟到了controller层就会转化成vo","user_name":"作者回复","comment_id":173912,"uid":"1190123","ip_address":"","utype":1,"ctime":1580112486,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"1579779117","product_id":100039001,"comment_content":"老师，咨询个问题：<br>1、如果用了domain，那还需要用BO吗？<br>2、domian对象适合直接在service层返回吗？还是说要把domain转换成BO，在返回？","like_count":0,"discussions":[{"author":{"id":2122539,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/BOEEDquKAT3WLFjFlwcyVvKvoW7hgXHtbtBC4YzOtQoAat7eAtnBDjjWsEY5g4JJEj7jvPuboT8LoSGCrAbcgA/132","nickname":"阿骨打","note":"","ucode":"35EADA5550162A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312607,"discussion_content":"我翻回来看 也不太理解，我只能感觉  结构型是一个粗粒度，只是说类之间 功能不同 应该拆开，注入 。\n行为型就是真正的处理方案了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602747382,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173857,"user_name":"Geek_d25b8d","can_delete":false,"product_type":"c1","uid":1407103,"ip_address":"","ucode":"636A5BCB3BAAA1","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/GbZRicqbu1QJmlcOlfLyW4ican8ZVzrSZ2FRA7EygB8WAdDnoQwR6L4ldNzX3myAd4wYOuGYPguaLAccpQMWIpUg/132","comment_is_top":false,"comment_ctime":1579740706,"is_pvip":true,"replies":[{"id":"67722","content":"看是否有多种实现类，如果没有，那就不用定义接口","user_name":"作者回复","comment_id":173857,"uid":"1190123","ip_address":"","utype":1,"ctime":1580113777,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1579740706","product_id":100039001,"comment_content":"争哥，领域对象需要抽象出接口吗","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482220,"discussion_content":"看是否有多种实现类，如果没有，那就不用定义接口","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580113777,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173088,"user_name":"zj","can_delete":false,"product_type":"c1","uid":1100064,"ip_address":"","ucode":"E3329CCF694AC2","user_header":"https://static001.geekbang.org/account/avatar/00/10/c9/20/e4f1b17c.jpg","comment_is_top":false,"comment_ctime":1579422649,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579422649","product_id":100039001,"comment_content":"DDD一般是四层分层架构，接口层，应用层，领域层，我倾向先有应用层，应用层去组合和编排领域层代码，让领域层只跟该聚合的代码有关，形成领域层高内聚","like_count":0},{"had_liked":false,"id":170863,"user_name":"移动一下","can_delete":false,"product_type":"c1","uid":1034115,"ip_address":"","ucode":"9314E79C72A71E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c7/83/ca76b4f3.jpg","comment_is_top":false,"comment_ctime":1578742723,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578742723","product_id":100039001,"comment_content":"我们在钱包系统这一层额外再记录一条包含交易类型的交易流水信息，而在底层的虚拟钱包系统中记录不包含交易类型的交易流水信息。如果一条钱包交易流水是支付，那他就会对应两条虚拟钱包交易流水（一个加，一个减）。但一条钱包交易流水记录只有一条虚拟钱包交易流水id，这个怎么操作？","like_count":0},{"had_liked":false,"id":170796,"user_name":"daniel","can_delete":false,"product_type":"c1","uid":1370456,"ip_address":"","ucode":"3516AF7F9A4DEA","user_header":"https://static001.geekbang.org/account/avatar/00/14/e9/58/397a4ab2.jpg","comment_is_top":false,"comment_ctime":1578723516,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578723516","product_id":100039001,"comment_content":"那么在客户端mvc的设计模式中，充血模式是不是应该在model里面添加数据逻辑代码，而不止getter和setter","like_count":0},{"had_liked":false,"id":169563,"user_name":"移动一下","can_delete":false,"product_type":"c1","uid":1034115,"ip_address":"","ucode":"9314E79C72A71E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c7/83/ca76b4f3.jpg","comment_is_top":false,"comment_ctime":1578380073,"is_pvip":false,"replies":[{"id":"65949","content":"后台补漏更好点。因为回滚也不一定能成功，也有可能会失败。","user_name":"作者回复","comment_id":169563,"uid":"1190123","ip_address":"","utype":1,"ctime":1578489306,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1578380073","product_id":100039001,"comment_content":"在给两个钱包加减金额的过程中，如果有任意一个操作失败，我们就将交易记录的状态标记为“失败”。这个时候是马上对其中一个成功操作做回滚，还是在后台补漏 Job中再处理好一些？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501400,"discussion_content":"没怎么看懂你的意思，你是说怎么注册观察者吗？调用setRegObservers函数来完成的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594781890,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1020311,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/91/97/3762ca10.jpg","nickname":"小情绪","note":"","ucode":"92D8081DB8DB45","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311700,"discussion_content":"这部分代码是需要自己写的，王争老师没有写出来，因为默认大家都会知道。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602466158,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169400,"user_name":"东流","can_delete":false,"product_type":"c1","uid":1738147,"ip_address":"","ucode":"2715BC6E87BD83","user_header":"https://static001.geekbang.org/account/avatar/00/1a/85/a3/7e078442.jpg","comment_is_top":false,"comment_ctime":1578326898,"is_pvip":false,"replies":[{"id":"65736","content":"是的，我改下，多谢提醒","user_name":"作者回复","comment_id":169400,"uid":"1190123","ip_address":"","utype":1,"ctime":1578379205,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1578326898","product_id":100039001,"comment_content":"service里面的getbalnce中virtualwalletRepo是不是写错了，应该还是walletRepo","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480541,"discussion_content":"是的，我改下，多谢提醒","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578379205,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169011,"user_name":"何领","can_delete":false,"product_type":"c1","uid":1240298,"ip_address":"","ucode":"F0F2B11CF5C9FA","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/ea/c33e5a3d.jpg","comment_is_top":false,"comment_ctime":1578237328,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578237328","product_id":100039001,"comment_content":"感觉这个领域对象有点像是对数据库的钱包实体加了一层装饰者","like_count":0},{"had_liked":false,"id":168496,"user_name":"STAND ALONE COMPLEX","can_delete":false,"product_type":"c1","uid":1595002,"ip_address":"","ucode":"2AC2F9B0A6D823","user_header":"https://static001.geekbang.org/account/avatar/00/18/56/7a/60c3d6a5.jpg","comment_is_top":false,"comment_ctime":1578100271,"is_pvip":false,"replies":[{"id":"65959","content":"service不需要频繁创建，但vo、bo、entity不也得频繁创建吗？","user_name":"作者回复","comment_id":168496,"uid":"1190123","ip_address":"","utype":1,"ctime":1578490373,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"1578100271","product_id":100039001,"comment_content":"看了这篇文章，有个问题，web开发如果采用领域设计模型，那么一些关键的逻辑会在domain中，service层调用domain的逻辑，请求过来，都要创建domain对象，关键逻辑的频繁调用，导致domain对象频繁创建，而如果把逻辑放到service中，由于是spring去管理的service，是单例的，不用频繁创建，而且service中没有成员变量，也不用考虑线程安全问题，所以，从这个角度来讲，贫血模式，要比充血模式好？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480232,"discussion_content":"service不需要频繁创建，但vo、bo、entity不也得频繁创建吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578490373,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1595002,"avatar":"https://static001.geekbang.org/account/avatar/00/18/56/7a/60c3d6a5.jpg","nickname":"STAND ALONE COMPLEX","note":"","ucode":"2AC2F9B0A6D823","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":126869,"discussion_content":"嗯，你说的有道理，要创建的对象很多，也不在乎多创建一个domian对象。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578545054,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":168228,"user_name":"那月真美","can_delete":false,"product_type":"c1","uid":1441895,"ip_address":"","ucode":"CEF1AF65C6064E","user_header":"https://static001.geekbang.org/account/avatar/00/16/00/67/e24dd940.jpg","comment_is_top":false,"comment_ctime":1578034808,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578034808","product_id":100039001,"comment_content":"transfer方法，充血模型没有充起来啊！其实也可以充起来，domain中抛异常，在service层中做事务控制即可","like_count":0},{"had_liked":false,"id":168113,"user_name":"wai","can_delete":false,"product_type":"c1","uid":1439529,"ip_address":"","ucode":"29CE3BE148FB79","user_header":"https://static001.geekbang.org/account/avatar/00/15/f7/29/60e01017.jpg","comment_is_top":false,"comment_ctime":1578015110,"is_pvip":false,"replies":[{"id":"65965","content":"是的，domain可以被service复用。命名参照业务模型来。","user_name":"作者回复","comment_id":168113,"uid":"1190123","ip_address":"","utype":1,"ctime":1578491040,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1578015110","product_id":100039001,"comment_content":"针对第一个辩证讨论的问题，老师说出的三条观点中的第二条 让领域模型更加可复用，能理解成一个Domain可能对应多个Service？那Domain的命名是不是得抽象一些？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480142,"discussion_content":"是的，domain可以被service复用。命名参照业务模型来。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578491040,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167332,"user_name":"张迪","can_delete":false,"product_type":"c1","uid":1104835,"ip_address":"","ucode":"6A5D44999A0FEA","user_header":"https://static001.geekbang.org/account/avatar/00/10/db/c3/e11adfe8.jpg","comment_is_top":false,"comment_ctime":1577766603,"is_pvip":false,"replies":[{"id":"65134","content":"😂 你具体讲讲？","user_name":"作者回复","comment_id":167332,"uid":"1190123","ip_address":"","utype":1,"ctime":1577946171,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"1577766603","product_id":100039001,"comment_content":"感觉你对DDD了解的不深","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479828,"discussion_content":"😂 你具体讲讲？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577946171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1242373,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f5/05/d6547381.jpg","nickname":"才才","note":"","ucode":"94D76106261987","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":200139,"discussion_content":"哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583660779,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167177,"user_name":"Jessica","can_delete":false,"product_type":"c1","uid":1084877,"ip_address":"","ucode":"9FC7E9BD3FE9F1","user_header":"https://static001.geekbang.org/account/avatar/00/10/8d/cd/b6bdc1b2.jpg","comment_is_top":false,"comment_ctime":1577708109,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577708109","product_id":100039001,"comment_content":"DDD架构中，还有一个很重要的概念是依赖倒置，即领域中的service层不直接依赖repository层，而是通过定义一个接口，service层调用这个接口，而不直接调用实现。这样后续真正的repository实现变了，领域层不需要做任何改变。","like_count":0},{"had_liked":false,"id":166770,"user_name":"迷羊","can_delete":false,"product_type":"c1","uid":1286251,"ip_address":"","ucode":"85AF8CED3436C8","user_header":"https://static001.geekbang.org/account/avatar/00/13/a0/6b/0a21b2b8.jpg","comment_is_top":false,"comment_ctime":1577590706,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577590706","product_id":100039001,"comment_content":"<br>一、使用贫血模型与充血模型开发的区别<br>贫血模型所有的业务都在Service类来完成，BO只用来定义数据，每次来一个新需求都需要在Service类中写。而充血模型一开始就在Domain类中设计好对应的业务逻辑和属性，不与别的Repository层、Controller层直接打交道，避免太耦合。相当于一个业务中间件一样，每次有新功能需要开发的时候，都基于定义好的Domain类来完成。<br><br>二、基于充血模型的DDD开发模式中Service类担当的职责是什么？<br>1.Service 类负责与 Repository 交流。充血模型不能直接与Repository打交道，因为要保持领域模型的独立性，不与任何其他层的代码（Repository 层的代码）或开发框架（比如 Spring、MyBatis）耦合在一起，将流程性的代码逻辑（比如从 DB 中取数据、映射数据）与领域模型的业务逻辑解耦，让领域模型更加可复用。<br>2.Service类负责跨领域模型的业务聚合功能，比如实战案例中的transfer()方法<br>3..Service 类负责一些非功能性及与三方系统交互的工作。比如幂等、事务、发邮件、发消息、记录日志、调用其他系统的 RPC 接口等，都可以放到 Service 类中。<br><br>三、Controller层和Repository层是否有必要也进行充血领域建模呢？<br>1.答案是没有必要。因为这两层包含的业务逻辑不多，如果设计成充血模型没有太大意义。<br>2.我们把PO传递到 Service 层之后，就会转化成 BO 或者 Domain 来继续后面的业务逻辑。Entity 的生命周期到此就结束了，所以也并不会被到处任意修改。<br>3.VO只是用来将数据发送给其他系统，主要作为接口的数据传输载体。从功能上来讲，它理应不包含业务逻辑、只包含数据。","like_count":0},{"had_liked":false,"id":166380,"user_name":"Geek_323c91","can_delete":false,"product_type":"c1","uid":1732683,"ip_address":"","ucode":"AE946A94605456","user_header":"","comment_is_top":false,"comment_ctime":1577439875,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577439875","product_id":100039001,"comment_content":"我的想法 是领域层 虚拟钱包BO  虚拟账户BO 然后都有各自的转账 记录流水 service负责组装实现业务功能就行了  所以 db操作 我也会放在领域层","like_count":0},{"had_liked":false,"id":165911,"user_name":"Sean","can_delete":false,"product_type":"c1","uid":1118217,"ip_address":"","ucode":"CAB27AFED91166","user_header":"https://static001.geekbang.org/account/avatar/00/11/10/09/ab005c4d.jpg","comment_is_top":false,"comment_ctime":1577344018,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577344018","product_id":100039001,"comment_content":"最开始时只是觉着建造者模式用起舒服,后来偷懒顺便处理了下业务逻辑,再后来别人告诉这是DDD.我的Builder去哪了?<br>钱塘江上潮信来，今日方知我是我","like_count":0},{"had_liked":false,"id":165889,"user_name":"我太难了","can_delete":false,"product_type":"c1","uid":1731602,"ip_address":"","ucode":"B80133799A4494","user_header":"https://static001.geekbang.org/account/avatar/00/1a/6c/12/67bcce50.jpg","comment_is_top":false,"comment_ctime":1577340833,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577340833","product_id":100039001,"comment_content":"两种模式下的 19&#47;41 行 virtualWalletRepo 是不是有问题？","like_count":0},{"had_liked":false,"id":164947,"user_name":"花颜","can_delete":false,"product_type":"c1","uid":1096871,"ip_address":"","ucode":"77AAE0CBA75439","user_header":"https://static001.geekbang.org/account/avatar/00/10/bc/a7/d36843c9.jpg","comment_is_top":false,"comment_ctime":1577115166,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577115166","product_id":100039001,"comment_content":"老师，这两节课主要是讲后端业务开发模型，虽然我能看懂，但是我是一个前端开发，可以有针对前端流程的面向对象讲解么？这样才能应用于我的实际开发中","like_count":0},{"had_liked":false,"id":164670,"user_name":"饭太司替可","can_delete":false,"product_type":"c1","uid":1171829,"ip_address":"","ucode":"9A47FCA16199B0","user_header":"https://static001.geekbang.org/account/avatar/00/11/e1/75/bbdf9052.jpg","comment_is_top":false,"comment_ctime":1577069534,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577069534","product_id":100039001,"comment_content":"贫血与充血的区别就是充血的时候会变硬。","like_count":0},{"had_liked":false,"id":164553,"user_name":"tuyu","can_delete":false,"product_type":"c1","uid":1448863,"ip_address":"","ucode":"B235325B541408","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/BIRpwViaN51yynIeFonD7QRlwDCVtKibrG956NTxzEqibOZZVjhMMgibOPmd3VicfYxpknZsic1oJq8KicZvXkmmiajuQg/132","comment_is_top":false,"comment_ctime":1577026483,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577026483","product_id":100039001,"comment_content":"老师, 我写过java, 我懂你的意思, 但是我最近写python, django框架的orm很方便, 现在很多应该吧你所说的bo写在entity类里面(django框架), 也许python本来不是面向对象语言, 学的有点强迫症","like_count":0},{"had_liked":false,"id":164544,"user_name":"tuyu","can_delete":false,"product_type":"c1","uid":1448863,"ip_address":"","ucode":"B235325B541408","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/BIRpwViaN51yynIeFonD7QRlwDCVtKibrG956NTxzEqibOZZVjhMMgibOPmd3VicfYxpknZsic1oJq8KicZvXkmmiajuQg/132","comment_is_top":false,"comment_ctime":1577024936,"is_pvip":false,"replies":[{"id":"65139","content":"后面36讲会详细讲到","user_name":"作者回复","comment_id":164544,"uid":"1190123","ip_address":"","utype":1,"ctime":1577949691,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1577024936","product_id":100039001,"comment_content":"老师, 以前写算法, 程序都是如果不符合条件都会返回null, 是不是写业务逻辑, 如果不符合调节抛出异常比较好, 能不能简单介绍一下","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478809,"discussion_content":"后面36讲会详细讲到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577949691,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163597,"user_name":"饭太司替可","can_delete":false,"product_type":"c1","uid":1171829,"ip_address":"","ucode":"9A47FCA16199B0","user_header":"https://static001.geekbang.org/account/avatar/00/11/e1/75/bbdf9052.jpg","comment_is_top":false,"comment_ctime":1576753361,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576753361","product_id":100039001,"comment_content":"对于充血模式，Domain里放一些跟该Domain联系紧密的业务逻辑，Service留着处理一些与其它层的交互。","like_count":0},{"had_liked":false,"id":163592,"user_name":"岁月","can_delete":false,"product_type":"c1","uid":1337598,"ip_address":"","ucode":"29A2A2BC3C4FE4","user_header":"https://static001.geekbang.org/account/avatar/00/14/68/fe/1353168d.jpg","comment_is_top":false,"comment_ctime":1576751525,"is_pvip":false,"replies":[{"id":"62261","content":"可以不恢复 直接标记报错 后台job做补偿","user_name":"作者回复","comment_id":163592,"uid":"1190123","ip_address":"","utype":1,"ctime":1576796671,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1576751525","product_id":100039001,"comment_content":"有个问题没看明白, 事务一致性问题, 如果写入一条流水表示转账等待执行, 那么开始加减余额的时候, 如果加成功,减失败, 那不还是一样需要重新去把加的操作恢复吗? 恢复的过程又可能出错了, 所以没有原子操作的话这个做不了呀? ","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478466,"discussion_content":"可以不恢复 直接标记报错 后台job做补偿","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576796671,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163483,"user_name":"luke","can_delete":false,"product_type":"c1","uid":1057643,"ip_address":"","ucode":"1D26F3F31CC435","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/pCVwNYT22UX6XAXJ5XLmbSHRmuPIncaJkS7S6kUKe0C8qWURib8zOhHTPwR36FeZZ4BcnKuDia4nrekqDnAkxdJQ/132","comment_is_top":false,"comment_ctime":1576730070,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576730070","product_id":100039001,"comment_content":"领域模型类其实是有状态的，是不是还要考虑线程安全问题？","like_count":0},{"had_liked":false,"id":163297,"user_name":"花花大脸猫","can_delete":false,"product_type":"c1","uid":1117318,"ip_address":"","ucode":"8ABDB3F7F4FB0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0c/86/8e52afb8.jpg","comment_is_top":false,"comment_ctime":1576681821,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1576681821","product_id":100039001,"comment_content":"豁然开朗！！","like_count":0},{"had_liked":false,"id":163160,"user_name":"小妖","can_delete":false,"product_type":"c1","uid":1730626,"ip_address":"","ucode":"49C01DBFADF101","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJvm1JYIDcS74s4cEYxA1PXMqjortVXEjUKyGQcPvibNJ4EAuksIa6uoHgr6G1yRqAM2KtP3yicKgTA/132","comment_is_top":false,"comment_ctime":1576664584,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576664584","product_id":100039001,"comment_content":"关于示例中的表的设计是不是有点问题？感觉最后的虚拟钱包流水和讲解的理论有偏差，另外感觉单纯那么设计没法实现所谓的业务控制","like_count":0},{"had_liked":false,"id":163120,"user_name":"冬渐暖","can_delete":false,"product_type":"c1","uid":1586800,"ip_address":"","ucode":"907E41AAE9A36C","user_header":"https://static001.geekbang.org/account/avatar/00/18/36/70/00122b24.jpg","comment_is_top":false,"comment_ctime":1576659608,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576659608","product_id":100039001,"comment_content":"service层只是处理dao，以及类与类之间的关系，而不是类本身的动作。<br>","like_count":0},{"had_liked":false,"id":162645,"user_name":"爱吃面包的西门吹雪","can_delete":false,"product_type":"c1","uid":1204315,"ip_address":"","ucode":"8CF3AD92617359","user_header":"https://static001.geekbang.org/account/avatar/00/12/60/5b/616dbaa3.jpg","comment_is_top":false,"comment_ctime":1576572112,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1576572112","product_id":100039001,"comment_content":"有木有大佬可以解答我的一个疑问，在DDD中，domain可以有多态的表现形式么，例如订单，根据其来源渠道不同，其下单业务操作各有不同","like_count":0},{"had_liked":false,"id":161859,"user_name":"王加武","can_delete":false,"product_type":"c1","uid":1665471,"ip_address":"","ucode":"DDCFE578C6C428","user_header":"https://static001.geekbang.org/account/avatar/00/19/69/bf/50a824a4.jpg","comment_is_top":false,"comment_ctime":1576380852,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576380852","product_id":100039001,"comment_content":"今年大二，说实话，贫血模型和充血模型在理论上是不难理解，但是代码上就稍微有点难理解，也许是因为我缺乏项目经验的原因，这一节我打算自己使用贫血模型来实现一下老师所讲的钱包系统，对于DDD开发模式，我想对于现在的我来说有个理论上的认知以及知道它们是怎么一回事就行了，老师能否给点意见呢？","like_count":0},{"had_liked":false,"id":161698,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1015754,"ip_address":"","ucode":"00DF2FEC58D2E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","comment_is_top":false,"comment_ctime":1576300637,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576300637","product_id":100039001,"comment_content":"文中的代码和表的设计没有关系吧，只是对钱包本身的crud","like_count":0},{"had_liked":false,"id":161516,"user_name":"wl","can_delete":false,"product_type":"c1","uid":1392730,"ip_address":"","ucode":"45062AA2460F1F","user_header":"https://static001.geekbang.org/account/avatar/00/15/40/5a/e65e8c40.jpg","comment_is_top":false,"comment_ctime":1576220801,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1576220801","product_id":100039001,"comment_content":"老师，我是学习前端的，没有写过 Java，看到老师的代码中定义的一些类没有用到，还有些字段是没有出处的，看起来特别费解，比如 VirtualWalletService 中有个 getVirtualWallet 的方法，这个是在 VirtualWalletService 实例上使用的吗？还有 getBalance 中的 virtualWalletRepo 这个字段，找了好久也没有找到，照道理来说，getBalance 不是应该和 debit 中获取 balance 的方式一样，是通过 walletEntity.getBalance() 获取的吗？老师能不能稍微解释下？<br><br>还有，虽然有些疑惑，但是我反复看了好几遍，发现贫血模型和充血模型的差别在于，贫血模型的方式在处理钱包操作（查看余额、支付等）时还夹杂了其他操作，看起来很费劲，都不知道在做些什么；充血模型在 Domain 类中定义了所有与钱包相关的属性和方法，没有其他操作，一目了然。不知道理解的对不对。","like_count":0},{"had_liked":false,"id":160065,"user_name":"Geek_ecf7bb","can_delete":false,"product_type":"c1","uid":1523207,"ip_address":"","ucode":"5BF4DD62425BE0","user_header":"https://static001.geekbang.org/account/avatar/00/17/3e/07/c27b53b8.jpg","comment_is_top":false,"comment_ctime":1575862636,"is_pvip":false,"replies":[{"id":"61123","content":"嗯嗯，关注https:&#47;&#47;github.com&#47;wangzheng0822，我更新到上面","user_name":"作者回复","comment_id":160065,"uid":"1190123","ip_address":"","utype":1,"ctime":1575895728,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1575862636","product_id":100039001,"comment_content":"有些理解充血的模式，不过还是希望能尽快看到老师更加完整的示例代码，期待老师的Github更新，谢谢老师~","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477247,"discussion_content":"嗯嗯，关注https://github.com/wangzheng0822，我更新到上面","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575895728,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159527,"user_name":"thewangzl","can_delete":false,"product_type":"c1","uid":1006661,"ip_address":"","ucode":"5968FDED0C5AC8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/45/2fa66e67.jpg","comment_is_top":false,"comment_ctime":1575647845,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1575647845","product_id":100039001,"comment_content":"如果瞬间发生两笔转账，账户余额是不是就不对了，应该怎么处理比较友好？","like_count":0,"discussions":[{"author":{"id":1142739,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6f/d3/4384a4e5.jpg","nickname":"莫念","note":"","ucode":"4C079403645BBF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":403563,"discussion_content":"为啥","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634109400,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159051,"user_name":"1620","can_delete":false,"product_type":"c1","uid":1104310,"ip_address":"","ucode":"C9222A5CE4723C","user_header":"https://static001.geekbang.org/account/avatar/00/10/d9/b6/4c498c17.jpg","comment_is_top":false,"comment_ctime":1575525657,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575525657","product_id":100039001,"comment_content":"如果你的对象是一些常规的记录且加入时间轴来思考后续对象也不会有很多细粒度规则操作，那么不要纠结了 直接贫血模型 。","like_count":0,"discussions":[{"author":{"id":1543162,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8b/fa/103e6900.jpg","nickname":"山鬼谣","note":"","ucode":"E25F498B85A01B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551375,"discussion_content":"类或对象，不是类和对象，含义都变了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645001540,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159007,"user_name":"每天一点点","can_delete":false,"product_type":"c1","uid":1106238,"ip_address":"","ucode":"B4DFDA3200B452","user_header":"https://static001.geekbang.org/account/avatar/00/10/e1/3e/a617ae38.jpg","comment_is_top":false,"comment_ctime":1575514303,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575514303","product_id":100039001,"comment_content":"DDD应用的场景是不是多人协作开发,若操作转账这样的关键代码用贫血模式开发的话，每个人都有编写代码的权限，就有可能造成修改者对业务逻辑的不了解产生不必要的风险，若用充血模式的话可以把转账等关键代码放入BO 的 domain 中然后以jar 包的形式提供出去，service 调用只能使用 getBalance 的方式修改余额，但是 getBalance 的逻辑是在 domain 中有熟悉业务的人维护，这样可以避免出错的概率，这样理解对么？","like_count":0},{"had_liked":false,"id":159005,"user_name":"每天一点点","can_delete":false,"product_type":"c1","uid":1106238,"ip_address":"","ucode":"B4DFDA3200B452","user_header":"https://static001.geekbang.org/account/avatar/00/10/e1/3e/a617ae38.jpg","comment_is_top":false,"comment_ctime":1575513510,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575513510","product_id":100039001,"comment_content":"我还是没有领会到 DDD 的精髓，目前看放入 domain 的的代码逻辑其实是可以放入 service 中的一个private方法中，ddd 的设计理念还是没有被点通，也有可能是我开发的业务比较简单，理解不到复杂的场景","like_count":0},{"had_liked":false,"id":158915,"user_name":"筱乐乐哦","can_delete":false,"product_type":"c1","uid":1307611,"ip_address":"","ucode":"AE92539F0419C3","user_header":"https://static001.geekbang.org/account/avatar/00/13/f3/db/5b7a8fd8.jpg","comment_is_top":false,"comment_ctime":1575480041,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575480041","product_id":100039001,"comment_content":"同意老师的看法，在实际的开发中，service层的功能一般都是整合多个实体的数据交互和业务逻辑，就算按照充血模型写，由于的实际的业务需求，Domain的实现也会很简单，完全没有必要，这也就导致了，大部分的代码都是贫血模型的，我是这么理解的，如果有不对，欢迎指出","like_count":0},{"had_liked":false,"id":158775,"user_name":"堵车","can_delete":false,"product_type":"c1","uid":1145404,"ip_address":"","ucode":"7BC1E50A4F8D3D","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/3c/87e015f8.jpg","comment_is_top":false,"comment_ctime":1575449172,"is_pvip":false,"replies":[{"id":"61144","content":"继续拆分成更细粒度的domain","user_name":"作者回复","comment_id":158775,"uid":"1190123","ip_address":"","utype":1,"ctime":1575897836,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1575449172","product_id":100039001,"comment_content":"业务复杂后，domain很大。怎么处理比较好？","like_count":0},{"had_liked":false,"id":158429,"user_name":"fmouse","can_delete":false,"product_type":"c1","uid":1202325,"ip_address":"","ucode":"9A8858CFFAB858","user_header":"https://static001.geekbang.org/account/avatar/00/12/58/95/640b6465.jpg","comment_is_top":false,"comment_ctime":1575369018,"is_pvip":false,"replies":[{"id":"60684","content":"我个人觉得controller层负责接口暴露 数据的封装 解析。service层包含主要业务。至于你说的臃肿 可以在service继续模块化","user_name":"作者回复","comment_id":158429,"uid":"1190123","ip_address":"","utype":1,"ctime":1575424052,"user_name_real":"王争"}],"discussion_count":0,"race_medal":2,"score":"1575369018","product_id":100039001,"comment_content":"这两节课中提出的一些问题，我们在讨论DDD的时候遇到了同样的问题。如果涉及到多领域的业务，放在service层，Controller层只暴露接口不做业务吗。还有业务比较复杂的时候，service层会过于臃肿庞大。业务关系比较复杂的情况下，如何来划分界限，或者说是领域。","like_count":0},{"had_liked":false,"id":158232,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1575354444,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575354444","product_id":100039001,"comment_content":"充血和贫血模型的最大区别在于应用逻辑和是否和数据绑定在一起，还是对象和过程的区别。绑定是否值得需要具体分析。领域类封装了数据，外部只看到函数，隐藏了信息，让类更加内聚，类内的一致性也更容易保持。但是，这样的类包含了很多业务逻辑，容易被将来的业务修改所冲击，而且也容易让类过于庞大。","like_count":0},{"had_liked":false,"id":158211,"user_name":"牧名","can_delete":false,"product_type":"c1","uid":1020390,"ip_address":"","ucode":"193F0F33E1AB47","user_header":"https://static001.geekbang.org/account/avatar/00/0f/91/e6/03582dee.jpg","comment_is_top":false,"comment_ctime":1575350216,"is_pvip":false,"replies":[{"id":"60692","content":"是有这个问题 我改下","user_name":"作者回复","comment_id":158211,"uid":"1190123","ip_address":"","utype":1,"ctime":1575424827,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1575350216","product_id":100039001,"comment_content":"虽然这节课的重点不是讲转帐功能，但转帐的交易流水设计存在一个问题：比如转帐失败后，单从交易流水记录上看只知道转账失败了，却不知道到底是出帐钱包扣款失败还是入帐钱包收款失败。","like_count":0,"discussions":[{"author":{"id":1238436,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e5/a4/e16dca6a.jpg","nickname":"阿凯文","note":"","ucode":"F17CF201E74849","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288327,"discussion_content":"其实在这里只要regObservers打上@AutoWired，spring容器就会把注册了的bean（所有实现了RegObserver接口的类）注入进来的，都用不着set方法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593713508,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158163,"user_name":"塔兹米","can_delete":false,"product_type":"c1","uid":1425252,"ip_address":"","ucode":"1A58C81EF9B0A4","user_header":"https://static001.geekbang.org/account/avatar/00/15/bf/64/c9a0e913.jpg","comment_is_top":false,"comment_ctime":1575340909,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575340909","product_id":100039001,"comment_content":"打卡！<br>在MVC中，controller层和repository层其实都是对数据进行正确的读取和写入与按需求的暴露自己的数据。业务的逻辑都写在service层，DDD的目的在于把service层再抽象一次。把业务核心逻辑都抽取成domian类。service就主要负责与repository层和controller层的沟通上了。","like_count":0},{"had_liked":false,"id":157971,"user_name":"BADTZ-MARU 🍪","can_delete":false,"product_type":"c1","uid":1325267,"ip_address":"","ucode":"358FAA1C9F5721","user_header":"https://static001.geekbang.org/account/avatar/00/14/38/d3/07585dc8.jpg","comment_is_top":false,"comment_ctime":1575291507,"is_pvip":false,"replies":[{"id":"60693","content":"是有这个问题 我改下","user_name":"作者回复","comment_id":157971,"uid":"1190123","ip_address":"","utype":1,"ctime":1575424867,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"1575291507","product_id":100039001,"comment_content":"有点疑问，如果虚拟钱包系统只关注加减的话，日志不还是两条，如何保证一致性？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476600,"discussion_content":"是有这个问题 我改下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575424867,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1309877,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/RNO4yZyBvic914hewmNNE8iblYDcfv5yGHZ9OnKuCuZXNmGR0F5qV3icKLT2xpMt66GyEpicZVvrmz8A6TIqt92MQg/132","nickname":"啊啊啊哦哦","note":"","ucode":"68C7153ECAAC57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70255,"discussion_content":"我感觉支付的时候  用户减的一条  商家加的 一条  总的一条 是3条。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575338442,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157954,"user_name":"宝宝太喜欢极客时间了","can_delete":false,"product_type":"c1","uid":1215152,"ip_address":"","ucode":"9CDB679C257612","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoOGZ6lbHiboIZMN9USbeutnmCWBahVLtSlKlIENKvrZQCUQzpzeZQOxTntIkBUeDk6qZUPdqmfKrQ/132","comment_is_top":false,"comment_ctime":1575289479,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575289479","product_id":100039001,"comment_content":"“对于支付这样的类似转账的操作，我们在操作两个钱包账户余额之前，先记录交易流水，并且标记为“待执行”，当两个钱包的加减金额都完成之后，我们再回过头来，将交易流水标记为“成功”。在给两个钱包加减金额的过程中，如果有任意一个操作失败，我们就将交易记录的状态标记为“失败”。我们通过后台补漏 Job，拉取状态为“失败”或者长时间处于“待执行”状态的交易记录，重新执行或者人工介入处理“  这里还是不明白怎么保持一致性","like_count":0},{"had_liked":false,"id":157952,"user_name":"随心而至","can_delete":false,"product_type":"c1","uid":1097836,"ip_address":"","ucode":"31866865255101","user_header":"https://static001.geekbang.org/account/avatar/00/10/c0/6c/29be1864.jpg","comment_is_top":false,"comment_ctime":1575289203,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575289203","product_id":100039001,"comment_content":"看着挺简单，为了活学活用，等老师更新代码了就去实操一下。","like_count":0},{"had_liked":false,"id":157803,"user_name":"grey927","can_delete":false,"product_type":"c1","uid":1202782,"ip_address":"","ucode":"833E02ED835B4A","user_header":"https://static001.geekbang.org/account/avatar/00/12/5a/5e/a897cb0d.jpg","comment_is_top":false,"comment_ctime":1575261900,"is_pvip":false,"replies":[{"id":"60689","content":"是的 贫血就够了","user_name":"作者回复","comment_id":157803,"uid":"1190123","ip_address":"","utype":1,"ctime":1575424684,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1575261900","product_id":100039001,"comment_content":"如果是简单的增删改查附加一点点判断逻辑的操作，是不是不太适合用充血模型","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476535,"discussion_content":"是的 贫血就够了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575424684,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157800,"user_name":"DullBird","can_delete":false,"product_type":"c1","uid":1110494,"ip_address":"","ucode":"80E2FD5F9687CB","user_header":"https://static001.geekbang.org/account/avatar/00/10/f1/de/3ebcbb3f.jpg","comment_is_top":false,"comment_ctime":1575261466,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575261466","product_id":100039001,"comment_content":"1. 看完文章理解了之前的一个疑惑点。之前一直疑惑Domain模型，一定要自己去和数据库打交道，并且只能访问自己管理的数据。<br>学习到了service可以控制操作db。这样让Domain模型更加干净，简洁。<br>2. 之前做OOP设计的时候，会被业务必须要，而模型不应该有的场景所困扰，最后做出的决定都是模型加上好了，再外面调用方再弄一遍不就重复了么。学习了今天的知识，得到一个很大的启发是要识别清楚哪些是模型应该有的&quot;职责&quot;，哪些是业务的东西，就算有时候要多写点代码，但是要合理的分离这两个内容。 ","like_count":0},{"had_liked":false,"id":157711,"user_name":"胡家鹏","can_delete":false,"product_type":"c1","uid":1109940,"ip_address":"","ucode":"1636F84062948B","user_header":"https://static001.geekbang.org/account/avatar/00/10/ef/b4/61fb4dba.jpg","comment_is_top":false,"comment_ctime":1575249469,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575249469","product_id":100039001,"comment_content":"老师您好，我想了解下对这种转账，涉及到多个数据库操作，是用什么保持原子性的？如果是全局锁肯定会影响性能。","like_count":0},{"had_liked":false,"id":157601,"user_name":"Joanfen","can_delete":false,"product_type":"c1","uid":1004260,"ip_address":"","ucode":"4CF1B92337B625","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/e4/50600574.jpg","comment_is_top":false,"comment_ctime":1575209917,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575209917","product_id":100039001,"comment_content":"一开始使用充血模型经常会把方法放错地方，其实还是没有理解到底是哪层需要充血，真正理解了每层架构具体要做什么一切都和贫血模式时一样自然了","like_count":0},{"had_liked":false,"id":157523,"user_name":"LJK","can_delete":false,"product_type":"c1","uid":1199213,"ip_address":"","ucode":"12B2441099FF1D","user_header":"https://static001.geekbang.org/account/avatar/00/12/4c/6d/c20f2d5a.jpg","comment_is_top":false,"comment_ctime":1575185363,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1575185363","product_id":100039001,"comment_content":"&quot;就拿 Repository 的 Entity 来说，即便它被设计成贫血模型，违反面相对象编程的封装特性，有被任意代码修改数据的风险&quot;，哪位大神可以给举个简单例子解释一下为什么会有这个风险么？感谢！","like_count":0,"discussions":[{"author":{"id":1153455,"avatar":"https://static001.geekbang.org/account/avatar/00/11/99/af/d29273e2.jpg","nickname":"饭粒","note":"","ucode":"4C3220B0D43997","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70272,"discussion_content":"这个前面好像讲过，Entity 一些字段暴露一些并不需要的 public getter/setter 方法，比如 余额 balance 字段，正常应该是只用相应的业务（充值，支付等）触发才能改变余额，但是由于 setter 的存在，其他地方可通过这个入口随意改。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575340612,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1199213,"avatar":"https://static001.geekbang.org/account/avatar/00/12/4c/6d/c20f2d5a.jpg","nickname":"LJK","note":"","ucode":"12B2441099FF1D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1153455,"avatar":"https://static001.geekbang.org/account/avatar/00/11/99/af/d29273e2.jpg","nickname":"饭粒","note":"","ucode":"4C3220B0D43997","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70419,"discussion_content":"明白了，非常感谢～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575355002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":70272,"ip_address":""},"score":70419,"extra":""}]}]},{"had_liked":false,"id":157396,"user_name":"风行者","can_delete":false,"product_type":"c1","uid":1541934,"ip_address":"","ucode":"F058640CF77A35","user_header":"https://static001.geekbang.org/account/avatar/00/17/87/2e/ea54c240.jpg","comment_is_top":false,"comment_ctime":1575130719,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575130719","product_id":100039001,"comment_content":"打卡，可能还是有些疑惑，1.实体，领域模型，vo是否能够重用呢？2.领域模型的作用在于能够让更好的理解业务，如果只是数据增删改查是否太过简单，为何就不能进行业务聚合和调用dao操作数据库呢。我理解的领域模型应该是结合了entity和service层，以往贫血service层抛弃掉","like_count":0},{"had_liked":false,"id":157383,"user_name":"平风造雨","can_delete":false,"product_type":"c1","uid":1014349,"ip_address":"","ucode":"F9EE4704F31E22","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7a/4d/b0228a1a.jpg","comment_is_top":false,"comment_ctime":1575127047,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575127047","product_id":100039001,"comment_content":"充血模型提供了核心业务和非核心业务的分离，比如领域模型专注业务的描述，service层作为容器承担业务运行环境，比如访问db，读取外部存储，调用外部服务，所以业务越复杂，越需要详细的领域模型划分，以及隔离service提供的环境，进而方便后续的单元测试，功能扩展。","like_count":0},{"had_liked":false,"id":157378,"user_name":"王盛武","can_delete":false,"product_type":"c1","uid":1182516,"ip_address":"","ucode":"DE7EF246D3DCE8","user_header":"https://static001.geekbang.org/account/avatar/00/12/0b/34/f41d73a4.jpg","comment_is_top":false,"comment_ctime":1575125755,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575125755","product_id":100039001,"comment_content":"两张表记录两条，为了充血，感觉不是特别必要","like_count":0},{"had_liked":false,"id":157354,"user_name":"搞怪者😘 😒 😏 👿","can_delete":false,"product_type":"c1","uid":1300678,"ip_address":"","ucode":"40DFF5D3E3B24C","user_header":"https://static001.geekbang.org/account/avatar/00/13/d8/c6/2b2a58cf.jpg","comment_is_top":false,"comment_ctime":1575119201,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1575119201","product_id":100039001,"comment_content":"PHP也可以使用这个吗，PHP的框架感觉和这个不太一样","like_count":0,"discussions":[{"author":{"id":1286435,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a1/23/2b527dc4.jpg","nickname":"逐风随想","note":"","ucode":"A91C191EE82FCA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":158938,"discussion_content":"作者回复： 设计模式落实到具体的编程语言代码实现的时候，必然有个适配的过程，没法保证每种语言的实现思路都一模一样。Java是一种静态语言，那一些设计模式实现从Java搬到静态语言，比如C# C++是相对比较容易的，但是搬到动态语言，比如PHP，可能就要做些调整。同理，面向过程、面向对象、函数式编程中，设计模式也都有不同的实现方式。\n编程语言有自成一体的设计，会阉割掉很多它觉得不重要的语法，加强它看重的语法，这就导致有些设计思想、原则、模式，并不能很容易地在这种语言下实现。\nPHP更多的偏向网站开发，而且像facebook 用php可能更偏向于网站后端中的前端部分的开发。从应用场景上来说 可能面向过程更合适些，而设计模式的应用场景更多的是面向对象的设计，这也是为什么 《设计模式》一书的副标题提到面向对象的原因。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580640903,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157347,"user_name":"Yo nací para quererte.","can_delete":false,"product_type":"c1","uid":1664572,"ip_address":"","ucode":"8B6E9B8B3D007C","user_header":"https://static001.geekbang.org/account/avatar/00/19/66/3c/2d563488.jpg","comment_is_top":false,"comment_ctime":1575115172,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575115172","product_id":100039001,"comment_content":"有一个问题，在VirtualWalletService类中为什么要提供一个public的getVirtualWallet接口","like_count":0},{"had_liked":false,"id":157342,"user_name":"逍遥思","can_delete":false,"product_type":"c1","uid":1015512,"ip_address":"","ucode":"340F05C786730F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/d8/92a98fb6.jpg","comment_is_top":false,"comment_ctime":1575114463,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575114463","product_id":100039001,"comment_content":"DDD就是面相对象编程的具体实践，对于简单业务，用不用都行，业务越复杂，使用DDD的价值越高。<br>我目前连三层结构都没用上，直接转DDD是盲目的，但知道了DDD，就会有意识地在写新代码时思考相关架构，这个是期望，也可能在业务压力下就忘得干干净净😂","like_count":0},{"had_liked":false,"id":157338,"user_name":"Uncle.Wang","can_delete":false,"product_type":"c1","uid":1456955,"ip_address":"","ucode":"9A4F646CFC237F","user_header":"https://static001.geekbang.org/account/avatar/00/16/3b/3b/b8c00291.jpg","comment_is_top":false,"comment_ctime":1575113269,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575113269","product_id":100039001,"comment_content":"增加类图展示应该能更容易理解。","like_count":0},{"had_liked":false,"id":157317,"user_name":"奔跑的小孩","can_delete":false,"product_type":"c1","uid":1304259,"ip_address":"","ucode":"0053193F7A9870","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/21uTMWr7bx5qMibp2hwmGvLbYuj5Aic2dqD3futlNo25eDGDt4t7zzN9cdnj7cVGwTot1U4AyADfWUpqjq1SicgWQ/132","comment_is_top":false,"comment_ctime":1575107186,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575107186","product_id":100039001,"comment_content":"如果数据库交互的对象、和返回前端的vo使用贫血模式开发，那么就是在处理具体的业务逻辑时创建类使用创建领域模型对象，这样不是会导致类太多了吗","like_count":0},{"had_liked":false,"id":157310,"user_name":"Yo nací para quererte.","can_delete":false,"product_type":"c1","uid":1664572,"ip_address":"","ucode":"8B6E9B8B3D007C","user_header":"https://static001.geekbang.org/account/avatar/00/19/66/3c/2d563488.jpg","comment_is_top":false,"comment_ctime":1575106299,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575106299","product_id":100039001,"comment_content":"支付的过程感觉有些问题：<br>1.若商家和用户用同一虚拟平台的话，应该是用户虚拟钱包账户划钱到商家虚拟钱包账户，公共银行卡账户不需要转到商家银行卡<br>2.若商家和用户用不同虚拟平台的话，应该是用户虚拟钱包扣除金额，公共银行卡账户转到商家银行卡","like_count":0},{"had_liked":false,"id":157285,"user_name":"小喵喵","can_delete":false,"product_type":"c1","uid":1062444,"ip_address":"","ucode":"FDBBB2A59DB8B6","user_header":"https://static001.geekbang.org/account/avatar/00/10/36/2c/8bd4be3a.jpg","comment_is_top":false,"comment_ctime":1575102814,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575102814","product_id":100039001,"comment_content":"Domain是充血模式，除了拥有Entity类的属性，还拥有实现了业务逻辑的方法，看起来显得胖多了，所以充血了。失血模型刚好相反，比如实体（Entity）类一般只有属性，Repository只有与数据库打交道的方法。这样子看起来瘦多了，也就是指责单一了，所以失血了。不知道理解的对不对，期待老师回复。","like_count":0},{"had_liked":false,"id":157271,"user_name":"heyman","can_delete":false,"product_type":"c1","uid":1173894,"ip_address":"","ucode":"92EF9EF1B1B1B3","user_header":"https://static001.geekbang.org/account/avatar/00/11/e9/86/d34800a4.jpg","comment_is_top":false,"comment_ctime":1575100981,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575100981","product_id":100039001,"comment_content":"老师，请问贫血模式的MVC代码是使用什么框架写的？","like_count":0},{"had_liked":false,"id":157238,"user_name":"陈迎春","can_delete":false,"product_type":"c1","uid":1443663,"ip_address":"","ucode":"2870BA6D6E5B1E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIang00R9vkklnkFCLhzRysNfocr0sLnCdoZwOT3UkulAPefk5BDvd0PfIeQSODSQg1DjKWUmJOaA/132","comment_is_top":false,"comment_ctime":1575094504,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575094504","product_id":100039001,"comment_content":"做嵌入式C&#47;C++开发的表示，立即MVC的贫血和充血模型都有点费劲，感觉项目中没有用到过这个MVC开发模式","like_count":0},{"had_liked":false,"id":157237,"user_name":"Y","can_delete":false,"product_type":"c1","uid":1108914,"ip_address":"","ucode":"120EA837663A9F","user_header":"https://static001.geekbang.org/account/avatar/00/10/eb/b2/d2133ee6.jpg","comment_is_top":false,"comment_ctime":1575094139,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575094139","product_id":100039001,"comment_content":"请问老师，您举的这个例子，在 domain 类（也就是 VirtualWallet 类）的内部方法中，是不需要调用到别的 domain 类的方法的。那如果业务逻辑更加复杂了，VirtualWallet 类中的方法中的一些业务逻辑，需要调用到别的 domain 提供的方法，怎么办？不允许这种操作，必须在 service 层里面进行？","like_count":0},{"had_liked":false,"id":157225,"user_name":"join","can_delete":false,"product_type":"c1","uid":1130132,"ip_address":"","ucode":"C097D89F7BA3EF","user_header":"https://static001.geekbang.org/account/avatar/00/11/3e/94/c6460883.jpg","comment_is_top":false,"comment_ctime":1575088934,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575088934","product_id":100039001,"comment_content":"看到这里，感觉才真正理解充血模型的作用：<br><br>    真正的业务逻辑都放在充血的领域对象中，与具体使用什么框架（比如Spring，MyBatis），具体使用什么数据库无关。这样有利于保护领域对象中的数据，比如钱包中的余额，当有入账和出账操作时，余额在领域对象中自动执行加减操作，而不是将余额暴露在Service中直接操作（这样很容易出错可能导致帐不平衡，余额应该封装保护起来），当然“余额自动增减”这只是一个简单的业务逻辑例子，业务逻辑越复杂就越应该封装到领域对象中。<br><br>1. Service层只是一个中间层，起到连接和组合作用。<br>用于支持领域模型层和Repository层的交互（连接作用），利用各种领域对象执行业务逻辑（组合作用）。<br>比如通过Repository查出数据，将数据转换为领域模型对象，利用领域模型对象执行业务逻辑（核心），然后调用Repository更新领域模型中的数据。<br><br>2. Service类还负责一些非功能性及与三方系统交互的工作。<br>比如幂等、事务、发邮件、发消息、记录日志、调用其他系统的 RPC 接口等。<br><br>    不允许Service中的逻辑过于复杂，如果Service中的组合的业务逻辑过于复杂，我们就要将这业务逻辑抽取出一个新的领域对象进行封装，通过调用这个领域对象来进行这些复杂的操作。<br><br>    由于controller和Repository层中本身没有什么业务逻辑，controller中的Vo对象实际上只是传输数据使用（数据从系统传输数据到外部调用方），Repository中的Entity本质上也只是传输数据（数据从数据库中传输数据到系统），所以用贫血模型不会带来副作用，是没有问题的。<br>","like_count":0},{"had_liked":false,"id":157216,"user_name":"安静的boy","can_delete":false,"product_type":"c1","uid":1196475,"ip_address":"","ucode":"F5F44B75228A85","user_header":"https://static001.geekbang.org/account/avatar/00/12/41/bb/21ce60d2.jpg","comment_is_top":false,"comment_ctime":1575084843,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575084843","product_id":100039001,"comment_content":"又看了一遍，感觉我在理解上又深了一点。基于充血模型的开发方式将针对domain的通用业务逻辑放在domain中更利于复用，而基于贫血模型的开发方式将domain的通用业务逻辑以及一些流程性、与第三方系统打交道等非通用代码都整合在一起是不利于复用的。在业务简单的情况下，两种模式确实看不出什么太大的差别，充血模型也展示不出什么优点，但是当业务逻辑极其复杂的时候，贫血模型中的通用代码被整合在service某个方法的流程中，复用起来将十分困难，反观将通用的业务逻辑放在domain中，我们就可以随用随取，十分方便。这样看来，充血模型在业务复杂时优势确实很大。","like_count":0},{"had_liked":false,"id":157191,"user_name":"William","can_delete":false,"product_type":"c1","uid":1346215,"ip_address":"","ucode":"55F5D9DEE485B1","user_header":"https://static001.geekbang.org/account/avatar/00/14/8a/a7/674c1864.jpg","comment_is_top":false,"comment_ctime":1575077561,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575077561","product_id":100039001,"comment_content":"没接触过DDD，<br>但是通过看专栏，感觉就是把数据本身的操作抽离出去了，然后service需要了，再调用对应的方法处理，别的没啥改变？ 不知道理解的对不对.","like_count":0},{"had_liked":false,"id":157181,"user_name":"达文西","can_delete":false,"product_type":"c1","uid":1398824,"ip_address":"","ucode":"01C1063F23D634","user_header":"https://static001.geekbang.org/account/avatar/00/15/58/28/c86340ca.jpg","comment_is_top":false,"comment_ctime":1575074753,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575074753","product_id":100039001,"comment_content":"看得好过瘾，把我一直以来的困惑解除了。准备下载老师的代码看看","like_count":0},{"had_liked":false,"id":157148,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1575042211,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1575042211","product_id":100039001,"comment_content":"我们现在是吧domain和entity合二为一了。","like_count":0},{"had_liked":false,"id":157145,"user_name":"花儿少年","can_delete":false,"product_type":"c1","uid":1318540,"ip_address":"","ucode":"CFE4F64243673B","user_header":"https://static001.geekbang.org/account/avatar/00/14/1e/8c/450fe5cb.jpg","comment_is_top":false,"comment_ctime":1575041944,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575041944","product_id":100039001,"comment_content":"老师的设计没问题<br>在我看完 DDD 那本书后的感受就是，尽量把复杂的逻辑使用充血模型开发，而简单的逻辑就使用贫血模型开发。<br>使用充血模型开发的一个要点就是要保证领域模型的变更的尽量少的影响到其他层（controller，repository），所以 domain 之外还有一个防腐层，将 VO，DO 转换为 domain 的模型，简单来说就是一系列的 transfer 函数，但是这层是必须的，为了保持领域模型的纯洁性。<br>然后对于 老师的 service 层，其实还起到了两个作用，1.流程编排（调用哪些 domain 功能，这里只有一个）2.防腐层（模型转换）<br>如有错误，请指出~","like_count":0},{"had_liked":false,"id":157112,"user_name":"清风自来","can_delete":false,"product_type":"c1","uid":1026907,"ip_address":"","ucode":"89D07A602D2E00","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ab/5b/fd0b96cb.jpg","comment_is_top":false,"comment_ctime":1575033546,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575033546","product_id":100039001,"comment_content":"谢谢老师，让我解决了上一讲的疑惑。","like_count":0},{"had_liked":false,"id":157061,"user_name":"不似旧日","can_delete":false,"product_type":"c1","uid":1161271,"ip_address":"","ucode":"DF4C5E3AB9570C","user_header":"https://static001.geekbang.org/account/avatar/00/11/b8/37/98991aeb.jpg","comment_is_top":false,"comment_ctime":1575022137,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575022137","product_id":100039001,"comment_content":"感觉domain只是把service中的业务提取出来了","like_count":0},{"had_liked":false,"id":157053,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1575019354,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575019354","product_id":100039001,"comment_content":"课堂讨论: 对于DDD的看法.<br><br>DDD能有效解决MVC中Controller层（同理MVP中的Presenter层， MVVM中的VM层）的厚度，前提是项目系统复杂，业务量庞大的前提下。<br><br>个人认为在胶水层中引入Domain层并非必须将Domain类设置为数据和业务一体的类,也可以将Domain层的业务和数据分离,同样能够起到摊薄胶水层的作用.","like_count":0},{"had_liked":false,"id":157027,"user_name":"нáпの゛","can_delete":false,"product_type":"c1","uid":1130666,"ip_address":"","ucode":"834FA877EFBAF7","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/aa/49bbb007.jpg","comment_is_top":false,"comment_ctime":1575014930,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575014930","product_id":100039001,"comment_content":"两种交易流水数据格式习惯第一种，第二种也会有字段冗余吧，比如相同的时间金额字段？","like_count":0},{"had_liked":false,"id":157022,"user_name":"早起不吃虫","can_delete":false,"product_type":"c1","uid":1369757,"ip_address":"","ucode":"13CD3B5E1F9435","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/7WkTI1IicbKvsPJng5vQh5qlrf1smbfl2zb7icHZfzcAk1k4lr8w8IDEAdrqq1NHW5XZMPXiaa1h7Jn1LGOWOCkIA/132","comment_is_top":false,"comment_ctime":1575014204,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575014204","product_id":100039001,"comment_content":"1、DDD中除了service层的service逻辑外，好像存在domain层的service，将一些domain内多实例的操作包装在其中<br>2、个人感觉domain层更多控制领域实体的create,update&lt;delete&gt;操作，service层的逻辑可以封装一些查询操作，这些查询操作的返回值可以不是domain对象<br>3、IOC框架负责domain对象的持久化，domain层不必关注持久化的具体实现，由Service层逻辑与repository层的具体实现控制","like_count":0},{"had_liked":false,"id":157015,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1575013339,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575013339","product_id":100039001,"comment_content":"第二遍理解的时候 发现钱包数据的操作在贫血模型中是耦合在service中的  而充血模型是将钱包数据的操作解偶了的","like_count":0},{"had_liked":false,"id":156998,"user_name":"圆哥哥呐丶","can_delete":false,"product_type":"c1","uid":1238051,"ip_address":"","ucode":"8E56E3E68A3836","user_header":"https://static001.geekbang.org/account/avatar/00/12/e4/23/ac13d916.jpg","comment_is_top":false,"comment_ctime":1575011015,"is_pvip":true,"replies":[{"id":"60238","content":"好的 我抽空放上去<br>https:&#47;&#47;github.com&#47;wangzheng0822","user_name":"作者回复","comment_id":156998,"uid":"1190123","ip_address":"","utype":1,"ctime":1575015624,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1575011015","product_id":100039001,"comment_content":"花费大篇幅讲 查询交易流水，  其实 在代码上体现不大， 老师 下次能给出详细的代码吗？  即便是github的 也行 ","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476298,"discussion_content":"好的 我抽空放上去\nhttps://github.com/wangzheng0822","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575015624,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156996,"user_name":"圆哥哥呐丶","can_delete":false,"product_type":"c1","uid":1238051,"ip_address":"","ucode":"8E56E3E68A3836","user_header":"https://static001.geekbang.org/account/avatar/00/12/e4/23/ac13d916.jpg","comment_is_top":false,"comment_ctime":1575010860,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575010860","product_id":100039001,"comment_content":"哎，你讲的设计思路， 和代码  联系不大。。。。代码就简单的 实现了几大业务","like_count":0},{"had_liked":false,"id":156990,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1575009901,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575009901","product_id":100039001,"comment_content":"按我的理解得出 首先control层也就是所谓的暴露接口层即就是用来负责收发数据 service层 用来处理整体的逻辑相当于整个钱包的管理层 比如通过钱包id拿到钱包 再通过钱包的逻辑处理自己的加减余额， 或者转账操作,  而respons 则负责数据存储相关 交流流水存储等等 也放在service当中进行管理 而虚拟钱包则只负责钱包的余额的增删改查逻辑  让各个类之间解偶 功能单一   <br>我对于ddd的看法如下 从例子来看 通过ddd模型 对虚拟钱包的操作和service层进行了解偶 并且service层扩展过后 service 代码依旧可维护性 和可读性 都比较好","like_count":0},{"had_liked":false,"id":156979,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1575008317,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575008317","product_id":100039001,"comment_content":"在前几节课，才初步了解到DDD，也尝试着去看过一些资料不过资料终究是资料。学习了今天的实战，等下自己还得去敲下代码，认真的对比下两者的差异。<br><br>在贫血的世界里习惯了，一下子要来充血，有个转变的过程。刚好可以在自己的实战项目里去体会，真爽","like_count":0},{"had_liked":false,"id":156972,"user_name":"Tom.G","can_delete":false,"product_type":"c1","uid":1206034,"ip_address":"","ucode":"7929B45C1A51F8","user_header":"https://static001.geekbang.org/account/avatar/00/12/67/12/5c6eb568.jpg","comment_is_top":false,"comment_ctime":1575006331,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575006331","product_id":100039001,"comment_content":"和我写的基本是一致的","like_count":0},{"had_liked":false,"id":156963,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1575003397,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575003397","product_id":100039001,"comment_content":"课后题<br>1.基于ddd，让我来拆会跟老师不一样。当然，咱们的demo比较简单，所以怎么拆都行，这里我阐述的主要是分层上的思路。<br><br>2.老师这样拆service层太重了。我会把service层再拆出一个dom service层。service层服务外放服务，做rpc或本地多个“聚合”间的交互整合。dom service负责  一个“聚合”dao层，mq，redis等等“数据源”的交互。领域对象或者叫它“聚合”或者所谓的充血模型，实现内敛的业务逻辑，对外只与自己的 dom service发生交互。<br><br>3.这样拆的好处是结构清晰，易于扩展、变动和定位问题，阅读和维护成本会比较低。坏处就是逻辑运行的中间对象会比较多，会有new 对象和数据转移的成本，在吞吐（新对象多）和响应时间（数据转换多）都有开销。","like_count":0},{"had_liked":false,"id":156950,"user_name":"宫作","can_delete":false,"product_type":"c1","uid":1242241,"ip_address":"","ucode":"A20CCCCBE044D8","user_header":"https://static001.geekbang.org/account/avatar/00/12/f4/81/5e55baaa.jpg","comment_is_top":false,"comment_ctime":1574999894,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574999894","product_id":100039001,"comment_content":"看了老师的代码  有点感觉   DDD更像 面向对象的抽象   domain  这个其实 也是面像对象的 思考方式      ","like_count":0},{"had_liked":false,"id":156939,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1574999138,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574999138","product_id":100039001,"comment_content":"关键要想好，什么东西是领域要管的，什么东西不属于领域的，这个界定很难的","like_count":0},{"had_liked":false,"id":156933,"user_name":"potato00fa","can_delete":false,"product_type":"c1","uid":1307080,"ip_address":"","ucode":"D179E68D87CC50","user_header":"https://static001.geekbang.org/account/avatar/00/13/f1/c8/8e6dc340.jpg","comment_is_top":false,"comment_ctime":1574998166,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574998166","product_id":100039001,"comment_content":"今天这堂课，妙啊~","like_count":0},{"had_liked":false,"id":156928,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1574997652,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1574997652","product_id":100039001,"comment_content":"感觉DDD的一个基本思路就是遵循单一职责原则，将业务进行职责划分，比如将贫血模型的BO，service转换为Domian和很薄的service层次，Domain中的模型对外只提供对于模型的操作，调用者不需要知道具体实现细节，而service层将调用domian里的操作将不同业务逻辑组合起来，对外提供某一功能，各司其职，每个对象内部的修改不影响调用者，划清了职责的边界，逻辑更清晰。","like_count":0},{"had_liked":false,"id":156923,"user_name":"yz","can_delete":false,"product_type":"c1","uid":1256001,"ip_address":"","ucode":"D646E3BDD795A2","user_header":"https://static001.geekbang.org/account/avatar/00/13/2a/41/6116db1b.jpg","comment_is_top":false,"comment_ctime":1574996654,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1574996654","product_id":100039001,"comment_content":"如果是这样的话，DDD的流程就变成了 vo -&gt; bo-&gt;domain-&gt;entity，那么就会序列化4次了，这在性能上有些损失，但收获的是在程序开发上的可维护，可扩展性，有没有什么更好的方式呢？","like_count":0,"discussions":[{"author":{"id":1068816,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4f/10/c276c714.jpg","nickname":"luke","note":"","ucode":"B5E0A435461A20","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65383,"discussion_content":"有了domain就没有bo了，bo和domain是同一层的，贫血里的bo，充血里的domain。另外其实没有序列化，get,set罢了，微乎其微的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1574999174,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156920,"user_name":"没有昵称行不行","can_delete":false,"product_type":"c1","uid":1241408,"ip_address":"","ucode":"0A7B13B79647CE","user_header":"https://static001.geekbang.org/account/avatar/00/12/f1/40/95d38194.jpg","comment_is_top":false,"comment_ctime":1574995771,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1574995771","product_id":100039001,"comment_content":"交易流水拆分到上层钱包和虚拟钱包单独记录之后，上层钱包的支付交易流水和虚拟钱包的交易流水如何对应呢？<br>文中提到把充值、提现、支付等业务相关的交易流水记录在上层钱包，虚拟钱包的交易流水与业务无关，只记录简单的加&#47;减操作。<br>那么对于上层钱包的支付交易流水，由于涉及两个虚拟钱包，那是不是也要对应的记录两条虚拟钱包交易流水？但是在给出的图中似乎没有体现出有两条虚拟钱包交易流水。<br>还有这是不是跟之前讨论的两种交易流水数据格式一样有数据一致性问题啊。<br>关于这个问题不知道理解得对不对，希望老师能够再说明一下。","like_count":0,"discussions":[{"author":{"id":1018685,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/3d/0c3a2fd4.jpg","nickname":"偶尔复活下","note":"","ucode":"18B1D525CD50D3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":67649,"discussion_content":"我感觉钱包流水还是要分借贷分别记录一条，便于统计当天的借方贷分总额，以及对账平衡。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575163758,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156913,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1574994960,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574994960","product_id":100039001,"comment_content":"回答问题：Service 类在DDD中相当于承担了委托职责的功能。跟上篇文章有所讲解","like_count":0},{"had_liked":false,"id":156912,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1574994893,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1574994893","product_id":100039001,"comment_content":"还有你不断在领域模型 VirtualWallet类中填加方法，不就违背了开闭原则了？？？","like_count":0,"discussions":[{"author":{"id":1132538,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/fa/030d51c1.jpg","nickname":"wythehuang","note":"","ucode":"4A4AAFDF505F72","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66398,"discussion_content":"S.O.L.I.D原则在业务中无法一一实现的, 只能有所取舍. ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575044465,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1701867,"avatar":"https://static001.geekbang.org/account/avatar/00/19/f7/eb/e7127bb8.jpg","nickname":"，","note":"","ucode":"A5543C8DFEB198","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65713,"discussion_content":"我的理解,开闭原则体现在具体业务逻辑上,比如系统添加了一个新功能,方法与某个老功能的方法类似,但是不一样,这时候就新加一个方法来做新功能,而不是修改老功能,更不是新加个类再添加方法来做新功能,比如说spring的BeanPostProcessor吧,他允许开发者添加新的实现类来补充功能,但是不允许开发者修改他原来的功能.同时体现在老师的代码里,他添加属性和新的业务不算违反开闭原则,但是如果他修改了某个业务操作的逻辑,那才是违反了开闭原则.\n不知道是不是这样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575023301,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1049741,"avatar":"https://static001.geekbang.org/account/avatar/00/10/04/8d/005c2ff3.jpg","nickname":"weineel","note":"","ucode":"6DC6EF4F256A53","race_medal":2,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65384,"discussion_content":"类的设计没办法完全同时遵循所有原则的吧。领域模型让功能的增加更简单了，代码修改的范围更小了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574999191,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156909,"user_name":"那就这样吧","can_delete":false,"product_type":"c1","uid":1327343,"ip_address":"","ucode":"A1315C5EAF2917","user_header":"https://static001.geekbang.org/account/avatar/00/14/40/ef/52bbadb9.jpg","comment_is_top":false,"comment_ctime":1574994705,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574994705","product_id":100039001,"comment_content":"两种模式综合一起比较，在平时开发中，很多数据处理这些业务我们一般还是会放到domain中去做，但service是不可少的，比如交互，给客户端返回等。不过怎么说呢，如果是简单的业务，我觉得两种都行呀，无伤大雅。","like_count":0},{"had_liked":false,"id":156907,"user_name":"Jesse","can_delete":false,"product_type":"c1","uid":1368038,"ip_address":"","ucode":"727CA882B84DA0","user_header":"https://static001.geekbang.org/account/avatar/00/14/df/e6/bd1b3c0b.jpg","comment_is_top":false,"comment_ctime":1574994398,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574994398","product_id":100039001,"comment_content":"虽然没有用过DDD原则和domain 领域模型，但是听了老师讲解这个概念和这个例子，个人感觉DDD的Domain领域模型在层次上更清晰，业务上实现更灵活。相比与贫血模型，充血模型的service 的接口对应的是业务方法接口，并将方法的具体实现委托给Domain，由Domain来完成具体业务细节的划分和实现。增强了service的灵活性和Domain的内聚性。是一种非常值得尝试的设计思路!","like_count":0},{"had_liked":false,"id":156905,"user_name":"小文","can_delete":false,"product_type":"c1","uid":1177540,"ip_address":"","ucode":"974071FAA5F173","user_header":"https://static001.geekbang.org/account/avatar/00/11/f7/c4/bd7dd30a.jpg","comment_is_top":false,"comment_ctime":1574994173,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1574994173","product_id":100039001,"comment_content":"老师，你这讲的都以后端作为例子，很多后端技术名词不知道具体含义呀，我是做前端的理解不透呀","like_count":0,"discussions":[{"author":{"id":1657587,"avatar":"https://static001.geekbang.org/account/avatar/00/19/4a/f3/a37db121.jpg","nickname":"原磨豆浆","note":"","ucode":"1E1F65276FDDDF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65410,"discussion_content":"其实从一个高度上看，前端是 Android h5，后端是后台。但是单纯从前端的业务看，你们的数据状态可以看成后端，具体的界面上的逻辑 又可以是前端。其实更多的是学习这种代码思想，我也是做前端的，我暂时是这么理解的唉o(︶︿︶)o 唉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575001290,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1177540,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f7/c4/bd7dd30a.jpg","nickname":"小文","note":"","ucode":"974071FAA5F173","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1657587,"avatar":"https://static001.geekbang.org/account/avatar/00/19/4a/f3/a37db121.jpg","nickname":"原磨豆浆","note":"","ucode":"1E1F65276FDDDF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66483,"discussion_content":"我是做游戏的，用的C++,主要想学学设计模式，可是有些名词不知道没办法理解……","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575076009,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":65410,"ip_address":""},"score":66483,"extra":""}]}]},{"had_liked":false,"id":156899,"user_name":"teddytyy","can_delete":false,"product_type":"c1","uid":1268738,"ip_address":"","ucode":"E1569D81A4154E","user_header":"https://static001.geekbang.org/account/avatar/00/13/5c/02/e7af1750.jpg","comment_is_top":false,"comment_ctime":1574993261,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574993261","product_id":100039001,"comment_content":"个人理解下来ddd的优势就在于domain抽取后的代码复用，不知道对不对","like_count":0},{"had_liked":false,"id":156895,"user_name":"L.","can_delete":false,"product_type":"c1","uid":1181647,"ip_address":"","ucode":"46A2F679C094E8","user_header":"https://static001.geekbang.org/account/avatar/00/12/07/cf/b0d6fe74.jpg","comment_is_top":false,"comment_ctime":1574992580,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574992580","product_id":100039001,"comment_content":"老师，如果两个表之间有关联关系，比如查询A表的时候一般也会把B表一起查出来，那这种耦合逻辑是放在Entity里还是放在DTO里呢？谢谢。","like_count":0},{"had_liked":false,"id":156880,"user_name":"zs阿帅","can_delete":false,"product_type":"c1","uid":1141173,"ip_address":"","ucode":"07A54AE7F1CAFF","user_header":"https://static001.geekbang.org/account/avatar/00/11/69/b5/1e1731cc.jpg","comment_is_top":false,"comment_ctime":1574991513,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1574991513","product_id":100039001,"comment_content":"为什么支付的过程中涉及到应用公共账号向商家银行卡转账？直接从用户的虚拟钱包到商家虚拟钱包转账不就行了？不太理解","like_count":0},{"had_liked":false,"id":156878,"user_name":"KaitoShy","can_delete":false,"product_type":"c1","uid":1038415,"ip_address":"","ucode":"E2E2E9BD3F5048","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d8/4f/65abc6f0.jpg","comment_is_top":false,"comment_ctime":1574991173,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574991173","product_id":100039001,"comment_content":"我从中能理解的是：DDD 这种思想是更专注的是本身业务，而非产品的整体业务。就像插件和其他导入的包一样。","like_count":0},{"had_liked":false,"id":156874,"user_name":"xl000","can_delete":false,"product_type":"c1","uid":1117935,"ip_address":"","ucode":"6FEABE7F7D0DC0","user_header":"https://static001.geekbang.org/account/avatar/00/11/0e/ef/030e6d27.jpg","comment_is_top":false,"comment_ctime":1574990656,"is_pvip":false,"discussion_count":3,"race_medal":5,"score":"1574990656","product_id":100039001,"comment_content":"&quot;实际上，支付的过程就是一个转账的过程，从用户的虚拟钱包账户划钱到商家的虚拟钱包账户上，然后触发真正的银行转账操作，从应用的公共银行账户转钱到商家的银行账户（注意，这里并不是从用户的银行账户转钱到商家的银行账户）&quot; 老师这里的业务没有理解，支付会导致商家钱包和银行账户余额增加，那商家钱包没有提现功能吗？如果有的话岂不是银行账户余额加了两遍？","like_count":0,"discussions":[{"author":{"id":1001893,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg","nickname":"小文同学","note":"","ucode":"48F2AEB989C12A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":229562,"discussion_content":"感谢大家点赞，这个留言存在问题。&#34;遇到事件死循环的时候还会报错。&#34; Event Bus 是允许循环提交事件的，假如采用深度优先，则会导致线程栈溢出报错，假如使用广度优先，则会导致死循环。\n\n前面误解了，递归报错是源自于 LoadingCache 在执行加载缓存A的时候，方法栈一直又重复递归加载A，则会导致报错：\njava.lang.IllegalStateException: Recursive load of: 1000020000000066\n at com.google.common.base.Preconditions.checkState(Preconditions.java:197)\nat com.google.common.cache.LocalCache$Segment.waitForLoadingValue(LocalCache.java:2299)\n\n因为我使用的EventBus 去驱动 LoadingCache 加载缓存的，所以误以为是 EventBus 报的错。","likes_number":13,"is_delete":false,"is_hidden":false,"ctime":1586665257,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156873,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1574990495,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1574990495","product_id":100039001,"comment_content":"即便不知道DDD的理论，只要记住一句话，把service中与dao无关的操作放到相应domain中进行就可以了。不觉得DDD这个有啥神秘的。","like_count":0,"discussions":[{"author":{"id":1311125,"avatar":"https://static001.geekbang.org/account/avatar/00/14/01/95/fd09e8a8.jpg","nickname":"布拉姆","note":"","ucode":"479FF27D73BCAD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392765,"discussion_content":"哈哈 对的刚刚学了带代理模式。作用就是业务和非业务代码解耦。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1631112996,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2101988,"avatar":"https://static001.geekbang.org/account/avatar/00/20/12/e4/57ade29a.jpg","nickname":"dva","note":"","ucode":"EE27DAFCBF198D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552899,"discussion_content":"活学活用了 赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645629284,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2188142,"avatar":"https://static001.geekbang.org/account/avatar/00/21/63/6e/6b971571.jpg","nickname":"Z宇锤锤","note":"","ucode":"7DB36E986A7A51","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535230,"discussion_content":"有道理哟 方法后面加两行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638371521,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343438,"discussion_content":"正确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611045778,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156864,"user_name":"啦啦啦","can_delete":false,"product_type":"c1","uid":1131687,"ip_address":"","ucode":"6B12EC90A62525","user_header":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","comment_is_top":false,"comment_ctime":1574989451,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1574989451","product_id":100039001,"comment_content":"钱包系统和虚拟钱包系统这两个系统是不是就是两份项目代码","like_count":0,"discussions":[{"author":{"id":1087243,"avatar":"https://static001.geekbang.org/account/avatar/00/10/97/0b/a943bcb3.jpg","nickname":"zhou","note":"","ucode":"E1CE8575B3F106","race_medal":3,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":257758,"discussion_content":"嗯 你可以理解为两个单独的系统。  就好比你一个支付宝系统 和 你的银行卡系统一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588603176,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1219438,"avatar":"https://static001.geekbang.org/account/avatar/00/12/9b/6e/edd2da0c.jpg","nickname":"蓝魔丶","note":"","ucode":"2AE4359E263558","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65258,"discussion_content":"重头开始设计的新系统就可以采用微服务分开两份代码，如果是遗留系统或者比较传统，团队规模，技术负担大就采用Maven多模块来实现职责单一，项目统一维护的目的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574992064,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156863,"user_name":"安静的boy","can_delete":false,"product_type":"c1","uid":1196475,"ip_address":"","ucode":"F5F44B75228A85","user_header":"https://static001.geekbang.org/account/avatar/00/12/41/bb/21ce60d2.jpg","comment_is_top":false,"comment_ctime":1574989143,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574989143","product_id":100039001,"comment_content":"我看代码中并没有关于流水记录的代码，是老师省略了吗？还是我自己没有注意到。。。","like_count":0},{"had_liked":false,"id":156852,"user_name":"摸爬滚打三十年","can_delete":false,"product_type":"c1","uid":1240241,"ip_address":"","ucode":"764A7F920EC304","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/b1/d790b927.jpg","comment_is_top":false,"comment_ctime":1574988452,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574988452","product_id":100039001,"comment_content":"这节讲的干货满满，理论实践讲解的非常透彻。感觉学一遍没有完全领会。周末再刷两遍，深入学习下。","like_count":0},{"had_liked":false,"id":156828,"user_name":"L🚲🐱","can_delete":false,"product_type":"c1","uid":1577856,"ip_address":"","ucode":"08A012739614DE","user_header":"https://static001.geekbang.org/account/avatar/00/18/13/80/2c9da1b1.jpg","comment_is_top":false,"comment_ctime":1574986289,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574986289","product_id":100039001,"comment_content":"趁着坐公交的时间，看了一遍，感觉茅塞顿开，再多看几遍巩固下💪","like_count":0},{"had_liked":false,"id":156803,"user_name":"zliweijk","can_delete":false,"product_type":"c1","uid":1082430,"ip_address":"","ucode":"5645F9D0BD0751","user_header":"https://static001.geekbang.org/account/avatar/00/10/84/3e/d162e6db.jpg","comment_is_top":false,"comment_ctime":1574960603,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574960603","product_id":100039001,"comment_content":"王争老师讲的是DDD如何应用到单个服务代码中，欧创新老师讲的是DDD在微服务设计中的应用，感觉现在对DDD认识更深刻了","like_count":0},{"had_liked":false,"id":156802,"user_name":"李小龙","can_delete":false,"product_type":"c1","uid":1158263,"ip_address":"","ucode":"1B64CB66AF0765","user_header":"https://static001.geekbang.org/account/avatar/00/11/ac/77/fbca9f8b.jpg","comment_is_top":false,"comment_ctime":1574960449,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574960449","product_id":100039001,"comment_content":"看了老师的分享茅塞顿开。","like_count":0},{"had_liked":false,"id":156796,"user_name":"Daiver","can_delete":false,"product_type":"c1","uid":1466447,"ip_address":"","ucode":"9B1A03AFBC79BC","user_header":"https://static001.geekbang.org/account/avatar/00/16/60/4f/db0e62b3.jpg","comment_is_top":false,"comment_ctime":1574958778,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574958778","product_id":100039001,"comment_content":"受教了","like_count":0}]}