{"id":112148,"title":"16 | 从夜间模式说起，如何定制不同风格的App主题？","content":"<p>你好，我是陈航。今天，我和你分享的主题是，从夜间模式说起，如何定制不同风格的App主题。</p><p>在上一篇文章中，我与你介绍了组装与自绘这两种自定义Widget的方式。对于组装，我们按照从上到下、从左到右的布局顺序去分解目标视图，将基本的Widget封装到Column、Row中，从而合成更高级别的Widget；而对于自绘，我们则通过承载绘制逻辑的载体CustomPainter，在其paint方法中使用画笔Paint与画布Canvas，绘制不同风格、不同类型的图形，从而实现基于自绘的自定义组件。</p><p>对于一个产品来说，在业务早期其实更多的是处理基本功能有和无的问题：工程师来负责实现功能，PM负责功能好用不好用。在产品的基本功能已经完善，做到了六七十分的时候，再往上的如何做增长就需要运营来介入了。</p><p>在这其中，如何通过用户分层去实现App的个性化是常见的增长运营手段，而主题样式更换则是实现个性化中的一项重要技术手段。</p><p>比如，微博、UC浏览器和电子书客户端都提供了对夜间模式的支持，而淘宝、京东这样的电商类应用，还会在特定的电商活动日自动更新主题样式，就连现在的手机操作系统也提供了系统级切换展示样式的能力。</p><p>那么，这些在应用内切换样式的功能是如何实现的呢？在Flutter中，在普通的应用上增加切换主题的功能又要做哪些事情呢？这些问题，我都会在今天的这篇文章中与你详细分享。</p><!-- [[[read_end]]] --><h2>主题定制</h2><p>主题，又叫皮肤、配色，一般由颜色、图片、字号、字体等组成，我们可以把它看做是视觉效果在不同场景下的可视资源，以及相应的配置集合。比如，App的按钮，无论在什么场景下都需要背景图片资源、字体颜色、字号大小等，而所谓的主题切换只是在不同主题之间更新这些资源及配置集合而已。</p><p>因此在App开发中，我们通常不关心资源和配置的视觉效果好不好看，只要关心资源提供的视觉功能能不能用。比如，对于图片类资源，我们并不需要关心它渲染出来的实际效果，只需要确定它渲染出来是一张固定宽高尺寸的区域，不影响页面布局，能把业务流程跑通即可。</p><p><strong>视觉效果是易变的，我们将这些变化的部分抽离出来，把提供不同视觉效果的资源和配置按照主题进行归类，整合到一个统一的中间层去管理，这样我们就能实现主题的管理和切换了。</strong></p><p>在iOS中，我们通常会将主题的配置信息预先写到plist文件中，通过一个单例来控制App应该使用哪种配置；而Android的配置信息则写入各个style属性值的xml中，通过activity的setTheme进行切换；前端的处理方式也类似，简单更换css就可以实现多套主题/配色之间的切换。</p><p>Flutter也提供了类似的能力，<strong>由ThemeData来统一管理主题的配置信息</strong>。</p><p>ThemeData涵盖了Material Design规范的可自定义部分样式，比如应用明暗模式brightness、应用主色调primaryColor、应用次级色调accentColor、文本字体fontFamily、输入框光标颜色cursorColor等。如果你想深入了解ThemeData的其他API参数，可以参考官方文档<a href=\"https://api.flutter.dev/flutter/material/ThemeData/ThemeData.html\">ThemeData</a>。</p><p>通过ThemeData来自定义应用主题，我们可以实现App全局范围，或是Widget局部范围的样式切换。接下来，我便分别与你讲述这两种范围的主题切换。</p><h2>全局统一的视觉风格定制</h2><p>在Flutter中，应用程序类MaterialApp的初始化方法，为我们提供了设置主题的能力。我们可以通过参数theme，选择改变App的主题色、字体等，设置界面在MaterialApp下的展示样式。</p><p>以下代码演示了如何设置App全局范围主题。在这段代码中，我们设置了App的明暗模式brightness为暗色、主色调为青色：</p><pre><code>MaterialApp(\n  title: 'Flutter Demo',//标题\n  theme: ThemeData(//设置主题\n      brightness: Brightness.dark,//明暗模式为暗色\n      primaryColor: Colors.cyan,//主色调为青色\n  ),\n  home: MyHomePage(title: 'Flutter Demo Home Page'),\n);\n</code></pre><p>试着运行一下，效果如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/9b/30/9b16f0a71c01b336399554ddf7591f30.png?wh=640*1136\" alt=\"\"></p><center><span class=\"reference\">图1 Flutter全局模式主题</span></center><p>可以看到，虽然我们只修改了主色调和明暗模式两个参数，但按钮、文字颜色都随之调整了。这是因为默认情况下，<strong>ThemeData中很多其他次级视觉属性，都会受到主色调与明暗模式的影响</strong>。如果我们想要精确控制它们的展示样式，需要再细化一下主题配置。</p><p>下面的例子中，我们将icon的颜色调整为黄色，文字颜色调整为红色，按钮颜色调整为黑色：</p><pre><code>MaterialApp(\n  title: 'Flutter Demo',//标题\n  theme: ThemeData(//设置主题\n      brightness: Brightness.dark,//设置明暗模式为暗色\n      accentColor: Colors.black,//(按钮）Widget前景色为黑色\n      primaryColor: Colors.cyan,//主色调为青色\n      iconTheme:IconThemeData(color: Colors.yellow),//设置icon主题色为黄色\n      textTheme: TextTheme(body1: TextStyle(color: Colors.red))//设置文本颜色为红色\n  ),\n  home: MyHomePage(title: 'Flutter Demo Home Page'),\n);\n</code></pre><p>运行一下，可以看到图标、文字、按钮的颜色都随之更改了。</p><p><img src=\"https://static001.geekbang.org/resource/image/2c/94/2c033e21d8c0d29735b1860378c35794.png?wh=640*1136\" alt=\"\"></p><center><span class=\"reference\">图2 Flutter全局模式主题示例2</span></center><h2>局部独立的视觉风格定制</h2><p>为整个App提供统一的视觉呈现效果固然很有必要，但有时我们希望为某个页面、或是某个区块设置不同于App风格的展现样式。以主题切换功能为例，我们希望为不同的主题提供不同的展示预览。</p><p>在Flutter中，我们可以使用Theme来对App的主题进行局部覆盖。Theme是一个单子Widget容器，与MaterialApp类似的，我们可以通过设置其data属性，对其子Widget进行样式定制：</p><ul>\n<li>如果我们不想继承任何App全局的颜色或字体样式，可以直接新建一个ThemeData实例，依次设置对应的样式；</li>\n<li>而如果我们不想在局部重写所有的样式，则可以继承App的主题，使用copyWith方法，只更新部分样式。</li>\n</ul><p>下面的代码演示了这两种方式的用法：</p><pre><code>// 新建主题\nTheme(\n    data: ThemeData(iconTheme: IconThemeData(color: Colors.red)),\n    child: Icon(Icons.favorite)\n);\n\n// 继承主题\nTheme(\n    data: Theme.of(context).copyWith(iconTheme: IconThemeData(color: Colors.green)),\n    child: Icon(Icons.feedback)\n);\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/31/1f/31523a1f0bd4f6150b3d3c59102c831f.png?wh=640*1136\" alt=\"\"></p><center><span class=\"reference\">图3 Theme局部主题更改示例</span></center><p>对于上述例子而言，由于Theme的子Widget只有一个Icon组件，因此这两种方式都可以实现覆盖全局主题，从而更改Icon样式的需求。而像这样使用局部主题覆盖全局主题的方式，在Flutter中是一种常见的自定义子Widget展示样式的方法。</p><p><strong>除了定义Material Design规范中那些可自定义部分样式外，主题的另一个重要用途是样式复用。</strong></p><p>比如，如果我们想为一段文字复用Materia Design规范中的title样式，或是为某个子Widget的背景色复用App的主题色，我们就可以通过Theme.of(context)方法，取出对应的属性，应用到这段文字的样式中。</p><p>Theme.of(context)方法将向上查找Widget树，并返回Widget树中最近的主题Theme。如果Widget的父Widget们有一个单独的主题定义，则使用该主题。如果不是，那就使用App全局主题。</p><p>在下面的例子中，我们创建了一个包装了一个Text组件的Container容器。在Text组件的样式定义中，我们复用了全局的title样式，而在Container的背景色定义中，则复用了App的主题色：</p><pre><code>Container(\n    color: Theme.of(context).primaryColor,//容器背景色复用应用主题色\n    child: Text(\n      'Text with a background color',\n      style: Theme.of(context).textTheme.title,//Text组件文本样式复用应用文本样式\n    ));\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/ad/90/adeef600fa271f6ebb4eb41f60620290.png?wh=640*1136\" alt=\"\"></p><center><span class=\"reference\">图4 主题复用示例</span></center><h2>分平台主题定制</h2><p>有时候，<strong>为了满足不同平台的用户需求，我们希望针对特定的平台设置不同的样式</strong>。比如，在iOS平台上设置浅色主题，在Android平台上设置深色主题。面对这样的需求，我们可以根据defaultTargetPlatform来判断当前应用所运行的平台，从而根据系统类型来设置对应的主题。</p><p>在下面的例子中，我们为iOS与Android分别创建了两个主题。在MaterialApp的初始化方法中，我们根据平台类型，设置了不同的主题：</p><pre><code>// iOS浅色主题\nfinal ThemeData kIOSTheme = ThemeData(\n    brightness: Brightness.light,//亮色主题\n    accentColor: Colors.white,//(按钮)Widget前景色为白色\n    primaryColor: Colors.blue,//主题色为蓝色\n    iconTheme:IconThemeData(color: Colors.grey),//icon主题为灰色\n    textTheme: TextTheme(body1: TextStyle(color: Colors.black))//文本主题为黑色\n);\n// Android深色主题\nfinal ThemeData kAndroidTheme = ThemeData(\n    brightness: Brightness.dark,//深色主题\n    accentColor: Colors.black,//(按钮)Widget前景色为黑色\n    primaryColor: Colors.cyan,//主题色Wie青色\n    iconTheme:IconThemeData(color: Colors.blue),//icon主题色为蓝色\n    textTheme: TextTheme(body1: TextStyle(color: Colors.red))//文本主题色为红色\n);\n// 应用初始化\nMaterialApp(\n  title: 'Flutter Demo',\n  theme: defaultTargetPlatform == TargetPlatform.iOS ? kIOSTheme : kAndroidTheme,//根据平台选择不同主题\n  home: MyHomePage(title: 'Flutter Demo Home Page'),\n);\n</code></pre><p>试着运行一下：</p><p><img src=\"https://static001.geekbang.org/resource/image/ef/c6/efdee5c8d3e46d3b889274bbe3cf80c6.png?wh=640*1136\" alt=\"\"></p><center><span class=\"reference\">（a）iOS平台</span> </center><p><img src=\"https://static001.geekbang.org/resource/image/c6/70/c61983ef7ab9047562c338ecd1b46970.png?wh=1440*2560\" alt=\"\"></p><center><span class=\"reference\">（b）Android平台</span></center><center><span class=\"reference\">图5 根据不同平台设置对应主题</span></center><p>当然，除了主题之外，你也可以用defaultTargetPlatform这个变量去实现一些其他需要判断平台的逻辑，比如在界面上使用更符合Android或iOS设计风格的组件。</p><h2>总结</h2><p>好了，今天的分享就到这里。我们简单回顾一下今天的主要内容吧。</p><p>主题设置属于App开发的高级特性，归根结底其实是提供了一种视觉资源与视觉配置的管理机制。与其他平台类似，Flutter也提供了集中式管理主题的机制，可以在遵循Material Design规范的ThemeData中，定义那些可定制化的样式。</p><p>我们既可以通过设置MaterialApp全局主题实现应用整体视觉风格的统一，也可以通过Theme单子Widget容器使用局部主题覆盖全局主题，实现局部独立的视觉风格。</p><p>除此之外，在自定义组件过程中，我们还可以使用Theme.of方法取出主题对应的属性值，从而实现多种组件在视觉风格上的复用。</p><p>最后，面对常见的分平台设置主题场景，我们可以根据defaultTargetPlatform，来精确识别当前应用所处的系统，从而配置对应的主题。</p><h2>思考题</h2><p>最后，我给你留下一个课后小作业吧。</p><p>在上一篇文章中，我与你介绍了如何实现App Store升级项UI自定义组件布局。现在，请在这个自定义Widget的基础上，增加切换夜间模式的功能。</p><p><img src=\"https://static001.geekbang.org/resource/image/87/54/87fe49b5f8ba32823619040845c19d54.png?wh=1440*2560\" alt=\"\"></p><p>欢迎你在评论区给我留言分享你的观点，我会在下一篇文章中等待你！感谢你的收听，也欢迎你把这篇文章分享给更多的朋友一起阅读。</p><p></p>","comments":[{"had_liked":false,"id":122644,"user_name":"dao","can_delete":false,"product_type":"c1","uid":1087879,"ip_address":"","ucode":"4181FB270462CF","user_header":"https://static001.geekbang.org/account/avatar/00/10/99/87/98ebb20e.jpg","comment_is_top":false,"comment_ctime":1565449670,"is_pvip":true,"replies":[{"id":"45241","content":"赞","user_name":"作者回复","comment_id":122644,"uid":"1088582","ip_address":"","utype":1,"ctime":1565627041,"user_name_real":"土豆盒子"}],"discussion_count":2,"race_medal":0,"score":"40220155334","product_id":100031001,"comment_content":"import &#39;package:flutter&#47;cupertino.dart&#39;;<br>import &#39;package:flutter&#47;material.dart&#39;;<br><br>void main() =&gt; runApp(MyThemePage());<br><br>class MyThemePage extends StatelessWidget {<br>  &#47;&#47; iOS 浅色主题<br>  final ThemeData kIOSTheme = ThemeData(<br>      brightness: Brightness.light,<br>      accentColor: Colors.white,<br>      primaryColor: Colors.blue,<br>      iconTheme: IconThemeData(color: Colors.grey),<br>      textTheme: TextTheme(body1: TextStyle(color: Colors.black)));<br><br>  &#47;&#47; Android 深色主题<br>  final ThemeData kAndroidTheme = ThemeData(<br>      brightness: Brightness.dark, &#47;&#47; 深色主题<br>      accentColor: Colors.black, &#47;&#47;(按钮)Widget 前景色为黑色<br>      primaryColor: Colors.cyan, &#47;&#47; 主题色为青色<br>      iconTheme: IconThemeData(color: Colors.blue), &#47;&#47;icon 主题色为蓝色<br>      textTheme: TextTheme(body1: TextStyle(color: Colors.red)) &#47;&#47; 文本主题色为红色<br>      );<br><br>  Widget build(BuildContext context) {<br>    var theme = MyTheme(<br>      title: &#39;Flutter Demo Home Page&#39;,<br>      themes: [kIOSTheme, kAndroidTheme],<br>    );<br>    return MaterialApp(<br>      title: &#39;My Theme&#39;,<br>      theme: kAndroidTheme,<br>      home: theme,<br>    );<br>  }<br>}<br><br>class MyTheme extends StatefulWidget {<br>  MyTheme({Key key, this.title, this.themes}) : super(key: key);<br><br>  final String title;<br>  final List&lt;ThemeData&gt; themes;<br><br>  _MyThemeState createState() =&gt; _MyThemeState();<br>}<br><br>class _MyThemeState extends State&lt;MyTheme&gt; {<br>  bool isLight;<br><br>  @override<br>  void initState() {<br>    isLight = true;<br>    super.initState();<br>  }<br><br>  @override<br>  Widget build(BuildContext context) {<br>    return Theme(<br>        child: Scaffold(<br>          appBar: AppBar(<br>            title: Text(&#39;Theme switch&#39;),<br>          ),<br>          floatingActionButton: FloatingActionButton(<br>            child: Text(isLight ? &#39;Night&#39; : &#39;Light&#39;),<br>            onPressed: () {<br>              setState(() {<br>                isLight = !isLight;<br>              });<br>            },<br>          ),<br>        ),<br>        data: isLight ? widget.themes[0] : widget.themes[1]);<br>  }<br>}<br>","like_count":10,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462341,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565627041,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1728818,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/61/32/e9046955.jpg","nickname":"入夜、渐微凉","note":"","ucode":"5DF20DE7EC67B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":79863,"discussion_content":"这里widget.themes[0]为啥要用widget.啊，this.或者直接title为啥不行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576118781,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121329,"user_name":"灰灰","can_delete":false,"product_type":"c1","uid":1217408,"ip_address":"","ucode":"E33546A64B2CC3","user_header":"https://static001.geekbang.org/account/avatar/00/12/93/80/ccf2f428.jpg","comment_is_top":false,"comment_ctime":1565101098,"is_pvip":false,"replies":[{"id":"44694","content":"赞","user_name":"作者回复","comment_id":121329,"uid":"1088582","ip_address":"","utype":1,"ctime":1565179253,"user_name_real":"土豆盒子"}],"discussion_count":2,"race_medal":0,"score":"14450002986","product_id":100031001,"comment_content":"class _HomeState extends State&lt;Home&gt; with SingleTickerProviderStateMixin {<br>  TabController _controller;<br>  bool isNight = false;<br>  @override<br>  void initState() {<br>    super.initState();<br>    _controller = TabController(length: 2, vsync: this);<br>  }<br><br>  @override<br>  Widget build(BuildContext context) {<br>    return<br>      Theme(<br>        data: ThemeData(<br>          brightness: isNight ? Brightness.dark : Brightness.light,<br>        ),<br>        child: Stack(<br>          children: &lt;Widget&gt;[<br>            Scaffold(<br>              ...<br>            ),<br>            Positioned(<br>              bottom: 20,<br>              right: 20,<br>              child: FloatingActionButton(<br>                onPressed: () {setState(() {<br>                  isNight = !isNight;<br>                });},<br>                child: Text(isNight ? &#39;日间&#39; : &#39;夜间&#39;),<br>              ),<br>            )<br>          ],<br>        ),<br>      );<br>  }<br><br>  @override<br>  void dispose() {<br>    _controller.dispose();<br>    super.dispose();<br>  }<br>}<br>","like_count":4,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461744,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565179253,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1879385,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/ad/59/b8101ba4.jpg","nickname":"奔波儿霸","note":"","ucode":"A9D4B86FE519FF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":189409,"discussion_content":"这个有点东西。Theme当成widget包裹着脚手架","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582878564,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":120731,"user_name":"Ω","can_delete":false,"product_type":"c1","uid":1603583,"ip_address":"","ucode":"6117ADE46C6FC3","user_header":"https://static001.geekbang.org/account/avatar/00/18/77/ff/4ce0aa51.jpg","comment_is_top":false,"comment_ctime":1564985074,"is_pvip":false,"replies":[{"id":"44415","content":"import &#39;package:flutter&#47;foundation.dart&#39;;","user_name":"作者回复","comment_id":120731,"uid":"1088582","ip_address":"","utype":1,"ctime":1565016851,"user_name_real":"土豆盒子"}],"discussion_count":1,"race_medal":0,"score":"10154919666","product_id":100031001,"comment_content":"defaultTargetPlatform这个变量哪里来的，文章中没有说明清楚","like_count":2,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461453,"discussion_content":"import &amp;#39;package:flutter/foundation.dart&amp;#39;;","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565016851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121211,"user_name":"文心雕龙","can_delete":false,"product_type":"c1","uid":1162246,"ip_address":"","ucode":"A8A77297E6DFE8","user_header":"https://static001.geekbang.org/account/avatar/00/11/bc/06/d01b419f.jpg","comment_is_top":false,"comment_ctime":1565079045,"is_pvip":false,"replies":[{"id":"45251","content":"赞","user_name":"作者回复","comment_id":121211,"uid":"1088582","ip_address":"","utype":1,"ctime":1565629243,"user_name_real":"土豆盒子"}],"discussion_count":1,"race_medal":0,"score":"5860046341","product_id":100031001,"comment_content":"第三方插件 https:&#47;&#47;pub.dev&#47;packages&#47;dynamic_theme#-readme-tab-","like_count":1,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461681,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565629243,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":120660,"user_name":"小米","can_delete":false,"product_type":"c1","uid":1057652,"ip_address":"","ucode":"7E71CF665B981E","user_header":"https://static001.geekbang.org/account/avatar/00/10/23/74/e0b9807f.jpg","comment_is_top":false,"comment_ctime":1564968365,"is_pvip":false,"replies":[{"id":"44416","content":"赞","user_name":"作者回复","comment_id":120660,"uid":"1088582","ip_address":"","utype":1,"ctime":1565016884,"user_name_real":"土豆盒子"}],"discussion_count":1,"race_medal":0,"score":"5859935661","product_id":100031001,"comment_content":"思考题：<br>1、增加一个布尔变量<br>      bool  _isLight = false<br>2、在ThemeData中，根据_isLight来显示是否为高亮或者暗色。<br>      brightness: _isLight ? Brightness.light : Brightness.dark<br>3、增加一个切换按钮，点击改变_isLight值。<br>      FlatButton(onPressed: (){setState(() { _isLight = !_isLight; });},child: Text(_isLight?&quot;白天&quot;:&quot;夜间&quot;))","like_count":1,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461422,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565016884,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":301044,"user_name":"嘎啦儿。","can_delete":false,"product_type":"c1","uid":1480706,"ip_address":"","ucode":"EE2AF17017E0AF","user_header":"https://static001.geekbang.org/account/avatar/00/16/98/02/74cb0645.jpg","comment_is_top":false,"comment_ctime":1625492752,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1625492752","product_id":100031001,"comment_content":"老师，final ThemeData kIOSTheme = ThemeData(...省略)，这些语法我没看明白，能给我解释下吗？或者可以提供参考链接地址？","like_count":0,"discussions":[{"author":{"id":1242602,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f5/ea/5f046856.jpg","nickname":"Dale","note":"","ucode":"AD19A33FE5EEDF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383149,"discussion_content":"- final 是声明赋值之后不能再修改；\n- ThemeData 是指变量 kIOSTheme 的类型是 ThemeData 类的实例；\n- kIOSTheme 是申明的变量名；\n- ThemeData(...) 是实例化类，Dart 运行省略关键字 new","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625929441,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":280113,"user_name":"jayce","can_delete":false,"product_type":"c1","uid":1330907,"ip_address":"","ucode":"70ACD13415EA8F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epk6XJfVGqsW1b5oiatsuvSRkCF4yo2KxSUSf5LHRRTbuCPKJrRiblqRbMZBuicQMgDTO1bRp6vXW7Lg/132","comment_is_top":false,"comment_ctime":1614082490,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614082490","product_id":100031001,"comment_content":"我来说个app切换夜间模式的,ThemeMode system, light, dark<br><br>Box mainBox;<br>void main() async {<br>  await Hive.initFlutter();<br>  mainBox = await Hive.openBox(&#39;main&#39;);<br>  runApp(MyApp());<br>}<br><br>class MyApp extends StatelessWidget {<br>  @override<br>  Widget build(BuildContext context) {<br>    int modeIndex = mainBox.get(&#39;themeModeIndex&#39;);<br>    ThemeMode themeMode = modeIndex == null ? ThemeMode.system : ThemeMode.values[modeIndex];<br>    return MultiProvider(<br>      providers: [<br>        ChangeNotifierProvider&lt;ValueNotifier&lt;ThemeMode&gt;&gt;(<br>          create: (context) =&gt; ValueNotifier(themeMode),<br>        ),<br>      ],<br>      child: Consumer&lt;ValueNotifier&lt;ThemeMode&gt;&gt;(builder: (context, value, child) {<br>        mainBox.put(&#39;themeModeIndex&#39;, value.value.index);<br>        return MaterialApp(<br>          theme: ThemeData(<br>            brightness: Brightness.light,<br>            primaryColor: Colors.blue,<br>            scaffoldBackgroundColor: Colors.white,<br>          ),<br>          darkTheme: ThemeData(<br>            brightness: Brightness.dark,<br>            primaryColor: Colors.deepPurple,<br>            scaffoldBackgroundColor: Color(0xFF666666),<br>          ),<br>          themeMode: value.value,<br>          home: HomeScreen(),<br>        );<br>      }),<br>    );<br>  }<br>}","like_count":0},{"had_liked":false,"id":220497,"user_name":"木木京尤","can_delete":false,"product_type":"c1","uid":2009718,"ip_address":"","ucode":"11104F610E648F","user_header":"https://static001.geekbang.org/account/avatar/00/1e/aa/76/37c27871.jpg","comment_is_top":false,"comment_ctime":1590251065,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590251065","product_id":100031001,"comment_content":"老司，请问调夜间模式的时候，如果想给所有的页面都加一层半透明的图层，应该怎么调参数。不可能每个页面都添加图层，目前知道可以在materialapp  themedata  scaffold  调参数。","like_count":0},{"had_liked":false,"id":169614,"user_name":"jianwei","can_delete":false,"product_type":"c1","uid":1621006,"ip_address":"","ucode":"B62E46E862AF6D","user_header":"https://static001.geekbang.org/account/avatar/00/18/bc/0e/c76861eb.jpg","comment_is_top":false,"comment_ctime":1578390183,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578390183","product_id":100031001,"comment_content":"在全局的theme中定义多个 textTheme: TextTheme(body1: TextStyle(color: Colors.grey), body2: TextStyle(color: Colors.white), ...)，然后内部widget按需加载相应的 theme.body1 or theme.body2","like_count":0},{"had_liked":false,"id":151968,"user_name":"菜头","can_delete":false,"product_type":"c1","uid":1456964,"ip_address":"","ucode":"C5E95519F9EA21","user_header":"https://static001.geekbang.org/account/avatar/00/16/3b/44/dd534c9b.jpg","comment_is_top":false,"comment_ctime":1573823918,"is_pvip":false,"replies":[{"id":"58650","content":"父Widget们=祖先","user_name":"作者回复","comment_id":151968,"uid":"1088582","ip_address":"","utype":1,"ctime":1574058787,"user_name_real":"土豆盒子"}],"discussion_count":1,"race_medal":0,"score":"1573823918","product_id":100031001,"comment_content":"Theme.of(context) 方法将向上查找 Widget 树，并返回 Widget 树中最近的主题 Theme。如果 Widget<br>的父 Widget 们有一个单独的主题定义，则使用该 Theme<br>如果不是，就使用 App 全局 Theme。<br><br>这个表示没太懂。<br>最近？是表示其第一个 superWidget 吗？<br>父 Widget 们？一个 widget 有多个父 widget?<br><br><br>","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474673,"discussion_content":"父Widget们=祖先","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574058787,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143949,"user_name":"zzz","can_delete":false,"product_type":"c1","uid":1041455,"ip_address":"","ucode":"352964E5D793DA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e4/2f/fb01f76d.jpg","comment_is_top":false,"comment_ctime":1571812778,"is_pvip":false,"replies":[{"id":"58633","content":"你可以自己抽象出一套属性配置，控制的粒度更细一些，通过开关统一切换，本质上和系统主题类似","user_name":"作者回复","comment_id":143949,"uid":"1088582","ip_address":"","utype":1,"ctime":1574052058,"user_name_real":"土豆盒子"}],"discussion_count":1,"race_medal":0,"score":"1571812778","product_id":100031001,"comment_content":"请问下，目前主流的App内UI的样式应该不会局限于ThemeData中的定义的情况。比如有一个自定义的Button，是在代码中设置的特殊Color，不是Themedata里的，这种情况下的button（或类似实现的全部widget），对于日夜间切换这种动态处理的时候，有统一的换颜色的方法么？还是需要在每个widget中都要实现对应的颜色处理？同样的对于TextTheme，ThemeData只提供了textTheme,primaryTextTheme,accentTextTheme三种，如果App内有更多的通用TextTheme，如何动态的统一切换呢？","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471757,"discussion_content":"你可以自己抽象出一套属性配置，控制的粒度更细一些，通过开关统一切换，本质上和系统主题类似","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574052058,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":134946,"user_name":"🌝","can_delete":false,"product_type":"c1","uid":1449696,"ip_address":"","ucode":"7A92D6136DBF21","user_header":"https://static001.geekbang.org/account/avatar/00/16/1e/e0/238fda97.jpg","comment_is_top":false,"comment_ctime":1568960552,"is_pvip":false,"replies":[{"id":"53508","content":"是啊，换主题本身就相当于重建整个App的UI了，自然需要重走一遍根视图的生命周期","user_name":"作者回复","comment_id":134946,"uid":"1088582","ip_address":"","utype":1,"ctime":1570514919,"user_name_real":"土豆盒子"}],"discussion_count":1,"race_medal":0,"score":"1568960552","product_id":100031001,"comment_content":"如果全局更改主题的话，那岂不是要把MaterialApp这个Widget设置成有状态的widget?这样子是不是更耗性能","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467971,"discussion_content":"是啊，换主题本身就相当于重建整个App的UI了，自然需要重走一遍根视图的生命周期","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570514919,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130971,"user_name":"和小胖","can_delete":false,"product_type":"c1","uid":1180727,"ip_address":"","ucode":"406BD7AB987EBF","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/37/aa04f997.jpg","comment_is_top":false,"comment_ctime":1567585996,"is_pvip":false,"replies":[{"id":"49527","content":"对，会覆盖","user_name":"作者回复","comment_id":130971,"uid":"1088582","ip_address":"","utype":1,"ctime":1567682228,"user_name_real":"土豆盒子"}],"discussion_count":1,"race_medal":0,"score":"1567585996","product_id":100031001,"comment_content":"老师，这个全局主题的设置只是针对于布局中的对应 widget 没有设置样式才会生效吧？例如我在 ThemeData 里面设置了文字颜色为黑色？但是我在子 widget 里面设置了一个文字会红色，那么此时黑色是不生效的吧？","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466221,"discussion_content":"对，会覆盖","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567682228,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121199,"user_name":"宋世通","can_delete":false,"product_type":"c1","uid":1245468,"ip_address":"","ucode":"C7AA3F0E6930F3","user_header":"https://static001.geekbang.org/account/avatar/00/13/01/1c/d638d46e.jpg","comment_is_top":false,"comment_ctime":1565075584,"is_pvip":false,"replies":[{"id":"44536","content":"可以的。ThemeMode是在主题之上，是用来设置是否跟随系统设置的属性，你可以通过它来强制设置App主题为明或暗，也可以跟随系统，这样就需要把两套主题都实现了","user_name":"作者回复","comment_id":121199,"uid":"1088582","ip_address":"","utype":1,"ctime":1565082268,"user_name_real":"土豆盒子"}],"discussion_count":2,"race_medal":0,"score":"1565075584","product_id":100031001,"comment_content":"老师，在flutter1.8.2，1.8.3版本中增加了ThemeMode，是不是用这个来控制主题明暗会更好一点?","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461677,"discussion_content":"可以的。ThemeMode是在主题之上，是用来设置是否跟随系统设置的属性，你可以通过它来强制设置App主题为明或暗，也可以跟随系统，这样就需要把两套主题都实现了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565082268,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1245468,"avatar":"https://static001.geekbang.org/account/avatar/00/13/01/1c/d638d46e.jpg","nickname":"宋世通","note":"","ucode":"C7AA3F0E6930F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4095,"discussion_content":"谢谢老师，我突然想到flutter gallery也是有主题改变的，是按您回复的方式实现的\nMaterialApp(\n        theme: kLightGalleryTheme.copyWith(platform: _options.platform),\n        darkTheme: kDarkGalleryTheme.copyWith(platform: _options.platform),\n        themeMode: _options.themeMode）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565105979,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":120183,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1564804425,"is_pvip":false,"replies":[{"id":"44439","content":"可以参考小米同学的实现","user_name":"作者回复","comment_id":120183,"uid":"1088582","ip_address":"","utype":1,"ctime":1565018905,"user_name_real":"土豆盒子"}],"discussion_count":2,"race_medal":0,"score":"1564804425","product_id":100031001,"comment_content":"老师你好，这个Theme应该是要定义为状态，在setState里面修改这个变量，但是代码不知道怎么写，老师能否给一下代码。","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461228,"discussion_content":"可以参考小米同学的实现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565018905,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1180727,"avatar":"https://static001.geekbang.org/account/avatar/00/12/04/37/aa04f997.jpg","nickname":"和小胖","note":"","ucode":"406BD7AB987EBF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7622,"discussion_content":"我的实现是在最外层又包了一层 StatefulWidget，因为只有它可以动态的改变状态。所以现在这个 StatefulWidget 的 State 里面的 build 方法里面返回的就是上一节里面的那个整体的 widget，并且在其构造方法里面传入了一个 bool 值用以判断用哪种模式；\n\n而在 State 的 build 里面的 Scaffold 里面增加一个按钮，点击之后调用 setState 并且改变那个 bool 值，刷新整体视图。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567588769,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}