{"id":469250,"title":"06｜代码封装（下）：函数是如何被调用的？","content":"<p>你好，我是于航。</p><p>在上一讲中，我们主要围绕着 x86-64 平台上 C 函数被调用时需要遵循的一系列规则，即 System V AMD64 ABI 调用规范的内容展开了深入的探讨。而今天，我们将继续讨论有关 C 函数的话题，来看看参数求值顺序、递归调用、旧式声明的相关内容。这些内容将会帮助你更加深入地理解 C 函数的运作细节，写出更加健壮、性能更高的代码。</p><h2>编写不依赖于参数求值顺序的函数</h2><p>当一个函数被调用时，传递给它的实际参数应该按照怎样的顺序进行求值，这在 C 标准中并没有被明确规定。因此，对于某些特殊的代码形式，当运行使用不同编译器编译得到的二进制可执行文件时，可能会得到不同的计算结果。比如下面这段代码：</p><pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\nint main(void) {\n&nbsp; int n = 1;\n&nbsp; printf(\"%d %d %d\", n++, n++, n++);\n&nbsp; return 0;\n}&nbsp;\n</code></pre><p>这里，我们使用 printf 函数，连续打印出了表达式 <code>n++</code> 的值。当使用 Clang 13.0.0 编译器进行编译并运行这段代码时，可以得到输出结果 “1 2 3”。而换成 GCC 11.2 时，则得到了不同的结果 “3 2 1”。通过查看汇编代码，我们能够看到：Clang 按照从左到右的顺序来依次计算表达式 <code>n++</code> 的值，而 GCC 则与之相反。</p><!-- [[[read_end]]] --><p>因此，你需要注意的是：<strong>为了保证 C 程序的健壮性及可移植性，不要编写需依赖特定函数参数求值顺序才能够正常运行的代码逻辑</strong>。</p><h2>尾递归调用优化</h2><p>对于“递归函数”，相信你并不陌生。简单来说，递归函数就是一种自己可能会调用自己的函数。比如在下面的 C 代码中，factorial 函数便是一个递归函数。</p><pre><code class=\"language-c++\">int factorial(int num) {\n&nbsp; if (num == 1 || num == 0)\n&nbsp; &nbsp; return 1;\n&nbsp; return num * factorial(num - 1);\n}\n</code></pre><p>factorial 函数主要用于计算给定数的阶乘。你可以在上述代码的第四行，看到它对自己的调用过程。接下来，我们使用 GCC 在默认优化等级情况下编译这段 C 代码，可以得到如下图所示的汇编代码：</p><p><img src=\"https://static001.geekbang.org/resource/image/c3/07/c31efd658886cd8a9811bac2de593507.png?wh=1496x790\" alt=\"图片\"></p><p>这里，在上图右侧的第 17 行处，我们可以看到 factorial 函数对自己的调用过程。</p><p>通过上一讲的学习我们得知，函数调用过程中所需要的数据是以栈帧的形式被存放在进程的栈内存中的。而对栈内存的清理工作，只有当被调用函数执行完毕，准备通过 <code>ret</code> 指令返回前，才能够通过调用 <code>leave</code> 指令等方式进行。</p><p>而对于正常的递归函数来说，由于函数不断调用自己，导致先前调用产生的函数栈帧只有在后续调用的函数正常返回后，才能够得到清理。随着函数的不断调用，产生的栈帧越来越多，因此在栈内存无法再继续增长的情况下，便会发生溢出，进而导致程序出现 “Segmentation Fault” 等错误。</p><p>除此之外，每次的函数调用都会进行栈帧的创建和销毁过程，而随着函数调用次数的增加，这部分开销也可能逐渐影响程序的外部可观测性能。</p><p>那有没有办法解决这两个问题呢？答案是有的，它正是我在这里要介绍的“尾递归调用优化（Tail-Call Optimization）”。</p><p>尾递归调用优化是指在一定条件下，编译器可以直接<strong>利用跳转指令取代函数调用指令</strong>，来“模拟”函数的调用过程。而这样做，便可以省去函数调用栈帧的不断创建和销毁过程。而且，递归函数在整个调用期间都仅在栈内存中维护着一个栈帧，因此只使用了有限的栈内存。对于函数体较为小巧，并且可能会进行较多次递归调用的函数，尾递归调用优化可以带来可观的执行效率提升。</p><p><strong>尾递归调用的一个重要条件是：递归调用语句必须作为函数返回前的最后一条语句。</strong>怎样理解这个约束条件呢？我们来看下面这个例子：</p><p><img src=\"https://static001.geekbang.org/resource/image/aa/c7/aa964ca47cb9aa93c23192ffa02a72c7.png?wh=1920x561\" alt=\"图片\"></p><p>这里的 C 代码和上面那段功能完全相同，只不过我们修改了函数 factorial 的实现逻辑，并且在编译时指定了最高的编译优化等级 “-O3”。通过查看右侧的汇编代码，你可以发现，编译器并没有进行任何 <code>call</code> 指令的调用过程。而这就是因为它使用了尾递归调用优化。</p><p>尾递归调用优化的一个最显著特征，就是编译器会<strong>使用跳转指令（如<code>je</code>、<code>jne</code>、<code>jle</code>等）来替换函数调用时所使用的 call指令</strong>。这里函数 factorial 在执行 <code>ret</code> 指令返回前，会判断寄存器 edi 的值是否为 0（ZF=1），来决定是跳转到 “.L2” 标签处继续“递归”执行该函数，还是直接返回。当然，由于这里“实现递归”的方式是通过跳转指令而非函数的再次调用，在函数 factorial 执行的整个过程中，栈内存中仅有其对应的一个栈帧（是由调用 factorial 的函数通过 <code>call</code> 指令创建的）。</p><p>此时，如果我们尝试违背尾递归优化的重要前提，会有什么结果呢？来看个例子：在 factorial 函数的第一种实现方式中，由于函数的前一次调用结果依赖于函数下一次调用的返回值，导致存放在栈帧中的局部变量 num 的值无法被清理，因此编译器也就无法通过消除历史函数调用栈帧的方式，来模拟函数的递归调用过程。</p><p>而这就是尾递归调用优化以“递归调用语句必须作为函数返回前的最后一条语句”为前提条件的原因。在这种情况下，编译器才能够确定函数的返回值没有被上一个栈帧所使用。</p><p>但还有一点需要注意：现代编译器具备十分强大的程序执行流分析能力。在很多情况下，它能够直接提取出程序中可以使用循环进行表达的部分，同时避免 <code>call</code> 指令的调用过程。因此，编译器是否采用了尾递归优化，在大多数情况下已经很难直接从程序对应的汇编代码中看出了。而我们能做的，只是根据编译器实现尾递归优化的理论基础，来尽可能地从代码层面优化我们的程序。但实际执行时的效果如何，就要取决于具体编译器的能力了。毕竟，与如今强大的 GCC 与 Clang 等编译器相比，还有很多开源编译器甚至连基本的 C 标准特性都没有完全支持。</p><p>尾递归调用优化可以帮助我们减少函数调用栈帧的创建与销毁次数，这个过程涉及到寄存器的保存与恢复、栈内存的分配与释放等。但需要注意的是，<strong>尾递归调用优化的效果在那些函数体本身较小，且递归调用次数较多的函数上体现得更加明显。</strong>这里我们需要平衡的一点是：函数自身的执行时间与栈帧的创建和销毁时间，二者哪个占比更大。很明显，选择优化对性能影响更大的因素，通常会得到更大的收益。</p><h2>废弃的 K&amp;R 函数声明</h2><p>在 1989 年 ANSI C 标准出现之前，我们在声明一个 C 函数时，可以不为其指定参数列表。而对于这种方式，我们一般称其为 K&amp;R 函数声明。比如下面这个例子：</p><pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\nint add();\nint main(void) {\n&nbsp; printf(\"%d\", add(1));  // ?\n&nbsp; return 0;\n}\nint add(int x, int y) {\n&nbsp; return x + y;\n}\n</code></pre><p>这里你可以看到，在代码第 2 行函数 add 的声明中，我们并没有为其指定任何形式参数。但在代码第 7 行函数 add 的实现中，该函数在执行时实际上会接收两个整型参数。虽然函数在其声明与定义中使用的参数列表并没有完全匹配，但为了保证程序的兼容性，现代编译器都默认支持这种代码形式。</p><p>在继续学习之前，你可以先猜一猜代码第 4 行对函数 add 的调用结果是多少。注意，这里在调用时，我们仅为 add 函数传入了一个实参，即一个整型字面量值 1。</p><p>经过实践，理想情况下你会得到结果 1，不过也可能会得到看起来毫不相关的随机数。但无论如何，程序的运行确实偏离了预期，而这也正是 C 语言被标准化前，K&amp;R 函数声明被人诟病的一个原因。</p><p>下面，就让我们来看一看，在这种情况下的函数 add 是如何被调用的。使用默认优化等级进行编译，我们得到了如下图所示的汇编代码：</p><p><img src=\"https://static001.geekbang.org/resource/image/0b/33/0be52e7ff812c7d5384e83c47e9c6233.png?wh=1920x1362\" alt=\"图片\"></p><p>沿着在 main 函数内部调用 add 函数的执行链路进行寻找，我们可以轻松地发现问题所在。</p><p>在上一讲中我们已经了解过，SysV 调用约定会使用寄存器 rdi、rsi 来传递用户函数调用时的前两个参数。而这里在 main 函数对应的汇编代码中，可以看到 add 函数在被调用前，编译器仅通过蓝框内的汇编指令，对传入 add 函数的第一个参数进行了处理，将它存放到了寄存器 edi 中。而 add 函数在实际执行时，会通过红框内的指令，同时从寄存器 edi、esi 中初始化它所需要的两个参数。因此，此时寄存器 esi 中的值是什么，便决定了该函数的最终返回值。而它可能是 0，也有可能是各种随机数。</p><p>总的来看，<strong>出现问题的原因是编译器并没有强制要求函数声明、函数定义，以及函数调用三者的参数列表必须保持一致。</strong>因此，为了杜绝此类问题，ANSI C 标准化之后的 C 语言提出了新的“函数原型”概念，以取代旧时使用的函数声明方式。</p><p>和函数声明不同，函数原型强制程序员显式指出函数参数的使用方式，即使在没有参数时，也需要显式地将参数部分指定为 void。同时，对于函数原型、函数定义，以及函数调用，三者的参数列表必须保持一致，否则将无法通过编译。</p><p>上面的 C 代码在使用函数原型改写后如下所示：</p><pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\nint add(int x, int y);\nint main(void) {\n&nbsp; printf(\"%d\", add(1));  // compiling error!\n&nbsp; return 0;\n}\nint add(int x, int y) {\n&nbsp; return x + y;\n}\n</code></pre><p>此时若再次进行编译，编译器将会提示“参数不匹配”的错误。</p><p>总而言之，言而总之，为了减少产生这种不必要问题的机会，<strong>请不要在 C 代码中使用古老的 K&amp;R 函数声明</strong>。换句话说，每一个函数参数列表都不应该为空。</p><h2>总结</h2><p>好了，讲到这里，今天的内容也就基本结束了。最后我来给你总结一下。</p><p>这一讲，我主要和你讨论了有关 C 函数的另外三个话题，分别是函数参数求值顺序、尾递归调用优化，以及 K&amp;R 函数声明。</p><p>首先，编译器对函数参数的求值顺序并不固定，因此，不要试图编写需要依赖于特定参数求值顺序才能正常运行的代码逻辑。</p><p>其次，对递归函数的不正确使用，可能会导致进程栈内存出现溢出。而通过尾递归优化，编译器可以将函数的递归调用实现由 <code>call</code> 指令转换为条件跳转指令，从而大大减少函数调用栈帧的产生，进而避免了栈溢出的问题。不仅如此，这种方式也在一定程度上提高了函数的执行性能。</p><p>最后，考虑到兼容性，现代编译器仍然支持旧式的 K&amp;R 函数声明式写法，但这种写法极易引入难以调试的程序问题。因此，请确保为每一个函数参数列表都指明它所需要的参数类型。</p><h2>思考题</h2><p>在课程的最后，我们来一起做个思考题吧。</p><p>除了我在这两讲中介绍的有关 C 函数的内容，现代 C 语言中还增加了很多有关函数的新特性。比如，C11 中新引入了一个名为 <code>_Noreturn</code> 的关键字，可参与函数的定义过程。你可以动手查查它的用处，思考它存在的意义，并在评论区交流。</p><p>今天的课程就结束了，希望可以帮助到你，也希望你在下方的留言区和我一起讨论。同时，欢迎你把这节课分享给你的朋友或同事，我们一起交流。</p>","neighbors":{"left":{"article_title":"05｜代码封装（上）：函数是如何被调用的？","id":468171},"right":{"article_title":"07｜整合数据：枚举、结构与联合是如何实现的？","id":471133}},"comments":[{"had_liked":false,"id":331648,"user_name":"zxk","can_delete":false,"product_type":"c1","uid":1221195,"ip_address":"","ucode":"4BB2BD9D2BCD04","user_header":"https://static001.geekbang.org/account/avatar/00/12/a2/4b/b72f724f.jpg","comment_is_top":false,"comment_ctime":1642685256,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18822554440","product_id":100100701,"comment_content":"_Noreturn 也等价于 noreturn，方法声明该关键字则表示方法调用后不再返回，可用于声明一些异常退出的方法。<br>这个特性的主要目的在于提高方法的可读性，同时还能够借助编译器，提前检测出 unreachable 的代码。","like_count":4},{"had_liked":false,"id":327107,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1639919389,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5934886685","product_id":100100701,"comment_content":"就是__attribute__((noreturn))，比如在一个有返回值的函数里调用了exit()之后程序就退出了，如果exit没有声明为noreturn的话编译器就会警告说调用了exit的函数没有返回值。在其他语言里noreturn通常被称为Never类型。","like_count":1},{"had_liked":false,"id":327102,"user_name":"赵岩松","can_delete":false,"product_type":"c1","uid":2032451,"ip_address":"","ucode":"596694E4360482","user_header":"https://static001.geekbang.org/account/avatar/00/1f/03/43/ed0dcb27.jpg","comment_is_top":false,"comment_ctime":1639917668,"is_pvip":false,"replies":[{"id":"118975","content":"很高兴对你有帮助 : )","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1639960388,"ip_address":"","comment_id":327102,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5934884964","product_id":100100701,"comment_content":"连续看到现在，受益良多，非常感谢！","like_count":1,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540088,"discussion_content":"很高兴对你有帮助 : )","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639960388,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356272,"user_name":"Luke","can_delete":false,"product_type":"c1","uid":1216016,"ip_address":"江苏","ucode":"C34D4C44DBCE03","user_header":"https://static001.geekbang.org/account/avatar/00/12/8e/10/10092bb1.jpg","comment_is_top":false,"comment_ctime":1662101026,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1662101026","product_id":100100701,"comment_content":"1.尾递归优化其实就是编译器帮忙把递归改成了迭代，不过需要代码写的便于编译器去优化。递归函数的最后一条语句是其本身即可，这样的形式可以帮编译器确认本次调用结果不依赖函数内的中间结果。其实很好理解，迭代的写法里面，单次循环也不依赖于上次的循环结果。当然，现代编译器越来越强大了，写的差点也能优化成尾递归。<br>2.k&amp;r的古老声明方式还真没有用过，倒是无参函数最好在入参部分指定void的写法经常用。结合c的历史和自己的经验，这一条主要是想给维护者明确的信号，没有手误，我确定这是无参函数。<br>3.跟上述同理，noreturn应该也是让外部明确本函数没有返回值，不要依赖于他的返回值，甚至如果有使用该函数返回值的语句，编译器也会给出error。","like_count":1,"discussions":[{"author":{"id":1216016,"avatar":"https://static001.geekbang.org/account/avatar/00/12/8e/10/10092bb1.jpg","nickname":"Luke","note":"","ucode":"C34D4C44DBCE03","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589419,"discussion_content":"noreturn我写的不对，这是告诉用户和编译器，这个特殊的函数不会把控制权返回主调程序，告诉用户避免滥用该函数，通知编译器可优化一些代码。\n\n比如，线程的主体函数，还有exit()函数都是noreturn函数的示例。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1664857607,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江苏"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":344174,"user_name":"出卖灵魂的教练Kerry","can_delete":false,"product_type":"c1","uid":1807943,"ip_address":"","ucode":"8C64517DA556FE","user_header":"https://static001.geekbang.org/account/avatar/00/1b/96/47/93838ff7.jpg","comment_is_top":false,"comment_ctime":1651323638,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1651323638","product_id":100100701,"comment_content":"这才是C语言，我以前学的真的是皮毛都不算。","like_count":0},{"had_liked":false,"id":342637,"user_name":"小杰","can_delete":false,"product_type":"c1","uid":2853200,"ip_address":"","ucode":"BBDF8E9F348F65","user_header":"https://static001.geekbang.org/account/avatar/00/2b/89/50/aee9fdab.jpg","comment_is_top":false,"comment_ctime":1650376123,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1650376123","product_id":100100701,"comment_content":"https:&#47;&#47;docs.microsoft.com&#47;zh-cn&#47;cpp&#47;c-language&#47;noreturn?view=msvc-170。查看微软中文文档，得到的答案：_Noreturn 关键字在 C11 中引入。 它告知编译器，应用编译器的函数不返回调用方。使用 _Noreturn（或等效的 noreturn）的主要好处是在代码中明确函数的意向，便于将来的读者了解，以及检测意外产生的无法访问的代码。标记为 noreturn 的函数不应包括返回类型，因为它不会将值返回给调用方。 它应为 void。","like_count":0},{"had_liked":false,"id":341500,"user_name":"Casper","can_delete":false,"product_type":"c1","uid":1022129,"ip_address":"","ucode":"69282EB175B48E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/98/b1/f89a84d0.jpg","comment_is_top":false,"comment_ctime":1649664414,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1649664414","product_id":100100701,"comment_content":"经过实验<br>int fib(int n, int acc) {<br>    if(n &lt;= 1) return acc;<br><br>    int a = 10, b = 20;  &#47;&#47; 无用语句，用于测试尾递归<br>    return fib(n - 1, acc * n);<br>}<br><br>在O3优化等级下也可以进行尾递归优化。gcc可真厉害~","like_count":0},{"had_liked":false,"id":333257,"user_name":"dog_brother","can_delete":false,"product_type":"c1","uid":1619597,"ip_address":"","ucode":"9F64D3C6D815FB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er6OV33jHia3U9LYlZEx2HrpsELeh3KMlqFiaKpSAaaZeBttXRAVvDXUgcufpqJ60bJWGYGNpT7752w/132","comment_is_top":false,"comment_ctime":1644233677,"is_pvip":true,"replies":[{"id":"122210","content":"需要注意的是“递归调用语句必须作为函数返回前的最后一条语句”这个条件只是我们根据尾递归优化的原理，来为编译器能够进行优化所做的假设。而实际编译器是否可以通过其他方式做到“将函数递归调用优化为循环”，这个就属于编译器本身的能力范畴了。而之所以有这样的假设，是由于相较于函数的递归调用，循环只能够发生在同一个函数栈帧的环境中。因此，对于所有在函数返回前产生的中间变量值，实际上都无法被正常保存。而如果函数的正常执行依赖于这些中间结果，则尾递归优化将无法进行。比如这个例子：<br><br>int factorial(int num) {<br>  if (num == 1 || num == 0)<br>    return 1;<br>  return num * factorial(num - 1);<br>}<br><br>虽然其实现不满足尾递归优化的前提要求，但编译器却可在高优化等级下将它的实现由递归变为迭代。","user_name":"作者回复","user_name_real":"作者","uid":"1005890","ctime":1645017282,"ip_address":"","comment_id":333257,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1644233677","product_id":100100701,"comment_content":"老师，我有个问题，尾递归优化的条件：递归调用语句必须作为函数返回前的最后一条语句。老师，我对这句话理解不是很深入，可以举一个不能使用尾递归优化的递归代码么？","like_count":0,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551440,"discussion_content":"需要注意的是“递归调用语句必须作为函数返回前的最后一条语句”这个条件只是我们根据尾递归优化的原理，来为编译器能够进行优化所做的假设。而实际编译器是否可以通过其他方式做到“将函数递归调用优化为循环”，这个就属于编译器本身的能力范畴了。而之所以有这样的假设，是由于相较于函数的递归调用，循环只能够发生在同一个函数栈帧的环境中。因此，对于所有在函数返回前产生的中间变量值，实际上都无法被正常保存。而如果函数的正常执行依赖于这些中间结果，则尾递归优化将无法进行。比如这个例子：\n\nint factorial(int num) {\n  if (num == 1 || num == 0)\n    return 1;\n  return num * factorial(num - 1);\n}\n\n虽然其实现不满足尾递归优化的前提要求，但编译器却可在高优化等级下将它的实现由递归变为迭代。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645017282,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327130,"user_name":"=","can_delete":false,"product_type":"c1","uid":2600127,"ip_address":"","ucode":"104232A8292220","user_header":"https://static001.geekbang.org/account/avatar/00/27/ac/bf/f549183e.jpg","comment_is_top":false,"comment_ctime":1639928894,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639928894","product_id":100100701,"comment_content":"使用_Noreturn声明的函数不会返回到调用它的函数中，若是在其中使用了return语句，会在编译时报错。","like_count":0},{"had_liked":false,"id":326968,"user_name":"友","can_delete":false,"product_type":"c1","uid":2536820,"ip_address":"","ucode":"972A4333A8B101","user_header":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","comment_is_top":false,"comment_ctime":1639803806,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639803806","product_id":100100701,"comment_content":"继续打卡","like_count":0},{"had_liked":false,"id":326806,"user_name":"pedro","can_delete":false,"product_type":"c1","uid":1200704,"ip_address":"","ucode":"F40C839DDFD599","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","comment_is_top":false,"comment_ctime":1639706630,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639706630","product_id":100100701,"comment_content":"_Noreturn：函数不返回到其调用点","like_count":0}]}