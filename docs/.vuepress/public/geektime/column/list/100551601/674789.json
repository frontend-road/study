{"id":674789,"title":"12｜数据库锁：明明有行锁，怎么突然就加了表锁？","content":"<p>你好，我是大明。今天我们来聊一聊 MySQL 中锁的问题。</p><p>锁在整个数据库面试中都是属于偏难，而且偏琐碎的一类问题。但是偏偏锁又很重要，比如说实践中遇到死锁影响了性能，这都要求我们必须对锁有一定的了解。并且锁的原理和索引、隔离级别都有关，所以很容易从锁这个角度联想到另外两个地方，又或者从索引和隔离级别里面跳到锁这里。</p><p>因此，一句话总结就是<strong>锁既难又琐碎还热门</strong>。那么今天这节课我会带你彻底捋清楚锁，并且告诉你在面试过程中如何展示出你的亮点。</p><h2>前置知识</h2><h3>锁与索引</h3><p>在 MySQL 的 InnoDB 引擎里面，锁是借助索引来实现的。或者说，加锁锁住的其实是索引项，更加具体地来说，就是锁住了<strong>叶子节点</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/0b/fe/0be4ab811c14f01f477f9ea2267fbefe.png?wh=1920x671\" alt=\"图片\"></p><p>你从这个角度出发，就能理解大部分跟锁有关的千奇百怪的问题了。</p><p>一个表有很多索引，锁的是哪个索引呢？其实就是查询最终使用的那个索引。万一查询没有使用任何索引呢？那么锁住的就是整个表，也就是此时退化为表锁。</p><p>如果查询条件的值并不存在，例如：</p><pre><code class=\"language-sql\">SELECT * FROM your_tab WHERE id = 15 FOR UPDATE\n</code></pre><p>id = 15 的值根本不存在，那么怎么锁？InnoDB 引擎会利用最接近 15 的相邻的两个节点，构造一个临键锁。</p><p><img src=\"https://static001.geekbang.org/resource/image/eb/8a/eb2c722f039d8962ae6d7c8e29ff7e8a.png?wh=2436x980\" alt=\"\"></p><p>此时如果别的事务想要插入一个 id=15 的记录，就不会成功。</p><!-- [[[read_end]]] --><p>那么范围查询呢？也是利用索引上的数据，构造一个恰好能够装下这个范围的临键锁。例如：</p><pre><code class=\"language-sql\">SELECT * FROM your_tab WHERE id &gt; 33 FOR UPDATE\n</code></pre><p>InnoDB 引擎会构造一个(33，supremum] 的临键锁，锁住整个范围。supremum 你可以直观理解为 MySQL 认为的一个虚拟的最大值。</p><p><img src=\"https://static001.geekbang.org/resource/image/c0/d8/c081d44794e712b4f4d0c7196b9b85d8.png?wh=2436x944\" alt=\"\"></p><p>因此，我们得出了一个结论：<strong>锁和索引密切相关。</strong></p><h3>释放锁时机</h3><p>大部分人在学习锁的时候有一个误区，就是认为锁是在语句执行完毕之后就立刻释放掉的。其实并不是，它是在整个事务结束之后才释放的。换句话来说，当一个事务内部给数据加上锁之后，<strong>只有在执行 Rollback 或者 Commit 的时候，锁才会被释放掉</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/14/ca/147aab4d2904995f473919e089e64cca.png?wh=2436x1300\" alt=\"\"></p><h3>乐观锁与悲观锁</h3><p>乐观锁和悲观锁实际上是一种逻辑概念，它们是并发控制中常用的两种锁机制。</p><ul>\n<li>乐观锁是直到要修改数据的时候，才检测数据是否已经被别人修改过。</li>\n<li>悲观锁是在初始时刻就直接加锁保护好临界资源。</li>\n</ul><p>乐观锁在数据库中通常指利用 CAS 的思路进行的更新操作。一般的使用形态就是下面这样的。</p><pre><code class=\"language-sql\">SELECT * FROM your_tab WHERE id = 1; // 在这里拿到了 a = 1\n// 一大堆的业务操作\nUPDATE your_tab SET a = 3, b = 4 WHERE id = 1 AND a =1\n</code></pre><p>在上面的这个语句里面，预期数据库中 a 的值为 1 才会进行更新。如果此时数据库中的值已经被修改了，那么这个 UPDATE 语句就会失败。业务方通过检测受影响的行数是否为 0，来判断更新是否成功。</p><p><img src=\"https://static001.geekbang.org/resource/image/a7/db/a70a9488094109fc351b07be14544edb.png?wh=1920x1025\" alt=\"图片\"></p><p>悲观锁是指在写入数据时直接加锁。还拿上面这个例子来说吧，就是从最开始的 SELECT 语句就直接加上了锁。</p><pre><code class=\"language-sql\">SELECT * FROM your_tab WHERE id = 1 FOR UPDATE; // 在这里拿到了 a = 1\n// 一大堆的业务操作\nUPDATE your_tab SET a = 3, b = 4 WHERE id = 1\n</code></pre><p>在加上锁之后，就可以直接更新了。这个时候不需要担心别人可以在 SELECT 和 UPDATE 之间将 a 更新为别的值。</p><p>在使用乐观锁和悲观锁时，需要考虑数据一致性和并发性的问题。乐观锁适用于读多写少的场景，互联网中大部分应用都属于这一类。而悲观锁则适用于写多读少的场景，比如在金融领域里面对金额的操作就是以写为主。</p><p>相比之下，乐观锁的性能要比悲观锁好很多。不过因为乐观锁的代码写起来比较复杂，所以很多人偷懒就会直接使用悲观锁。</p><h3>行锁与表锁</h3><p>行锁与表锁都是根据锁的范围来划分的。一般来说，行锁是指锁住行，可能是锁住一行，也可能是锁住多行。表锁则是直接将整个表都锁住。</p><p>那么在 MySQL 里面，InnoDB 引擎同时支持行锁和表锁。但是行锁是借助索引来实现的，也就是说，如果你的查询没有命中任何的索引，那么 InnoDB 引擎是用不了行锁的，只能使用表锁。当然，如果用的是 MySQL，类似于 MyISAM 引擎，那么只能使用表锁，因为这些引擎不支持行锁。</p><h3>共享锁与排它锁</h3><p>共享锁和排它锁是在互斥的角度上看待锁的。</p><ul>\n<li>共享锁是指一个线程加锁之后，其他线程还是可以继续加同类型的锁。</li>\n<li>排它锁是指一个线程加锁之后，其他线程就不能再加锁了。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/ca/a5/ca46fd9ab293db1fd3f64225994bc4a5.png?wh=2040x370\" alt=\"\"></p><p>这两个概念非常接近读锁和写锁。因为读锁本身就是共享的，而写锁就是排它的。</p><h3>意向锁</h3><p>意向锁相当于一个信号，就是告诉别人我要加锁了，所以意向锁并不是一个真正物理意义上的锁。</p><p>意向锁和共享锁、排它锁相结合，就有了意向共享锁和意向排它锁。</p><ul>\n<li>意向共享锁即你希望获得一个共享锁。</li>\n<li>意向排它锁即你希望获得一个排它锁。</li>\n</ul><p>注意，意向锁的意向强调的就是你想要拿到这个锁，但是你最终能否拿到这个锁，是不确定的。</p><p>在 MySQL 里面，使用意向锁的典型场景是在增删改查的时候，对表结构定义加一个意向共享锁，防止在查询的时候有人修改表结构。而在修改表结构的时候，则会加一个意向排它锁。这也就是修改表结构的时候会直接阻塞掉所有的增删改查语句的原因。<strong>使用意向锁能够提高数据库的并发性能，并且避免死锁问题。</strong></p><h3>记录锁、间隙锁和临键锁</h3><p>这是面试中最难理解的三个概念，而且要是面试官对细节非常了解，那么你就很容易挂在这一个部分。但是反过来说，如果你能将这部分的细节都说清楚，本身就是一个很大的亮点了。</p><h4>记录锁</h4><p><strong>记录锁是指锁住了特定的某一条记录的锁</strong>。例如这样一条语句：</p><pre><code class=\"language-sql\">SELECT * FROM your_tab WHERE id = 31 FOR UPDATE\n</code></pre><p>在你使用了主键作为查询条件，并且是相等条件下，将只命中一条记录。这一条记录就会被加上记录锁。</p><p><img src=\"https://static001.geekbang.org/resource/image/57/08/57af4ccedf9b2270decb19235c8a4e08.png?wh=1920x679\" alt=\"图片\"></p><p>但是如果查询条件没有命中任何记录，那么就不会使用记录锁，而是使用间隙锁。又或者你使用了唯一索引作为条件，比如说在 user 表里面在列 email 上有一个唯一索引。</p><pre><code class=\"language-sql\">SELECT * FROM your_tab WHERE email='your_email' FOR UPDATE\n</code></pre><p>那么这条查询语句此时也是使用了记录锁。类似地，如果 email=‘your_email’ 这条记录不存在，那么会变成一个间隙锁。</p><p>举个例子，如果数据库中只有 id 为（1，4，7）的三条记录，也就是 id= 3 这个条件没有命中任何数据，那么这条语句会在（1，4）加上间隙锁。所以你可以看到，<strong>在生产环境里面遇到了未命中索引的情况，对性能影响极大。</strong></p><p>我这里稍微解释一下，实际上MySQL本身是加上临键锁的，但是临键锁本身是由间隙锁和记录锁合并组成的，所以这里我就先用间隙锁来描述了。</p><h4>间隙锁</h4><p>间隙锁是锁住了某一段记录的锁。直观来说就是你锁住了一个范围的记录。比如说你在查询的时候使用了 &lt;、&lt;=、BETWEEN 之类的范围查询条件，就会使用间隙锁。</p><pre><code class=\"language-sql\">SELECT * FROM your_tab WHERE id BETWEEN 50 AND 100 FOR UPDATE\n</code></pre><p>间隙锁会锁住 (50，100) 之间的数据，而 50 和 100 本身会被记录锁锁住。类似地，&lt;= 这种查询你也可以认为 = 的那个值会被记录锁锁住。</p><p>如果你的表里面没有 50，那么数据库就会一直向左，找到第一个存在的数据，比如说 40；如果你的表里面没有 100，那么数据库就会一直向右，找到第一个存在的数据，比如说 120。那么使用的间隙锁就是 (40，120)。如果此时有人想要插入一个主键为 70 的行，是无法插入的，它需要等这个 SELECT 语句释放掉间隙锁。</p><p>间隙锁我们一般都说两边都是开的，即端点是没有被间隙锁锁住的。<strong>记录锁和记录锁是排它的，但是间隙锁和间隙锁不是排它的</strong>。也就是说两个间隙锁之间即便重叠了，也还是可以加锁成功的。</p><p><img src=\"https://static001.geekbang.org/resource/image/4a/c9/4a3e1d90160bb31cd91edcd720dcbac9.png?wh=1920x743\" alt=\"图片\"></p><h4>临键锁</h4><p>临键锁（Next-Key Locks）是很独特的一种锁，直观上来说可以看做是一个记录锁和间隙锁的组合。也就是说<strong>临键锁不仅仅是会用记录锁锁住命中的记录，也会用间隙锁锁住记录之间的空隙</strong>。临键锁和数据库隔离级别的联系最为紧密，它可以解决在可重复读隔离级别之下的幻读问题。</p><p>间隙锁是左开右开，而临键锁是<strong>左开右闭</strong>。还是用前面的例子来说明。如果 id 只有（1，4，7）三条记录，那么临键锁就将（1，4]锁住。</p><h3>小结一下</h3><p>我这里依旧给你准备了简洁版的记忆口诀，让你用来判断使用的是记录锁、间隙锁还是临键锁。</p><ul>\n<li><strong>遇事不决临键锁</strong>。你可以认为，全部都是加临键锁的，除了下面两个子句提到的例外情况。</li>\n<li><strong>右边缺省间隙锁</strong>。例如你的值只有（1，4，7）三个，但是你查询的条件是 WHERE id &lt; 5，那么加的其实是间隙锁，因为 7 本身不在你的条件范围内。</li>\n<li><strong>等值查询记录锁</strong>。这个其实针对的是主键和唯一索引，普通索引只适用上面两条。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/53/e1/53a2b8b61d03783231af0e764ayy64e1.png?wh=1920x859\" alt=\"图片\"></p><h2>面试准备</h2><p>为了更好地面试锁，你需要在公司内部收集一些信息。</p><ul>\n<li>公司出现过的死锁，包含排查过程、解决方案。</li>\n<li>其他锁使用不当的场景，比如因为锁使用不当造成的一些性能问题。</li>\n<li>收集至少一个使用乐观锁的场景，并且看看相关的 SQL 是怎么写的，做到心中有数。</li>\n<li>收集公司内使用悲观锁的场景，并且尝试使用乐观锁来进行优化。</li>\n</ul><p>这些案例非常重要，如果你自己没有亲自遇到，也要找同事问清楚，或者在互联网上搜集一些案例来实际看看锁的应用。</p><p>类似索引，面试官可能会直接写一个 SQL 语句，问你可能加什么锁。这种问题总体上还是偏难的，你在准备面试的时候可以先刻意练习一下。</p><ul>\n<li>在主键或唯一索引上使用等值查询，例如 <code>WHERE email = 'abc@qq.com'</code>，区分记录存在与不存在两种情况。</li>\n<li>在主键或唯一索引上使用范围查询，例如 <code>WHERE email &gt;= 'abc@qq.com'</code>。</li>\n<li>在普通索引上使用等值查询。</li>\n<li>在普通索引上使用范围查询。</li>\n<li>执行查询，但是该查询不会使用任何索引。</li>\n</ul><p>不管你怎么回答，都要记得强调间隙锁和临键锁是在可重复读的隔离级别下才有效果的。</p><p>在面试中，如果你非常熟悉 MySQL 锁，那么你可以抓住机会展示一下。</p><blockquote>\n<p>我觉得我对 MySQL 的锁机制还是非常了解的，只要您写出来 SQL，告诉我表结构定义，我就可以告诉您这个语句会加什么锁，会不会阻塞别的语句。</p>\n</blockquote><p>此外，你和面试官在聊到一些话题的时候，你可以尝试把话题引导到锁机制上。</p><ul>\n<li>索引： MySQL 的 InnoDB 引擎是借助索引来实现行锁的。</li>\n<li>性能问题：锁使用不当引起的性能问题。</li>\n<li>乐观锁：比如说原子操作中的 CAS 操作，你可以借助 CAS 这个关键词，聊一聊在 MySQL 层面上怎么利用类似的 CAS 操作来实现一个乐观锁。</li>\n<li>语言相关的锁：比如说 Go 语言的 mutex 和 Java 的 Lock，都可以引申到数据库的锁。</li>\n<li>死锁：聊一聊公司的数据库死锁案例。</li>\n</ul><p>整体来说，数据库锁优化在整个性能优化领域里面也算是一个比较高级的点了，很有竞争优势，不可错过。</p><h2>基本面试</h2><p>锁这边的问题会有非常多的问法。一开始引起锁的话题的时候，面试官可能这么问。</p><ul>\n<li>你知道 MySQL 的锁机制吗？</li>\n<li>你了解 MySQL 的锁吗？</li>\n</ul><p>那么类似的问题你就可以先综合回答，介绍一下 MySQL 里面的五花八门的锁。</p><blockquote>\n<p>MySQL 里面的锁机制特别丰富，这里我以 InnoDB 引擎为例。首先，从锁的范围来看，可以分成行锁和表锁。其次，从排它性来看，可以分成排它锁和共享锁。还有意向锁，结合排它性，就分为排它意向锁和共享意向锁。还有三个重要的锁概念，记录锁、间隙锁和临键锁。记录锁，是指锁住某条记录；间隙锁，是指锁住两条记录之间的位置；临键锁可以看成是记录锁与间隙锁的组合情况。<br>\n&nbsp;<br>\n还有一种分类方法，是乐观锁和悲观锁。那么在数据库里面使用乐观锁，本质上是一种应用层面的 CAS 操作。</p>\n</blockquote><p>紧接着，你不要深入去解释各种锁，而是先从大方向上解释清楚锁的根本特性：<strong>锁是和索引、隔离级别密切相关的</strong>。</p><blockquote>\n<p>在 MySQL 的 InnoDB 引擎里面，锁和索引、隔离级别都是有密切关系的。在 InnoDB 引擎里面，锁是依赖于索引来实现的。或者说，锁都是加在索引项上的。因此，如果一个查询用了索引，那么会用行锁，如果没用到任何索引，那么就会用表锁。此外，在 MySQL 里面，间隙锁和临键锁是只工作在可重复读这个隔离级别下的。</p>\n</blockquote><p>然后你就等着面试官进一步追问细节。正常情况下，他可能问下面这些问题。</p><ul>\n<li>某一种锁的具体含义。</li>\n<li>某一种锁的使用场景，这里稍微注意一点意向锁就可以，其他的都比较简单。</li>\n<li>怎么在数据库里面使用乐观锁，或者你用乐观锁解决过什么问题？</li>\n<li>你有没有优化过锁，或者解决过死锁？</li>\n<li>详细介绍记录锁、间隙锁和临键锁，也有可能问你 MySQL 在可重复读的隔离级别下，会不会有幻读问题？</li>\n</ul><p>这里，你可以详细分析记录锁、间隙锁和临键锁，不过如果想要百分之百征服面试官，你还是需要用一些实际的锁优化的案例来证明你的能力。</p><h2>亮点方案</h2><p>这里我先说一个最简单的锁优化的方案。我们前面提到，MySQL 的锁是依赖索引机制来实现的。而如果查询没有使用任何索引，就会使用表锁。那么很显然最简单的方案就是给这种查询创建一个索引，避免使用表锁。</p><p>你可以这么回答，关键词是<strong>缺索引</strong>。</p><blockquote>\n<p>早期我发现我们的业务有一个神奇的性能问题，就是响应时间偶尔会突然延长。后来经过我们排查，确认响应时间是因为数据库查询变慢引起的。但是这些变长的查询，SQL 完全没有问题，我用 EXPLAIN 去分析，都很正常，也走了索引。<br>\n&nbsp;<br>\n直到后面我们去排查业务代码的提交记录，才发现新加了一个功能，这个功能会执行一个 SQL，但是这个 SQL 本身不会命中任何索引。于是数据库就会使用表锁，偏偏这个 SQL 因为本身没有命中索引，又很慢，导致表锁一直得不到释放。结果其他正常的 SQL 反而被它拖累了。最终我们重新优化了这个使用表锁的 SQL，让它走了一个索引，就解决了这个问题。</p>\n</blockquote><p>不过这个方案说起来还是太简单，我们需要一些更复杂的方案来打动面试官。那么接下来我再给你提供两个稍微复杂一些的方案：临键锁引发的死锁和弃用悲观锁。</p><h3>临键锁引发的死锁</h3><p>在一个业务中，有一个场景是先从数据库中查询数据并锁住。如果这个数据不存在，那么就需要执行一段逻辑，计算出一个数据，然后插入。如果已经有数据了，那么就将原始的数据取出来，再利用这个数据执行一段逻辑，计算出来一个结果，执行更新。</p><p><img src=\"https://static001.geekbang.org/resource/image/05/3e/0519d4897c4b8b985d6f54e79yy9ba3e.png?wh=1920x1258\" alt=\"图片\"></p><p>因为两段运算逻辑不同，所以不能简单地使用 INSERT ON DUPLICATE 的语句来取代。</p><p>只看没有数据的逻辑，在计算之后插入新数据，如果用伪代码来描述，就是下面这样的。</p><pre><code class=\"language-sql\">BEGIN;\nSELECT * FROM biz WHERE id = ? FOR UPDATE\n// 中间有很多业务操作\nINSERT INTO biz(id, data) VALUE(?, ?);\nCOMMIT;\n</code></pre><p>看起来是不是没有任何问题？实际上，这个地方会引起<strong>死锁</strong>。</p><p>假设说现在数据库中 ID 最大的值是 78。那么如果两个业务进来，同时执行这个逻辑。一个准备插入 id=79 的数据，一个准备插入 id = 80 的数据。如果它们的执行时序如下图，那么你就会得到一个死锁错误。</p><p><img src=\"https://static001.geekbang.org/resource/image/f5/fc/f585706c073yyf00128b91876ff410fc.png?wh=1920x1091\" alt=\"图片\"></p><pre><code class=\"language-go\">[40001][1213] Deadlock found when trying to get lock; try restarting transaction\n</code></pre><p>造成死锁的原因也很简单。在线程 1 执行 SELECT FOR UPDATE 的时候，因为 id=79 的数据不存在，所以实际上数据库会产生一个(78，supremum] 的临键锁。类似地，线程 2 也会产生一个(78，supremum] 临键锁。</p><p>当线程 1 想要执行插入的时候，它想要获得 id = 79 的行锁。当线程 2 想要执行插入的时候，它想要获得 id = 80 的行锁，这个时候就会出现死锁。因为线程1 和线程 2 同时还在等着对方释放掉持有的间隙锁。</p><p><img src=\"https://static001.geekbang.org/resource/image/4b/62/4b20fafd32e9da3642743a672bee4d62.png?wh=2348x1330\" alt=\"\"></p><p>从理论上来说，解决方案有三种。</p><ul>\n<li>不管有没有数据，先插入一个默认的数据。如果没有数据，那么会插入成功；如果有数据，那么会出现主键冲突或者唯一索引冲突，插入失败。那么在插入成功的时候，执行以前数据不存在的逻辑，但是因为此时数据库中有数据，所以不会使用间隙锁，而是使用行锁，从而规避了死锁问题。</li>\n<li>调整数据库的隔离级别，降低为已提交读，那么就没有间隙锁了。这种解决方案也可以，而且你可以将话题进一步引申到 MVCC 中。</li>\n<li>放弃悲观锁，使用乐观锁。这也是我提供的亮点方案。</li>\n</ul><p>你可以通过一个案例来说明，关键词是<strong>临键锁。</strong></p><blockquote>\n<p>早期我优化过一个死锁问题，是临键锁引起的。业务逻辑很简单，先用 SELECT FOR UPDATE 查询数据。如果查询到了数据，那么就执行一段业务逻辑，然后更新结果；如果没有查询到，那么就执行另外一段业务逻辑，然后插入计算结果。<br>\n&nbsp;<br>\n那么如果 SELECT FOR UPDATE 查找的数据不存在，那么数据库会使用一个临键锁。此时，如果有两个线程加了临键锁，然后又希望插入计算结果，那么就会造成死锁。<br>\n&nbsp;<br>\n我这个优化也很简单，就是上来先不管三七二十一，直接插入数据。如果插入成功，那么就执行没有数据的逻辑，此时不会再持有临键锁，而是持有了行锁。如果插入不成功，那么就执行有数据的业务逻辑。<br>\n&nbsp;<br>\n此外，还有两个思路。一个是修改数据库的隔离级别为 RC，那么自然不存在临键锁了，但是这个修改影响太大，被 DBA 否决了。另外一个思路就是使用乐观锁，不过代码改起来要更加复杂，所以就没有使用。</p>\n</blockquote><p>你这么回答的话，面试官接下来就可能追问你隔离级别的事情，或者问你乐观锁的细节，那么你就有机会继续展示了。</p><h3>弃用悲观锁</h3><p>很多人为了省事会在开发的时候直接使用悲观锁。最为典型的例子就是在事务里面存在 <code>SELECT ... FOR UPDATE</code> 的语句，而后会紧跟着一个 UPDATE 语句。</p><p>伪代码：</p><pre><code class=\"language-go\">// 开启事务\nBegin()\n// 查询到已有的数据 SELECT * FROM xxx WHERE id = 1 FOR UPDATE\ndata := SelectForUpdate(id) \nnewData := calculate(data) // 一大通计算\n\n// 将新数据写回去数据库 UPDATE xxx SET data = newData WHERE id =1\nUpdate(id, newData) \nCommit()\n</code></pre><p>那么这一类代码可以考虑将整个事务都去掉，纯粹依赖 CAS 操作。</p><pre><code class=\"language-go\">for {\n  // 查询到已有的数据 SELECT * FROM xxx WHERE id = 1\n  data := Select(id) \n  newData := calculate(data) // 一大通计算\n\n  // 将新数据写回去数据库 \n  // UPDATE xxx SET data = newData WHERE id =1 AND data=oldData\n  success := CAS(id, newData, data) \n  // 确实更新成功，代表在业务执行过程中没有人修改过这个 data。\n  // 适合读多写少的情况\n  if success {\n    break;\n  }\n}\n</code></pre><p>这里我是直接用的 data 来比较的，实践中也可能是引入了 version 列，或者使用 update_time 来确保数据没有发生变更。</p><p>你可以在聊到乐观锁的情况下，使用这个案例。</p><blockquote>\n<p>我在入职这家公司之后，曾经系统地清理过公司内部使用悲观锁的场景，改用乐观锁。正常的悲观锁都是使用了 <code>SELECT FOR UPDATE</code> 语句，查询到数据之后，进行一串计算，再将结果写回去。那么改造的方案很简单，查询的时候使用 SELECT 语句直接查询，然后进行计算。但是在写回去的时候，就要用到数据库的 CAS 操作，即 UPDATE 的时候要确认之前查询出来的结果并没有实际被修改过。<br>\n&nbsp;<br>\n一般来说就是 <code>UPDATE xxx SET data = newData WHERE id = 1 AND data = oldData</code>。这种改造效果非常好，性能提升了 30%。当然，并不是所有的悲观锁场景都能清理，还有一部分实在没办法，只能是考虑别的手段了。</p>\n</blockquote><p>这里最后留了一个尾巴，也就是将话题引导到你准备的其他优化锁的案例上。</p><h2>面试思路总结</h2><p>这节课我们学习了面试中的重难点问题——锁，锁与索引的关系十分密切，可以说锁是借助索引来实现的。锁的形式五花八门，有乐观锁、悲观锁、行锁、表锁、共享锁、排它锁、意向锁、记录锁、间隙锁和临键锁等多种类型，它们各有用途，这里你要注意分辨它们各自的能力，学会分析什么场景下使用哪一种锁。</p><p>此外，我还提供了两个比较复杂的亮点方案：<strong>临键锁引发的死锁、弃用悲观锁</strong>。你在实际面试中可以考虑替换为自己的案例。</p><p><img src=\"https://static001.geekbang.org/resource/image/d5/f7/d550dfb25714cbfb8dccfyyde8cfcef7.png?wh=2792x2972\" alt=\"\"></p><h2>思考题</h2><p>最后你来思考两个问题。</p><ul>\n<li>你在公司有没有优化过什么锁？可以分享一下你的案例吗？</li>\n<li>你有没有使用过乐观锁？用于解决什么问题？相比直接使用悲观锁，你认为代码量有没有变化？</li>\n</ul><p>欢迎你把你的答案分享在评论区，也欢迎你把这节课的内容分享给需要的朋友，我们下节课再见！</p><h2>题外话：面试锦囊</h2><p>最后我们再来聊点儿题外话，就是面试时的一个小技巧——能示之不能，不能示之能。在前面很多讲里，我都在回答中都故意点到即止，或者故意留出破绽，就是“能示之不能”，引诱面试官追问。</p><p>那么反过来“不能示之能”就是纯粹地唬人。就是说实际上你并不是很了解某一些方面的东西，但是你假装你非常了解、胸有成竹。那么在这种情况下，如果面试官被你的假象迷惑住了，那么他就不会继续追问这方面的东西。</p><p>这跟我们的面试流程是有关的。很多人出去面候选者，讲究的是问到候选者无话可说。那么既然你表现得一副我还有很多话说，快来问我的样子，他们自然不会问你了。</p><p>不过“不能示之能”策略要慎用。一场面试可一不可二，可二千万别三。因为你装多了，面试官就会好奇你怎么什么都知道，或者激起了逆反心理，深挖下来你就挡不住了。</p><p>但是“能而示之不能”就可以随便用。尤其是一些公司有所谓的“压薪面”。就是本身你已经通过了基本的技术面试，但是公司不想给你高薪，就会故意面你一些很难的问题，打击你，这样好压价。那么如果你能够在压薪面里面将面试官引导到你熟悉的领域，立于不败之地，那么接下来谈薪酬就更有主动权。</p>","neighbors":{"left":{"article_title":"11｜SQL优化：如何发现SQL中的问题？","id":674168},"right":{"article_title":"13｜MVCC协议：MySQL 在修改数据的时候，还能不能读到这条数据？","id":675235}},"comments":[{"had_liked":false,"id":378102,"user_name":"子休","can_delete":false,"product_type":"c1","uid":1131592,"ip_address":"上海","ucode":"EDB61FB012C195","user_header":"https://static001.geekbang.org/account/avatar/00/11/44/48/fae317c1.jpg","comment_is_top":false,"comment_ctime":1689757711,"is_pvip":false,"replies":[{"id":137833,"content":"赞！我也无力吐槽临键锁这个翻译，但是大家都用我也跟着用。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1689954403,"ip_address":"广东","comment_id":378102,"utype":1}],"discussion_count":6,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"研究过一段时间锁的机制。举几个点，来分享一下如何理解临键锁。\n首先这个名词“临键”非常拗口难记，但是大家仔细观察它的英文“next-key lock”，就可以发现一些名堂，我个人认为，所谓next-key的意思就是下一个索引的意思，也就是锁住查询结果中的最大索引值与下一个索引值之间的区域。这就意味着，临键锁锁住的最后的那个区间，是当前命中的索引最大值到下一个索引的区间，如果没有下一个索引，那就是锁住了剩下所有区间。结合本文的例子，大家就容易理解了。\n例子1：如果 id 只有（1，4，7）三条记录，你查的是where id = 3，虽然没有查到记录，但是由于innodb中RR级别会使用临键锁，于是临键锁要开始锁区间了，但是锁哪里呢？这时候就要理解“临键”了，就是“next-key”，那么&quot;next-key&quot;是谁呢，根据查询条件ID=3，那么3后面的下一个索引是几呢？是4！！ 那么临键锁就将（1，4]锁住了。\n另外要额外提一句，由于查询条件可能是区间查询，所以临键锁会锁住多个区间。\n比如查询条件 id&gt;1 and id &lt;6 它就会把(1, 4],(4,7]这两个区间都锁住。\n又比如查询条件是id &gt;1 and id&lt;9 它就会把(1, 4],(4,7],(7, +∞]这三个区间都锁住，换句话说，这种查询也就导致了你根本插入不了任何一条记录，因为它把 id从1到无穷的范围都给锁住了。\n为什么要锁住区间？因为要防止幻读出现（幻读就是同一事务里面，同一个sql查询查出来的记录行数不一样。为什么会不一样？因为有别的事务在你执行sql的时候进行了插入，插入到了你的查询条件范围内了，导致你上一次查还好好的，下一次查就莫名奇妙多出来记录了。）。\n所以，你想，临键锁把你查询条件范围的区间锁住了，其它事务想往区间里面插数据是不是就不行了？临键锁是根据你的查询条件来锁区间的，这样你在同一事务里反复执行同一条sql查询，是不是就不会出现幻读了。\n\n以上是个人浅见，欢迎指正。","like_count":19,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623900,"discussion_content":"赞！我也无力吐槽临键锁这个翻译，但是大家都用我也跟着用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689954404,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1293052,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL4LOiaZxghhZicZia5ROibgunX4fj9iap2dTezvbCYiaibbpQxLM9lNJ3AfSqI3MkO9NatGbCFrjUTdjoDA/132","nickname":"天健园扛把子","note":"","ucode":"DEA76884363C54","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":641441,"discussion_content":"解释的很清楚了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1712649396,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2770150,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/44/e6/2c97171c.jpg","nickname":"sheep","note":"","ucode":"DAC2036F08CE27","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":629180,"discussion_content":"线程A: (1) begin; (2) select * from t where id = 3 for update; \n线程B: (1) update t set c = 4 where id =4; \n这里线程B能够正常执行耶；\n其中MySQL的版本为8.0.19","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1696779554,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":3794407,"avatar":"","nickname":"Geek_3d0fe8","note":"","ucode":"E75EACDA00E7A6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2770150,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/44/e6/2c97171c.jpg","nickname":"sheep","note":"","ucode":"DAC2036F08CE27","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633503,"discussion_content":"隔离级别，字段有没有索性，什么条件都不给，分析个锤子","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1702269621,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":629180,"ip_address":"广东","group_id":0},"score":633503,"extra":""},{"author":{"id":1582134,"avatar":"https://static001.geekbang.org/account/avatar/00/18/24/36/0829cbdc.jpg","nickname":"TheOne","note":"","ucode":"2A359780156A8B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2770150,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/44/e6/2c97171c.jpg","nickname":"sheep","note":"","ucode":"DAC2036F08CE27","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":645253,"discussion_content":"更新是可以的，因为行锁锁住的只有id等于3的记录，可以试试把更新语句换成插入语句，应该就会等待了，因为间隙锁本质上是保证不能插入","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1715908647,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":629180,"ip_address":"北京","group_id":0},"score":645253,"extra":""},{"author":{"id":1145759,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7b/9f/c5ad6512.jpg","nickname":"zero","note":"","ucode":"D8A22815D8987C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2770150,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/44/e6/2c97171c.jpg","nickname":"sheep","note":"","ucode":"DAC2036F08CE27","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":652014,"discussion_content":"等值查询，会优化为间隙锁，id=4这一行不会加锁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1728045798,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":629180,"ip_address":"福建","group_id":0},"score":652014,"extra":""}]}]},{"had_liked":false,"id":386196,"user_name":"起风了","can_delete":false,"product_type":"c1","uid":1110574,"ip_address":"浙江","ucode":"DEA3B47B7F3C3F","user_header":"https://static001.geekbang.org/account/avatar/00/10/f2/2e/cb647708.jpg","comment_is_top":false,"comment_ctime":1704292994,"is_pvip":false,"replies":[{"id":141063,"content":"每次面试之前背，背了赶紧去面试，面完就忘了。DEBUG 要用的时候再掏出来=。=","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1705927844,"ip_address":"广东","comment_id":386196,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"老师 是怎么记忆这些锁知识的","like_count":5,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":636310,"discussion_content":"每次面试之前背，背了赶紧去面试，面完就忘了。DEBUG 要用的时候再掏出来=。=","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1705927844,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377748,"user_name":"penbox","can_delete":false,"product_type":"c1","uid":1052938,"ip_address":"四川","ucode":"59C4F47ACCB7F2","user_header":"https://static001.geekbang.org/account/avatar/00/10/11/0a/59639f1f.jpg","comment_is_top":false,"comment_ctime":1689142653,"is_pvip":true,"replies":[{"id":137659,"content":"可能是我这里因为要突出和上一条乐观锁的对比，让你产生了误解。应该是，悲观锁不管读写都要直接加锁。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1689143194,"ip_address":"广东","comment_id":377748,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"《乐观锁与悲观锁》部分是不是有个BUG？\n“悲观锁是指在写入数据时直接加锁”，我觉得应该是“悲观锁是指在获取数据时直接加锁”","like_count":5,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623188,"discussion_content":"可能是我这里因为要突出和上一条乐观锁的对比，让你产生了误解。应该是，悲观锁不管读写都要直接加锁。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689143194,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377734,"user_name":"rrbbt","can_delete":false,"product_type":"c1","uid":1128740,"ip_address":"山东","ucode":"637A27C532D817","user_header":"https://static001.geekbang.org/account/avatar/00/11/39/24/963178c4.jpg","comment_is_top":false,"comment_ctime":1689131120,"is_pvip":false,"replies":[{"id":137660,"content":"如果你不加 for update 的话，正常来说是根据隔离级别，用 MVCC 的机制来读取数据。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1689143298,"ip_address":"广东","comment_id":377734,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"之前写代码，事物里面，select语句从来不在后面加for update结尾。这样会有什么问题吗？","like_count":2,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623189,"discussion_content":"如果你不加 for update 的话，正常来说是根据隔离级别，用 MVCC 的机制来读取数据。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1689143298,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2770150,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/44/e6/2c97171c.jpg","nickname":"sheep","note":"","ucode":"DAC2036F08CE27","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":629181,"discussion_content":"加了 for update  之后就是当前读了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1696779976,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1033240,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJkwbyTYtSCx6Qc7cQPnnRWv38Jybh3etziaPmuP8gHcgS6FMxcdftrKgWiamH6fc2iciaicDKDVEwcEibQ/132","nickname":"sami","note":"","ucode":"9A66FCA00D8A37","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623213,"discussion_content":"可能会产生写偏斜问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689163288,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383992,"user_name":"Geek_035c60","can_delete":false,"product_type":"c1","uid":3768453,"ip_address":"北京","ucode":"08EA6457312DA1","user_header":"","comment_is_top":false,"comment_ctime":1700051552,"is_pvip":false,"replies":[{"id":140357,"content":"感谢，比心！","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1701847417,"ip_address":"广东","comment_id":383992,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"当线程 1 想要执行插入的时候，它想要获得 id = 79 的行锁。当线程 2 想要执行插入的时候，它想要获得 id = 80 的行锁，这个时候就会出现死锁。因为线程 1 和线程 2 同时还在等着对方释放掉持有的间隙锁。\n这里的图中，临时键 ==&gt; 临键锁。","like_count":1,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633134,"discussion_content":"感谢，比心！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1701847417,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":378486,"user_name":"Geek_18dfaf","can_delete":false,"product_type":"c1","uid":1543018,"ip_address":"上海","ucode":"CFC27E78220E2D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqw0R25Bt0iahFhEHfnxmzr9iaZf0eLsDQtFUJzgGkYwHTqicU9TydMngrJ4yL7D50awD2VibHBAdqplQ/132","comment_is_top":false,"comment_ctime":1690334947,"is_pvip":false,"replies":[{"id":137955,"content":"间隙锁要是排它，性能就太差了。你想查询一个数据，结果因为间隙锁有重合，导致查询不了，你肯定不能忍。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1690434679,"ip_address":"广东","comment_id":378486,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"老师，为什么间隙锁不做排他操作呢","like_count":1,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":624323,"discussion_content":"间隙锁要是排它，性能就太差了。你想查询一个数据，结果因为间隙锁有重合，导致查询不了，你肯定不能忍。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1690434679,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":378131,"user_name":"陈斌","can_delete":false,"product_type":"c1","uid":1367048,"ip_address":"广东","ucode":"B639AB5F6AA03D","user_header":"https://static001.geekbang.org/account/avatar/00/14/dc/08/64f5ab52.jpg","comment_is_top":false,"comment_ctime":1689779807,"is_pvip":false,"replies":[{"id":137830,"content":"遗憾的是，你并不能手动指定用意向锁，这个是 MySQL 来控制的。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1689953803,"ip_address":"广东","comment_id":378131,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"意向锁除了变更表结构的例子，还是有其他的例子吗？毕竟意向锁有这么多的好处：使用意向锁能够提高数据库的并发性能，并且避免死锁问题。\nSQL语句中怎么手动使用意向锁？","like_count":1,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623897,"discussion_content":"遗憾的是，你并不能手动指定用意向锁，这个是 MySQL 来控制的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689953803,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1418226,"avatar":"https://static001.geekbang.org/account/avatar/00/15/a3/f2/ab8c5183.jpg","nickname":"Sampson","note":"","ucode":"BA78CA29A6D898","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":625457,"discussion_content":"你好，针对这个问题，有没有案例来说明意向共享锁和意向排它锁的详细情况？ 以前都没听过也没用过","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1691715920,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":378128,"user_name":"陈斌","can_delete":false,"product_type":"c1","uid":1367048,"ip_address":"广东","ucode":"B639AB5F6AA03D","user_header":"https://static001.geekbang.org/account/avatar/00/14/dc/08/64f5ab52.jpg","comment_is_top":false,"comment_ctime":1689778608,"is_pvip":false,"replies":[{"id":137827,"content":"uuid 生成的时候，MySQL 肯定没有感知，所以不会加锁。但是你插入的时候，mysql 就要锁住这个 ID 对应的行。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1689953390,"ip_address":"广东","comment_id":378128,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"直接使用JPA框架插入一条记录，主键id是UUID自动生成的，这个SQL语句会加锁吗？","like_count":1,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623894,"discussion_content":"uuid 生成的时候，MySQL 肯定没有感知，所以不会加锁。但是你插入的时候，mysql 就要锁住这个 ID 对应的行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689953390,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377765,"user_name":"humor","can_delete":false,"product_type":"c1","uid":1181867,"ip_address":"浙江","ucode":"9B48C4C7BEC92C","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/ab/caec7bca.jpg","comment_is_top":false,"comment_ctime":1689160225,"is_pvip":false,"replies":[{"id":137671,"content":"写错了，我修正一下！感谢指正！","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1689225034,"ip_address":"广东","comment_id":377765,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"举个例子，如果数据库中只有 id 为（1，4，7）的三条记录，也就是 id= 3 这个条件没有命中任何数据，那么这条语句会加上间隙锁，而且是在 (-∞,1)、(1,4)、(7，+∞) 这些地方都加上间隙锁。所以你可以看到，在生产环境里面遇到了未命中索引的情况，对性能影响极大。\n\n这个查询只会扫描到记录1和4吧，为什么7以后也加了间隙锁呢","like_count":1,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623244,"discussion_content":"写错了，我修正一下！感谢指正！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689225035,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2328971,"avatar":"","nickname":"Geek8004","note":"","ucode":"B3828F6414BDB0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":626720,"discussion_content":"只会锁(1,4]这个区间吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1693299158,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"中国香港","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377726,"user_name":"我好像一点都不像程序员","can_delete":false,"product_type":"c1","uid":1435733,"ip_address":"广东","ucode":"F479190923355C","user_header":"https://static001.geekbang.org/account/avatar/00/15/e8/55/63189817.jpg","comment_is_top":false,"comment_ctime":1689119566,"is_pvip":false,"replies":[{"id":137658,"content":"哈哈哈，看了又忘，忘了又看，我也是。经典咏流传","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1689143133,"ip_address":"广东","comment_id":377726,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100551601,"comment_content":"默默翻出尘封已久的高性能MYSQL...","like_count":1,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623187,"discussion_content":"哈哈哈，看了又忘，忘了又看，我也是。经典咏流传","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689143133,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1316758,"avatar":"https://static001.geekbang.org/account/avatar/00/14/17/96/a10524f5.jpg","nickname":"蓬蒿","note":"","ucode":"893F958B9DD161","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":637441,"discussion_content":"还真是，昨天晚上默默拿出来浏览了一下目录，准备找时间细读一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1708500988,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":389982,"user_name":"benxiong","can_delete":false,"product_type":"c1","uid":1624574,"ip_address":"湖北","ucode":"F6498059D439D9","user_header":"https://static001.geekbang.org/account/avatar/00/18/c9/fe/874b172b.jpg","comment_is_top":false,"comment_ctime":1714033182,"is_pvip":false,"replies":[{"id":141973,"content":"没有命中索引，我这里是指没有使用索引。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1715230520,"ip_address":"广东","comment_id":389982,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100551601,"comment_content":"“直到后面我们去排查业务代码的提交记录，才发现新加了一个功能，这个功能会执行一个 SQL，但是这个 SQL 本身不会命中任何索引。于是数据库就会使用表锁......”\n老师好，这里说没有命中任何索引，应该是指使用了索引，只是叶子节点没有记录，按照你前面说的，这时使用不了记录锁，会使用间隙锁。是不是和这里说的“数据库就会使用表锁”冲突了","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":644393,"discussion_content":"没有命中索引，我这里是指没有使用索引。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1715230520,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383986,"user_name":"Geek_035c60","can_delete":false,"product_type":"c1","uid":3768453,"ip_address":"北京","ucode":"08EA6457312DA1","user_header":"","comment_is_top":false,"comment_ctime":1700042696,"is_pvip":false,"replies":[{"id":140355,"content":"你这样说也可以，临键锁本身也包含了间隙锁。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1701847244,"ip_address":"广东","comment_id":383986,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100551601,"comment_content":"“临键锁和数据库隔离级别的联系最为紧密，它可以解决在可重复读隔离级别之下的幻读问题。” 解决幻读问题，应该是间隙锁吧。","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633131,"discussion_content":"你这样说也可以，临键锁本身也包含了间隙锁。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1701847244,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383983,"user_name":"Geek_035c60","can_delete":false,"product_type":"c1","uid":3768453,"ip_address":"北京","ucode":"08EA6457312DA1","user_header":"","comment_is_top":false,"comment_ctime":1700041499,"is_pvip":false,"replies":[{"id":140354,"content":"我觉得这些概念就是从不同的角度来说。行锁相对应的是表锁，记录锁的话，我觉得应该可以看成是行锁，没太大的区别。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1701847187,"ip_address":"广东","comment_id":383983,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100551601,"comment_content":"记录锁，是不是就是行锁呀？如果是的话，为什么这里需要使用两个概念？如果不是的话，记录锁与行锁的区别是什么呢？","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633130,"discussion_content":"我觉得这些概念就是从不同的角度来说。行锁相对应的是表锁，记录锁的话，我觉得应该可以看成是行锁，没太大的区别。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1701847187,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383981,"user_name":"Geek_035c60","can_delete":false,"product_type":"c1","uid":3768453,"ip_address":"北京","ucode":"08EA6457312DA1","user_header":"","comment_is_top":false,"comment_ctime":1700041093,"is_pvip":false,"replies":[{"id":140353,"content":"嗯。说得不对吗？","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1701847149,"ip_address":"广东","comment_id":383981,"utype":1}],"discussion_count":5,"race_medal":0,"score":3,"product_id":100551601,"comment_content":"&quot;id = 15 的值根本不存在，那么怎么锁？InnoDB 引擎会利用最接近 15 的相邻的两个节点，构造一个临键锁。&quot; 这里的查询会锁住(12,17]，确认是包括17吗？","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633129,"discussion_content":"嗯。说得不对吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1701847149,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1691914,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ert92MgK3UVibmiaW9dQ3qv7DVC754gfRdjRmFKK1vibgwo8zCQ6jmiahpOozyCGxP9TxuEY98q9e0OPa6dLwo2TRw/132","nickname":"lin丶","note":"","ucode":"91DB245A77F169","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":643673,"discussion_content":"这里不会包括17吧，根据45讲里提到的优化2，索引上的等值查询，向右遍历时且最后一个值不满足条件时，next-key lock退化为间隙锁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1714532412,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":633129,"ip_address":"广东","group_id":0},"score":643673,"extra":""}]},{"author":{"id":3787155,"avatar":"https://static001.geekbang.org/account/avatar/00/39/c9/93/13c7d9aa.jpg","nickname":"shikamaru","note":"","ucode":"19260049B7F498","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":638684,"discussion_content":"确实没搞懂，解决幻读为什么必须是临键锁呢？间隙锁不也能阻止插入新数据吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1709800814,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1110574,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f2/2e/cb647708.jpg","nickname":"起风了","note":"","ucode":"DEA3B47B7F3C3F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":635020,"discussion_content":"为什么不是（12,16】","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1704293292,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3794407,"avatar":"","nickname":"Geek_3d0fe8","note":"","ucode":"E75EACDA00E7A6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633504,"discussion_content":"为什么要把17锁住呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1702269971,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":380553,"user_name":"Jason Ding","can_delete":false,"product_type":"c1","uid":1365944,"ip_address":"上海","ucode":"E62AB51E7F2D6E","user_header":"https://static001.geekbang.org/account/avatar/00/14/d7/b8/c42d2527.jpg","comment_is_top":false,"comment_ctime":1693813113,"is_pvip":false,"replies":[{"id":138594,"content":"又是怎么个说法？\n\nTo prevent phantoms, InnoDB uses an algorithm called next-key locking that combines index-row locking with gap locking.\n\nhttps:&#47;&#47;dev.mysql.com&#47;doc&#47;refman&#47;8.0&#47;en&#47;innodb-next-key-locking.html","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1693895104,"ip_address":"广东","comment_id":380553,"utype":1}],"discussion_count":4,"race_medal":0,"score":3,"product_id":100551601,"comment_content":"Next-Key Locks 没有完全解决幻读问题","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":627197,"discussion_content":"又是怎么个说法？\n\nTo prevent phantoms, InnoDB uses an algorithm called next-key locking that combines index-row locking with gap locking.\n\nhttps://dev.mysql.com/doc/refman/8.0/en/innodb-next-key-locking.html","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1693895105,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":2,"child_discussions":[{"author":{"id":1138926,"avatar":"https://static001.geekbang.org/account/avatar/00/11/60/ee/b536678b.jpg","nickname":"傲然绝唳","note":"","ucode":"BD7365DD44589B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":644973,"discussion_content":"Next-Key Locks 可以解决两次都是当前读的幻读问题，解决不了第一次快照读，第二次当前读的幻读问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1715671045,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":627197,"ip_address":"北京","group_id":0},"score":644973,"extra":""},{"author":{"id":2278966,"avatar":"https://static001.geekbang.org/account/avatar/00/22/c6/36/70f2083c.jpg","nickname":"open！？","note":"","ucode":"53E6D336DB7F22","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1138926,"avatar":"https://static001.geekbang.org/account/avatar/00/11/60/ee/b536678b.jpg","nickname":"傲然绝唳","note":"","ucode":"BD7365DD44589B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":654164,"discussion_content":"什么情况下一个事物内 隔离级别都变了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1732060490,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":644973,"ip_address":"浙江","group_id":0},"score":654164,"extra":""}]},{"author":{"id":2328971,"avatar":"","nickname":"Geek8004","note":"","ucode":"B3828F6414BDB0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":627153,"discussion_content":"举个例子? ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1693840381,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":380523,"user_name":"Geek8004","can_delete":false,"product_type":"c1","uid":2328971,"ip_address":"中国香港","ucode":"B3828F6414BDB0","user_header":"","comment_is_top":false,"comment_ctime":1693754664,"is_pvip":false,"replies":[{"id":138595,"content":"不是。意向锁的意思是我将来要拿一个锁，MDL 是你已经拿到了锁。所以我的理解就是，如果你要拿MDL 读锁，你现有一个意向共享锁。写锁也是类似的。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1693895564,"ip_address":"广东","comment_id":380523,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100551601,"comment_content":"意向共享锁和MDL读锁 ; 意向拍他锁和mdl写锁什么关系,等价吗?","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":627200,"discussion_content":"不是。意向锁的意思是我将来要拿一个锁，MDL 是你已经拿到了锁。所以我的理解就是，如果你要拿MDL 读锁，你现有一个意向共享锁。写锁也是类似的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1693895564,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":379275,"user_name":"牙小木","can_delete":false,"product_type":"c1","uid":1172050,"ip_address":"北京","ucode":"E5C12D37A62949","user_header":"https://static001.geekbang.org/account/avatar/00/11/e2/52/56dbb738.jpg","comment_is_top":false,"comment_ctime":1691650213,"is_pvip":false,"replies":[{"id":138209,"content":"谢谢！","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1691754434,"ip_address":"广东","comment_id":379275,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100551601,"comment_content":"哈哈，实在又实用，","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":625491,"discussion_content":"谢谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1691754434,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":379269,"user_name":"牙小木","can_delete":false,"product_type":"c1","uid":1172050,"ip_address":"北京","ucode":"E5C12D37A62949","user_header":"https://static001.geekbang.org/account/avatar/00/11/e2/52/56dbb738.jpg","comment_is_top":false,"comment_ctime":1691640774,"is_pvip":false,"replies":[{"id":138208,"content":"是的。不过其实我觉得与其理解为优化，不如说如果我是一个设计者，我也会直接咔嚓一个记录锁锁住，因为在这种情况下我能准确推断出来哪些需要被锁住。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1691754427,"ip_address":"广东","comment_id":379269,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100551601,"comment_content":"提个醒：查询的索引含有唯一属性的时候，Next-Key Lock 会进行优化，将其降级为Record Lock，即仅锁住索引本身，但是普通索引没有唯一属性，就会升级为gap了","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":625490,"discussion_content":"是的。不过其实我觉得与其理解为优化，不如说如果我是一个设计者，我也会直接咔嚓一个记录锁锁住，因为在这种情况下我能准确推断出来哪些需要被锁住。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1691754427,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":378746,"user_name":"Geek_9af983","can_delete":false,"product_type":"c1","uid":3684267,"ip_address":"北京","ucode":"4B7EB954CC072F","user_header":"","comment_is_top":false,"comment_ctime":1690713463,"is_pvip":false,"replies":[{"id":138053,"content":"你需要显式锁住某一行，不想别人修改的时候。你们不用说明你们可能用了乐观锁、分布式锁之类的东西。\n\n不用是好事，哈哈哈。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1690890862,"ip_address":"广东","comment_id":378746,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100551601,"comment_content":"老师宁好呀，什么情况下select .... 需要加for update呀，我们项目中从来没这么写过","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":624757,"discussion_content":"你需要显式锁住某一行，不想别人修改的时候。你们不用说明你们可能用了乐观锁、分布式锁之类的东西。\n\n不用是好事，哈哈哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1690890862,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":378611,"user_name":"胡月🌈","can_delete":false,"product_type":"c1","uid":1255734,"ip_address":"北京","ucode":"D50890B8FF24A9","user_header":"https://static001.geekbang.org/account/avatar/00/13/29/36/c6bb0893.jpg","comment_is_top":false,"comment_ctime":1690500831,"is_pvip":false,"replies":[{"id":137982,"content":"问倒我了，我自己没有遇到过。我认为在互联网业务里面应该没啥必须得场景，但是金融那边就不太确定。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1690605771,"ip_address":"广东","comment_id":378611,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100551601,"comment_content":"我做过的项目隔离级别都是读已提交。可重复读隔离级别没用到过，有什么场景必须用可重复读吗？","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":624481,"discussion_content":"问倒我了，我自己没有遇到过。我认为在互联网业务里面应该没啥必须得场景，但是金融那边就不太确定。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1690605771,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1703085,"avatar":"","nickname":"Geek_20f6bc","note":"","ucode":"AB00FE5F029840","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":626296,"discussion_content":"\n1.一些跑批的场景, 需要做数据一致性校验,要在一个一致性的快照里实现,需要RR级别.\n譬如:分别从订单维度统计卖出商品的数量和从商品表的库存统计数量是否一致,先跑批订单表,再跑批商品表,\n如果用RC级别,  订单表统计完成,  中间插入很多新的交易, 再统计商品表, 两次数量肯定对不上了.\n\n2.数据库备存, 每次备份肯定要在一个一致性快照里实现, 不能备份过程中数据还在变动\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1692776855,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":378484,"user_name":"Geek_18dfaf","can_delete":false,"product_type":"c1","uid":1543018,"ip_address":"上海","ucode":"CFC27E78220E2D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqw0R25Bt0iahFhEHfnxmzr9iaZf0eLsDQtFUJzgGkYwHTqicU9TydMngrJ4yL7D50awD2VibHBAdqplQ/132","comment_is_top":false,"comment_ctime":1690333176,"is_pvip":false,"replies":[{"id":137954,"content":"应该说，你可以加很多间隙锁，间隙锁之间是可以重合的，然后这个时候你可以读数据。但是，写操作是不行的。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1690434652,"ip_address":"广东","comment_id":378484,"utype":1}],"discussion_count":2,"race_medal":0,"score":4,"product_id":100551601,"comment_content":"间隙锁不是排它的，那间隙锁中间插入数据不会出问题么","like_count":0,"discussions":[{"author":{"id":1138926,"avatar":"https://static001.geekbang.org/account/avatar/00/11/60/ee/b536678b.jpg","nickname":"傲然绝唳","note":"","ucode":"BD7365DD44589B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":644974,"discussion_content":"间隙锁和间隙锁不互斥，间隙锁和写操作互斥","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1715671112,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":624322,"discussion_content":"应该说，你可以加很多间隙锁，间隙锁之间是可以重合的，然后这个时候你可以读数据。但是，写操作是不行的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1690434652,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":378130,"user_name":"陈斌","can_delete":false,"product_type":"c1","uid":1367048,"ip_address":"广东","ucode":"B639AB5F6AA03D","user_header":"https://static001.geekbang.org/account/avatar/00/14/dc/08/64f5ab52.jpg","comment_is_top":false,"comment_ctime":1689779618,"is_pvip":false,"replies":[{"id":137829,"content":"不是，在 1， 4，7 里面，&lt; 5 这个条件，你会发现第一个比 5 大的是 7，但是 7 不在你的条件范围里，是条件范围，所以是 -inf, 7 的间隙锁。注意，你加锁的那个锁，必然是和你真的有的一个数据相关的，因为锁本身是借助索引来实现的，也就是你需要有对应的索引项。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1689953667,"ip_address":"广东","comment_id":378130,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100551601,"comment_content":"我这里依旧给你准备了简洁版的记忆口诀，让你用来判断使用的是记录锁、间隙锁还是临键锁。\n遇事不决临键锁。你可以认为，全部都是加临键锁的，除了下面两个子句提到的例外情况。\n右边缺省间隙锁。例如你的值只有（1，4，7）三个，但是你查询的条件是 WHERE id &lt; 5，那么加的其实是间隙锁，因为 7 本身不在你的条件范围内。（这里的7是不是写错了，应该是5）\n等值查询记录锁。这个其实针对的是主键和唯一索引，普通索引只适用上面两条。\n\n你给的第二个原则是不是说：如果是有比较的查询条件 （&gt;,&gt;=,&lt;,&lt;=），加锁都是加的间隙锁，记录有1，3，7，并且id是唯一索引情况下： id &lt; 5 , 加的是 (-inf, 5) 还是 (-inf, 3)的间隙锁？如果是(-inf, 3)的间隙锁有4插入进来不就导致加锁失败？","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623896,"discussion_content":"不是，在 1， 4，7 里面，&lt; 5 这个条件，你会发现第一个比 5 大的是 7，但是 7 不在你的条件范围里，是条件范围，所以是 -inf, 7 的间隙锁。注意，你加锁的那个锁，必然是和你真的有的一个数据相关的，因为锁本身是借助索引来实现的，也就是你需要有对应的索引项。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689953667,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":378129,"user_name":"陈斌","can_delete":false,"product_type":"c1","uid":1367048,"ip_address":"广东","ucode":"B639AB5F6AA03D","user_header":"https://static001.geekbang.org/account/avatar/00/14/dc/08/64f5ab52.jpg","comment_is_top":false,"comment_ctime":1689778970,"is_pvip":false,"replies":[{"id":137828,"content":"加什么锁我应该讲得比较清晰了。如果你觉得还是没看懂，那么可以看看林老师的 mysql 45 讲，里面讲得更加详细。\n\n坦白说，你现在给我一个，我也很难分析出来。我每次都是面试前突击一把，趁着还记得赶紧出去面试。平时工作中分析，也是打开自己的笔记对着来分析。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1689953481,"ip_address":"广东","comment_id":378129,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100551601,"comment_content":"能讲讲加锁的原理吗，例如我可以利用该原理分析出 在普通索引上使用等值查询和在普通索引上使用范围查询怎么加锁？\n看完文章之后，你在文章中提出的问题，给出一个SQL要分析如何加锁还是不会。","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623895,"discussion_content":"加什么锁我应该讲得比较清晰了。如果你觉得还是没看懂，那么可以看看林老师的 mysql 45 讲，里面讲得更加详细。\n\n坦白说，你现在给我一个，我也很难分析出来。我每次都是面试前突击一把，趁着还记得赶紧出去面试。平时工作中分析，也是打开自己的笔记对着来分析。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689953481,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":378072,"user_name":"gevin","can_delete":false,"product_type":"c1","uid":1005862,"ip_address":"浙江","ucode":"B5AD68F1884A1F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/26/1015d573.jpg","comment_is_top":false,"comment_ctime":1689730411,"is_pvip":false,"replies":[{"id":137783,"content":"一般在追求并发和性能的程序里面，要尽可能减轻数据库的负担，所以原则都是能在应用层面解决的，就在应用层面解决。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1689742110,"ip_address":"广东","comment_id":378072,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100551601,"comment_content":"要保证业务结果的正确，在业务代码里加锁，或在数据库层加锁，应该都可以的吧？选择在哪里实现锁的逻辑，实践中有没有啥常用的指导原则？","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623678,"discussion_content":"一般在追求并发和性能的程序里面，要尽可能减轻数据库的负担，所以原则都是能在应用层面解决的，就在应用层面解决。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689742110,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":378003,"user_name":"xyu","can_delete":false,"product_type":"c1","uid":1061974,"ip_address":"浙江","ucode":"B048E920E5C917","user_header":"https://static001.geekbang.org/account/avatar/00/10/34/56/fe22bae8.jpg","comment_is_top":false,"comment_ctime":1689654497,"is_pvip":false,"replies":[{"id":137757,"content":"是的！悲观锁适合写多读少的，写频繁用乐观锁反而会使得性能更差。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1689680049,"ip_address":"广东","comment_id":378003,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100551601,"comment_content":"大明老师，我这里有个疑问：\n针对“一般来说就是 UPDATE xxx SET data = newData WHERE id = 1 AND data = oldData。这种改造效果非常好，性能提升了 30%”这句话，乐观锁对悲观锁的改造能提升性能，是针对读多写少的场景吧？如果是写多的场景，基于悲观锁的逻辑性能是否可能会更好一点？\n谢谢！","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623612,"discussion_content":"是的！悲观锁适合写多读少的，写频繁用乐观锁反而会使得性能更差。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689680049,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377773,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"北京","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1689170174,"is_pvip":false,"replies":[{"id":137669,"content":"1. JAVA 是没有的，因为JAVA 没有协程概念。你在这里用线程池和连接池来替代。\n2. 悲观锁就是你正常用的锁。你要区别你是在应用上加锁还是在数据库上加锁。应用上加锁，就是你自己用 Lock；SQL 上加锁，一般不需要你管，SELECT 语句你就需要用 FOR UPDATE\n3. 无脑用 InnoDB，后面等你深入研究了再说。\n4. 实际上记录锁和行锁只是从不同的角度来看，大部分情况下，就是一把锁的不同名字。\n5. 目前我看大部分中文翻译都是用 临键锁\n6. 后面内容有，不要急。\n7. 都有效。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1689224094,"ip_address":"广东","comment_id":377773,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100551601,"comment_content":"请教老师几个问题：\nQ1：Java中有协程池吗？\n模拟面试（一）中提到了协程池，一般都是用Java开发，Java中没有协程啊。\nQ2：这几种锁，具体是怎么定义的？以Java代码为例，锁是在SQL语句中指定？还是在Java代码中指定？比如悲观锁，是在某个地方加一个关键字“BeiGuan”吗？\nQ3：MySQL有两个引擎，InnoDB和MyISAM，怎么选择？\nQ4：记录锁等于行锁吗？ 都是锁住一行啊。\nQ5：“临键锁”，第一个字应该是“邻”吗？\nQ6：会讲事务吗？希望能讲讲事务。\nQ7：共享锁，两个线程都加锁的话，哪个有效？","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623242,"discussion_content":"1. JAVA 是没有的，因为JAVA 没有协程概念。你在这里用线程池和连接池来替代。\n2. 悲观锁就是你正常用的锁。你要区别你是在应用上加锁还是在数据库上加锁。应用上加锁，就是你自己用 Lock；SQL 上加锁，一般不需要你管，SELECT 语句你就需要用 FOR UPDATE\n3. 无脑用 InnoDB，后面等你深入研究了再说。\n4. 实际上记录锁和行锁只是从不同的角度来看，大部分情况下，就是一把锁的不同名字。\n5. 目前我看大部分中文翻译都是用 临键锁\n6. 后面内容有，不要急。\n7. 都有效。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689224094,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377756,"user_name":"赵不贪","can_delete":false,"product_type":"c1","uid":2223294,"ip_address":"上海","ucode":"7DFAC63499A25E","user_header":"https://static001.geekbang.org/account/avatar/00/21/ec/be/533996df.jpg","comment_is_top":false,"comment_ctime":1689152350,"is_pvip":false,"replies":[{"id":137670,"content":"啊！没修改过来，漏网之鱼，我订正一下。感谢指正！","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1689225013,"ip_address":"广东","comment_id":377756,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100551601,"comment_content":"&gt; 举个例子，如果数据库中只有 id 为（1，4，7）的三条记录，也就是 id= 3 这个条件没有命中任何数据，那么这条语句会加上间隙锁，而且是在 (-∞,1)、(1,4)、(7，+∞) 这些地方都加上间隙锁。\n\n请问为什么这里会加三个间隙锁，而不是在1和4之间加呢?","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623243,"discussion_content":"啊！没修改过来，漏网之鱼，我订正一下。感谢指正！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689225013,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377730,"user_name":"Johar","can_delete":false,"product_type":"c1","uid":1101969,"ip_address":"重庆","ucode":"834136A6F64CDC","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/91/89123507.jpg","comment_is_top":false,"comment_ctime":1689122442,"is_pvip":false,"replies":[{"id":137662,"content":"严格的来说，插入的叫做插入意向锁(insert intention lock)，这是一个排它锁。你可以直接理解为一个接近行锁的东西。而如果你的 insert 需要自增主键，那么还会有自增主键锁，这个锁和你的隔离级别有关，在专栏后面有提到。\n\n而 mysql 的间隙锁实际上不是我们加的，是 mysql 自己加的。我用自己的话来说，就是可以想象成有一个锁的类型，里面有两个额外字段，一个 startIndex，还有一个 endIndex。","user_name":"作者回复","user_name_real":"编辑","uid":1176655,"ctime":1689143794,"ip_address":"广东","comment_id":377730,"utype":1}],"discussion_count":2,"race_medal":0,"score":4,"product_id":100551601,"comment_content":"1.优化过查询没有使用索引造成的慢sql\n2.在表中增加version字段，每次更新判断version值，若一致，则更新数据，并且version=version+1\n，否则，不更新数据。\n3.老师请教一下insert 过程会加那些锁？mysql里面间隙锁是怎么加锁的？","like_count":0,"discussions":[{"author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623191,"discussion_content":"严格的来说，插入的叫做插入意向锁(insert intention lock)，这是一个排它锁。你可以直接理解为一个接近行锁的东西。而如果你的 insert 需要自增主键，那么还会有自增主键锁，这个锁和你的隔离级别有关，在专栏后面有提到。\n\n而 mysql 的间隙锁实际上不是我们加的，是 mysql 自己加的。我用自己的话来说，就是可以想象成有一个锁的类型，里面有两个额外字段，一个 startIndex，还有一个 endIndex。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689143794,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1101969,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d0/91/89123507.jpg","nickname":"Johar","note":"","ucode":"834136A6F64CDC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1176655,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/4f/aa916c8c.jpg","nickname":"邓小明","note":"","ucode":"02243D1F7492A6","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":623214,"discussion_content":"老师，请教一下mysql里面间隙锁是怎么实现锁间隙？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689169017,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":623191,"ip_address":"重庆","group_id":0},"score":623214,"extra":""}]}]},{"had_liked":false,"id":383984,"user_name":"Geek_035c60","can_delete":false,"product_type":"c1","uid":3768453,"ip_address":"北京","ucode":"08EA6457312DA1","user_header":"","comment_is_top":false,"comment_ctime":1700042206,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100551601,"comment_content":"“记录锁和记录锁是排它的，但是间隙锁和间隙锁不是排它的。”读起来好繁琐呀。直接：记录锁是排它的，间隙锁不是排它的。不是更好吗？","like_count":1},{"had_liked":false,"id":393605,"user_name":"白菜","can_delete":false,"product_type":"c1","uid":2230467,"ip_address":"北京","ucode":"C3AE527ECE970E","user_header":"https://static001.geekbang.org/account/avatar/00/22/08/c3/bf4fe285.jpg","comment_is_top":false,"comment_ctime":1724300084,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100551601,"comment_content":"关于锁，有个疑问，希望能有人解答一下。关于锁锁住的是“查询最终使用的那个索引”：\n如果事务A中使用悲观锁 for update 查询到一条记录，命中索引 x，就会在索引 x 的叶子节点上加锁。\n此时事务B中使用悲观锁 for update 查询到同一条记录，命中的是索引 y，那事务 B应该是再索引 y 上加锁。\n如果只在各自使用的索引上加锁的话，这两个事务的查询之间应该是互不影响的，但实际情况事务 B 是会等待事务 A的锁释放的。这种情况怎么解释？\n还有一种情况是事务 a 和事务 b 查询时都用到了覆盖索引，因此这两个事务的查询都不需要回表，都不会在聚簇索引中产生资源竞争，但实际情况事务 B 还是会等待事务 A 的锁释放的。这种情况怎么解释？","like_count":0},{"had_liked":false,"id":392183,"user_name":"叫我阳仔就好啦","can_delete":false,"product_type":"c1","uid":3651338,"ip_address":"北京","ucode":"905EFB806688A9","user_header":"https://static001.geekbang.org/account/avatar/00/37/b7/0a/2ffa8324.jpg","comment_is_top":false,"comment_ctime":1720171576,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100551601,"comment_content":"临键锁引发的死锁，这个距离里面的ID是唯一索引吗，如果是唯一索引这个例子存在吗。为什么我看其他文档里面都说，临建锁只存在于非唯一索引上。","like_count":0},{"had_liked":false,"id":391280,"user_name":"白菜炒五花肉","can_delete":false,"product_type":"c1","uid":1519828,"ip_address":"浙江","ucode":"0D4CBD221C2880","user_header":"https://static001.geekbang.org/account/avatar/00/17/30/d4/6eb8f5af.jpg","comment_is_top":false,"comment_ctime":1717810423,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100551601,"comment_content":"老师，这些优化案例，直接拿来用可以嘛，面试官会不会问你具体业务场景，在什么场景下优化的等等","like_count":0},{"had_liked":false,"id":390681,"user_name":"TheOne","can_delete":false,"product_type":"c1","uid":1582134,"ip_address":"北京","ucode":"2A359780156A8B","user_header":"https://static001.geekbang.org/account/avatar/00/18/24/36/0829cbdc.jpg","comment_is_top":false,"comment_ctime":1715946155,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100551601,"comment_content":"大明老师，关于加锁我也有一些问题想请教一下，比如我有一个表t，字段是a，b都是int类型，b有唯一索引，表里有10条记录，a，b字段都是1到10的数字\n\n假设一个查询 select ⭐ from t where a=10 for update\n第二个查询 select ⭐ from t where a=1 for update\n\n这两个查询都用了没有索引的a字段，按照您讲的来说，是加了表锁，但是根据我看的林老师的mysql45讲里面，是把扫描到的都加上锁，我的问题是第二个查询会不会只锁了a=1和2的两行记录呢？\n\n锁1是因为全表扫的时候第一个是1，直到扫到2才能确定没有1了，所以锁住了1和2两行，锁的是主键索引，不会全表锁\n\n其实这个我应该去试一试就知道了，现在想问一下第二个问题\n\n还是基于给扫描的行加上锁这一点，假设我给a字段设置了索引，然后语句改成 where a=10，mysql可以一次直接找到a=10的这条记录吗？\n应该还是要经过一次或者两次的查找才能查到10这条记录的吧，那这中间涉及到的行，都是在二级索引上加了间隙锁，在10这行的主键索引上加了写锁，可以这么理解吗","like_count":0},{"had_liked":false,"id":390668,"user_name":"mongolhu","can_delete":false,"product_type":"c1","uid":2298661,"ip_address":"江苏","ucode":"AF14BBE31F089A","user_header":"https://static001.geekbang.org/account/avatar/00/23/13/25/9d57e55d.jpg","comment_is_top":false,"comment_ctime":1715924754,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100551601,"comment_content":"SELECT * FROM your_tab WHERE id = 15 FOR UPDATE\n这里老师给出的加锁范围有误，按照索引等值连接加锁规则，向右遍历且最后一值仍不满足等值条件，临键锁会退化成间隙锁，锁的范围应该是左右开区间（12，17），可实例证明。","like_count":0},{"had_liked":false,"id":389846,"user_name":"Geek_440fc7","can_delete":false,"product_type":"c1","uid":3876444,"ip_address":"上海","ucode":"990C9BFFCF911A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/GPLUa1IFLd5wvoLPEia1ick2bznDf7ESvKH3baY6fkjNlwtBnFbU2jdNlhKJQCibOAaPEjp5A31MEgU7hJ9DBSqaJOvmlXSeAHBxmdAQ6FmXjM/132","comment_is_top":false,"comment_ctime":1713626164,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100551601,"comment_content":"我就在生产遇到因为gap锁引起的死锁情况，我们数据库的默认隔离级别也是RR，后来把这个sql相关的事务session级别改成了RC就没问题了，本身也并不会重复读取数据，也是先读出来然后一通计算最后插入或更新。","like_count":0},{"had_liked":false,"id":389218,"user_name":"NullPointerException","can_delete":false,"product_type":"c1","uid":1672137,"ip_address":"上海","ucode":"CE823125E9985F","user_header":"https://static001.geekbang.org/account/avatar/00/19/83/c9/0b25d9eb.jpg","comment_is_top":false,"comment_ctime":1711871338,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100551601,"comment_content":"需要加隔离级别吧。 RC 和 RU级别加锁是不一样的","like_count":0},{"had_liked":false,"id":388370,"user_name":"天天有吃的","can_delete":false,"product_type":"c1","uid":1604355,"ip_address":"福建","ucode":"6267FE8E68DEE5","user_header":"https://static001.geekbang.org/account/avatar/00/18/7b/03/03583011.jpg","comment_is_top":false,"comment_ctime":1710051487,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100551601,"comment_content":"老师，还是不是很明白间隙锁和临键锁的区别啊？能不能举例说明一下什么时候用临键锁，什么时候用间隙锁？","like_count":0},{"had_liked":false,"id":388286,"user_name":"shikamaru","can_delete":false,"product_type":"c1","uid":3787155,"ip_address":"四川","ucode":"19260049B7F498","user_header":"https://static001.geekbang.org/account/avatar/00/39/c9/93/13c7d9aa.jpg","comment_is_top":false,"comment_ctime":1709801620,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100551601,"comment_content":"老师好~ 在表中增加version字段，每次更新判断version值，若一致，则更新数据，并且version=version+1，否则，不更新数据。1.这里不需要考虑ABA问题吗？2.version不一致的情况下代码一般怎么处理？直接返回吗？","like_count":0},{"had_liked":false,"id":379265,"user_name":"牙小木","can_delete":false,"product_type":"c1","uid":1172050,"ip_address":"北京","ucode":"E5C12D37A62949","user_header":"https://static001.geekbang.org/account/avatar/00/11/e2/52/56dbb738.jpg","comment_is_top":false,"comment_ctime":1691637900,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100551601,"comment_content":"https:&#47;&#47;dev.mysql.com&#47;doc&#47;refman&#47;5.7&#47;en&#47;innodb-locking.html","like_count":0}]}