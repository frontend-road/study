{"id":775105,"title":"14｜数据上报方案：如何在不影响用户体验下实现数据上报？","content":"<p>你好，我是三桥。</p><p>前面几节课，我们一直学习如何在前端应用中捕获前端异常信息，并基于全链路数据结构把信息存储起来。这节课，我们就来看下应该如何用最优的方法，把异常信息上报到后端服务。</p><p>不少前端同学都非常熟悉监控平台SDK上报埋点数据的流程，那在这节课，我们换个角度探讨3个重要的逻辑，分别是选择上报方式、实现简易的上报接口以及选择上报时机。</p><h2>前端埋点上报的方式</h2><p>实际上，前端全链路的埋点上报方案和前端监控埋点的方案是相同的。目前主流的前端监控平台都是使用GIF进行埋点，例如百度统计、谷歌统计等。</p><p>什么是上报呢？就是当前端页面产生链路日志后，将日志数据传递给服务器的过程。也就是说，只要能将数据上报到服务器，那么无论是GIF请求还是Fetch请求，监控服务器是不需要关心具体的上报方式的。</p><p>不过选择上报方式也很重要。在说如何选择之前，我们先来了解下三种常见的请求上报方式。</p><h3>为什么不用Fetch和xhr？</h3><p>虽然使用Fetch特性上报埋点是一个可行的方案，但并不是最优的选择。有三个原因。</p><p>第一，Fetch需要遵循同源策略。也就是说，跨域请求可能会因为浏览器的限制而请求失败。</p><p>第二，Fetch是新Web浏览器的特性和标准，要满足兼容旧版本浏览器，就需要采用polyfill的方式解决兼容问题，无形中给SDK增加了不少兼容性代码，造成负担。</p><!-- [[[read_end]]] --><p>第三，直接使用Fetch可能会受到网络波动或请求超时等因素影响，导致数据丢失或不准确。</p><p>另外提一句，XMLHttpRequest是最早支持前端代码请求的方法，但需要封装更多的代码，而且还不支持Promise。但因为它对低端浏览器的兼容性是最好的，所以，我们可以把它作为向下的兼容方案。</p><h3>使用sendBeacon的利弊</h3><p>第二种方案利用了浏览器Beacon API能力。它可以给服务器发送异步和非阻塞请求，这类请求是不需要响应结果的。它最大的优势是浏览器会在保证页面卸载前就把请求发送完成。所以我们经常会利用它将分析数据发送给服务器。</p><p>以下是使用sendBeacon的实现代码。</p><pre><code class=\"language-typescript\">// src/core/util.ts\n\nexport function sendBeacon(url: string, data: TraceData) {\n&nbsp; if (typeof navigator === 'undefined') return\n&nbsp; navigator.sendBeacon &amp;&amp; navigator.sendBeacon(url, JSON.stringify(data))\n}\n</code></pre><p>需要注意的是，Beacon API存在一定的局限性。例如兼容性问题，像微信内置浏览器和微信小程序这两种场景，Beacon API就无法使用了，需要考虑使用其它方案。</p><h3>使用GIF图片</h3><p>第三种方案是通过图片请求的方式完成数据的上报，只要创建一个Image对象，并将其src属性设为“需要上报的URL”就可以了。</p><p>这是一种既简单又快速的方式。它解决了前面两个技术的兼容性问题和跨域问题，甚至还有一个明显的优点，就是不会阻塞页面加载，即使请求失败也不会影响用户对页面的正常交互体验。所以，前端监控平台通常会采用这种方案。</p><p>那怎么使用图片才是最优的方案呢？我们先选择1x1像素的透明图片，也是最小的合法图片。接着，我们选择GIF格式，因为它的体积比BMP、PNG格式还要小，所以能节省用户的流量。</p><p>下面是使用图片上报的逻辑实现代码。</p><pre><code class=\"language-typescript\">// src/core/util.ts\n\nexport function sendByImg(url: string, data: TraceData) {\n&nbsp; const spliceStr = url.indexOf('?') === -1 ? '?' : '&amp;'\n&nbsp; const imageUrl = `${url}${spliceStr}data=${encodeURIComponent(safeStringify(data))}`;\n&nbsp; let img = new Image()\n&nbsp; img.src = imageUrl\n&nbsp; img.onload = function() {\n&nbsp; &nbsp; console.log(\"Tracking data sent successfully!\");\n&nbsp; &nbsp; img = null\n&nbsp; };\n&nbsp; img.onerror = function() {\n&nbsp; &nbsp; console.error(\"Failed to send tracking data.\");\n&nbsp; &nbsp; img = null\n&nbsp; };\n}\n</code></pre><p>通过对比三种常见的请求方式，最终我们选择使用GIF图片作为埋点上报的方案。至于其它方案，在真正需要用到的时候再去兼容即可。</p><h2>简易的上报接口</h2><p>有些同学可能会好奇，前端使用GIF图片上报埋点的方式，后端服务是怎么实现的？为什么发起一次图片请求，就可以把参数带回服务器端，并且还能把数据保存起来？</p><p>这里虽然涉及一些后端的知识，但并不难理解。实际上，实现埋点上报接口，代码逻辑不会很多，反而是最容易实现的接口。</p><h3>接口的实现</h3><p>我们以前端同学熟悉的Node.js为例，结合Express框架，实现一个简单的上报接口。具体的代码实现如下。</p><pre><code class=\"language-typescript\">const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/track.gif', (req, res) =&gt; {\n&nbsp; &nbsp; const data = req.query.data; // 获取URL中的data参数\n\n&nbsp; &nbsp; // 在实际应用中，这里可以将data存储到数据库或日志文件中\n&nbsp; &nbsp; console.log(\"Received tracking data: \", data);\n\n&nbsp; &nbsp; // 返回一个1x1像素的透明GIF图片\n&nbsp; &nbsp; const img = Buffer.from('R0lGODlhAQABAIAAAP///wAAACH5BAEAAAAALAAAAAABAAEAAAICRAEAOw==', 'base64');\n&nbsp; &nbsp; res.writeHead(200, {\n&nbsp; &nbsp; &nbsp; &nbsp; 'Content-Type': 'image/gif',\n&nbsp; &nbsp; &nbsp; &nbsp; 'Content-Length': img.length\n&nbsp; &nbsp; });\n&nbsp; &nbsp; res.end(img);\n});\n\napp.listen(port, () =&gt; {\n&nbsp; &nbsp; console.log(`Server running at http://localhost:${port}`);\n});\n</code></pre><p>这几行代码有三个重点。</p><p>第一是使用track.gif名字作为接口路径，模拟出gif格式的URL地址。这个带有gif后缀的地址相当于说明了这个URL是为了让前端代码发起一个图片格式的请求。</p><p>第二，创建一个1x1像素的透明GIF图片。其逻辑是把要编码的字符串以Base64编码格式生成Buffer对象。</p><p>第三，在返回结果前，给接口的响应类型设置为gif格式，即“image/gif”。再把响应头的内容长度设置为图片的长度。最后通过res.end方法把生成的图片对象返回给前端。</p><p>这三个重点，构成了最简单的模拟GIF格式接口的核心逻辑。</p><h3>日志存储的方案</h3><p>细心的你可能会注意到，这里的接口并没有实现处理链路日志的逻辑。因为，这里就真正涉及后端的逻辑了。</p><p>一般来说，数据都是使用MySQL关系型数据库来存储的，但是日志就不能这样存储了。因为前端页面会产生大量的链路日志数据，如果使用关系型数据库存储，频繁的写入操作会直接影响数据库的性能，尤其是在高并发的情况下，影响更大。</p><p>那怎么做才能有效地存储全链路日志呢？</p><p>存储日志最常见的做法是把日志存储在日志服务或NoSQL数据库中。具体的方法有4种，日志文件存储、NoSQL数据库、分布式日志存储系统和日志分析平台。</p><ul>\n<li>日志文件的存储。这种方案就是将前端埋点的日志数据写入日志文件，然后通过定时，将日志文件上传到日志存储系统。不过这种方案还需要处理日志文件，额外工作比较多，因此并不适合全链路日志。</li>\n<li>NoSQL数据库。这种数据库具有良好的横向扩展性和高性能，比较适合存储大规模的日志数据。但它有个缺点，就是对于复杂查询的处理能力比较弱。对于全链路日志来说，如果无法满足复杂的查询需求，那么存储的意义也不大了。</li>\n<li>分布式日志存储系统，例如Kafka。这类系统专门用于收集、存储和分析高吞吐量的日志，这些系统通常都比较复杂，而且有较高的学习成本和配置工作，同时还有可能需要额外的维护和监控。</li>\n<li>日志分析平台。这类平台最大的亮点是提供了强大的日志分析和查询能力，可以帮助我们实时监控和分析日志数据。同样地，其部署和维护成本相对较高，也有较高的学习成本。</li>\n</ul><p>那这4种方法，我们应该怎么选择呢？</p><p>对于小规模的前端应用，我建议直接使用NoSQL数据库就足够了。</p><p>如果前端应用需要监控大量实时日志数据，例如直播应用，可以考虑使用分布式日志存储系统。</p><p>我建议前端应用可以考虑接入国内云厂商的日志服务，例如阿里云的SLS日志服务、腾讯云的CLS日志服务以及华为云的LTS云日志服务。</p><p>下面，我将以存储日志文件为例说明。</p><p>首先引入log4js日志库，并配置日志文件为track.log。稍微改造一下前面的代码，最终的效果如下。</p><pre><code class=\"language-typescript\">const express = require('express');\nconst log4js = require('log4js');\nconst app = express();\nconst port = 3000;\n\nlog4js.configure({\n  appenders: { track: { type: 'file', filename: 'track.log' } },\n  categories: { default: { appenders: ['track'], level: 'info' } }\n});\nconst logger = log4js.getLogger('track');\n\napp.get('/track.gif', (req, res) =&gt; {\n&nbsp; &nbsp; const data = req.query.data; // 获取URL中的data参数\n\n&nbsp; &nbsp; // 在实际应用中，这里可以将data存储到数据库或日志文件中\n&nbsp; &nbsp; // console.log(\"Received tracking data: \", data);\n    logger.info(data);\n\n&nbsp; &nbsp; // 返回一个1x1像素的透明GIF图片\n&nbsp; &nbsp; const img = Buffer.from('R0lGODlhAQABAIAAAP///wAAACH5BAEAAAAALAAAAAABAAEAAAICRAEAOw==', 'base64');\n&nbsp; &nbsp; res.writeHead(200, {\n&nbsp; &nbsp; &nbsp; &nbsp; 'Content-Type': 'image/gif',\n&nbsp; &nbsp; &nbsp; &nbsp; 'Content-Length': img.length\n&nbsp; &nbsp; });\n&nbsp; &nbsp; res.end(img);\n});\n\napp.listen(port, () =&gt; {\n&nbsp; &nbsp; console.log(`Server running at http://localhost:${port}`);\n});\n</code></pre><h2>接口上报触发时机</h2><p>好了，说完埋点接口后，我们就来探讨接口触发的时机。简单来说就是在什么时间和什么场景下把链路日志数据上报到服务器。</p><p>我们在前面几节课学到，触发记录链路日志的事件有5种，全局Error事件、全局unhandlerejection事件、自定义日志事件、网页指标事件、接口异常事件。</p><p>网页指标事件在此前已经通过页面pageHide事件和visibilitychange事件自动触发上报，在这里我们就不继续探讨了。</p><p>自定义日志事件的主要功能是提供给业务层使用，通过try-catch或特定逻辑进行日志记录。从逻辑角度来看，这种事件并不是高频触发的，所以我们可以提供实时上报的动作。</p><p>从代码逻辑的角度看，全局Error、全局unhandlerejection和接口异常应该是触发最频繁的事件，如果每次事件触发就自动上报埋点数据，可能在某个时间点出现大量的图片请求的情况。这种情况不仅会影响用户的体验，还可能会给日志服务带来压力，得不偿失。所以，我们可以考虑使用延迟上报的方法。</p><p>通过下图表格，你能更加直观地了解每一种事件的上报时机。</p><p><img src=\"https://static001.geekbang.org/resource/image/b0/d7/b0a2d8862eb27178338006db0343b9d7.jpg?wh=2126x714\" alt=\"图片\"></p><p>那怎么做才能满足延迟上报的能力呢？</p><p>首先，我们定义一个queue队列属性，用于存储需要延迟上报的链路日志数据。同时，我们再设定一个时间间隔，规定每隔多长时间上报一次数据。具体实现代码如下。</p><pre><code class=\"language-typescript\">// src/baseTrace.ts\n\nexport class BaseTrace implements BaseTraceInterface {\n\t// 存储链路日志数据\n&nbsp; public queue: TraceData[] = []\n&nbsp; // 发送请求时间间隔\n&nbsp; public sendTimer = 1000\n}\n</code></pre><p>然后，设置默认时间间隔为1000毫秒，从queue中提取日志数据，发送到后端服务。具体的实现逻辑是，在SDK初始化的时候，我们通过使用setInterval函数增加一个定时器，监听queue队列数组是否有日志数据，如果有就提取数据并发送。具体代码如下。</p><pre><code class=\"language-typescript\">// src/baseTrace.ts\n\nexport class BaseTrace implements BaseTraceInterface {\n&nbsp; // 初始化实例\n&nbsp; public static init(options: TraceOptions): BaseTrace {\n\t&nbsp; const traceSdk = new BaseTrace(options)\n\t&nbsp; // ...省略部分代码\n\tsetInterval(() =&gt; {\n&nbsp; &nbsp; &nbsp; const data = traceSdk.queue.shift()\n&nbsp; &nbsp; &nbsp; if (data) sendByImg(traceSdk.dsn, data)\n&nbsp; &nbsp; }, traceSdk.sendTimer)\n&nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; window.traceSdk = traceSdk\n&nbsp; &nbsp; return traceSdk\n&nbsp; }\n}\n</code></pre><p>接下来，我们针对三种不同的事件，将错误事件的链路日志数据存储在queue队列中。具体实现的代码如下。</p><pre><code class=\"language-typescript\">// src/baseTrace.ts\n\nexport class BaseTrace implements BaseTraceInterface {\n\t// 存储链路日志数据\n&nbsp; public queue: TraceData[] = []\n&nbsp; // 发送请求时间间隔\n&nbsp; public sendTimer = 1000\n&nbsp;&nbsp;\n&nbsp; public setTraceData(data: TraceTypeData | TracePerf) {\n&nbsp; &nbsp; let type = TraceTypes.CONSOLE\n&nbsp; &nbsp; let level = TraceLevelType.Debug\n&nbsp; &nbsp; let _data = null\n&nbsp; &nbsp; let perf = null\n\n&nbsp; &nbsp; if (!!(data as TraceTypeData).dataId) {\n&nbsp; &nbsp; &nbsp; type = getTraceDataType((data as TraceTypeData).type)\n&nbsp; &nbsp; &nbsp; level = getTraceDataLevel((data as TraceTypeData).level)\n&nbsp; &nbsp; &nbsp; _data = data as TraceTypeData\n&nbsp; &nbsp; }\n&nbsp; &nbsp; if (!!(data as TracePerf).id) {\n&nbsp; &nbsp; &nbsp; type = TraceTypes.PERF\n&nbsp; &nbsp; &nbsp; level = getPerfLevel(data as TracePerf)\n&nbsp; &nbsp; &nbsp; perf = data as TracePerf\n&nbsp; &nbsp; }\n\n&nbsp; &nbsp; const traceData: TraceData = {\n&nbsp; &nbsp; &nbsp; type,\n&nbsp; &nbsp; &nbsp; level,\n&nbsp; &nbsp; &nbsp; createdAt: getTimestamp(),\n&nbsp; &nbsp; &nbsp; updatedAt: getTimestamp(),\n&nbsp; &nbsp; &nbsp; data: _data,\n&nbsp; &nbsp; &nbsp; perf,\n&nbsp; &nbsp; &nbsp; breadcrumbs: this.breadcrumb,\n&nbsp; &nbsp; &nbsp; traceId: uuid(),\n&nbsp; &nbsp; &nbsp; ua: this.userAgent,\n&nbsp; &nbsp; &nbsp; bt: this.browserType,\n&nbsp; &nbsp; &nbsp; fpId: this.fpId,\n&nbsp; &nbsp; &nbsp; appId: '',\n&nbsp; &nbsp; &nbsp; clientType: TraceClientTypes.BROWSER_H5,\n&nbsp; &nbsp; &nbsp; url: document.URL,\n&nbsp; &nbsp; &nbsp; pid: this.pageId,\n&nbsp; &nbsp; }\n&nbsp; &nbsp; return traceData\n&nbsp; }\n\n&nbsp; public send(data: TraceTypeData | TracePerf) {\n&nbsp; &nbsp; const traceData = this.setTraceData(data)\n&nbsp; &nbsp; sendByImg(this.dsn, traceData)\n&nbsp; }\n&nbsp;&nbsp;\n&nbsp; public saveError(event: ErrorEvent) {\n\t\t// ...省略部分代码\n&nbsp; &nbsp; if (!isResTarget) {\n\t\t\t// ...省略部分代码\n&nbsp; &nbsp; &nbsp; this.queue.push(this.setTraceData(traceData))\n&nbsp; &nbsp; } else {\n&nbsp; &nbsp; &nbsp; // ...省略部分代码\n&nbsp; &nbsp; &nbsp; this.queue.push(this.setTraceData(traceData))\n&nbsp; &nbsp; }\n&nbsp; }\n&nbsp;&nbsp;\n&nbsp; public onFetchError(message: OnFetchError) {\n&nbsp; &nbsp; // ...省略部分代码\n&nbsp; &nbsp; this.queue.push(this.setTraceData(errorData))\n&nbsp; }\n&nbsp;&nbsp;\n&nbsp;&nbsp;\n}\n</code></pre><p>目前为止，我们实现了延迟上报的功能，出现大量错误日志的时候，就不会一次性发起大量图片请求了。</p><h2>总结</h2><p>这节课，我们重点探讨了全链路埋点中3个重要知识点，如何选择上报方式，实现上报接口以及确定上报时机。</p><p>关于前端埋点的上报，我们对比了三种方案，Fetch和xhr、Beacon API和GIF图片。Fetch和xhr由于受到同源策略和兼容性问题的限制，存在一定的局限性。另外，虽然sendBeacon可以在浏览器后台异步发送数据，但可能会因浏览器在发送前关闭页面而导致数据丢失。幸好GIF图片上报方案相对简单快速，解决了兼容性问题和跨域问题，即使请求失败也不会影响用户和页面的正常交互体验。因此，我们最终选择使用GIF图片作为埋点上报方式。</p><p>至于上报时机，我们需要根据实际情况，结合事件类型来决定是立即上报还是延迟上报。</p><p>我们还利用Node.js和Express框架，创建了一个1x1像素透明GIF图片的URL接口地址，并以日志文件存储为例展示了链路日志数据的存储方式。</p><p>需要特别强调的是，收集用户链路日志必然涉及一些用户隐私数据，我们应该在上报数据前就进行敏感数据的脱敏。如果不进行脱敏操作，那一些敏感数据（例如token）就会被人利用，甚至篡改数据。</p><h2>思考题</h2><p>现在给你布置两道思考题。</p><p>第一题，如果前端埋点的链路日志中存在敏感数据，例如手机号、密码、token等信息，我们应该怎么做才能脱敏呢？脱敏的算法又是怎么实现呢？</p><p>第二题，课程中提到了立即上报和延迟上报两种上报方法。那如果使用批量日志上报，我们应该如何实现这段代码逻辑？</p><p>欢迎你在留言区和我交流。如果觉得有所收获，也可以把课程分享给更多的朋友一起学习。我们下节课见！</p>","comments":[{"had_liked":false,"id":392581,"user_name":"苏果果","can_delete":false,"product_type":"c1","uid":2852467,"ip_address":"北京","ucode":"12A62ED032F345","user_header":"https://static001.geekbang.org/account/avatar/00/2b/86/73/5190bbde.jpg","comment_is_top":true,"comment_ctime":1721270766,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100759401,"comment_content":"完整源码入口：\nhttps:&#47;&#47;github.com&#47;sankyutang&#47;fontend-trace-geekbang-course","like_count":0},{"had_liked":false,"id":392086,"user_name":"谢谢","can_delete":false,"product_type":"c1","uid":2901593,"ip_address":"北京","ucode":"94470FD72641B3","user_header":"https://static001.geekbang.org/account/avatar/00/2c/46/59/c5fcd89a.jpg","comment_is_top":false,"comment_ctime":1719906893,"is_pvip":false,"replies":[{"id":142681,"content":"是的，只要用户能主动关闭页面，其他两种上报方式也会遇到数据丢失的。\n只要保证网络通畅，图片上报和Beacon上报都不需要等待接收返回。\n比起图片上报，Beacon有个最大的问题是兼容性不太好。","user_name":"作者回复","user_name_real":"编辑","uid":1327155,"ctime":1721351221,"ip_address":"广东","comment_id":392086,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100759401,"comment_content":"你好，请问下，在总结里看到 sendBeacon 是但可能会因浏览器在发送前关闭页面而导致数据丢失，这不是  sendBeacon 的优势吗？而且其他两种上报方式是否也会遇到浏览器关闭或者页面卸载的时候，数据丢失的情况呢？","like_count":0,"discussions":[{"author":{"id":1327155,"avatar":"https://static001.geekbang.org/account/avatar/00/14/40/33/11e434ba.jpg","nickname":"三橋sankyu 🐩","note":"","ucode":"2129405EA8D3D7","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":648293,"discussion_content":"是的，只要用户能主动关闭页面，其他两种上报方式也会遇到数据丢失的。\n只要保证网络通畅，图片上报和Beacon上报都不需要等待接收返回。\n比起图片上报，Beacon有个最大的问题是兼容性不太好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1721351221,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":396045,"user_name":"天天","can_delete":false,"product_type":"c1","uid":2000254,"ip_address":"四川","ucode":"2B9414A72EB338","user_header":"https://static001.geekbang.org/account/avatar/00/1e/85/7e/dc5ee66c.jpg","comment_is_top":false,"comment_ctime":1732799437,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100759401,"comment_content":"是可以延迟发送日志，上报时机和上报数据讲需要考虑","like_count":1},{"had_liked":false,"id":390863,"user_name":"JuneRain","can_delete":false,"product_type":"c1","uid":3688751,"ip_address":"广东","ucode":"2A92727BF9F6DE","user_header":"https://static001.geekbang.org/account/avatar/00/38/49/2f/590142fb.jpg","comment_is_top":false,"comment_ctime":1716513092,"is_pvip":false,"replies":null,"discussion_count":2,"race_medal":0,"score":2,"product_id":100759401,"comment_content":"有个问题，图片方式上穿日志是GET请求，如果日志数据量大，字符串化后拼接的URL长度超限制怎么办？","like_count":1,"discussions":[{"author":{"id":1158637,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ad/ed/115f6d69.jpg","nickname":"臭棋篓子","note":"","ucode":"5121296D78352B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":645800,"discussion_content":"实在太长可以压缩","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1716805179,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":3688751,"avatar":"https://static001.geekbang.org/account/avatar/00/38/49/2f/590142fb.jpg","nickname":"JuneRain","note":"","ucode":"2A92727BF9F6DE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1158637,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ad/ed/115f6d69.jpg","nickname":"臭棋篓子","note":"","ucode":"5121296D78352B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":646101,"discussion_content":"请教下怎么具体进行压缩呢。日志对象转base64后再进行压缩？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1717375487,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":645800,"ip_address":"广东","group_id":0},"score":646101,"extra":""}]}]},{"had_liked":false,"id":396157,"user_name":"天天","can_delete":false,"product_type":"c1","uid":2000254,"ip_address":"四川","ucode":"2B9414A72EB338","user_header":"https://static001.geekbang.org/account/avatar/00/1e/85/7e/dc5ee66c.jpg","comment_is_top":false,"comment_ctime":1733307424,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100759401,"comment_content":"一般怎么脱敏呢，老师的答案可以给一下吗？","like_count":0},{"had_liked":false,"id":395540,"user_name":"Ryan","can_delete":false,"product_type":"c1","uid":1687571,"ip_address":"湖北","ucode":"A316CBB3CAB97B","user_header":"https://static001.geekbang.org/account/avatar/00/19/c0/13/52cd5ea8.jpg","comment_is_top":false,"comment_ctime":1731148673,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100759401,"comment_content":"两个思考题的答案有了吗？急需解惑","like_count":0},{"had_liked":false,"id":390925,"user_name":"Alex酱","can_delete":false,"product_type":"c1","uid":1008941,"ip_address":"重庆","ucode":"52FB12BF10843D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/65/2d/7394c6f5.jpg","comment_is_top":false,"comment_ctime":1716774379,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100759401,"comment_content":"如果接收端配置了kafka的情况下，是否可以不用队列存储的方式呢？","like_count":0}]}