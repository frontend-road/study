{"id":99774,"title":"09 | 网络通信优化之序列化：避免使用Java序列化","content":"<p>你好，我是刘超。</p><p>当前大部分后端服务都是基于微服务架构实现的。服务按照业务划分被拆分，实现了服务的解耦，但同时也带来了新的问题，不同业务之间通信需要通过接口实现调用。两个服务之间要共享一个数据对象，就需要从对象转换成二进制流，通过网络传输，传送到对方服务，再转换回对象，供服务方法调用。<strong>这个编码和解码过程我们称之为序列化与反序列化。</strong></p><p>在大量并发请求的情况下，如果序列化的速度慢，会导致请求响应时间增加；而序列化后的传输数据体积大，会导致网络吞吐量下降。所以一个优秀的序列化框架可以提高系统的整体性能。</p><p>我们知道，Java提供了RMI框架可以实现服务与服务之间的接口暴露和调用，RMI中对数据对象的序列化采用的是Java序列化。<span class=\"orange\">而目前主流的微服务框架却几乎没有用到Java序列化，SpringCloud用的是Json序列化，Dubbo虽然兼容了Java序列化，但默认使用的是Hessian序列化。这是为什么呢？</span></p><p>今天我们就来深入了解下Java序列化，再对比近两年比较火的Protobuf序列化，看看Protobuf是如何实现最优序列化的。</p><h2>Java序列化</h2><p>在说缺陷之前，你先得知道什么是Java序列化以及它的实现原理。</p><!-- [[[read_end]]] --><p>Java提供了一种序列化机制，这种机制能够将一个对象序列化为二进制形式（字节数组），用于写入磁盘或输出到网络，同时也能从网络或磁盘中读取字节数组，反序列化成对象，在程序中使用。</p><p><img src=\"https://static001.geekbang.org/resource/image/bd/e2/bd4bc4b2746f4b005ca26042412f4ee2.png?wh=3255*439\" alt=\"\"></p><p>JDK提供的两个输入、输出流对象ObjectInputStream和ObjectOutputStream，它们只能对实现了Serializable接口的类的对象进行反序列化和序列化。</p><p>ObjectOutputStream的默认序列化方式，仅对对象的非transient的实例变量进行序列化，而不会序列化对象的transient的实例变量，也不会序列化静态变量。</p><p>在实现了Serializable接口的类的对象中，会生成一个serialVersionUID的版本号，这个版本号有什么用呢？它会在反序列化过程中来验证序列化对象是否加载了反序列化的类，如果是具有相同类名的不同版本号的类，在反序列化中是无法获取对象的。</p><p>具体实现序列化的是writeObject和readObject，通常这两个方法是默认的，当然我们也可以在实现Serializable接口的类中对其进行重写，定制一套属于自己的序列化与反序列化机制。</p><p>另外，Java序列化的类中还定义了两个重写方法：writeReplace()和readResolve()，前者是用来在序列化之前替换序列化对象的，后者是用来在反序列化之后对返回对象进行处理的。</p><h2>Java序列化的缺陷</h2><p>如果你用过一些RPC通信框架，你就会发现这些框架很少使用JDK提供的序列化。其实不用和不好用多半是挂钩的，下面我们就一起来看看JDK默认的序列化到底存在着哪些缺陷。</p><h3>1.无法跨语言</h3><p>现在的系统设计越来越多元化，很多系统都使用了多种语言来编写应用程序。比如，我们公司开发的一些大型游戏就使用了多种语言，C++写游戏服务，Java/Go写周边服务，Python写一些监控应用。</p><p>而Java序列化目前只适用基于Java语言实现的框架，其它语言大部分都没有使用Java的序列化框架，也没有实现Java序列化这套协议。因此，如果是两个基于不同语言编写的应用程序相互通信，则无法实现两个应用服务之间传输对象的序列化与反序列化。</p><h3>2.易被攻击</h3><p>Java官网安全编码指导方针中说明：“对不信任数据的反序列化，从本质上来说是危险的，应该予以避免”。可见Java序列化是不安全的。</p><p>我们知道对象是通过在ObjectInputStream上调用readObject()方法进行反序列化的，这个方法其实是一个神奇的构造器，它可以将类路径上几乎所有实现了Serializable接口的对象都实例化。</p><p>这也就意味着，在反序列化字节流的过程中，该方法可以执行任意类型的代码，这是非常危险的。</p><p>对于需要长时间进行反序列化的对象，不需要执行任何代码，也可以发起一次攻击。攻击者可以创建循环对象链，然后将序列化后的对象传输到程序中反序列化，这种情况会导致hashCode方法被调用次数呈次方爆发式增长, 从而引发栈溢出异常。例如下面这个案例就可以很好地说明。</p><pre><code>Set root = new HashSet();  \nSet s1 = root;  \nSet s2 = new HashSet();  \nfor (int i = 0; i &lt; 100; i++) {  \n   Set t1 = new HashSet();  \n   Set t2 = new HashSet();  \n   t1.add(&quot;foo&quot;); //使t2不等于t1  \n   s1.add(t1);  \n   s1.add(t2);  \n   s2.add(t1);  \n   s2.add(t2);  \n   s1 = t1;  \n   s2 = t2;   \n} \n</code></pre><p>2015年FoxGlove Security安全团队的breenmachine发布过一篇长博客，主要内容是：通过Apache Commons Collections，Java反序列化漏洞可以实现攻击。一度横扫了WebLogic、WebSphere、JBoss、Jenkins、OpenNMS的最新版，各大Java Web Server纷纷躺枪。</p><p>其实，Apache Commons Collections就是一个第三方基础库，它扩展了Java标准库里的Collection结构，提供了很多强有力的数据结构类型，并且实现了各种集合工具类。</p><p>实现攻击的原理就是：Apache Commons Collections允许链式的任意的类函数反射调用，攻击者通过“实现了Java序列化协议”的端口，把攻击代码上传到服务器上，再由Apache Commons Collections里的TransformedMap来执行。</p><p><strong>那么后来是如何解决这个漏洞的呢？</strong></p><p>很多序列化协议都制定了一套数据结构来保存和获取对象。例如，JSON序列化、ProtocolBuf等，它们只支持一些基本类型和数组数据类型，这样可以避免反序列化创建一些不确定的实例。虽然它们的设计简单，但足以满足当前大部分系统的数据传输需求。</p><p>我们也可以通过反序列化对象白名单来控制反序列化对象，可以重写resolveClass方法，并在该方法中校验对象名字。代码如下所示：</p><pre><code>@Override\nprotected Class resolveClass(ObjectStreamClass desc) throws IOException,ClassNotFoundException {\nif (!desc.getName().equals(Bicycle.class.getName())) {\n\nthrow new InvalidClassException(\n&quot;Unauthorized deserialization attempt&quot;, desc.getName());\n}\nreturn super.resolveClass(desc);\n}\n</code></pre><h3>3.序列化后的流太大</h3><p>序列化后的二进制流大小能体现序列化的性能。序列化后的二进制数组越大，占用的存储空间就越多，存储硬件的成本就越高。如果我们是进行网络传输，则占用的带宽就更多，这时就会影响到系统的吞吐量。</p><p>Java序列化中使用了ObjectOutputStream来实现对象转二进制编码，那么这种序列化机制实现的二进制编码完成的二进制数组大小，相比于NIO中的ByteBuffer实现的二进制编码完成的数组大小，有没有区别呢？</p><p>我们可以通过一个简单的例子来验证下：</p><pre><code>User user = new User();\n    \tuser.setUserName(&quot;test&quot;);\n    \tuser.setPassword(&quot;test&quot;);\n    \t\n    \tByteArrayOutputStream os =new ByteArrayOutputStream();\n    \tObjectOutputStream out = new ObjectOutputStream(os);\n    \tout.writeObject(user);\n    \t\n    \tbyte[] testByte = os.toByteArray();\n    \tSystem.out.print(&quot;ObjectOutputStream 字节编码长度：&quot; + testByte.length + &quot;\\n&quot;);\n</code></pre><pre><code>  ByteBuffer byteBuffer = ByteBuffer.allocate( 2048);\n\n        byte[] userName = user.getUserName().getBytes();\n        byte[] password = user.getPassword().getBytes();\n        byteBuffer.putInt(userName.length);\n        byteBuffer.put(userName);\n        byteBuffer.putInt(password.length);\n        byteBuffer.put(password);\n        \n        byteBuffer.flip();\n        byte[] bytes = new byte[byteBuffer.remaining()];\n    \tSystem.out.print(&quot;ByteBuffer 字节编码长度：&quot; + bytes.length+ &quot;\\n&quot;);\n\n</code></pre><p>运行结果：</p><pre><code>ObjectOutputStream 字节编码长度：99\nByteBuffer 字节编码长度：16\n</code></pre><p>这里我们可以清楚地看到：Java序列化实现的二进制编码完成的二进制数组大小，比ByteBuffer实现的二进制编码完成的二进制数组大小要大上几倍。因此，Java序列后的流会变大，最终会影响到系统的吞吐量。</p><h3>4.序列化性能太差</h3><p>序列化的速度也是体现序列化性能的重要指标，如果序列化的速度慢，就会影响网络通信的效率，从而增加系统的响应时间。我们再来通过上面这个例子，来对比下Java序列化与NIO中的ByteBuffer编码的性能：</p><pre><code>\tUser user = new User();\n    \tuser.setUserName(&quot;test&quot;);\n    \tuser.setPassword(&quot;test&quot;);\n    \t\n    \tlong startTime = System.currentTimeMillis();\n    \t\n    \tfor(int i=0; i&lt;1000; i++) {\n    \t\tByteArrayOutputStream os =new ByteArrayOutputStream();\n        \tObjectOutputStream out = new ObjectOutputStream(os);\n        \tout.writeObject(user);\n        \tout.flush();\n        \tout.close();\n        \tbyte[] testByte = os.toByteArray();\n        \tos.close();\n    \t}\n    \n    \t\n    \tlong endTime = System.currentTimeMillis();\n    \tSystem.out.print(&quot;ObjectOutputStream 序列化时间：&quot; + (endTime - startTime) + &quot;\\n&quot;);\n</code></pre><pre><code>long startTime1 = System.currentTimeMillis();\n    \tfor(int i=0; i&lt;1000; i++) {\n    \t\tByteBuffer byteBuffer = ByteBuffer.allocate( 2048);\n\n            byte[] userName = user.getUserName().getBytes();\n            byte[] password = user.getPassword().getBytes();\n            byteBuffer.putInt(userName.length);\n            byteBuffer.put(userName);\n            byteBuffer.putInt(password.length);\n            byteBuffer.put(password);\n            \n            byteBuffer.flip();\n            byte[] bytes = new byte[byteBuffer.remaining()];\n    \t}\n    \tlong endTime1 = System.currentTimeMillis();\n    \tSystem.out.print(&quot;ByteBuffer 序列化时间：&quot; + (endTime1 - startTime1)+ &quot;\\n&quot;);\n</code></pre><p>运行结果：</p><pre><code>ObjectOutputStream 序列化时间：29\nByteBuffer 序列化时间：6\n</code></pre><p>通过以上案例，我们可以清楚地看到：Java序列化中的编码耗时要比ByteBuffer长很多。</p><h2>使用Protobuf序列化替换Java序列化</h2><p>目前业内优秀的序列化框架有很多，而且大部分都避免了Java默认序列化的一些缺陷。例如，最近几年比较流行的FastJson、Kryo、Protobuf、Hessian等。<strong>我们完全可以找一种替换掉Java序列化，这里我推荐使用Protobuf序列化框架。</strong></p><p>Protobuf是由Google推出且支持多语言的序列化框架，目前在主流网站上的序列化框架性能对比测试报告中，Protobuf无论是编解码耗时，还是二进制流压缩大小，都名列前茅。</p><p>Protobuf以一个 .proto 后缀的文件为基础，这个文件描述了字段以及字段类型，通过工具可以生成不同语言的数据结构文件。在序列化该数据对象的时候，Protobuf通过.proto文件描述来生成Protocol Buffers格式的编码。</p><p><strong>这里拓展一点，我来讲下什么是Protocol Buffers存储格式以及它的实现原理。</strong></p><p>Protocol Buffers 是一种轻便高效的结构化数据存储格式。它使用T-L-V（标识 - 长度 - 字段值）的数据格式来存储数据，T代表字段的正数序列(tag)，Protocol Buffers 将对象中的每个字段和正数序列对应起来，对应关系的信息是由生成的代码来保证的。在序列化的时候用整数值来代替字段名称，于是传输流量就可以大幅缩减；L代表Value的字节长度，一般也只占一个字节；V则代表字段值经过编码后的值。这种数据格式不需要分隔符，也不需要空格，同时减少了冗余字段名。</p><p>Protobuf定义了一套自己的编码方式，几乎可以映射Java/Python等语言的所有基础数据类型。不同的编码方式对应不同的数据类型，还能采用不同的存储格式。如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/ec/eb/ec0ebe4f622e9edcd9de86cb92f15eeb.jpg?wh=1638*466\" alt=\"\"></p><p>对于存储Varint编码数据，由于数据占用的存储空间是固定的，就不需要存储字节长度 Length，所以实际上Protocol Buffers的存储方式是 T - V，这样就又减少了一个字节的存储空间。</p><p>Protobuf定义的Varint编码方式是一种变长的编码方式，每个字节的最后一位(即最高位)是一个标志位(msb)，用0和1来表示，0表示当前字节已经是最后一个字节，1表示这个数字后面还有一个字节。</p><p>对于int32类型数字，一般需要4个字节表示，若采用Varint编码方式，对于很小的int32类型数字，就可以用1个字节来表示。对于大部分整数类型数据来说，一般都是小于256，所以这种操作可以起到很好地压缩数据的效果。</p><p>我们知道int32代表正负数，所以一般最后一位是用来表示正负值，现在Varint编码方式将最后一位用作了标志位，那还如何去表示正负整数呢？如果使用int32/int64表示负数就需要多个字节来表示，在Varint编码类型中，通过Zigzag编码进行转换，将负数转换成无符号数，再采用sint32/sint64来表示负数，这样就可以大大地减少编码后的字节数。</p><p>Protobuf的这种数据存储格式，不仅压缩存储数据的效果好， 在编码和解码的性能方面也很高效。Protobuf的编码和解码过程结合.proto文件格式，加上Protocol Buffer独特的编码格式，只需要简单的数据运算以及位移等操作就可以完成编码与解码。可以说Protobuf的整体性能非常优秀。</p><h2>总结</h2><p>无论是网路传输还是磁盘持久化数据，我们都需要将数据编码成字节码，而我们平时在程序中使用的数据都是基于内存的数据类型或者对象，我们需要通过编码将这些数据转化成二进制字节流；如果需要接收或者再使用时，又需要通过解码将二进制字节流转换成内存数据。我们通常将这两个过程称为序列化与反序列化。</p><p>Java默认的序列化是通过Serializable接口实现的，只要类实现了该接口，同时生成一个默认的版本号，我们无需手动设置，该类就会自动实现序列化与反序列化。</p><p>Java默认的序列化虽然实现方便，但却存在安全漏洞、不跨语言以及性能差等缺陷，所以我强烈建议你避免使用Java序列化。</p><p>纵观主流序列化框架，FastJson、Protobuf、Kryo是比较有特点的，而且性能以及安全方面都得到了业界的认可，我们可以结合自身业务来选择一种适合的序列化框架，来优化系统的序列化性能。</p><h2>思考题</h2><p>这是一个使用单例模式实现的类，如果我们将该类实现Java的Serializable接口，它还是单例吗？<span class=\"orange\">如果要你来写一个实现了Java的Serializable接口的单例，你会怎么写呢？</span></p><pre><code>public class Singleton implements Serializable{\n\n    private final static Singleton singleInstance = new Singleton();\n\n    private Singleton(){}\n\n    public static Singleton getInstance(){\n       return singleInstance; \n    }\n}\n</code></pre><p>期待在留言区看到你的见解。也欢迎你点击“请朋友读”，把今天的内容分享给身边的朋友，邀请他一起学习。</p><p></p>","neighbors":{"left":{"article_title":"08 | 网络通信优化之I/O模型：如何解决高并发下I/O瓶颈？","id":99478},"right":{"article_title":"10 | 网络通信优化之通信协议：如何优化RPC网络通信？","id":100355}},"comments":[{"had_liked":false,"id":101742,"user_name":"陆离","can_delete":false,"product_type":"c1","uid":1483932,"ip_address":"","ucode":"2C8C206CE36A81","user_header":"https://static001.geekbang.org/account/avatar/00/16/a4/9c/b32ed9e9.jpg","comment_is_top":false,"comment_ctime":1559955763,"is_pvip":false,"replies":[{"id":"36650","content":"回答正确","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559956931,"ip_address":"","comment_id":101742,"utype":1}],"discussion_count":7,"race_medal":0,"score":"418171783475","product_id":100028001,"comment_content":"序列化会通过反射调用无参构造器返回一个新对象，破坏单例模式。<br>解决方法是添加readResolve()方法，自定义返回对象策略。","like_count":98,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453097,"discussion_content":"回答正确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559956931,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1204333,"avatar":"https://static001.geekbang.org/account/avatar/00/12/60/6d/e2576fda.jpg","nickname":"Rancood","note":"","ucode":"052BDF2221F480","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417,"discussion_content":"这里不应该是反序列化吗","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1561540835,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1204947,"avatar":"https://static001.geekbang.org/account/avatar/00/12/62/d3/663de972.jpg","nickname":"懵逼猴","note":"","ucode":"BDC748A96AC316","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574372,"discussion_content":"https://stackoverflow.com/questions/8141440/how-are-constructors-called-during-serialization-and-deserialization\nDuring deserialization the accessible default constructor is called for the first class in the inheritance hierarchy that does not implement Serializable.\n在反序列化的时候，在被反序列化类的继承层次结构中第一个未实现 Serializable 的父类的默认构造函数将会被调用，子类需要可以访问这个未实现Serializable 父类的默认构造函数。这个回答是有问题的！！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654000402,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1204947,"avatar":"https://static001.geekbang.org/account/avatar/00/12/62/d3/663de972.jpg","nickname":"懵逼猴","note":"","ucode":"BDC748A96AC316","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574368,"discussion_content":"java.io.ObjectInputStream#readObject反序列化不会调用构造函数吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653999215,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2532285,"avatar":"","nickname":"Geek_926921","note":"","ucode":"51C3B0178D77E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374542,"discussion_content":"大佬牛逼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621239130,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1246882,"avatar":"https://static001.geekbang.org/account/avatar/00/13/06/a2/350c4af0.jpg","nickname":"知易","note":"","ucode":"BD3E3F0F0A40EF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351102,"discussion_content":"又学到一个知识点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614153953,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2060756,"avatar":"","nickname":"在下蟑螂王","note":"","ucode":"E66A65A327095A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332125,"discussion_content":"真牛啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607069788,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101729,"user_name":"密码123456","can_delete":false,"product_type":"c1","uid":1126593,"ip_address":"","ucode":"9889463CC0EA71","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/c1/2dde6700.jpg","comment_is_top":false,"comment_ctime":1559947594,"is_pvip":false,"replies":[{"id":"36649","content":"线上代码发生错位了，已修正。<br><br>导致这个问题的原因是序列化中的readObject会通过反射，调用没有参数的构造方法创建一个新的对象。<br><br>所以我们可以在被序列化类中重写readResolve方法。<br><br>private Object readResolve(){<br>        return singleInstance;<br>}","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1559956892,"ip_address":"","comment_id":101729,"utype":1}],"discussion_count":6,"race_medal":0,"score":"96049228106","product_id":100028001,"comment_content":"看到提问，才发现这竟然不是单例。回想内容是因为。可以把类路径上几乎所有实现了 Serializable 接口的对象都实例化。还真不知道怎么写？内部私有类实现，这种可以吗？","like_count":23,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453088,"discussion_content":"线上代码发生错位了，已修正。\n\n导致这个问题的原因是序列化中的readObject会通过反射，调用没有参数的构造方法创建一个新的对象。\n\n所以我们可以在被序列化类中重写readResolve方法。\n\nprivate Object readResolve(){\n        return singleInstance;\n}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559956892,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1297421,"avatar":"https://static001.geekbang.org/account/avatar/00/13/cc/0d/89435926.jpg","nickname":"10年以后","note":"","ucode":"FE58CA7E5C2AF9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":216795,"discussion_content":"打卡","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585486267,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1242455,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f5/57/ce10fb1b.jpg","nickname":"天天向上","note":"","ucode":"0CCCA6F4DCC480","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":103782,"discussion_content":"我在私有构造方法上加了打印的方法，但是在反序列化的时候没有打印啊，那就表示没有调用无参构造方法吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577378725,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1204947,"avatar":"https://static001.geekbang.org/account/avatar/00/12/62/d3/663de972.jpg","nickname":"懵逼猴","note":"","ucode":"BDC748A96AC316","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1242455,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f5/57/ce10fb1b.jpg","nickname":"天天向上","note":"","ucode":"0CCCA6F4DCC480","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574369,"discussion_content":"网上看到JAVA的反序列化是不会调用构造器的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653999657,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":103782,"ip_address":""},"score":574369,"extra":""}]},{"author":{"id":1242455,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f5/57/ce10fb1b.jpg","nickname":"天天向上","note":"","ucode":"0CCCA6F4DCC480","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":103779,"discussion_content":"可是无参构造函数不是已经私有了吗，还能怎么调用啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577378129,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1087945,"avatar":"https://static001.geekbang.org/account/avatar/00/10/99/c9/a7c77746.jpg","nickname":"冰激凌的眼泪","note":"","ucode":"5DCB974667E93A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1242455,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f5/57/ce10fb1b.jpg","nickname":"天天向上","note":"","ucode":"0CCCA6F4DCC480","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":157756,"discussion_content":"运行期可以突破这个访问限制","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580517714,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":103779,"ip_address":""},"score":157756,"extra":""}]}]},{"had_liked":false,"id":167158,"user_name":"彦峰你要加油啊！","can_delete":false,"product_type":"c1","uid":1664020,"ip_address":"","ucode":"756E46DA81715D","user_header":"https://static001.geekbang.org/account/avatar/00/19/64/14/2f3263e3.jpg","comment_is_top":false,"comment_ctime":1577701850,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"40232407514","product_id":100028001,"comment_content":"稍微看了下评论,解决方法是在被序列化类中重写readResolve方法, 但是通过Jdk源码可以看出,虽然readResolve方法返回实例解决了单例模式被破坏的问题, 但实际上还是实例化了两次,只不过新创建的对象没有被返回而已.  <br>如果创建对象的动作发生频率加快,就意味着内存分配开销也会随之增大,应该使用注册式单例来解决这个问题.","like_count":10,"discussions":[{"author":{"id":2662844,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL3xax4aG4h59x50C7LQ5K7BicvIEicakyfE0lV4Pyib6OsYc1jC7Qa37g2v8qhib5BQiaB2DfB4DMG5Cw/132","nickname":"花花世界小人物","note":"","ucode":"3E995D63845C06","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":561155,"discussion_content":"注册式实现单例还能序列化吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649562702,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1022411,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/99/cb/8964faab.jpg","nickname":"-只是小小配角_","note":"","ucode":"EFC1CD54A23F39","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372081,"discussion_content":"对于注册式，或者懒汉式的单例也可以吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620180294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1232984,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d0/58/ac40120f.jpg","nickname":"biubiubiu","note":"","ucode":"3310E95533D22B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281236,"discussion_content":"太强了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591697964,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1555565,"avatar":"https://static001.geekbang.org/account/avatar/00/17/bc/6d/f6f0a442.jpg","nickname":"汤小高","note":"","ucode":"D4AB7766273D52","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":173901,"discussion_content":"真🐮，这个确实是个问题，请问注册式单例是怎样解决的？能否给个demo，谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581866056,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1664020,"avatar":"https://static001.geekbang.org/account/avatar/00/19/64/14/2f3263e3.jpg","nickname":"彦峰你要加油啊！","note":"","ucode":"756E46DA81715D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1555565,"avatar":"https://static001.geekbang.org/account/avatar/00/17/bc/6d/f6f0a442.jpg","nickname":"汤小高","note":"","ucode":"D4AB7766273D52","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302838,"discussion_content":"网上就有啊，比较简单","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599043959,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":173901,"ip_address":""},"score":302838,"extra":""}]}]},{"had_liked":false,"id":133230,"user_name":"尔冬橙","can_delete":false,"product_type":"c1","uid":1225224,"ip_address":"","ucode":"0B013A49BC18DA","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","comment_is_top":false,"comment_ctime":1568454558,"is_pvip":false,"replies":[{"id":"51103","content":"在Class类文件中默认会有一个serialNo作为序列化对象的版本号，无论在序列化方还是在反序列化方的class类文件中都存在一个默认序列号，在序列化时，会将该版本号加载进去，在反序列化时，会校验该版本号。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1568532627,"ip_address":"","comment_id":133230,"utype":1}],"discussion_count":1,"race_medal":0,"score":"35928192926","product_id":100028001,"comment_content":" 它会在反序列化过程中来验证序列化对象是否加载了反序列化的类，如果是具有相同类名的不同版本号的类，在反序列化中是无法获取对象的。老师，这句话能举个例子么，没太明白","like_count":9,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467307,"discussion_content":"在Class类文件中默认会有一个serialNo作为序列化对象的版本号，无论在序列化方还是在反序列化方的class类文件中都存在一个默认序列号，在序列化时，会将该版本号加载进去，在反序列化时，会校验该版本号。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568532627,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":105290,"user_name":"强哥","can_delete":false,"product_type":"c1","uid":1206726,"ip_address":"","ucode":"3B8DC780FE4EF9","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/c6/513df085.jpg","comment_is_top":false,"comment_ctime":1560955375,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31625726447","product_id":100028001,"comment_content":"首先为什么单例要实现Serializable接口呢？如果本身就不合理，那直接删掉Serializable即可，没必要为了本身的不合理，添加多余的方法，除非有特殊场景，否则这么这样的代码指定会被ugly","like_count":7},{"had_liked":false,"id":101921,"user_name":"kevin","can_delete":false,"product_type":"c1","uid":1237471,"ip_address":"","ucode":"5F6D82F118C6F6","user_header":"https://static001.geekbang.org/account/avatar/00/12/e1/df/6e6a4c6b.jpg","comment_is_top":false,"comment_ctime":1560054497,"is_pvip":false,"replies":[{"id":"36870","content":"springcloud是spring生态中的一部分，就目前spring生态很少引入非生态框架。但是我们可以自己实现springcloud兼容protobuf序列化。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1560173653,"ip_address":"","comment_id":101921,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31624825569","product_id":100028001,"comment_content":"老师请教下，为什么spring cloud不使用protobuf, thrift等性能更高、支持跨平台的序列化工具，而且使用json？","like_count":7,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453174,"discussion_content":"springcloud是spring生态中的一部分，就目前spring生态很少引入非生态框架。但是我们可以自己实现springcloud兼容protobuf序列化。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560173653,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101765,"user_name":"-W.LI-","can_delete":false,"product_type":"c1","uid":1210699,"ip_address":"","ucode":"3556786538664F","user_header":"https://static001.geekbang.org/account/avatar/00/12/79/4b/740f91ca.jpg","comment_is_top":false,"comment_ctime":1559964867,"is_pvip":false,"replies":[{"id":"36864","content":"是的，Java序列化会调用构造函数，构造出一个新对象","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1560171989,"ip_address":"","comment_id":101765,"utype":1}],"discussion_count":2,"race_medal":0,"score":"31624735939","product_id":100028001,"comment_content":"文中说Java序列化，不会序列化静态变量，这个单例的静态变量会被怎么处理啊?<br>","like_count":7,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453107,"discussion_content":"是的，Java序列化会调用构造函数，构造出一个新对象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560171989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1926759,"avatar":"","nickname":"赵玉闯","note":"","ucode":"82E85AC08206EA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":218284,"discussion_content":"老师，你的意思是所有的静态变量序列化的时候都会调用构造函数，构造出一个新对象？那文中说“Java序列化，不会序列化静态变量”这句话就没有意义了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585643902,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110752,"user_name":"waniz","can_delete":false,"product_type":"c1","uid":1505761,"ip_address":"","ucode":"FA8CB4D94D85D3","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibvULfLvUITGs8lOOdibnc1loJg1mKhSv8iaZYYcObNmMdHSicNng9ia2nISPYYg1zHZFR0CSLpDia3jcWKcKDMrPVFA/132","comment_is_top":false,"comment_ctime":1562325578,"is_pvip":false,"replies":[{"id":"40390","content":"Java序列化是将Java对象转化为二进制流，而Json序列化是将Json字符串转为二进制的过程，只是包装的数据格式不一样。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1562464743,"ip_address":"","comment_id":110752,"utype":1}],"discussion_count":2,"race_medal":0,"score":"27332129354","product_id":100028001,"comment_content":"老师您好，Java序列化将数据转化为二进制字节流，json序列化将数据转化为json字符串。但是在物理层数据都是以电信号或模拟信号传输。那么从应用层到物理层数据的编码状态究竟是怎么变化的?出发点不同，最后都是二进制传输…忘解惑","like_count":6,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457038,"discussion_content":"Java序列化是将Java对象转化为二进制流，而Json序列化是将Json字符串转为二进制的过程，只是包装的数据格式不一样。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562464743,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1212902,"avatar":"https://static001.geekbang.org/account/avatar/00/12/81/e6/6cafed37.jpg","nickname":"旅途","note":"","ucode":"5022477E8E9441","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301276,"discussion_content":"都是二进制,二进制的大小也不一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598456411,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":166523,"user_name":"天天向上","can_delete":false,"product_type":"c1","uid":1242455,"ip_address":"","ucode":"0CCCA6F4DCC480","user_header":"https://static001.geekbang.org/account/avatar/00/12/f5/57/ce10fb1b.jpg","comment_is_top":false,"comment_ctime":1577463984,"is_pvip":false,"replies":[{"id":"65937","content":"这是Java说明需要序列化的一种标识","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1578487926,"ip_address":"","comment_id":166523,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18757333168","product_id":100028001,"comment_content":"想知道为什么用非Java的序列化方式的也需要实现Serializable接口？","like_count":4,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479526,"discussion_content":"这是Java说明需要序列化的一种标识","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578487926,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131716,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1567861475,"is_pvip":false,"replies":[{"id":"51134","content":"序列化是将一个对象通过某种数据结构包装好对象中的具体属性和值，转换为二进制进行网络传输的一个过程。例如一个int类型的属性，数组是1000，转换为二进制则是4个字节的byte数组了。<br><br>后面我会使用一个具体的例子来优化讲解这一讲。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1568539124,"ip_address":"","comment_id":131716,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14452763363","product_id":100028001,"comment_content":"课后思考及问题<br>1：老师能深入细致的讲讲JAVA怎么实现序列化的嘛？比如：一个对象怎么一步步神奇的变成一个字节数组的？对象中的属性、属性值、方法、以及此对象的信息怎么变成一个字节数组的？<br>2：我们知道对象是通过在 ObjectInputStream 上调用 readObject() 方法进行反序列化的，这个方法其实是一个神奇的构造器，它可以将类路径上几乎所有实现了 Serializable 接口的对象都实例化。<br>这个神奇的构造器的实现原理是啥？一个字节数组他怎么将其转换为一个对象的？很好奇，他知道字节数组多少位表示啥意思？然后一段一段的取，一段的翻译嘛？老师给讲讲呗？<br>老师深入讲一下原理实现细节，API式的讲解不过瘾，和老师要深入理解的风格也不符呀😄","like_count":3,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466590,"discussion_content":"序列化是将一个对象通过某种数据结构包装好对象中的具体属性和值，转换为二进制进行网络传输的一个过程。例如一个int类型的属性，数组是1000，转换为二进制则是4个字节的byte数组了。\n\n后面我会使用一个具体的例子来优化讲解这一讲。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568539124,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":105123,"user_name":"草帽路飞","can_delete":false,"product_type":"c1","uid":1401733,"ip_address":"","ucode":"7416D1D82E3456","user_header":"https://static001.geekbang.org/account/avatar/00/15/63/85/9ccf1b19.jpg","comment_is_top":false,"comment_ctime":1560924539,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"14445826427","product_id":100028001,"comment_content":"老师，您好。Java 序列化的安全性中，序列化的时候执行按段循环对象链的代码为什么会导致 hashcode 成倍增长呀？","like_count":3,"discussions":[{"author":{"id":2548016,"avatar":"https://static001.geekbang.org/account/avatar/00/26/e1/30/56151c95.jpg","nickname":"徐大雷","note":"","ucode":"4D6F0D4C58CE93","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":406063,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634696208,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":140767,"user_name":"Sdylan","can_delete":false,"product_type":"c1","uid":1008503,"ip_address":"","ucode":"4589D0D0FA9275","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/77/423345ab.jpg","comment_is_top":false,"comment_ctime":1571045350,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10160979942","product_id":100028001,"comment_content":"2019.10.14 打卡：选择序列化四个原则：编解码效率、所占空间、安全、是否支持多语言","like_count":2},{"had_liked":false,"id":101873,"user_name":"晓杰","can_delete":false,"product_type":"c1","uid":1441546,"ip_address":"","ucode":"1174C88EEBF8A6","user_header":"https://static001.geekbang.org/account/avatar/00/15/ff/0a/12faa44e.jpg","comment_is_top":false,"comment_ctime":1560006175,"is_pvip":false,"replies":[{"id":"36867","content":"正确","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1560172352,"ip_address":"","comment_id":101873,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5854973471","product_id":100028001,"comment_content":"不是单例，因为在反序列化的时候，会调用ObjectInputStream的readObject方法，该方法可以对实现序列化接口的类进行实例化，所以会破坏单例模式。<br>可以通过重写readResolve，返回单例对象的方式来避免这个问题","like_count":1,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453151,"discussion_content":"正确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560172352,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1613649,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/MCmfY4PQ9hp3iaQTlMdpUmR9rentlpatZRVkXHH7DK1uwK37JkwbYlf2Sh6obQmLepjUdTVicVg63u92QJe6WpGQ/132","nickname":"wy_2019","note":"","ucode":"6A8B40D273B94B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":98517,"discussion_content":"怎么证明单例反序列化🐶不是同一个对象？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577168846,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101778,"user_name":"张学磊","can_delete":false,"product_type":"c1","uid":1250029,"ip_address":"","ucode":"F545F384A6F1E1","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eotSSnZic41tGkbflx0ogIg3ia6g2muFY1hCgosL2t3icZm7I8Ax1hcv1jNgr6vrZ53dpBuGhaoc6DKg/132","comment_is_top":false,"comment_ctime":1559968577,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5854935873","product_id":100028001,"comment_content":"上面说默认序列化方式不会序列化对象的 transient 的实例变量，也不会序列化静态变量，那这个单例的变量是静态的，是不是可以理解序列化成了一个空对象？","like_count":1},{"had_liked":false,"id":347409,"user_name":"懵逼猴","can_delete":false,"product_type":"c1","uid":1204947,"ip_address":"","ucode":"BDC748A96AC316","user_header":"https://static001.geekbang.org/account/avatar/00/12/62/d3/663de972.jpg","comment_is_top":false,"comment_ctime":1653999017,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653999017","product_id":100028001,"comment_content":"java.io.ObjectInputStream#readObject()反序列化不会调用构造函数","like_count":0},{"had_liked":false,"id":347302,"user_name":"清风@知酒烈","can_delete":false,"product_type":"c1","uid":2767214,"ip_address":"","ucode":"393B359CBE417D","user_header":"https://static001.geekbang.org/account/avatar/00/2a/39/6e/0ea71f8a.jpg","comment_is_top":false,"comment_ctime":1653911741,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1653911741","product_id":100028001,"comment_content":"老师，我们项目也是使用dubbo，但是实体类都需要实现java的Serializable接口，不实现就会报错。不是说dubbo默认不使用java的序列化吗，为什么还是要实现Serializable呢？","like_count":0,"discussions":[{"author":{"id":2699218,"avatar":"","nickname":"Geek_279849","note":"","ucode":"FC6A3514FC955C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584163,"discussion_content":"只是java用来标识序列化的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660650191,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345907,"user_name":"keep_it_real","can_delete":false,"product_type":"c1","uid":2055554,"ip_address":"","ucode":"F5057CAF752FF3","user_header":"https://static001.geekbang.org/account/avatar/00/1f/5d/82/81b2ba91.jpg","comment_is_top":false,"comment_ctime":1652690875,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652690875","product_id":100028001,"comment_content":"Protobuf序列化的时候需要生成相对于的java文件，感觉里面多了好多没用的东西。不知道是不是我没用对。","like_count":0},{"had_liked":false,"id":309667,"user_name":"NOFX","can_delete":false,"product_type":"c1","uid":2001382,"ip_address":"","ucode":"5BD2DE30DCE277","user_header":"https://static001.geekbang.org/account/avatar/00/1e/89/e6/cf1ea14c.jpg","comment_is_top":false,"comment_ctime":1630295143,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1630295143","product_id":100028001,"comment_content":"Json、Protocol 反序列化是不是也会存在破坏单例的行为呢？","like_count":0},{"had_liked":false,"id":288429,"user_name":"Jecy-8","can_delete":false,"product_type":"c1","uid":1016276,"ip_address":"","ucode":"2AE1575B9E63A6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/81/d4/e92abeb4.jpg","comment_is_top":false,"comment_ctime":1618466638,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618466638","product_id":100028001,"comment_content":"文中的图，readResolve()方法应该是在反序列化（图中是序列化）之后的操作方法吧，不知道我理解对不对","like_count":0},{"had_liked":false,"id":284563,"user_name":"Eros","can_delete":false,"product_type":"c1","uid":1659054,"ip_address":"","ucode":"7E7D7B00E3139A","user_header":"https://static001.geekbang.org/account/avatar/00/19/50/ae/4970425c.jpg","comment_is_top":false,"comment_ctime":1616339562,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616339562","product_id":100028001,"comment_content":"序列化会通过反射调用无参构造器返回一个新对象，破坏单例模式。<br>解决方法是在被序列化类中重写readResolve方法。","like_count":0},{"had_liked":false,"id":247866,"user_name":"Geek_ad8fb9","can_delete":false,"product_type":"c1","uid":2002881,"ip_address":"","ucode":"64EF69412F6445","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELvqowyjk03bEDYiaXcly9fic79mLxFb1IRAbatOrsyeibOgI7ux7JhDXty69iav7S9x9JRN2esfEzf4Q/132","comment_is_top":false,"comment_ctime":1599897495,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599897495","product_id":100028001,"comment_content":"我觉得反序列化的时候并不是通过反射调用私有构造函数，通过在idea中测试，发现确实也没有调用私有构造函数。<br>JVM中有一个后门允许在不调用任何构造函数的情况下创建对象。首先将新对象的字段初始化为其默认值(false，0，null等)，然后对象反序列化代码使用对象流中的值填充字段。<br>readResolve()可以跳过这个后门，自定义返回对象。","like_count":0},{"had_liked":false,"id":226740,"user_name":"耿嘉艺","can_delete":false,"product_type":"c1","uid":2023401,"ip_address":"","ucode":"727A22BD41E8AF","user_header":"","comment_is_top":false,"comment_ctime":1592192729,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592192729","product_id":100028001,"comment_content":"思考题中除了重写readResolve方法，是不是重写readObject方法也可以？还有可不可以讲一下在反序列化代码中，哪里显示了通过反射调用了无参构造方法，最好能给下该代码在源码中的位置，谢谢","like_count":0},{"had_liked":false,"id":199286,"user_name":"10年以后","can_delete":false,"product_type":"c1","uid":1297421,"ip_address":"","ucode":"FE58CA7E5C2AF9","user_header":"https://static001.geekbang.org/account/avatar/00/13/cc/0d/89435926.jpg","comment_is_top":false,"comment_ctime":1585485800,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585485800","product_id":100028001,"comment_content":"序列化","like_count":0},{"had_liked":false,"id":178487,"user_name":"尔冬橙","can_delete":false,"product_type":"c1","uid":1225224,"ip_address":"","ucode":"0B013A49BC18DA","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","comment_is_top":false,"comment_ctime":1581701752,"is_pvip":false,"replies":[{"id":"70520","content":"我也没有看懂这句话，请问在哪里看到的？","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1582721919,"ip_address":"","comment_id":178487,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1581701752","product_id":100028001,"comment_content":"序列化对象中加载反序列化的类怎么理解？","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483844,"discussion_content":"我也没有看懂这句话，请问在哪里看到的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582721919,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165943,"user_name":"王圣军","can_delete":false,"product_type":"c1","uid":1395602,"ip_address":"","ucode":"1E13CF683137D1","user_header":"https://static001.geekbang.org/account/avatar/00/15/4b/92/03338a22.jpg","comment_is_top":false,"comment_ctime":1577347617,"is_pvip":false,"replies":[{"id":"65040","content":"这也是一个序列化过程，只不过是字符串对象转二进制的过程","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1577871947,"ip_address":"","comment_id":165943,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1577347617","product_id":100028001,"comment_content":"我们有时基于网络通讯的传输，有的不是直接使用实例序列化后传输，很多就是字符串转换为二进制流进行传输，这个应该是不涉及到序列化和反序列化的吧？","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479322,"discussion_content":"这也是一个序列化过程，只不过是字符串对象转二进制的过程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577871947,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159118,"user_name":"td901105","can_delete":false,"product_type":"c1","uid":1348830,"ip_address":"","ucode":"32D42A4F36FA02","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/SM4fwn9uFicXU8cQ1rNF2LQdKNbZI1FX1jmdwaE2MTrBawbugj4TQKjMKWG0sGbmqQickyARXZFS8NZtobvoWTHA/132","comment_is_top":false,"comment_ctime":1575540211,"is_pvip":false,"replies":[{"id":"61470","content":"需要的","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1576153033,"ip_address":"","comment_id":159118,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1575540211","product_id":100028001,"comment_content":"老师我想问一下如果使用非Java的序列化方式的话需要实现Serializable接口吗？","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476956,"discussion_content":"需要的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576153033,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1190150,"avatar":"https://static001.geekbang.org/account/avatar/00/12/29/06/0b327738.jpg","nickname":"Gankki","note":"","ucode":"399C6F74286590","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":267589,"discussion_content":"不需要，只是一种写代码的规范。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589645123,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1620973,"avatar":"https://static001.geekbang.org/account/avatar/00/18/bb/ed/8a2f349e.jpg","nickname":"狐狸🦊","note":"","ucode":"58141A02CBEDE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":170010,"discussion_content":"不需要","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581662799,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133248,"user_name":"尔冬橙","can_delete":false,"product_type":"c1","uid":1225224,"ip_address":"","ucode":"0B013A49BC18DA","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","comment_is_top":false,"comment_ctime":1568463606,"is_pvip":false,"replies":[{"id":"51099","content":"NIO是一种通信模型，并没有包含序列化的内容，可以自己选择使用哪一种序列化","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1568531817,"ip_address":"","comment_id":133248,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1568463606","product_id":100028001,"comment_content":"那么java的NIO用到了java的序列化和反序列化么？有一样的问题么","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467317,"discussion_content":"NIO是一种通信模型，并没有包含序列化的内容，可以自己选择使用哪一种序列化","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568531817,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133245,"user_name":"尔冬橙","can_delete":false,"product_type":"c1","uid":1225224,"ip_address":"","ucode":"0B013A49BC18DA","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","comment_is_top":false,"comment_ctime":1568462238,"is_pvip":false,"replies":[{"id":"51100","content":"是的，不序列化与反序列化，则无法在内存中获取具体的信息用于业务逻辑中。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1568531874,"ip_address":"","comment_id":133245,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1568462238","product_id":100028001,"comment_content":" 老师，所有在网络中传输信息都是要序列化么","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467316,"discussion_content":"是的，不序列化与反序列化，则无法在内存中获取具体的信息用于业务逻辑中。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568531874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117446,"user_name":"Jerry","can_delete":false,"product_type":"c1","uid":1088756,"ip_address":"","ucode":"4213083D076AB8","user_header":"https://static001.geekbang.org/account/avatar/00/10/9c/f4/7e14ff8a.jpg","comment_is_top":false,"comment_ctime":1564048397,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564048397","product_id":100028001,"comment_content":"老师，我试着写了一下这个问题的代码，但是发现Singleton 序列化和反序列化后会产生两个instance, 这个问题怎么解？以下是我的代码，<br>&#39;&#39;&#39;<br>...<br>public static void serializeMe() {<br>        try {<br>            ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(&quot;SingletonData.txt&quot;));<br>            oos.writeObject(Singleton.getInstance());<br>        } catch (IOException e) {<br>            e.printStackTrace();<br>        }<br>    }<br><br>    public static Object deSerializeMe() {<br>        Object obj = null;<br>        try {<br>            ObjectInputStream ois = new ObjectInputStream(new FileInputStream(&quot;SingletonData.txt&quot;));<br>            obj = ois.readObject();<br>        }  catch (IOException | ClassNotFoundException e) {<br>            e.printStackTrace();<br>        }<br>        return obj;<br>    }<br><br>    private static class Singleton implements Serializable {<br>        int i;<br>        private static Singleton instance = null;<br>        private Singleton() {<br>            System.out.println(&quot;Executing constructor&quot;);<br>            i = 1;<br>        }<br><br>        &#47;&#47; key change here !!!<br>        private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {<br>            System.out.println(&quot;readObject before [i=&quot; + i + &quot;]&quot;);<br>            ois.defaultReadObject();<br>            instance = this; &#47;&#47; After de-serialization, two objects of &#39;Singleton&#39; class are created.<br>            System.out.println(&quot;readObject after [i=&quot; + i + &quot;]&quot;);<br>        }<br><br>        &#47;&#47; thread unsafe here, don&#39;t care<br>        public static Singleton getInstance() {<br>            if (instance == null) {<br>                instance = new Singleton();<br>            }<br>            System.out.println(&quot;An instance is returned&quot;);<br>            return instance;<br>        }<br><br>        &#47;&#47; readResolve() is usually called after readObject()<br>        public Object readResolve() {<br>            System.out.println(&quot;Executing readResolve&quot;);<br>            return instance;<br>        }<br><br>        @Override<br>        public String toString() {<br>            return &quot;Singleton [i=&quot; + i + &quot;]&quot;;<br>        }<br>    }<br>&#39;&#39;&#39;","like_count":0},{"had_liked":false,"id":115340,"user_name":"辉","can_delete":false,"product_type":"c1","uid":1514658,"ip_address":"","ucode":"39D6CDEF00083A","user_header":"https://static001.geekbang.org/account/avatar/00/17/1c/a2/2c3572de.jpg","comment_is_top":false,"comment_ctime":1563537538,"is_pvip":false,"replies":[{"id":"42360","content":"hessian是用的hessian2序列化。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1563760798,"ip_address":"","comment_id":115340,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563537538","product_id":100028001,"comment_content":"hession是通过什么做序列化的？","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459061,"discussion_content":"hessian是用的hessian2序列化。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563760798,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":105131,"user_name":"17702158422","can_delete":false,"product_type":"c1","uid":1230682,"ip_address":"","ucode":"226342D3CB73BA","user_header":"","comment_is_top":false,"comment_ctime":1560925909,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560925909","product_id":100028001,"comment_content":"可以定义一个静态属性 boolean flag = false, 在构造函数里 判断 flag是否为ture, 如果为true则抛出异常，否则将flag赋值为 true ，则可以在运行期防止反序列化时通过反射破坏单例模式","like_count":0},{"had_liked":false,"id":102379,"user_name":"undifined","can_delete":false,"product_type":"c1","uid":1068920,"ip_address":"","ucode":"449CB4CD2DC089","user_header":"https://static001.geekbang.org/account/avatar/00/10/4f/78/c3d8ecb0.jpg","comment_is_top":false,"comment_ctime":1560214469,"is_pvip":false,"replies":[{"id":"37159","content":"请问改成JDK序列化的目的是什么？","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1560302775,"ip_address":"","comment_id":102379,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1560214469","product_id":100028001,"comment_content":"老师 我们有一个需求，需要将一些更新前的数据保存起来用于回滚，保存的对象有一个 value 属性是 Object 类型的，赋值 BigDecimal 后使用 FastJson 序列化保存到数据库，回滚的时候再反序列化变成了Integer，考虑将 FastJson 改成 JDK 的序列化，但是又担心会造成性能问题，请问老师有什么建议吗","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453386,"discussion_content":"请问改成JDK序列化的目的是什么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560302775,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102307,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1560185069,"is_pvip":false,"replies":[{"id":"37169","content":"是的，你理解没有错。ObjectInputStream对应readObject，ObjectOutputStream对应writeObject。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1560307161,"ip_address":"","comment_id":102307,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1560185069","product_id":100028001,"comment_content":"图一中，输入流ObjectInputStream应该是反序列吧，输出流ObjectOutputStream应该是序列化吧，老师我理解错了？","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453352,"discussion_content":"是的，你理解没有错。ObjectInputStream对应readObject，ObjectOutputStream对应writeObject。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560307161,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101901,"user_name":"Liam","can_delete":false,"product_type":"c1","uid":1094597,"ip_address":"","ucode":"1D15D3B64F2606","user_header":"https://static001.geekbang.org/account/avatar/00/10/b3/c5/7fc124e2.jpg","comment_is_top":false,"comment_ctime":1560044767,"is_pvip":false,"replies":[{"id":"36868","content":"这里不是序列化调用hashcode方法，而是序列化时，运行这段代码。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1560172449,"ip_address":"","comment_id":101901,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1560044767","product_id":100028001,"comment_content":"在java序列号安全性那里有个疑问，为什么反序列化会导致hashCode方法的频繁调用呢，反序列化时调用hashCode的作用是","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453164,"discussion_content":"这里不是序列化调用hashcode方法，而是序列化时，运行这段代码。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560172449,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101768,"user_name":"colin","can_delete":false,"product_type":"c1","uid":1292206,"ip_address":"","ucode":"7A8849B8AE33E0","user_header":"https://static001.geekbang.org/account/avatar/00/13/b7/ae/a25fcb73.jpg","comment_is_top":false,"comment_ctime":1559965677,"is_pvip":false,"replies":[{"id":"36866","content":"这个形容非常到位","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1560172321,"ip_address":"","comment_id":101768,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559965677","product_id":100028001,"comment_content":"Protobuf的格式感觉喝字节码有点类似","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453109,"discussion_content":"这个形容非常到位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560172321,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}