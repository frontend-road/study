{"id":611267,"title":"11｜布局组件：如何实现自研组件库的布局方案？","content":"<p>你好，我是杨文坚。</p><p>在做前端页面开发的过程中，无论你用的是Vue.js、React.js 还是小程序，都是通过一个个组件的排列、嵌套或者动态渲染等方式的组合，实现一个前端页面的渲染和功能效果。</p><p>既然页面都是由一个个组件用各种方式组合而成的，你有没有想过，这个组合形式有没有什么规范和讲究？能不能形成通用组件来重复使用呢？</p><p>其实，在企业里用Vue.js或者React.js来开发页面，对组件布置组合形式是有规范、有讲究的。一般这类“规范”或者“讲究”被称为“页面布局”，能提供布局能力的组件，也就称为“布局组件”。</p><p>目前主流的Vue.js或者React.js的开源组件库里，都会提供一些基础的布局组件，利用这些布局组件，我们可以拼接出页面的大致“骨架”，然后在布局“骨架”里“填充”所需要的功能组件，从而组合成业务需要实现的页面。</p><p>这么说估计有点不好理解，我们代入一个工作中常见的开发场景，来看看布局组件到底有什么用，如何实现自己的布局组件。</p><h2>布局组件</h2><p>假设你开发了一个电商首页，从上到下是轮播图片区块、商品类目区块、促销商品区块和热销商品区块。你完成代码后，交接给另外一个前端同事维护，他接到需求，要在轮播图片和类目模块左右两侧各加一个广告位区块。这位前端同事完成需求后，再转交给你维护，你再接到需求，在轮播图顶部再加一个广告位区块……</p><!-- [[[read_end]]] --><p>就这样，不停地更换开发者或者几个前端开发者一起维护，不停“拆掉”页面“模块”，在指定“插入”新增广告位区块，“打乱”原有各个模块的排布。</p><p>再加上，每个前端开发者的对布局的代码实现“习惯”不一样，这个经过多次转手维护的页面布局代码，变得十分混乱，甚至再有加“广告位”的需求，新人开发已经难以下手了。</p><p>这种情况，如果给你一次重新实现的机会，你会怎么做？</p><p>重新开发这个页面，最好的方式就是<strong>一开始“约定好布局规范”，根据规范，用组件方式“搭建好布局骨架”，开发时就在“布局骨架”里填充需要的功能代码</strong>。</p><p>如果遇到业务需求，要变更布局，例如在页面某个位置插入一个广告位布局，就先根据“布局规范”来调整“布局骨架”，也就是调整布局组件，而布局组件里的功能组件不做变动。布局组件排布调整完后，在新加入的布局组件里填充新需求功能的组件，例如广告组件。</p><p>这样，以后需求要在页面“添加广告位”，改变布局组件的排布，就可以调整页面布局，不需要担心布局混乱和频繁修改原有功能组件的代码。</p><p>这个例子可以看出布局组件的几点重要性：</p><ul>\n<li>统一前端页面布局的开发规范；</li>\n<li>降低设计师、业务方和前端开发者在对接页面布局变更的沟通成本；</li>\n<li>降低前端页面修改布局的开发成本；</li>\n<li>降低前端页面合作开发的理解成本。</li>\n</ul><p>总结一句话就是，<strong>布局组件可以用“规范”来“降低成本”</strong>。那么，我们应该如何实现 Vue.js 3.x自研组件库里的布局组件呢？</p><p>在讲解实现之前，我们先老规矩分析一下需要准备什么。</p><h2>实现布局组件需要准备什么？</h2><p>在实现布局组件前，我们首先要做的当然是<strong>布局的规范设计</strong>。布局的规范设计就跟“一千个读者就有一千个哈姆雷特”一样，在开发过程中，不同前端开发甚至是网页设计师都有不同见解。</p><p>这里，基于Ant Design和Element Plus这两个主流的开源组件库，我总结出布局规范设计的三个准备点：</p><ul>\n<li>栅格化系统的设计；</li>\n<li>不同布局组件的语义化定义；</li>\n<li>根据栅格组件和语义布局组件，组合实现各种页面布局。</li>\n</ul><p>第一个准备点“<strong>栅格化系统设计</strong>”。</p><p>听起来是不是有点“高大上”的味道，其实理解起来非常简单。通俗点说，“栅格化”就是将一个平面进行划分成行（Row）和列（Column）来管理布局，每一行分成一个个等分的格子，一个个格子排列起来就是“栅格化”，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/ac/f8/ac609a18df1fb525a2f12bb8d293a8f8.png?wh=1920x936\" alt=\"图片\"></p><p>前端领域，“栅格化系统设计”，就是将页面在横向视角分成一行行（Row），在每一行里划分成指定数量的纵向等分格子列（Column），每一个格子就是后续定义布局大小的一个“单位”。</p><p>总之，将页面等分成格子，并且将格子作为布局单位，就是“栅格化系统”。同时，栅格化组件也是一种布局组件，只不过是一种没有语义的基础布局组件，用来规范布局基本尺寸或位置。</p><p>第二个点，就是“<strong>不同布局组件语义化定义</strong>”。</p><p>这里的不同布局组件，就是布局中的一些有语义场景的组件，例如头部组件（Header）、内容组件（Content）和底部组件（Footer）等有一定布局含义的组件，就是语义化的布局组件。</p><p>不同企业或者不同业务场景，可能需要定制不同语义的布局组件。我刚刚举例的只是一些常见的布局组件，日常开发中还需要一些特定场景的布局组件，例如一些“悬浮球”的固定悬浮的布局组件。</p><p>第三个点，<strong>根据栅格化系统来再结合不同语义的布局组件，就可以实现各种业务中所需要的页面布局格式。</strong>例如，开发一个卡片布局组件，要划分卡片的“面积划分”，就可以使用栅格化组件进行二次封装开发。</p><p>说了这么多规范，那么我们如何在Vue.js 3.x的技术体系内实现上述规范下的布局组件呢？我就从最基础的布局组件——栅格组件讲起。</p><h2>如何实现栅格组件？</h2><p>上面提到过，栅格化系统设计，就是将页面等分成一个个格子，每个格子作为布局单位。那么栅格组件就是用来<strong>实现和定义页面中某个区块布局尺寸等于“多少个格子”</strong>。</p><p>目前页面的栅格化系统设计，将页面分成12等分或者24等分。分得越多，布局尺寸的处理就可以越精细。所以我选择24等分的栅格设计方式，也就是将页面栅格化成“24个格子”。</p><p><img src=\"https://static001.geekbang.org/resource/image/13/8e/135ea7c150034fd12fd6fe4e195e3b8e.png?wh=1920x290\" alt=\"图片\"></p><p>现在来实现栅格组件。首先，我们需要实现一个栅格的行组件（Row），用来作为列组件（Column）的外部容器，具体实现方式如下所示：</p><p>Vue代码：</p><pre><code class=\"language-xml\">&lt;template&gt;\n  &lt;div :class=\"{ [className]: true }\"&gt;\n    &lt;slot v-if=\"$slots.default\"&gt;&lt;/slot&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n&lt;script lang=\"ts\" setup&gt;\nimport { prefixName } from '../theme';\nconst className = `${prefixName}-row`;\n&lt;/script&gt;\n</code></pre><p>Less代码：</p><pre><code class=\"language-less\">@import '../../theme/variable.less';\n\n.@{prefix-name}-row {\n  display: flex;\n  flex-flow: row wrap;\n  min-width: 0;\n}\n</code></pre><p>接下来就是实现Row组件里的列组件Col（Column的缩写）。</p><p>还记得我所说过的24等分吗？这个24等分不是体现在组件的HTML代码上，而是体现在CSS代码里。设计Col组件的Props，传入span参数来控制等分尺寸，例如，传入1就使用外围容器1/24等分宽度的className，传入6就使用6/24等分宽度的className。</p><p>需要实现以下代码，Vue代码：</p><pre><code class=\"language-xml\">&lt;template&gt;\n  &lt;div :class=\"{ [baseClassName]: true, [spanClassName]: true }\"&gt;\n    &lt;slot v-if=\"$slots.default\"&gt;&lt;/slot&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n&lt;script lang=\"ts\" setup&gt;\nimport { prefixName } from '../theme';\nconst props = defineProps({\n  span: Number\n});\n\nfunction getSpan(propSpan: number | undefined): number {\n  if (typeof propSpan === 'number') {\n    const span: number = Math.ceil(Number(propSpan));\n    if (span &gt;= 1 &amp;&amp; span &lt;= 24) {\n      return span;\n    }\n  }\n  return 1;\n}\n\nconst baseClassName = `${prefixName}-col`;\nconst spanClassName = `${prefixName}-col-${getSpan(props.span)}`;\n&lt;/script&gt;\n</code></pre><p>上述Vue代码里，基于Props传入的span参数选择对应栅格CSS的className，不同className对应的不同栅格化尺寸的CSS代码的实现，如下Less代码所示：</p><p>Less代码：</p><pre><code class=\"language-less\">@import '../../theme/variable.less';\n\n.generate-col(@num) {\n  &amp;.@{prefix-name}-col-@{num} {\n    width: percentage((1 / 24 * @num));\n    flex: 0 0 percentage((1 / 24 * @num));\n  }\n}\n\n.generate-col-list(@count) when (@count &gt; 0) {\n  .generate-col-list((@count - 1));\n  .generate-col(@count);\n}\n\n.@{prefix-name}-col {\n  position: relative;\n  display: block;\n  box-sizing: border-box;\n  .generate-col-list(24);\n}\n</code></pre><p>上述代码是用Less里的函数语法，批量循环实现24栅格化的CSS样式。</p><p>最后就是使用上述两个组件（Row和Col）来使用组合Vue.js 3.x 下的栅格化系统，代码如下：</p><pre><code class=\"language-xml\">&lt;template&gt;\n    &lt;Row&gt;\n      &lt;Col class=\"gird\" :span=\"24\"&gt;col-24&lt;/Col&gt;\n    &lt;/Row&gt;\n    &lt;Row&gt;\n      &lt;Col class=\"gird :span=\"12\"&gt;col-12&lt;/Col&gt;\n      &lt;Col class=\"gird gird-dark\" :span=\"12\"&gt;col-12&lt;/Col&gt;\n    &lt;/Row&gt;\n    &lt;Row&gt;\n      &lt;Col class=\"gird\" :span=\"8\"&gt;col-8&lt;/Col&gt;\n      &lt;Col class=\"gird gird-dark\" :span=\"8\"&gt;col-8&lt;/Col&gt;\n      &lt;Col class=\"gird\" :span=\"8\"&gt;col-8&lt;/Col&gt;\n    &lt;/Row&gt;\n    &lt;Row&gt;\n      &lt;Col class=\"gird\" :span=\"6\"&gt;col-6&lt;/Col&gt;\n      &lt;Col class=\"gird gird-dark\" :span=\"6\"&gt;col-6&lt;/Col&gt;\n      &lt;Col class=\"gird\" :span=\"6\"&gt;col-6&lt;/Col&gt;\n      &lt;Col class=\"gird gird-dark\" :span=\"6\"&gt;col-6&lt;/Col&gt;\n    &lt;/Row&gt;\n    &lt;Row&gt;\n      &lt;Col class=\"gird\" :span=\"4\"&gt;col-4&lt;/Col&gt;\n      &lt;Col class=\"gird gird-dark\" :span=\"4\"&gt;col-4&lt;/Col&gt;\n      &lt;Col class=\"gird\" :span=\"4\"&gt;col-4&lt;/Col&gt;\n      &lt;Col class=\"gird gird-dark\" :span=\"4\"&gt;col-4&lt;/Col&gt;\n      &lt;Col class=\"gird\" :span=\"4\"&gt;col-4&lt;/Col&gt;\n      &lt;Col class=\"gird gird-dark\" :span=\"4\"&gt;col-4&lt;/Col&gt;\n    &lt;/Row&gt;\n    &lt;Row&gt;\n      &lt;Col class=\"gird\" :span=\"3\"&gt;col-3&lt;/Col&gt;\n      &lt;Col class=\"gird gird-dark\" :span=\"3\"&gt;col-3&lt;/Col&gt;\n      &lt;Col class=\"gird\" :span=\"3\"&gt;col-3&lt;/Col&gt;\n      &lt;Col class=\"gird gird-dark\" :span=\"3\"&gt;col-3&lt;/Col&gt;\n      &lt;Col class=\"gird\" :span=\"3\"&gt;col-3&lt;/Col&gt;\n      &lt;Col class=\"gird gird-dark\" :span=\"3\"&gt;col-3&lt;/Col&gt;\n      &lt;Col class=\"gird\" :span=\"3\"&gt;col-3&lt;/Col&gt;\n      &lt;Col class=\"gird gird-dark\" :span=\"3\"&gt;col-3&lt;/Col&gt;\n    &lt;/Row&gt;\n    &lt;Row&gt;\n      &lt;Col class=\"gird\" :span=\"2\"&gt;col-2&lt;/Col&gt;\n      &lt;Col class=\"gird gird-dark\" :span=\"2\"&gt;col-2&lt;/Col&gt;\n      &lt;Col class=\"gird\" :span=\"2\"&gt;col-2&lt;/Col&gt;\n      &lt;Col class=\"gird gird-dark\" :span=\"2\"&gt;col-2&lt;/Col&gt;\n      &lt;Col class=\"gird\" :span=\"2\"&gt;col-2&lt;/Col&gt;\n      &lt;Col class=\"gird gird-dark\" :span=\"2\"&gt;col-2&lt;/Col&gt;\n      &lt;Col class=\"gird\" :span=\"2\"&gt;col-2&lt;/Col&gt;\n      &lt;Col class=\"gird gird-dark\" :span=\"2\"&gt;col-2&lt;/Col&gt;\n      &lt;Col class=\"gird\" :span=\"2\"&gt;col-2&lt;/Col&gt;\n      &lt;Col class=\"gird gird-dark\" :span=\"2\"&gt;col-2&lt;/Col&gt;\n      &lt;Col class=\"gird\" :span=\"2\"&gt;col-2&lt;/Col&gt;\n      &lt;Col class=\"gird gird-dark\" :span=\"2\"&gt;col-2&lt;/Col&gt;\n    &lt;/Row&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=\"ts\"&gt;\nimport { Col, Row } from '../src';\n&lt;/script&gt;\n\n&lt;style lang=\"less\"&gt;\n.gird {\n  background: #0092ff6b;\n  border: 1px #0092ff6b solid;\n  margin-bottom: 10px;\n  height: 50px;\n  color: #035593;\n  font-size: 18px;\n  // font-weight: bolder;\n  text-align: center;\n  line-height: 50px;\n\n  &amp;.gird-dark {\n    background: #068aed;\n    border: 1px #068aed solid;\n    color: #ffffff;\n    margin-bottom: 10px;\n  }\n}\n&lt;/style&gt;\n\n</code></pre><p>最后实现效果如图：<br>\n<img src=\"https://static001.geekbang.org/resource/image/02/a6/026213bd7b5b82cfff064af91476d8a6.png?wh=1920x1031\" alt=\"图片\"></p><p>不过，不知道你有没有这样的疑问：为什么栅格组件按比例等分？而不是固定尺寸，例如固定20px等分呢？</p><p>这是因为<strong>组件库需要有通用性，如果限死栅格单元的固定“格子”尺寸，就不能适用大部分前端开发场景</strong>。这里按比例等分，可以基于“父容器”的固定尺寸，来控制子容器的栅格尺寸。也就是说，如果你想显示宽度为300px和100px两个子容器，就可以设置父容器Row宽度400px，两个子容器Col的栅格span参数配置为span=18和span=6。</p><p>现在我们就实现了最基础的布局组件，但仅仅靠这个，要实现具体页面布局还是不够的，我们还需要依赖具体有一定语义化的布局组件来组合实现。语义场景下的布局组件，最常见的就是PC页面语义化布局组件，</p><h2>如何实现PC端布局组件？</h2><p>首先需要哪些PC布局组件呢？常见的有5种：</p><ul>\n<li>页面容器组件——Layout；</li>\n<li>页面头部组件——Header；</li>\n<li>页面内容组件——Content；</li>\n<li>页面侧边组件——Sider；</li>\n<li>页面底部组件——Footer。</li>\n</ul><p>每个业务组件实现代码，跟前面栅格组件类似，根据不同语义结合CSS的Flex布局方式，实现对应的“格子”样式就好。有了基础布局组件栅格组件，我们实现其它布局组件会方便许多，跟“搭积木”一样，实现PC布局组件，就是基于栅格组件来“搭积木”。</p><p>其中Layout容器组件比较特殊，我们具体看下。</p><p>因为要考虑到有侧边组件时候，内部会从默认的纵向排列变成横向排列。这时候布局容器组件就需要有个侧边栏的控制参数hasSider来做判断处理，代码实现如下所示。</p><p>Vue代码：</p><pre><code class=\"language-xml\">&lt;template&gt;\n  &lt;section\n    :class=\"{\n      [className]: true,\n      [hasSiderClassName]: props.hasSider\n    }\"\n  &gt;\n    &lt;slot v-if=\"$slots.default\"&gt;&lt;/slot&gt;\n  &lt;/section&gt;\n&lt;/template&gt;\n&lt;script lang=\"ts\" setup&gt;\nimport { prefixName } from '../theme';\nconst props = defineProps&lt;{ hasSider?: boolean }&gt;();\nconst className = `${prefixName}-layout`;\nconst hasSiderClassName = `${className}-has-sider`;\n&lt;/script&gt;\n</code></pre><p>Less代码：</p><pre><code class=\"language-less\">@import '../../theme/variable.less';\n\n.@{prefix-name}-layout {\n  display: flex;\n  flex-direction: column;\n  flex: auto;\n  box-sizing: border-box;\n  min-height: 0;\n  margin: 0;\n  padding: 0;\n  \n  &amp;.@{prefix-name}-layout-has-sider  {\n    flex-direction: row;\n  }\n}\n</code></pre><p>剩下的Header、Content、Footer和Sider组件，实现代码都比Layout简单，去掉hasSider判断逻辑，保留Flex样式格式，再使用对应语义化HTML标签就可以使用，具体可以你看课后的完整代码案例。</p><p>实现所有语义化的布局组件后，我们就可以用PC布局组件来组合实现想要的布局，例如这个使用案例代码：</p><pre><code class=\"language-xml\">&lt;template&gt;\n  &lt;Layout class=\"example\"&gt;\n    &lt;Header class=\"example-header\"&gt;Header&lt;/Header&gt;\n    &lt;Content class=\"example-content\"&gt;Content&lt;/Content&gt;\n    &lt;Footer class=\"example-footer\"&gt;Footer&lt;/Footer&gt;\n  &lt;/Layout&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=\"ts\"&gt;\nimport { Layout, Header, Footer, Content } from '../src';\n&lt;/script&gt;\n\n&lt;style lang=\"less\"&gt;\n.example {\n  width: 100%;\n  height: 100%;\n  margin: 0 auto;\n  margin-top: 10px;\n  font-size: 24px;\n  color: #02290a;\n  text-align: center;\n}\n\n.example-header {\n  background: #00968880;\n  height: 40px;\n  justify-content: center;\n  align-items: center;\n}\n\n.example-content {\n  background: #007a6ec0;\n  height: 100px;\n  justify-content: center;\n  align-items: center;\n}\n\n.example-footer {\n  background: #00968880;\n  height: 40px;\n  justify-content: center;\n  align-items: center;\n}\n\n.example-sider {\n  background: #106d64d6;\n  width: 200px;\n  justify-content: center;\n  align-items: center;\n}\n&lt;/style&gt;\n\n</code></pre><p>上述代码在浏览器渲染效果如下图所示：<br>\n<img src=\"https://static001.geekbang.org/resource/image/d3/7e/d3dbb9140431a9610458c1cc93e7ef7e.png?wh=1672x966\" alt=\"图片\"></p><p>我们把布局可以调整一下，添加Sider组件，调整成下布局排序：</p><pre><code class=\"language-xml\">&lt;Layout class=\"example\" :hasSider=\"true\"&gt;\n  &lt;Sider class=\"example-sider\"&gt;Sider&lt;/Sider&gt;\n  &lt;Layout&gt;\n    &lt;Header class=\"example-header\"&gt;Header&lt;/Header&gt;\n    &lt;Content class=\"example-content\"&gt;Content&lt;/Content&gt;\n    &lt;Footer class=\"example-footer\"&gt;Footer&lt;/Footer&gt;\n  &lt;/Layout&gt;\n&lt;/Layout&gt;\n</code></pre><p>可以显示成这个布局效果，如下图所示：<br>\n<img src=\"https://static001.geekbang.org/resource/image/c9/ee/c9d039d75be3c08e6abayy568dbb8cee.png?wh=1672x966\" alt=\"图片\"></p><p>我们还可以再调整一下布局，换成双侧边栏形式，代码如下所示：</p><pre><code class=\"language-xml\">&lt;Layout class=\"example\" :hasSider=\"true\"&gt;\n  &lt;Sider class=\"example-sider\"&gt;Sider&lt;/Sider&gt;\n  &lt;Layout&gt;\n    &lt;Header class=\"example-header\"&gt;Header&lt;/Header&gt;\n    &lt;Content class=\"example-content\"&gt;Content&lt;/Content&gt;\n    &lt;Footer class=\"example-footer\"&gt;Footer&lt;/Footer&gt;\n  &lt;/Layout&gt;\n  &lt;Sider class=\"example-sider\"&gt;Sider&lt;/Sider&gt;\n&lt;/Layout&gt;\n</code></pre><p>最后的布局效果，如下图所示：<br>\n<img src=\"https://static001.geekbang.org/resource/image/19/e9/194a77bda00e56e374349785dc4f81e9.png?wh=1672x966\" alt=\"图片\"></p><p>我们再结合栅格组件一起使用，可以搭建更复杂的布局，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/9a/6c/9a215cb5698e348bd3e6de256b08e86c.png?wh=1920x1146\" alt=\"图片\"></p><p>通过PC布局组件和栅格组件，结合实现了页面布局后，你就可以在这个“布局骨架”中填充你需要的页面功能组件或代码了。</p><p>如果你想改变页面布局，直接调整布局组件排布就行。如果你在工作中需要用到其他PC布局类型，甚至是移动端页面的布局组件，可以按照今天的实现方式举一反三。</p><p>说到这里，不知道你有没有发现一个隐患，<strong>布局组件内填充的功能组件尺寸实现是不可控的，</strong>这也是我们自研组件库中最容易出现的一个问题。</p><p>比如，布局内部填充的功能组件，写死了固定尺寸，有一天你又要减少这个布局组件栅格，或者调整语义化布局组件的一些尺寸，那么里面的功能组件就会“撑出”这个布局组件，或者在布局组件里有大量“留白”。</p><p>当然这里只是一种可能的问题场景，实际开发中还有很多其他布局组件调整后与功能组件的尺寸发生冲突的问题，这个从组件技术实现角度上是无法限制的，所以目前只能在组件的使用角度来约定一些规范。</p><p>总结一下，在自研组件库的时候，我们需要围绕着内部填充的功能组件来做若干开发规范约定：</p><ul>\n<li>组件尽量不要写死尺寸，需要用弹性的尺寸样式，建议直接使用栅格组件；</li>\n<li>组件里的文字内容要考虑换行处理，特别是纯字母和数字的显示组件；</li>\n<li>组件里图片显示尽量在控制好边缘尺寸限制；</li>\n<li>组件里绝对定位注意固定位置的偏移是否受外界布局组件容器的影响。</li>\n</ul><h2>总结</h2><p>你已经掌握了Vue.js 3.x自研组件库的布局组件的规范设计、技术实现，最后我们做个总结。</p><p>布局组件的规范设计：</p><ul>\n<li>需要对页面的做栅格化系统设计；</li>\n<li>栅格化可以选择主流的12等分或24等分；</li>\n<li>基于栅格化设计，根据不同场景来设计不同语义的布局组件。</li>\n</ul><p>布局组件的技术实现流程：</p><ul>\n<li>基于栅格化系统设计来实现栅格组件，作为布局基础组件；</li>\n<li>再实现不同类型语言的布局组件并结合栅格组件搭配使用。</li>\n</ul><p>企业内的需求变化是不可预测的，所以你也无法预测会遇到什么布局需求，但是学会今天的布局组件的设计规范和技术实现，即使你遇到特殊布局场景，也可以根据PC端页面布局组件实现和多种布局组合搭配，举一反三，实现自己所需要的布局内容。</p><h2>思考题</h2><p>如何实现一套布局组件方式，同时兼容PC页面和移动端页面的布局？</p><p>期待看到你的思考，如果觉得今天的内容对你有帮助，也欢迎分享给身边的朋友一起学习。我们下节课见。</p><h3><a href=\"https://github.com/FE-star/vue3-course/tree/main/chapter/11\">完整的代码在这里</a></h3>","comments":[{"had_liked":false,"id":365568,"user_name":"烛火星光","can_delete":false,"product_type":"c1","uid":1480933,"ip_address":"江苏","ucode":"0CF72A5C4EDBCB","user_header":"https://static001.geekbang.org/account/avatar/00/16/98/e5/46c5235b.jpg","comment_is_top":false,"comment_ctime":1672790595,"is_pvip":false,"replies":[{"id":134974,"content":"您好，“vue3里面继续使用$slots”这个只是开发习惯或者开发规范，只要官方还只提供该能力，就可以继续使用的。","user_name":"作者回复","user_name_real":"编辑","uid":3217031,"ctime":1678612370,"ip_address":"浙江","comment_id":365568,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311101,"comment_content":"vue3里面继续使用$slots，是不是不太合适","like_count":1,"discussions":[{"author":{"id":3217031,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/TZnA0PlXExlp9byxOxCeOG6ia0ykwfpxqAq2vslTzL1z5ibTBsgf1nYx0bUXgrOTnSOnmdXQZZibYx9tRSPHFjibPQ/132","nickname":"文坚老师","note":"","ucode":"4E0C838B2A3725","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608691,"discussion_content":"您好，“vue3里面继续使用$slots”这个只是开发习惯或者开发规范，只要官方还只提供该能力，就可以继续使用的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678612371,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364631,"user_name":"癡癡的等你歸","can_delete":false,"product_type":"c1","uid":1334321,"ip_address":"浙江","ucode":"AF950FDE0C736C","user_header":"https://static001.geekbang.org/account/avatar/00/14/5c/31/d7b92b6b.jpg","comment_is_top":false,"comment_ctime":1671240488,"is_pvip":false,"replies":[{"id":134995,"content":"您好，栅格化兼容响应式，需要考虑就是栅格内容的尺寸，在“移动端”或者“窄屏幕”环境下是否要占满整个屏幕宽度。\n因为响应式布局更多是对屏幕“宽度”的兼容，所以在设计响应式的栅格组件，首先要考虑栅格内容的宽度兼容问题，提供一个动态控制是否占满宽度或者按需调整宽度的选项。","user_name":"作者回复","user_name_real":"编辑","uid":3217031,"ctime":1678624954,"ip_address":"浙江","comment_id":364631,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100311101,"comment_content":"老师，栅格化布局如何考虑响应式呢？\n我们在使用Antdv的过程中，发现如果一行24格，分别放了6个span为4的输入框，当界面足够大时没有问题，但是当界面宽度变小时，所有输入框都是缩起来，针对这种情况在设计组件时要怎么考虑呢？以及在使用组件时要怎么处理这个问题呢？","like_count":0,"discussions":[{"author":{"id":3217031,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/TZnA0PlXExlp9byxOxCeOG6ia0ykwfpxqAq2vslTzL1z5ibTBsgf1nYx0bUXgrOTnSOnmdXQZZibYx9tRSPHFjibPQ/132","nickname":"文坚老师","note":"","ucode":"4E0C838B2A3725","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608726,"discussion_content":"您好，栅格化兼容响应式，需要考虑就是栅格内容的尺寸，在“移动端”或者“窄屏幕”环境下是否要占满整个屏幕宽度。\n因为响应式布局更多是对屏幕“宽度”的兼容，所以在设计响应式的栅格组件，首先要考虑栅格内容的宽度兼容问题，提供一个动态控制是否占满宽度或者按需调整宽度的选项。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678624954,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1507277,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/rUqhSN2OVg5aHw10Hxib61nGv1SXxD6zowFl27oSm9Y6g8grRpTxCxwk7qg14a1TtmpzMTM2y810MnibBhwn75Mg/132","nickname":"初烬","note":"","ucode":"7ED4A301A7CC11","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597431,"discussion_content":"看到了回复一下，antd中出来了span参数外还有，xxxl，xxl，xs等参数 可以用来控制在相对应的区间中span所占的位置。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1671780641,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"陕西","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1334321,"avatar":"https://static001.geekbang.org/account/avatar/00/14/5c/31/d7b92b6b.jpg","nickname":"癡癡的等你歸","note":"","ucode":"AF950FDE0C736C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1507277,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/rUqhSN2OVg5aHw10Hxib61nGv1SXxD6zowFl27oSm9Y6g8grRpTxCxwk7qg14a1TtmpzMTM2y810MnibBhwn75Mg/132","nickname":"初烬","note":"","ucode":"7ED4A301A7CC11","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":598518,"discussion_content":"谢谢，我看看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1672887232,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":597431,"ip_address":"浙江","group_id":0},"score":598518,"extra":""}]}]},{"had_liked":false,"id":364953,"user_name":"初烬","can_delete":false,"product_type":"c1","uid":1507277,"ip_address":"陕西","ucode":"7ED4A301A7CC11","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/rUqhSN2OVg5aHw10Hxib61nGv1SXxD6zowFl27oSm9Y6g8grRpTxCxwk7qg14a1TtmpzMTM2y810MnibBhwn75Mg/132","comment_is_top":false,"comment_ctime":1671781335,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100311101,"comment_content":"思考题:参考antd组件库的方案，可以根据屏幕尺寸定义为 xs sm等参数，实现栅格化","like_count":1},{"had_liked":false,"id":394084,"user_name":"ifelse","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"浙江","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1725773191,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":3,"score":2,"product_id":100311101,"comment_content":"学习打卡","like_count":0}]}